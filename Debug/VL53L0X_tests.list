
VL53L0X_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800a00c  0800a00c  0001a00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a104  0800a104  00020334  2**0
                  CONTENTS
  4 .ARM          00000000  0800a104  0800a104  00020334  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a104  0800a104  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a108  0800a108  0001a108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800a10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000334  0800a440  00020334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  0800a440  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3a7  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028a3  00000000  00000000  0003c70b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0003efb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001338  00000000  00000000  000403f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d41f  00000000  00000000  00041728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001147a  00000000  00000000  0005eb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000acab0  00000000  00000000  0006ffc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ca71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a6c  00000000  00000000  0011caec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000334 	.word	0x20000334
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ff4 	.word	0x08009ff4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000338 	.word	0x20000338
 80001cc:	08009ff4 	.word	0x08009ff4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fe43 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f9e9 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 fb97 	bl	80009b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000282:	f000 fb65 	bl	8000950 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000286:	f000 fa35 	bl	80006f4 <MX_I2C1_Init>
  MX_TIM16_Init();
 800028a:	f000 fa71 	bl	8000770 <MX_TIM16_Init>
  MX_TIM17_Init();
 800028e:	f000 fae7 	bl	8000860 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */


  MessageLen = sprintf((char*)Message, "msalamon.pl VL53L0X Continuous mode\n\r");
 8000292:	4bc0      	ldr	r3, [pc, #768]	; (8000594 <main+0x324>)
 8000294:	4ac0      	ldr	r2, [pc, #768]	; (8000598 <main+0x328>)
 8000296:	4614      	mov	r4, r2
 8000298:	469c      	mov	ip, r3
 800029a:	f104 0e20 	add.w	lr, r4, #32
 800029e:	4665      	mov	r5, ip
 80002a0:	4626      	mov	r6, r4
 80002a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80002a4:	6028      	str	r0, [r5, #0]
 80002a6:	6069      	str	r1, [r5, #4]
 80002a8:	60aa      	str	r2, [r5, #8]
 80002aa:	60eb      	str	r3, [r5, #12]
 80002ac:	3410      	adds	r4, #16
 80002ae:	f10c 0c10 	add.w	ip, ip, #16
 80002b2:	4574      	cmp	r4, lr
 80002b4:	d1f3      	bne.n	800029e <main+0x2e>
 80002b6:	4663      	mov	r3, ip
 80002b8:	4622      	mov	r2, r4
 80002ba:	6810      	ldr	r0, [r2, #0]
 80002bc:	6018      	str	r0, [r3, #0]
 80002be:	8892      	ldrh	r2, [r2, #4]
 80002c0:	809a      	strh	r2, [r3, #4]
 80002c2:	2325      	movs	r3, #37	; 0x25
 80002c4:	b2da      	uxtb	r2, r3
 80002c6:	4bb5      	ldr	r3, [pc, #724]	; (800059c <main+0x32c>)
 80002c8:	701a      	strb	r2, [r3, #0]
   HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 80002ca:	4bb4      	ldr	r3, [pc, #720]	; (800059c <main+0x32c>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b29a      	uxth	r2, r3
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	49b0      	ldr	r1, [pc, #704]	; (8000594 <main+0x324>)
 80002d4:	48b2      	ldr	r0, [pc, #712]	; (80005a0 <main+0x330>)
 80002d6:	f003 fe95 	bl	8004004 <HAL_UART_Transmit>


   Dev->I2cHandle = &hi2c1;
 80002da:	4bb2      	ldr	r3, [pc, #712]	; (80005a4 <main+0x334>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4ab2      	ldr	r2, [pc, #712]	; (80005a8 <main+0x338>)
 80002e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
   Dev->I2cDevAddr = 0x52;
 80002e4:	4baf      	ldr	r3, [pc, #700]	; (80005a4 <main+0x334>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2252      	movs	r2, #82	; 0x52
 80002ea:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

   Dev_2->I2cHandle = &hi2c1;
 80002ee:	4baf      	ldr	r3, [pc, #700]	; (80005ac <main+0x33c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4aad      	ldr	r2, [pc, #692]	; (80005a8 <main+0x338>)
 80002f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
   Dev_2->I2cDevAddr = 0x52;
 80002f8:	4bac      	ldr	r3, [pc, #688]	; (80005ac <main+0x33c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2252      	movs	r2, #82	; 0x52
 80002fe:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
   HAL_GPIO_WritePin(TOF_XSHUT_0_GPIO_Port, TOF_XSHUT_0_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f001 f934 	bl	8001578 <HAL_GPIO_WritePin>
   HAL_Delay(20);
 8000310:	2014      	movs	r0, #20
 8000312:	f000 fe5b 	bl	8000fcc <HAL_Delay>
   HAL_GPIO_WritePin(TOF_XSHUT_1_GPIO_Port, TOF_XSHUT_1_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8000316:	2200      	movs	r2, #0
 8000318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f001 f92a 	bl	8001578 <HAL_GPIO_WritePin>
   HAL_Delay(20);
 8000324:	2014      	movs	r0, #20
 8000326:	f000 fe51 	bl	8000fcc <HAL_Delay>
   HAL_GPIO_WritePin(TOF_XSHUT_0_GPIO_Port, TOF_XSHUT_0_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000334:	f001 f920 	bl	8001578 <HAL_GPIO_WritePin>
   HAL_Delay(20);
 8000338:	2014      	movs	r0, #20
 800033a:	f000 fe47 	bl	8000fcc <HAL_Delay>
   // VL53L0X init for Single Measurement
   //



   	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800033e:	2006      	movs	r0, #6
 8000340:	f000 ff8d 	bl	800125e <HAL_NVIC_DisableIRQ>
 	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000344:	2028      	movs	r0, #40	; 0x28
 8000346:	f000 ff8a 	bl	800125e <HAL_NVIC_DisableIRQ>

 	VL53L0X_WaitDeviceBooted(Dev);
 800034a:	4b96      	ldr	r3, [pc, #600]	; (80005a4 <main+0x334>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4618      	mov	r0, r3
 8000350:	f004 fce4 	bl	8004d1c <VL53L0X_WaitDeviceBooted>
 	VL53L0X_DataInit( Dev );
 8000354:	4b93      	ldr	r3, [pc, #588]	; (80005a4 <main+0x334>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f004 f9f9 	bl	8004750 <VL53L0X_DataInit>

 	MessageLen = sprintf((char*)Message,"Addr change 1: %i \n\r\n\r", VL53L0X_SetDeviceAddress(Dev, 0x54));
 800035e:	4b91      	ldr	r3, [pc, #580]	; (80005a4 <main+0x334>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2154      	movs	r1, #84	; 0x54
 8000364:	4618      	mov	r0, r3
 8000366:	f004 f9db 	bl	8004720 <VL53L0X_SetDeviceAddress>
 800036a:	4603      	mov	r3, r0
 800036c:	461a      	mov	r2, r3
 800036e:	4990      	ldr	r1, [pc, #576]	; (80005b0 <main+0x340>)
 8000370:	4888      	ldr	r0, [pc, #544]	; (8000594 <main+0x324>)
 8000372:	f009 fa3b 	bl	80097ec <siprintf>
 8000376:	4603      	mov	r3, r0
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4b88      	ldr	r3, [pc, #544]	; (800059c <main+0x32c>)
 800037c:	701a      	strb	r2, [r3, #0]
   HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 800037e:	4b87      	ldr	r3, [pc, #540]	; (800059c <main+0x32c>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	b29a      	uxth	r2, r3
 8000384:	2364      	movs	r3, #100	; 0x64
 8000386:	4983      	ldr	r1, [pc, #524]	; (8000594 <main+0x324>)
 8000388:	4885      	ldr	r0, [pc, #532]	; (80005a0 <main+0x330>)
 800038a:	f003 fe3b 	bl	8004004 <HAL_UART_Transmit>
   Dev->I2cDevAddr = 0x54;
 800038e:	4b85      	ldr	r3, [pc, #532]	; (80005a4 <main+0x334>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2254      	movs	r2, #84	; 0x54
 8000394:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

   	VL53L0X_WaitDeviceBooted(Dev);
 8000398:	4b82      	ldr	r3, [pc, #520]	; (80005a4 <main+0x334>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f004 fcbd 	bl	8004d1c <VL53L0X_WaitDeviceBooted>
   	//VL53L0X_DataInit(Dev);
   	VL53L0X_StaticInit(Dev);
 80003a2:	4b80      	ldr	r3, [pc, #512]	; (80005a4 <main+0x334>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f004 fb36 	bl	8004a18 <VL53L0X_StaticInit>
   	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80003ac:	4b7d      	ldr	r3, [pc, #500]	; (80005a4 <main+0x334>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	1c7a      	adds	r2, r7, #1
 80003b2:	1cb9      	adds	r1, r7, #2
 80003b4:	4618      	mov	r0, r3
 80003b6:	f005 f9ed 	bl	8005794 <VL53L0X_PerformRefCalibration>
    VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80003ba:	4b7a      	ldr	r3, [pc, #488]	; (80005a4 <main+0x334>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	1cfa      	adds	r2, r7, #3
 80003c0:	1d39      	adds	r1, r7, #4
 80003c2:	4618      	mov	r0, r3
 80003c4:	f005 fe74 	bl	80060b0 <VL53L0X_PerformRefSpadManagement>
   	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80003c8:	4b76      	ldr	r3, [pc, #472]	; (80005a4 <main+0x334>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2101      	movs	r1, #1
 80003ce:	4618      	mov	r0, r3
 80003d0:	f004 fd42 	bl	8004e58 <VL53L0X_SetDeviceMode>

    VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80003d4:	4b73      	ldr	r3, [pc, #460]	; (80005a4 <main+0x334>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2201      	movs	r2, #1
 80003da:	2100      	movs	r1, #0
 80003dc:	4618      	mov	r0, r3
 80003de:	f004 ffd3 	bl	8005388 <VL53L0X_SetLimitCheckEnable>
   	 VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80003e2:	4b70      	ldr	r3, [pc, #448]	; (80005a4 <main+0x334>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2201      	movs	r2, #1
 80003e8:	2101      	movs	r1, #1
 80003ea:	4618      	mov	r0, r3
 80003ec:	f004 ffcc 	bl	8005388 <VL53L0X_SetLimitCheckEnable>
   	 VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80003f0:	4b6c      	ldr	r3, [pc, #432]	; (80005a4 <main+0x334>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f641 1299 	movw	r2, #6553	; 0x1999
 80003f8:	2101      	movs	r1, #1
 80003fa:	4618      	mov	r0, r3
 80003fc:	f005 f874 	bl	80054e8 <VL53L0X_SetLimitCheckValue>
   	 VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <main+0x334>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f005 f86c 	bl	80054e8 <VL53L0X_SetLimitCheckValue>
   	 VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000410:	4b64      	ldr	r3, [pc, #400]	; (80005a4 <main+0x334>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000418:	4618      	mov	r0, r3
 800041a:	f004 fd97 	bl	8004f4c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800041e:	4b61      	ldr	r3, [pc, #388]	; (80005a4 <main+0x334>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2212      	movs	r2, #18
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f004 fdb6 	bl	8004f98 <VL53L0X_SetVcselPulsePeriod>
   	 VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800042c:	4b5d      	ldr	r3, [pc, #372]	; (80005a4 <main+0x334>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	220e      	movs	r2, #14
 8000432:	2101      	movs	r1, #1
 8000434:	4618      	mov	r0, r3
 8000436:	f004 fdaf 	bl	8004f98 <VL53L0X_SetVcselPulsePeriod>

   	 VL53L0X_StartMeasurement(Dev);
 800043a:	4b5a      	ldr	r3, [pc, #360]	; (80005a4 <main+0x334>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4618      	mov	r0, r3
 8000440:	f005 fa24 	bl	800588c <VL53L0X_StartMeasurement>


   	 HAL_GPIO_WritePin(TOF_XSHUT_1_GPIO_Port, TOF_XSHUT_1_Pin, GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044e:	f001 f893 	bl	8001578 <HAL_GPIO_WritePin>
   	   HAL_Delay(20);
 8000452:	2014      	movs	r0, #20
 8000454:	f000 fdba 	bl	8000fcc <HAL_Delay>

   	VL53L0X_WaitDeviceBooted(Dev_2);
 8000458:	4b54      	ldr	r3, [pc, #336]	; (80005ac <main+0x33c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f004 fc5d 	bl	8004d1c <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit(Dev_2);
 8000462:	4b52      	ldr	r3, [pc, #328]	; (80005ac <main+0x33c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4618      	mov	r0, r3
 8000468:	f004 f972 	bl	8004750 <VL53L0X_DataInit>
   	MessageLen = sprintf((char*)Message,"Addr change 2: %i \n\r\n\r", VL53L0X_SetDeviceAddress(Dev_2, 0x56));
 800046c:	4b4f      	ldr	r3, [pc, #316]	; (80005ac <main+0x33c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2156      	movs	r1, #86	; 0x56
 8000472:	4618      	mov	r0, r3
 8000474:	f004 f954 	bl	8004720 <VL53L0X_SetDeviceAddress>
 8000478:	4603      	mov	r3, r0
 800047a:	461a      	mov	r2, r3
 800047c:	494d      	ldr	r1, [pc, #308]	; (80005b4 <main+0x344>)
 800047e:	4845      	ldr	r0, [pc, #276]	; (8000594 <main+0x324>)
 8000480:	f009 f9b4 	bl	80097ec <siprintf>
 8000484:	4603      	mov	r3, r0
 8000486:	b2da      	uxtb	r2, r3
 8000488:	4b44      	ldr	r3, [pc, #272]	; (800059c <main+0x32c>)
 800048a:	701a      	strb	r2, [r3, #0]
   	   HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 800048c:	4b43      	ldr	r3, [pc, #268]	; (800059c <main+0x32c>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	b29a      	uxth	r2, r3
 8000492:	2364      	movs	r3, #100	; 0x64
 8000494:	493f      	ldr	r1, [pc, #252]	; (8000594 <main+0x324>)
 8000496:	4842      	ldr	r0, [pc, #264]	; (80005a0 <main+0x330>)
 8000498:	f003 fdb4 	bl	8004004 <HAL_UART_Transmit>
   	   Dev_2->I2cDevAddr = 0x56;
 800049c:	4b43      	ldr	r3, [pc, #268]	; (80005ac <main+0x33c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2256      	movs	r2, #86	; 0x56
 80004a2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
    	VL53L0X_WaitDeviceBooted(Dev_2);
 80004a6:	4b41      	ldr	r3, [pc, #260]	; (80005ac <main+0x33c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f004 fc36 	bl	8004d1c <VL53L0X_WaitDeviceBooted>

   	   	VL53L0X_StaticInit(Dev_2);
 80004b0:	4b3e      	ldr	r3, [pc, #248]	; (80005ac <main+0x33c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f004 faaf 	bl	8004a18 <VL53L0X_StaticInit>
   	   	VL53L0X_PerformRefCalibration(Dev_2, &VhvSettings, &PhaseCal);
 80004ba:	4b3c      	ldr	r3, [pc, #240]	; (80005ac <main+0x33c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	1c7a      	adds	r2, r7, #1
 80004c0:	1cb9      	adds	r1, r7, #2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f005 f966 	bl	8005794 <VL53L0X_PerformRefCalibration>
   	    VL53L0X_PerformRefSpadManagement(Dev_2, &refSpadCount, &isApertureSpads);
 80004c8:	4b38      	ldr	r3, [pc, #224]	; (80005ac <main+0x33c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	1cfa      	adds	r2, r7, #3
 80004ce:	1d39      	adds	r1, r7, #4
 80004d0:	4618      	mov	r0, r3
 80004d2:	f005 fded 	bl	80060b0 <VL53L0X_PerformRefSpadManagement>
   	   	VL53L0X_SetDeviceMode(Dev_2, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80004d6:	4b35      	ldr	r3, [pc, #212]	; (80005ac <main+0x33c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2101      	movs	r1, #1
 80004dc:	4618      	mov	r0, r3
 80004de:	f004 fcbb 	bl	8004e58 <VL53L0X_SetDeviceMode>

   	    VL53L0X_SetLimitCheckEnable(Dev_2, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80004e2:	4b32      	ldr	r3, [pc, #200]	; (80005ac <main+0x33c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2201      	movs	r2, #1
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f004 ff4c 	bl	8005388 <VL53L0X_SetLimitCheckEnable>
   	   	 VL53L0X_SetLimitCheckEnable(Dev_2, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80004f0:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <main+0x33c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2201      	movs	r2, #1
 80004f6:	2101      	movs	r1, #1
 80004f8:	4618      	mov	r0, r3
 80004fa:	f004 ff45 	bl	8005388 <VL53L0X_SetLimitCheckEnable>
   	   	 VL53L0X_SetLimitCheckValue(Dev_2, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80004fe:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <main+0x33c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f641 1299 	movw	r2, #6553	; 0x1999
 8000506:	2101      	movs	r1, #1
 8000508:	4618      	mov	r0, r3
 800050a:	f004 ffed 	bl	80054e8 <VL53L0X_SetLimitCheckValue>
   	   	 VL53L0X_SetLimitCheckValue(Dev_2, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <main+0x33c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f004 ffe5 	bl	80054e8 <VL53L0X_SetLimitCheckValue>
   	   	 VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev_2, 33000);
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <main+0x33c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000526:	4618      	mov	r0, r3
 8000528:	f004 fd10 	bl	8004f4c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
   	    VL53L0X_SetVcselPulsePeriod(Dev_2, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <main+0x33c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2212      	movs	r2, #18
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f004 fd2f 	bl	8004f98 <VL53L0X_SetVcselPulsePeriod>
   	   	 VL53L0X_SetVcselPulsePeriod(Dev_2, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <main+0x33c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	220e      	movs	r2, #14
 8000540:	2101      	movs	r1, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f004 fd28 	bl	8004f98 <VL53L0X_SetVcselPulsePeriod>

   	   	 VL53L0X_StartMeasurement(Dev_2);
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <main+0x33c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f005 f99d 	bl	800588c <VL53L0X_StartMeasurement>
   	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000552:	2006      	movs	r0, #6
 8000554:	f000 fe75 	bl	8001242 <HAL_NVIC_EnableIRQ>
   	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000558:	2028      	movs	r0, #40	; 0x28
 800055a:	f000 fe72 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(TofDataRead == 1)
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <main+0x348>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b01      	cmp	r3, #1
 8000566:	d13a      	bne.n	80005de <main+0x36e>
	  {
		  VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <main+0x334>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4913      	ldr	r1, [pc, #76]	; (80005bc <main+0x34c>)
 800056e:	4618      	mov	r0, r3
 8000570:	f005 fa8c 	bl	8005a8c <VL53L0X_GetRangingMeasurementData>
		  		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <main+0x334>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2104      	movs	r1, #4
 800057a:	4618      	mov	r0, r3
 800057c:	f005 fd36 	bl	8005fec <VL53L0X_ClearInterruptMask>
		MessageLen = sprintf((char*)Message, "Measured distance: %i\n\r", RangingData.RangeMilliMeter);
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <main+0x34c>)
 8000582:	891b      	ldrh	r3, [r3, #8]
 8000584:	461a      	mov	r2, r3
 8000586:	490e      	ldr	r1, [pc, #56]	; (80005c0 <main+0x350>)
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <main+0x324>)
 800058a:	f009 f92f 	bl	80097ec <siprintf>
 800058e:	4603      	mov	r3, r0
 8000590:	b2da      	uxtb	r2, r3
 8000592:	e017      	b.n	80005c4 <main+0x354>
 8000594:	200005a8 	.word	0x200005a8
 8000598:	0800a00c 	.word	0x0800a00c
 800059c:	200005a4 	.word	0x200005a4
 80005a0:	20000798 	.word	0x20000798
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000508 	.word	0x20000508
 80005ac:	20000004 	.word	0x20000004
 80005b0:	0800a034 	.word	0x0800a034
 80005b4:	0800a04c 	.word	0x0800a04c
 80005b8:	20000604 	.word	0x20000604
 80005bc:	2000035c 	.word	0x2000035c
 80005c0:	0800a064 	.word	0x0800a064
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <main+0x3c0>)
 80005c6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <main+0x3c0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	4918      	ldr	r1, [pc, #96]	; (8000634 <main+0x3c4>)
 80005d2:	4819      	ldr	r0, [pc, #100]	; (8000638 <main+0x3c8>)
 80005d4:	f003 fd16 	bl	8004004 <HAL_UART_Transmit>
		TofDataRead = 0;
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <main+0x3cc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]

	  }

	  if(TofDataRead_2 == 1)
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <main+0x3d0>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d1ba      	bne.n	800055e <main+0x2ee>
	 	  {
	 		  VL53L0X_GetRangingMeasurementData(Dev_2, &RangingData_2);
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <main+0x3d4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4916      	ldr	r1, [pc, #88]	; (8000648 <main+0x3d8>)
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 fa4c 	bl	8005a8c <VL53L0X_GetRangingMeasurementData>
	 		  		VL53L0X_ClearInterruptMask(Dev_2, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <main+0x3d4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2104      	movs	r1, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 fcf6 	bl	8005fec <VL53L0X_ClearInterruptMask>
	 		MessageLen = sprintf((char*)Message, "Measured distance_2: %i\n\r", RangingData_2.RangeMilliMeter);
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <main+0x3d8>)
 8000602:	891b      	ldrh	r3, [r3, #8]
 8000604:	461a      	mov	r2, r3
 8000606:	4911      	ldr	r1, [pc, #68]	; (800064c <main+0x3dc>)
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <main+0x3c4>)
 800060a:	f009 f8ef 	bl	80097ec <siprintf>
 800060e:	4603      	mov	r3, r0
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <main+0x3c0>)
 8000614:	701a      	strb	r2, [r3, #0]
	 		HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <main+0x3c0>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	b29a      	uxth	r2, r3
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	4905      	ldr	r1, [pc, #20]	; (8000634 <main+0x3c4>)
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <main+0x3c8>)
 8000622:	f003 fcef 	bl	8004004 <HAL_UART_Transmit>
	 		TofDataRead_2 = 0;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <main+0x3d0>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
	  if(TofDataRead == 1)
 800062c:	e797      	b.n	800055e <main+0x2ee>
 800062e:	bf00      	nop
 8000630:	200005a4 	.word	0x200005a4
 8000634:	200005a8 	.word	0x200005a8
 8000638:	20000798 	.word	0x20000798
 800063c:	20000604 	.word	0x20000604
 8000640:	20000554 	.word	0x20000554
 8000644:	20000004 	.word	0x20000004
 8000648:	200005e8 	.word	0x200005e8
 800064c:	0800a07c 	.word	0x0800a07c

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	; 0x58
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800065a:	2228      	movs	r2, #40	; 0x28
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f009 f8bb 	bl	80097da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
 8000682:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fc9f 	bl	8001fdc <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006a4:	f000 fa3a 	bl	8000b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fb92 	bl	8002dec <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006ce:	f000 fa25 	bl	8000b1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006d2:	2320      	movs	r3, #32
 80006d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fdbb 	bl	8003258 <HAL_RCCEx_PeriphCLKConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006e8:	f000 fa18 	bl	8000b1c <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3758      	adds	r7, #88	; 0x58
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_I2C1_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_I2C1_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_I2C1_Init+0x74>)
 8000700:	f240 220b 	movw	r2, #523	; 0x20b
 8000704:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_I2C1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_I2C1_Init+0x74>)
 800070e:	2201      	movs	r2, #1
 8000710:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_I2C1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_I2C1_Init+0x74>)
 8000732:	f000 ff51 	bl	80015d8 <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 f9ee 	bl	8000b1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_I2C1_Init+0x74>)
 8000744:	f001 fbb2 	bl	8001eac <HAL_I2CEx_ConfigAnalogFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800074e:	f000 f9e5 	bl	8000b1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C1_Init+0x74>)
 8000756:	f001 fbf4 	bl	8001f42 <HAL_I2CEx_ConfigDigitalFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f9dc 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000508 	.word	0x20000508
 800076c:	40005400 	.word	0x40005400

08000770 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b092      	sub	sp, #72	; 0x48
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
 8000786:	615a      	str	r2, [r3, #20]
 8000788:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	222c      	movs	r2, #44	; 0x2c
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f009 f822 	bl	80097da <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <MX_TIM16_Init+0xe8>)
 8000798:	4a30      	ldr	r2, [pc, #192]	; (800085c <MX_TIM16_Init+0xec>)
 800079a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9;
 800079c:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <MX_TIM16_Init+0xe8>)
 800079e:	2209      	movs	r2, #9
 80007a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <MX_TIM16_Init+0xe8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 80007a8:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <MX_TIM16_Init+0xe8>)
 80007aa:	2263      	movs	r2, #99	; 0x63
 80007ac:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <MX_TIM16_Init+0xe8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MX_TIM16_Init+0xe8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	4b27      	ldr	r3, [pc, #156]	; (8000858 <MX_TIM16_Init+0xe8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007c0:	4825      	ldr	r0, [pc, #148]	; (8000858 <MX_TIM16_Init+0xe8>)
 80007c2:	f002 fe6f 	bl	80034a4 <HAL_TIM_Base_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80007cc:	f000 f9a6 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80007d0:	4821      	ldr	r0, [pc, #132]	; (8000858 <MX_TIM16_Init+0xe8>)
 80007d2:	f002 febe 	bl	8003552 <HAL_TIM_PWM_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80007dc:	f000 f99e 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e0:	2360      	movs	r3, #96	; 0x60
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e8:	2300      	movs	r3, #0
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000800:	2200      	movs	r2, #0
 8000802:	4619      	mov	r1, r3
 8000804:	4814      	ldr	r0, [pc, #80]	; (8000858 <MX_TIM16_Init+0xe8>)
 8000806:	f002 ff05 	bl	8003614 <HAL_TIM_PWM_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8000810:	f000 f984 	bl	8000b1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <MX_TIM16_Init+0xe8>)
 800083c:	f003 fb1c 	bl	8003e78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000846:	f000 f969 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800084a:	4803      	ldr	r0, [pc, #12]	; (8000858 <MX_TIM16_Init+0xe8>)
 800084c:	f000 fa0a 	bl	8000c64 <HAL_TIM_MspPostInit>

}
 8000850:	bf00      	nop
 8000852:	3748      	adds	r7, #72	; 0x48
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000081c 	.word	0x2000081c
 800085c:	40014400 	.word	0x40014400

08000860 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b092      	sub	sp, #72	; 0x48
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
 8000876:	615a      	str	r2, [r3, #20]
 8000878:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	222c      	movs	r2, #44	; 0x2c
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f008 ffaa 	bl	80097da <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <MX_TIM17_Init+0xe8>)
 8000888:	4a30      	ldr	r2, [pc, #192]	; (800094c <MX_TIM17_Init+0xec>)
 800088a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 9;
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <MX_TIM17_Init+0xe8>)
 800088e:	2209      	movs	r2, #9
 8000890:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <MX_TIM17_Init+0xe8>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <MX_TIM17_Init+0xe8>)
 800089a:	2263      	movs	r2, #99	; 0x63
 800089c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <MX_TIM17_Init+0xe8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80008a4:	4b28      	ldr	r3, [pc, #160]	; (8000948 <MX_TIM17_Init+0xe8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b27      	ldr	r3, [pc, #156]	; (8000948 <MX_TIM17_Init+0xe8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80008b0:	4825      	ldr	r0, [pc, #148]	; (8000948 <MX_TIM17_Init+0xe8>)
 80008b2:	f002 fdf7 	bl	80034a4 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80008bc:	f000 f92e 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80008c0:	4821      	ldr	r0, [pc, #132]	; (8000948 <MX_TIM17_Init+0xe8>)
 80008c2:	f002 fe46 	bl	8003552 <HAL_TIM_PWM_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80008cc:	f000 f926 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d0:	2360      	movs	r3, #96	; 0x60
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d8:	2300      	movs	r3, #0
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008dc:	2300      	movs	r3, #0
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	4814      	ldr	r0, [pc, #80]	; (8000948 <MX_TIM17_Init+0xe8>)
 80008f6:	f002 fe8d 	bl	8003614 <HAL_TIM_PWM_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000900:	f000 f90c 	bl	8000b1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	4619      	mov	r1, r3
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <MX_TIM17_Init+0xe8>)
 800092c:	f003 faa4 	bl	8003e78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000936:	f000 f8f1 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <MX_TIM17_Init+0xe8>)
 800093c:	f000 f992 	bl	8000c64 <HAL_TIM_MspPostInit>

}
 8000940:	bf00      	nop
 8000942:	3748      	adds	r7, #72	; 0x48
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000558 	.word	0x20000558
 800094c:	40014800 	.word	0x40014800

08000950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_USART2_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800095c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000994:	f003 fae8 	bl	8003f68 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f8bd 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000798 	.word	0x20000798
 80009ac:	40004400 	.word	0x40004400

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b45      	ldr	r3, [pc, #276]	; (8000adc <MX_GPIO_Init+0x12c>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a44      	ldr	r2, [pc, #272]	; (8000adc <MX_GPIO_Init+0x12c>)
 80009cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	4b42      	ldr	r3, [pc, #264]	; (8000adc <MX_GPIO_Init+0x12c>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b3f      	ldr	r3, [pc, #252]	; (8000adc <MX_GPIO_Init+0x12c>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a3e      	ldr	r2, [pc, #248]	; (8000adc <MX_GPIO_Init+0x12c>)
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <MX_GPIO_Init+0x12c>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b39      	ldr	r3, [pc, #228]	; (8000adc <MX_GPIO_Init+0x12c>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a38      	ldr	r2, [pc, #224]	; (8000adc <MX_GPIO_Init+0x12c>)
 80009fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <MX_GPIO_Init+0x12c>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TOF_XSHUT_2_Pin|SILNIK_L_2_Pin|SILNIK_L_1_Pin|TOF_XSHUT_1_Pin
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f249 7180 	movw	r1, #38784	; 0x9780
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f000 fdae 	bl	8001578 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_0_Pin|SILNIK_P_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SILNIK_P_1_GPIO_Port, SILNIK_P_1_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2108      	movs	r1, #8
 8000a20:	482f      	ldr	r0, [pc, #188]	; (8000ae0 <MX_GPIO_Init+0x130>)
 8000a22:	f000 fda9 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOF_XSHUT_2_Pin SILNIK_L_2_Pin SILNIK_L_1_Pin TOF_XSHUT_1_Pin
                           TOF_XSHUT_0_Pin SILNIK_P_2_Pin */
  GPIO_InitStruct.Pin = TOF_XSHUT_2_Pin|SILNIK_L_2_Pin|SILNIK_L_1_Pin|TOF_XSHUT_1_Pin
 8000a26:	f249 7380 	movw	r3, #38784	; 0x9780
 8000a2a:	60fb      	str	r3, [r7, #12]
                          |TOF_XSHUT_0_Pin|SILNIK_P_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f000 fc27 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_0_Pin */
  GPIO_InitStruct.Pin = TOF_INT_0_Pin;
 8000a46:	2301      	movs	r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_0_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4821      	ldr	r0, [pc, #132]	; (8000ae0 <MX_GPIO_Init+0x130>)
 8000a5c:	f000 fc1a 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_2_Pin */
  GPIO_InitStruct.Pin = TOF_INT_2_Pin;
 8000a60:	2302      	movs	r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4619      	mov	r1, r3
 8000a74:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <MX_GPIO_Init+0x130>)
 8000a76:	f000 fc0d 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_1_Pin */
  GPIO_InitStruct.Pin = TOF_INT_1_Pin;
 8000a7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a80:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 fbfe 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : SILNIK_P_1_Pin */
  GPIO_InitStruct.Pin = SILNIK_P_1_Pin;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SILNIK_P_1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_GPIO_Init+0x130>)
 8000ab0:	f000 fbf0 	bl	8001294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2006      	movs	r0, #6
 8000aba:	f000 fba6 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000abe:	2006      	movs	r0, #6
 8000ac0:	f000 fbbf 	bl	8001242 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2028      	movs	r0, #40	; 0x28
 8000aca:	f000 fb9e 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ace:	2028      	movs	r0, #40	; 0x28
 8000ad0:	f000 fbb7 	bl	8001242 <HAL_NVIC_EnableIRQ>

}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOF_INT_0_Pin)
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d102      	bne.n	8000afa <HAL_GPIO_EXTI_Callback+0x16>
	{
//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
		TofDataRead = 1;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x30>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]

	}

	if(GPIO_Pin == TOF_INT_1_Pin)
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b00:	d102      	bne.n	8000b08 <HAL_GPIO_EXTI_Callback+0x24>
		{
	//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
	//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
			TofDataRead_2 = 1;
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]

		}
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	20000604 	.word	0x20000604
 8000b18:	20000554 	.word	0x20000554

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x44>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x44>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x44>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_I2C_MspInit+0x7c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d127      	bne.n	8000be6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_I2C_MspInit+0x80>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	4a16      	ldr	r2, [pc, #88]	; (8000bf4 <HAL_I2C_MspInit+0x80>)
 8000b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba0:	6153      	str	r3, [r2, #20]
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_I2C_MspInit+0x80>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bae:	23c0      	movs	r3, #192	; 0xc0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb2:	2312      	movs	r3, #18
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000bca:	f000 fb63 	bl	8001294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_I2C_MspInit+0x80>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_I2C_MspInit+0x80>)
 8000bd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd8:	61d3      	str	r3, [r2, #28]
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_I2C_MspInit+0x80>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000400 	.word	0x48000400

08000bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <HAL_TIM_Base_MspInit+0x5c>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d10c      	bne.n	8000c28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <HAL_TIM_Base_MspInit+0x60>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <HAL_TIM_Base_MspInit+0x60>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_TIM_Base_MspInit+0x60>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000c26:	e010      	b.n	8000c4a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0c      	ldr	r2, [pc, #48]	; (8000c60 <HAL_TIM_Base_MspInit+0x64>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d10b      	bne.n	8000c4a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_TIM_Base_MspInit+0x60>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <HAL_TIM_Base_MspInit+0x60>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <HAL_TIM_Base_MspInit+0x60>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40014400 	.word	0x40014400
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40014800 	.word	0x40014800

08000c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a22      	ldr	r2, [pc, #136]	; (8000d0c <HAL_TIM_MspPostInit+0xa8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d11c      	bne.n	8000cc0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <HAL_TIM_MspPostInit+0xac>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4a21      	ldr	r2, [pc, #132]	; (8000d10 <HAL_TIM_MspPostInit+0xac>)
 8000c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c90:	6153      	str	r3, [r2, #20]
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <HAL_TIM_MspPostInit+0xac>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4816      	ldr	r0, [pc, #88]	; (8000d14 <HAL_TIM_MspPostInit+0xb0>)
 8000cba:	f000 faeb 	bl	8001294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000cbe:	e020      	b.n	8000d02 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM17)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <HAL_TIM_MspPostInit+0xb4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d11b      	bne.n	8000d02 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_TIM_MspPostInit+0xac>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_TIM_MspPostInit+0xac>)
 8000cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd4:	6153      	str	r3, [r2, #20]
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_TIM_MspPostInit+0xac>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_P_Pin;
 8000ce2:	2320      	movs	r3, #32
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_P_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_TIM_MspPostInit+0xb0>)
 8000cfe:	f000 fac9 	bl	8001294 <HAL_GPIO_Init>
}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	; 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40014400 	.word	0x40014400
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000400 	.word	0x48000400
 8000d18:	40014800 	.word	0x40014800

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0x7c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d128      	bne.n	8000d90 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_UART_MspInit+0x80>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f000 fa82 	bl	8001294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40004400 	.word	0x40004400
 8000d9c:	40021000 	.word	0x40021000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f8ca 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f000 fbd1 	bl	80015a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000e0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e12:	f000 fbc9 	bl	80015a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f008 fc90 	bl	8009770 <__errno>
 8000e50:	4602      	mov	r2, r0
 8000e52:	230c      	movs	r3, #12
 8000e54:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20003000 	.word	0x20003000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	20000350 	.word	0x20000350
 8000e84:	200008b0 	.word	0x200008b0

08000e88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb2:	490e      	ldr	r1, [pc, #56]	; (8000eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <LoopForever+0xe>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec8:	4c0b      	ldr	r4, [pc, #44]	; (8000ef8 <LoopForever+0x16>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ed6:	f7ff ffd7 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eda:	f008 fc4f 	bl	800977c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ede:	f7ff f9c7 	bl	8000270 <main>

08000ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee2:	e7fe      	b.n	8000ee2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ee4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8000ef0:	0800a10c 	.word	0x0800a10c
  ldr r2, =_sbss
 8000ef4:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8000ef8:	200008b0 	.word	0x200008b0

08000efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_2_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x28>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x28>)
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f96f 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f7ff fe06 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40022000 	.word	0x40022000

08000f2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f995 	bl	800127a <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f68:	f000 f94f 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000010 	.word	0x20000010
 8000f88:	2000000c 	.word	0x2000000c

08000f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000010 	.word	0x20000010
 8000fb0:	20000868 	.word	0x20000868

08000fb4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000868 	.word	0x20000868

08000fcc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_Delay+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000010 	.word	0x20000010

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db10      	blt.n	80010e4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4909      	ldr	r1, [pc, #36]	; (80010f0 <__NVIC_DisableIRQ+0x40>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	3320      	adds	r3, #32
 80010d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d4:	f7ff ff8e 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff07 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff1c 	bl	8001058 <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff8e 	bl	8001148 <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5d 	bl	80010f4 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff0f 	bl	8001074 <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff1f 	bl	80010b0 <__NVIC_DisableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff94 	bl	80011b0 <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a2:	e14e      	b.n	8001542 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2101      	movs	r1, #1
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8140 	beq.w	800153c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d005      	beq.n	80012d4 <HAL_GPIO_Init+0x40>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d130      	bne.n	8001336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130a:	2201      	movs	r2, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 0201 	and.w	r2, r3, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b03      	cmp	r3, #3
 8001340:	d017      	beq.n	8001372 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d123      	bne.n	80013c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	691a      	ldr	r2, [r3, #16]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	6939      	ldr	r1, [r7, #16]
 80013c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0203 	and.w	r2, r3, #3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 809a 	beq.w	800153c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001408:	4b55      	ldr	r3, [pc, #340]	; (8001560 <HAL_GPIO_Init+0x2cc>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a54      	ldr	r2, [pc, #336]	; (8001560 <HAL_GPIO_Init+0x2cc>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b52      	ldr	r3, [pc, #328]	; (8001560 <HAL_GPIO_Init+0x2cc>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001420:	4a50      	ldr	r2, [pc, #320]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800144a:	d013      	beq.n	8001474 <HAL_GPIO_Init+0x1e0>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a46      	ldr	r2, [pc, #280]	; (8001568 <HAL_GPIO_Init+0x2d4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d00d      	beq.n	8001470 <HAL_GPIO_Init+0x1dc>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a45      	ldr	r2, [pc, #276]	; (800156c <HAL_GPIO_Init+0x2d8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d007      	beq.n	800146c <HAL_GPIO_Init+0x1d8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a44      	ldr	r2, [pc, #272]	; (8001570 <HAL_GPIO_Init+0x2dc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_GPIO_Init+0x1d4>
 8001464:	2303      	movs	r3, #3
 8001466:	e006      	b.n	8001476 <HAL_GPIO_Init+0x1e2>
 8001468:	2305      	movs	r3, #5
 800146a:	e004      	b.n	8001476 <HAL_GPIO_Init+0x1e2>
 800146c:	2302      	movs	r3, #2
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0x1e2>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_GPIO_Init+0x1e2>
 8001474:	2300      	movs	r3, #0
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	f002 0203 	and.w	r2, r2, #3
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	4093      	lsls	r3, r2
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001486:	4937      	ldr	r1, [pc, #220]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <HAL_GPIO_Init+0x2e0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014b8:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <HAL_GPIO_Init+0x2e0>)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_GPIO_Init+0x2e0>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014e2:	4a24      	ldr	r2, [pc, #144]	; (8001574 <HAL_GPIO_Init+0x2e0>)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <HAL_GPIO_Init+0x2e0>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800150c:	4a19      	ldr	r2, [pc, #100]	; (8001574 <HAL_GPIO_Init+0x2e0>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_GPIO_Init+0x2e0>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <HAL_GPIO_Init+0x2e0>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3301      	adds	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	f47f aea9 	bne.w	80012a4 <HAL_GPIO_Init+0x10>
  }
}
 8001552:	bf00      	nop
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000
 8001568:	48000400 	.word	0x48000400
 800156c:	48000800 	.word	0x48000800
 8001570:	48000c00 	.word	0x48000c00
 8001574:	40010400 	.word	0x40010400

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001594:	e002      	b.n	800159c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fa8c 	bl	8000ae4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e081      	b.n	80016ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fab8 	bl	8000b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2224      	movs	r2, #36	; 0x24
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001628:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001638:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	e006      	b.n	8001660 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800165e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d104      	bne.n	8001672 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001670:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001684:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001694:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69d9      	ldr	r1, [r3, #28]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1a      	ldr	r2, [r3, #32]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2220      	movs	r2, #32
 80016da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	461a      	mov	r2, r3
 8001704:	460b      	mov	r3, r1
 8001706:	817b      	strh	r3, [r7, #10]
 8001708:	4613      	mov	r3, r2
 800170a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b20      	cmp	r3, #32
 8001716:	f040 80da 	bne.w	80018ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_I2C_Master_Transmit+0x30>
 8001724:	2302      	movs	r3, #2
 8001726:	e0d3      	b.n	80018d0 <HAL_I2C_Master_Transmit+0x1d8>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001730:	f7ff fc40 	bl	8000fb4 <HAL_GetTick>
 8001734:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2319      	movs	r3, #25
 800173c:	2201      	movs	r2, #1
 800173e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f9e6 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0be      	b.n	80018d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2221      	movs	r2, #33	; 0x21
 8001756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2210      	movs	r2, #16
 800175e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	893a      	ldrh	r2, [r7, #8]
 8001772:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	2bff      	cmp	r3, #255	; 0xff
 8001782:	d90e      	bls.n	80017a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	22ff      	movs	r2, #255	; 0xff
 8001788:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	b2da      	uxtb	r2, r3
 8001790:	8979      	ldrh	r1, [r7, #10]
 8001792:	4b51      	ldr	r3, [pc, #324]	; (80018d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 fb58 	bl	8001e50 <I2C_TransferConfig>
 80017a0:	e06c      	b.n	800187c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	8979      	ldrh	r1, [r7, #10]
 80017b4:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <HAL_I2C_Master_Transmit+0x1e0>)
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fb47 	bl	8001e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017c2:	e05b      	b.n	800187c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	6a39      	ldr	r1, [r7, #32]
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f9e3 	bl	8001b94 <I2C_WaitOnTXISFlagUntilTimeout>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e07b      	b.n	80018d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	3b01      	subs	r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180c:	b29b      	uxth	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d034      	beq.n	800187c <HAL_I2C_Master_Transmit+0x184>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001816:	2b00      	cmp	r3, #0
 8001818:	d130      	bne.n	800187c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	2200      	movs	r2, #0
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 f975 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e04d      	b.n	80018d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001838:	b29b      	uxth	r3, r3
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d90e      	bls.n	800185c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	22ff      	movs	r2, #255	; 0xff
 8001842:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001848:	b2da      	uxtb	r2, r3
 800184a:	8979      	ldrh	r1, [r7, #10]
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 fafb 	bl	8001e50 <I2C_TransferConfig>
 800185a:	e00f      	b.n	800187c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186a:	b2da      	uxtb	r2, r3
 800186c:	8979      	ldrh	r1, [r7, #10]
 800186e:	2300      	movs	r3, #0
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 faea 	bl	8001e50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001880:	b29b      	uxth	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d19e      	bne.n	80017c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	6a39      	ldr	r1, [r7, #32]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f9c2 	bl	8001c14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e01a      	b.n	80018d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2220      	movs	r2, #32
 80018a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_I2C_Master_Transmit+0x1e4>)
 80018ae:	400b      	ands	r3, r1
 80018b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2220      	movs	r2, #32
 80018b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80018ce:	2302      	movs	r3, #2
  }
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	80002000 	.word	0x80002000
 80018dc:	fe00e800 	.word	0xfe00e800

080018e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	461a      	mov	r2, r3
 80018ec:	460b      	mov	r3, r1
 80018ee:	817b      	strh	r3, [r7, #10]
 80018f0:	4613      	mov	r3, r2
 80018f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	f040 80db 	bne.w	8001ab8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_I2C_Master_Receive+0x30>
 800190c:	2302      	movs	r3, #2
 800190e:	e0d4      	b.n	8001aba <HAL_I2C_Master_Receive+0x1da>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001918:	f7ff fb4c 	bl	8000fb4 <HAL_GetTick>
 800191c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2319      	movs	r3, #25
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f8f2 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0bf      	b.n	8001aba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2222      	movs	r2, #34	; 0x22
 800193e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2210      	movs	r2, #16
 8001946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	893a      	ldrh	r2, [r7, #8]
 800195a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	2bff      	cmp	r3, #255	; 0xff
 800196a:	d90e      	bls.n	800198a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	22ff      	movs	r2, #255	; 0xff
 8001970:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001976:	b2da      	uxtb	r2, r3
 8001978:	8979      	ldrh	r1, [r7, #10]
 800197a:	4b52      	ldr	r3, [pc, #328]	; (8001ac4 <HAL_I2C_Master_Receive+0x1e4>)
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 fa64 	bl	8001e50 <I2C_TransferConfig>
 8001988:	e06d      	b.n	8001a66 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001998:	b2da      	uxtb	r2, r3
 800199a:	8979      	ldrh	r1, [r7, #10]
 800199c:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <HAL_I2C_Master_Receive+0x1e4>)
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 fa53 	bl	8001e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80019aa:	e05c      	b.n	8001a66 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	6a39      	ldr	r1, [r7, #32]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f96b 	bl	8001c8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e07c      	b.n	8001aba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3b01      	subs	r3, #1
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d034      	beq.n	8001a66 <HAL_I2C_Master_Receive+0x186>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d130      	bne.n	8001a66 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 f880 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e04d      	b.n	8001aba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2bff      	cmp	r3, #255	; 0xff
 8001a26:	d90e      	bls.n	8001a46 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	22ff      	movs	r2, #255	; 0xff
 8001a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	8979      	ldrh	r1, [r7, #10]
 8001a36:	2300      	movs	r3, #0
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 fa06 	bl	8001e50 <I2C_TransferConfig>
 8001a44:	e00f      	b.n	8001a66 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	8979      	ldrh	r1, [r7, #10]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 f9f5 	bl	8001e50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d19d      	bne.n	80019ac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	6a39      	ldr	r1, [r7, #32]
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 f8cd 	bl	8001c14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e01a      	b.n	8001aba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_I2C_Master_Receive+0x1e8>)
 8001a98:	400b      	ands	r3, r1
 8001a9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e000      	b.n	8001aba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ab8:	2302      	movs	r3, #2
  }
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	80002400 	.word	0x80002400
 8001ac8:	fe00e800 	.word	0xfe00e800

08001acc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d103      	bne.n	8001aea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d007      	beq.n	8001b08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	619a      	str	r2, [r3, #24]
  }
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b24:	e022      	b.n	8001b6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b2c:	d01e      	beq.n	8001b6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2e:	f7ff fa41 	bl	8000fb4 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d302      	bcc.n	8001b44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d113      	bne.n	8001b6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	f043 0220 	orr.w	r2, r3, #32
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2220      	movs	r2, #32
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e00f      	b.n	8001b8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699a      	ldr	r2, [r3, #24]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4013      	ands	r3, r2
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d0cd      	beq.n	8001b26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ba0:	e02c      	b.n	8001bfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f8dc 	bl	8001d64 <I2C_IsAcknowledgeFailed>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e02a      	b.n	8001c0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bbc:	d01e      	beq.n	8001bfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbe:	f7ff f9f9 	bl	8000fb4 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d302      	bcc.n	8001bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d113      	bne.n	8001bfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	f043 0220 	orr.w	r2, r3, #32
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e007      	b.n	8001c0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d1cb      	bne.n	8001ba2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c20:	e028      	b.n	8001c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f89c 	bl	8001d64 <I2C_IsAcknowledgeFailed>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e026      	b.n	8001c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c36:	f7ff f9bd 	bl	8000fb4 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d302      	bcc.n	8001c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d113      	bne.n	8001c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	f043 0220 	orr.w	r2, r3, #32
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e007      	b.n	8001c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	d1cf      	bne.n	8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c98:	e055      	b.n	8001d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f860 	bl	8001d64 <I2C_IsAcknowledgeFailed>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e053      	b.n	8001d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d129      	bne.n	8001d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d105      	bne.n	8001cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e03f      	b.n	8001d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001cea:	400b      	ands	r3, r1
 8001cec:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e022      	b.n	8001d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d10:	f7ff f950 	bl	8000fb4 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d302      	bcc.n	8001d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10f      	bne.n	8001d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f043 0220 	orr.w	r2, r3, #32
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e007      	b.n	8001d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d1a2      	bne.n	8001c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	fe00e800 	.word	0xfe00e800

08001d64 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d161      	bne.n	8001e42 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d8c:	d02b      	beq.n	8001de6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d9c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d9e:	e022      	b.n	8001de6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da6:	d01e      	beq.n	8001de6 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da8:	f7ff f904 	bl	8000fb4 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d302      	bcc.n	8001dbe <I2C_IsAcknowledgeFailed+0x5a>
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d113      	bne.n	8001de6 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e02e      	b.n	8001e44 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d1d5      	bne.n	8001da0 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2220      	movs	r2, #32
 8001e02:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fe61 	bl	8001acc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <I2C_IsAcknowledgeFailed+0xe8>)
 8001e16:	400b      	ands	r3, r1
 8001e18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f043 0204 	orr.w	r2, r3, #4
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	fe00e800 	.word	0xfe00e800

08001e50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	817b      	strh	r3, [r7, #10]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	0d5b      	lsrs	r3, r3, #21
 8001e6c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <I2C_TransferConfig+0x58>)
 8001e72:	430b      	orrs	r3, r1
 8001e74:	43db      	mvns	r3, r3
 8001e76:	ea02 0103 	and.w	r1, r2, r3
 8001e7a:	897b      	ldrh	r3, [r7, #10]
 8001e7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e80:	7a7b      	ldrb	r3, [r7, #9]
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	03ff63ff 	.word	0x03ff63ff

08001eac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b20      	cmp	r3, #32
 8001ec0:	d138      	bne.n	8001f34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e032      	b.n	8001f36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2224      	movs	r2, #36	; 0x24
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001efe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e000      	b.n	8001f36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
  }
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d139      	bne.n	8001fcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e033      	b.n	8001fce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2224      	movs	r2, #36	; 0x24
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e000      	b.n	8001fce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
  }
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f000 bef4 	b.w	8002dde <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 816a 	beq.w	80022da <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002006:	4bb3      	ldr	r3, [pc, #716]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b04      	cmp	r3, #4
 8002010:	d00c      	beq.n	800202c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002012:	4bb0      	ldr	r3, [pc, #704]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b08      	cmp	r3, #8
 800201c:	d159      	bne.n	80020d2 <HAL_RCC_OscConfig+0xf6>
 800201e:	4bad      	ldr	r3, [pc, #692]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202a:	d152      	bne.n	80020d2 <HAL_RCC_OscConfig+0xf6>
 800202c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002030:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002040:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d102      	bne.n	800205e <HAL_RCC_OscConfig+0x82>
 8002058:	4b9e      	ldr	r3, [pc, #632]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	e015      	b.n	800208a <HAL_RCC_OscConfig+0xae>
 800205e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002062:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002072:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002076:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800207a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002086:	4b93      	ldr	r3, [pc, #588]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800208e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002092:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002096:	fa92 f2a2 	rbit	r2, r2
 800209a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800209e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80020a2:	fab2 f282 	clz	r2, r2
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f042 0220 	orr.w	r2, r2, #32
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f002 021f 	and.w	r2, r2, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f202 	lsl.w	r2, r1, r2
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 810c 	beq.w	80022d8 <HAL_RCC_OscConfig+0x2fc>
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 8106 	bne.w	80022d8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f000 be86 	b.w	8002dde <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020dc:	d106      	bne.n	80020ec <HAL_RCC_OscConfig+0x110>
 80020de:	4b7d      	ldr	r3, [pc, #500]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7c      	ldr	r2, [pc, #496]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e030      	b.n	800214e <HAL_RCC_OscConfig+0x172>
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x134>
 80020f6:	4b77      	ldr	r3, [pc, #476]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a76      	ldr	r2, [pc, #472]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b74      	ldr	r3, [pc, #464]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a73      	ldr	r2, [pc, #460]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 8002108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e01e      	b.n	800214e <HAL_RCC_OscConfig+0x172>
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211a:	d10c      	bne.n	8002136 <HAL_RCC_OscConfig+0x15a>
 800211c:	4b6d      	ldr	r3, [pc, #436]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a6c      	ldr	r2, [pc, #432]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 8002122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a69      	ldr	r2, [pc, #420]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e00b      	b.n	800214e <HAL_RCC_OscConfig+0x172>
 8002136:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a66      	ldr	r2, [pc, #408]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 800213c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a63      	ldr	r2, [pc, #396]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 8002148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800214e:	4b61      	ldr	r3, [pc, #388]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f023 020f 	bic.w	r2, r3, #15
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	495d      	ldr	r1, [pc, #372]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 800215e:	4313      	orrs	r3, r2
 8002160:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d059      	beq.n	8002220 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe ff22 	bl	8000fb4 <HAL_GetTick>
 8002170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002176:	f7fe ff1d 	bl	8000fb4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d902      	bls.n	800218c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	f000 be29 	b.w	8002dde <HAL_RCC_OscConfig+0xe02>
 800218c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002190:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80021a0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d102      	bne.n	80021be <HAL_RCC_OscConfig+0x1e2>
 80021b8:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	e015      	b.n	80021ea <HAL_RCC_OscConfig+0x20e>
 80021be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80021d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80021da:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021ee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80021f2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80021f6:	fa92 f2a2 	rbit	r2, r2
 80021fa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80021fe:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002202:	fab2 f282 	clz	r2, r2
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	f042 0220 	orr.w	r2, r2, #32
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f002 021f 	and.w	r2, r2, #31
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f202 	lsl.w	r2, r1, r2
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0ab      	beq.n	8002176 <HAL_RCC_OscConfig+0x19a>
 800221e:	e05c      	b.n	80022da <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe fec8 	bl	8000fb4 <HAL_GetTick>
 8002224:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222a:	f7fe fec3 	bl	8000fb4 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d902      	bls.n	8002240 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	f000 bdcf 	b.w	8002dde <HAL_RCC_OscConfig+0xe02>
 8002240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002244:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002254:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d102      	bne.n	8002272 <HAL_RCC_OscConfig+0x296>
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x2c2>
 8002272:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002276:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800228a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800228e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_RCC_OscConfig+0x2f8>)
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022a2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80022a6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80022aa:	fa92 f2a2 	rbit	r2, r2
 80022ae:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80022b2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80022b6:	fab2 f282 	clz	r2, r2
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f042 0220 	orr.w	r2, r2, #32
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f002 021f 	and.w	r2, r2, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ab      	bne.n	800222a <HAL_RCC_OscConfig+0x24e>
 80022d2:	e002      	b.n	80022da <HAL_RCC_OscConfig+0x2fe>
 80022d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 816f 	beq.w	80025c8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022ea:	4bd0      	ldr	r3, [pc, #832]	; (800262c <HAL_RCC_OscConfig+0x650>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022f6:	4bcd      	ldr	r3, [pc, #820]	; (800262c <HAL_RCC_OscConfig+0x650>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d16c      	bne.n	80023dc <HAL_RCC_OscConfig+0x400>
 8002302:	4bca      	ldr	r3, [pc, #808]	; (800262c <HAL_RCC_OscConfig+0x650>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d166      	bne.n	80023dc <HAL_RCC_OscConfig+0x400>
 800230e:	2302      	movs	r3, #2
 8002310:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002320:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d102      	bne.n	800233e <HAL_RCC_OscConfig+0x362>
 8002338:	4bbc      	ldr	r3, [pc, #752]	; (800262c <HAL_RCC_OscConfig+0x650>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	e013      	b.n	8002366 <HAL_RCC_OscConfig+0x38a>
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002350:	2302      	movs	r3, #2
 8002352:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002356:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002362:	4bb2      	ldr	r3, [pc, #712]	; (800262c <HAL_RCC_OscConfig+0x650>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	2202      	movs	r2, #2
 8002368:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800236c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002370:	fa92 f2a2 	rbit	r2, r2
 8002374:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002378:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800237c:	fab2 f282 	clz	r2, r2
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f042 0220 	orr.w	r2, r2, #32
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f002 021f 	and.w	r2, r2, #31
 800238c:	2101      	movs	r1, #1
 800238e:	fa01 f202 	lsl.w	r2, r1, r2
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_RCC_OscConfig+0x3cc>
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	f000 bd1b 	b.w	8002dde <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4ba0      	ldr	r3, [pc, #640]	; (800262c <HAL_RCC_OscConfig+0x650>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	21f8      	movs	r1, #248	; 0xf8
 80023b8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80023c0:	fa91 f1a1 	rbit	r1, r1
 80023c4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80023c8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80023cc:	fab1 f181 	clz	r1, r1
 80023d0:	b2c9      	uxtb	r1, r1
 80023d2:	408b      	lsls	r3, r1
 80023d4:	4995      	ldr	r1, [pc, #596]	; (800262c <HAL_RCC_OscConfig+0x650>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023da:	e0f5      	b.n	80025c8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8085 	beq.w	80024f2 <HAL_RCC_OscConfig+0x516>
 80023e8:	2301      	movs	r3, #1
 80023ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80023fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002408:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	461a      	mov	r2, r3
 8002410:	2301      	movs	r3, #1
 8002412:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7fe fdce 	bl	8000fb4 <HAL_GetTick>
 8002418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241e:	f7fe fdc9 	bl	8000fb4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d902      	bls.n	8002434 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	f000 bcd5 	b.w	8002dde <HAL_RCC_OscConfig+0xe02>
 8002434:	2302      	movs	r3, #2
 8002436:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002446:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_RCC_OscConfig+0x488>
 800245e:	4b73      	ldr	r3, [pc, #460]	; (800262c <HAL_RCC_OscConfig+0x650>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	e013      	b.n	800248c <HAL_RCC_OscConfig+0x4b0>
 8002464:	2302      	movs	r3, #2
 8002466:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002476:	2302      	movs	r3, #2
 8002478:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800247c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_OscConfig+0x650>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2202      	movs	r2, #2
 800248e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002492:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002496:	fa92 f2a2 	rbit	r2, r2
 800249a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800249e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80024a2:	fab2 f282 	clz	r2, r2
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f002 021f 	and.w	r2, r2, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0af      	beq.n	800241e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b5b      	ldr	r3, [pc, #364]	; (800262c <HAL_RCC_OscConfig+0x650>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	21f8      	movs	r1, #248	; 0xf8
 80024ce:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024d6:	fa91 f1a1 	rbit	r1, r1
 80024da:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80024de:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80024e2:	fab1 f181 	clz	r1, r1
 80024e6:	b2c9      	uxtb	r1, r1
 80024e8:	408b      	lsls	r3, r1
 80024ea:	4950      	ldr	r1, [pc, #320]	; (800262c <HAL_RCC_OscConfig+0x650>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
 80024f0:	e06a      	b.n	80025c8 <HAL_RCC_OscConfig+0x5ec>
 80024f2:	2301      	movs	r3, #1
 80024f4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002504:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002512:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	461a      	mov	r2, r3
 800251a:	2300      	movs	r3, #0
 800251c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7fe fd49 	bl	8000fb4 <HAL_GetTick>
 8002522:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	e00a      	b.n	800253e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002528:	f7fe fd44 	bl	8000fb4 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d902      	bls.n	800253e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	f000 bc50 	b.w	8002dde <HAL_RCC_OscConfig+0xe02>
 800253e:	2302      	movs	r3, #2
 8002540:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d102      	bne.n	800256e <HAL_RCC_OscConfig+0x592>
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_RCC_OscConfig+0x650>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	e013      	b.n	8002596 <HAL_RCC_OscConfig+0x5ba>
 800256e:	2302      	movs	r3, #2
 8002570:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002580:	2302      	movs	r3, #2
 8002582:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002586:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCC_OscConfig+0x650>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	2202      	movs	r2, #2
 8002598:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800259c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80025a0:	fa92 f2a2 	rbit	r2, r2
 80025a4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80025a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80025ac:	fab2 f282 	clz	r2, r2
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	f042 0220 	orr.w	r2, r2, #32
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f002 021f 	and.w	r2, r2, #31
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1af      	bne.n	8002528 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80da 	beq.w	800278c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d069      	beq.n	80026b6 <HAL_RCC_OscConfig+0x6da>
 80025e2:	2301      	movs	r3, #1
 80025e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80025f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_OscConfig+0x654>)
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	461a      	mov	r2, r3
 8002608:	2301      	movs	r3, #1
 800260a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7fe fcd2 	bl	8000fb4 <HAL_GetTick>
 8002610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002614:	e00e      	b.n	8002634 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002616:	f7fe fccd 	bl	8000fb4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d906      	bls.n	8002634 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e3d9      	b.n	8002dde <HAL_RCC_OscConfig+0xe02>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	10908120 	.word	0x10908120
 8002634:	2302      	movs	r3, #2
 8002636:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002646:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800264a:	2202      	movs	r2, #2
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	fa93 f2a3 	rbit	r2, r3
 8002658:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002662:	2202      	movs	r2, #2
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002674:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	4ba5      	ldr	r3, [pc, #660]	; (800290c <HAL_RCC_OscConfig+0x930>)
 8002678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800267e:	2102      	movs	r1, #2
 8002680:	6019      	str	r1, [r3, #0]
 8002682:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fa93 f1a3 	rbit	r1, r3
 800268c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002690:	6019      	str	r1, [r3, #0]
  return result;
 8002692:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0b0      	beq.n	8002616 <HAL_RCC_OscConfig+0x63a>
 80026b4:	e06a      	b.n	800278c <HAL_RCC_OscConfig+0x7b0>
 80026b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	fa93 f2a3 	rbit	r2, r3
 80026c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026cc:	601a      	str	r2, [r3, #0]
  return result;
 80026ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026d2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	4b8c      	ldr	r3, [pc, #560]	; (8002910 <HAL_RCC_OscConfig+0x934>)
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	461a      	mov	r2, r3
 80026e4:	2300      	movs	r3, #0
 80026e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e8:	f7fe fc64 	bl	8000fb4 <HAL_GetTick>
 80026ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	e009      	b.n	8002706 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f2:	f7fe fc5f 	bl	8000fb4 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e36b      	b.n	8002dde <HAL_RCC_OscConfig+0xe02>
 8002706:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800270a:	2202      	movs	r2, #2
 800270c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	fa93 f2a3 	rbit	r2, r3
 8002718:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002722:	2202      	movs	r2, #2
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800273a:	2202      	movs	r2, #2
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f2a3 	rbit	r2, r3
 8002748:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800274c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274e:	4b6f      	ldr	r3, [pc, #444]	; (800290c <HAL_RCC_OscConfig+0x930>)
 8002750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002752:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002756:	2102      	movs	r1, #2
 8002758:	6019      	str	r1, [r3, #0]
 800275a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	fa93 f1a3 	rbit	r1, r3
 8002764:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002768:	6019      	str	r1, [r3, #0]
  return result;
 800276a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1b2      	bne.n	80026f2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8158 	beq.w	8002a4c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a2:	4b5a      	ldr	r3, [pc, #360]	; (800290c <HAL_RCC_OscConfig+0x930>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d112      	bne.n	80027d4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	4b57      	ldr	r3, [pc, #348]	; (800290c <HAL_RCC_OscConfig+0x930>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4a56      	ldr	r2, [pc, #344]	; (800290c <HAL_RCC_OscConfig+0x930>)
 80027b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b8:	61d3      	str	r3, [r2, #28]
 80027ba:	4b54      	ldr	r3, [pc, #336]	; (800290c <HAL_RCC_OscConfig+0x930>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027c2:	f107 0308 	add.w	r3, r7, #8
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f107 0308 	add.w	r3, r7, #8
 80027cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <HAL_RCC_OscConfig+0x938>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11a      	bne.n	8002816 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e0:	4b4c      	ldr	r3, [pc, #304]	; (8002914 <HAL_RCC_OscConfig+0x938>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a4b      	ldr	r2, [pc, #300]	; (8002914 <HAL_RCC_OscConfig+0x938>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ec:	f7fe fbe2 	bl	8000fb4 <HAL_GetTick>
 80027f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	e009      	b.n	800280a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f6:	f7fe fbdd 	bl	8000fb4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e2e9      	b.n	8002dde <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	4b42      	ldr	r3, [pc, #264]	; (8002914 <HAL_RCC_OscConfig+0x938>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0ef      	beq.n	80027f6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x852>
 8002820:	4b3a      	ldr	r3, [pc, #232]	; (800290c <HAL_RCC_OscConfig+0x930>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4a39      	ldr	r2, [pc, #228]	; (800290c <HAL_RCC_OscConfig+0x930>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6213      	str	r3, [r2, #32]
 800282c:	e02f      	b.n	800288e <HAL_RCC_OscConfig+0x8b2>
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10c      	bne.n	8002852 <HAL_RCC_OscConfig+0x876>
 8002838:	4b34      	ldr	r3, [pc, #208]	; (800290c <HAL_RCC_OscConfig+0x930>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4a33      	ldr	r2, [pc, #204]	; (800290c <HAL_RCC_OscConfig+0x930>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6213      	str	r3, [r2, #32]
 8002844:	4b31      	ldr	r3, [pc, #196]	; (800290c <HAL_RCC_OscConfig+0x930>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a30      	ldr	r2, [pc, #192]	; (800290c <HAL_RCC_OscConfig+0x930>)
 800284a:	f023 0304 	bic.w	r3, r3, #4
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	e01d      	b.n	800288e <HAL_RCC_OscConfig+0x8b2>
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b05      	cmp	r3, #5
 800285a:	d10c      	bne.n	8002876 <HAL_RCC_OscConfig+0x89a>
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_RCC_OscConfig+0x930>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4a2a      	ldr	r2, [pc, #168]	; (800290c <HAL_RCC_OscConfig+0x930>)
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	6213      	str	r3, [r2, #32]
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_RCC_OscConfig+0x930>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a27      	ldr	r2, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x930>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6213      	str	r3, [r2, #32]
 8002874:	e00b      	b.n	800288e <HAL_RCC_OscConfig+0x8b2>
 8002876:	4b25      	ldr	r3, [pc, #148]	; (800290c <HAL_RCC_OscConfig+0x930>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4a24      	ldr	r2, [pc, #144]	; (800290c <HAL_RCC_OscConfig+0x930>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6213      	str	r3, [r2, #32]
 8002882:	4b22      	ldr	r3, [pc, #136]	; (800290c <HAL_RCC_OscConfig+0x930>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a21      	ldr	r2, [pc, #132]	; (800290c <HAL_RCC_OscConfig+0x930>)
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d06b      	beq.n	8002970 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002898:	f7fe fb8c 	bl	8000fb4 <HAL_GetTick>
 800289c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a0:	e00b      	b.n	80028ba <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fb87 	bl	8000fb4 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e291      	b.n	8002dde <HAL_RCC_OscConfig+0xe02>
 80028ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028be:	2202      	movs	r2, #2
 80028c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fa93 f2a3 	rbit	r2, r3
 80028cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028d6:	2202      	movs	r2, #2
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	fa93 f2a3 	rbit	r2, r3
 80028e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028e8:	601a      	str	r2, [r3, #0]
  return result;
 80028ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d109      	bne.n	8002918 <HAL_RCC_OscConfig+0x93c>
 8002904:	4b01      	ldr	r3, [pc, #4]	; (800290c <HAL_RCC_OscConfig+0x930>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	e014      	b.n	8002934 <HAL_RCC_OscConfig+0x958>
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	10908120 	.word	0x10908120
 8002914:	40007000 	.word	0x40007000
 8002918:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800291c:	2202      	movs	r2, #2
 800291e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	4bbb      	ldr	r3, [pc, #748]	; (8002c20 <HAL_RCC_OscConfig+0xc44>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002938:	2102      	movs	r1, #2
 800293a:	6011      	str	r1, [r2, #0]
 800293c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	fa92 f1a2 	rbit	r1, r2
 8002946:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800294a:	6011      	str	r1, [r2, #0]
  return result;
 800294c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f002 021f 	and.w	r2, r2, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d099      	beq.n	80028a2 <HAL_RCC_OscConfig+0x8c6>
 800296e:	e063      	b.n	8002a38 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7fe fb20 	bl	8000fb4 <HAL_GetTick>
 8002974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	e00b      	b.n	8002992 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe fb1b 	bl	8000fb4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e225      	b.n	8002dde <HAL_RCC_OscConfig+0xe02>
 8002992:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002996:	2202      	movs	r2, #2
 8002998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029ae:	2202      	movs	r2, #2
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029c0:	601a      	str	r2, [r3, #0]
  return result;
 80029c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d102      	bne.n	80029e2 <HAL_RCC_OscConfig+0xa06>
 80029dc:	4b90      	ldr	r3, [pc, #576]	; (8002c20 <HAL_RCC_OscConfig+0xc44>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	e00d      	b.n	80029fe <HAL_RCC_OscConfig+0xa22>
 80029e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029e6:	2202      	movs	r2, #2
 80029e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	4b89      	ldr	r3, [pc, #548]	; (8002c20 <HAL_RCC_OscConfig+0xc44>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a02:	2102      	movs	r1, #2
 8002a04:	6011      	str	r1, [r2, #0]
 8002a06:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	fa92 f1a2 	rbit	r1, r2
 8002a10:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a14:	6011      	str	r1, [r2, #0]
  return result;
 8002a16:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1a0      	bne.n	800297a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a38:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b77      	ldr	r3, [pc, #476]	; (8002c20 <HAL_RCC_OscConfig+0xc44>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4a76      	ldr	r2, [pc, #472]	; (8002c20 <HAL_RCC_OscConfig+0xc44>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 81c2 	beq.w	8002ddc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a58:	4b71      	ldr	r3, [pc, #452]	; (8002c20 <HAL_RCC_OscConfig+0xc44>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	f000 819c 	beq.w	8002d9e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	f040 8114 	bne.w	8002c9a <HAL_RCC_OscConfig+0xcbe>
 8002a72:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	fa93 f2a3 	rbit	r2, r3
 8002a86:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a8a:	601a      	str	r2, [r3, #0]
  return result;
 8002a8c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a90:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fa84 	bl	8000fb4 <HAL_GetTick>
 8002aac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab0:	e009      	b.n	8002ac6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab2:	f7fe fa7f 	bl	8000fb4 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e18b      	b.n	8002dde <HAL_RCC_OscConfig+0xe02>
 8002ac6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002aca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ade:	601a      	str	r2, [r3, #0]
  return result;
 8002ae0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ae4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d102      	bne.n	8002b00 <HAL_RCC_OscConfig+0xb24>
 8002afa:	4b49      	ldr	r3, [pc, #292]	; (8002c20 <HAL_RCC_OscConfig+0xc44>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	e01b      	b.n	8002b38 <HAL_RCC_OscConfig+0xb5c>
 8002b00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	fa93 f2a3 	rbit	r2, r3
 8002b14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	fa93 f2a3 	rbit	r2, r3
 8002b2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <HAL_RCC_OscConfig+0xc44>)
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b40:	6011      	str	r1, [r2, #0]
 8002b42:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	fa92 f1a2 	rbit	r1, r2
 8002b4c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002b50:	6011      	str	r1, [r2, #0]
  return result;
 8002b52:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	fab2 f282 	clz	r2, r2
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f042 0220 	orr.w	r2, r2, #32
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	f002 021f 	and.w	r2, r2, #31
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d19e      	bne.n	8002ab2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b74:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <HAL_RCC_OscConfig+0xc44>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	4925      	ldr	r1, [pc, #148]	; (8002c20 <HAL_RCC_OscConfig+0xc44>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
 8002b90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	fa93 f2a3 	rbit	r2, r3
 8002ba4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ba8:	601a      	str	r2, [r3, #0]
  return result;
 8002baa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bae:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe f9f5 	bl	8000fb4 <HAL_GetTick>
 8002bca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bce:	e009      	b.n	8002be4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe f9f0 	bl	8000fb4 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e0fc      	b.n	8002dde <HAL_RCC_OscConfig+0xe02>
 8002be4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002be8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fa93 f2a3 	rbit	r2, r3
 8002bf8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bfc:	601a      	str	r2, [r3, #0]
  return result;
 8002bfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <HAL_RCC_OscConfig+0xc48>
 8002c18:	4b01      	ldr	r3, [pc, #4]	; (8002c20 <HAL_RCC_OscConfig+0xc44>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	e01e      	b.n	8002c5c <HAL_RCC_OscConfig+0xc80>
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000
 8002c24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	fa93 f2a3 	rbit	r2, r3
 8002c52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <HAL_RCC_OscConfig+0xe0c>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c64:	6011      	str	r1, [r2, #0]
 8002c66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	fa92 f1a2 	rbit	r1, r2
 8002c70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002c74:	6011      	str	r1, [r2, #0]
  return result;
 8002c76:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	fab2 f282 	clz	r2, r2
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f042 0220 	orr.w	r2, r2, #32
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f002 021f 	and.w	r2, r2, #31
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d09b      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xbf4>
 8002c98:	e0a0      	b.n	8002ddc <HAL_RCC_OscConfig+0xe00>
 8002c9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	fa93 f2a3 	rbit	r2, r3
 8002cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cb2:	601a      	str	r2, [r3, #0]
  return result;
 8002cb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cb8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2300      	movs	r3, #0
 8002cce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe f970 	bl	8000fb4 <HAL_GetTick>
 8002cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd8:	e009      	b.n	8002cee <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cda:	f7fe f96b 	bl	8000fb4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e077      	b.n	8002dde <HAL_RCC_OscConfig+0xe02>
 8002cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	fa93 f2a3 	rbit	r2, r3
 8002d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d06:	601a      	str	r2, [r3, #0]
  return result;
 8002d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_RCC_OscConfig+0xd4c>
 8002d22:	4b31      	ldr	r3, [pc, #196]	; (8002de8 <HAL_RCC_OscConfig+0xe0c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	e01b      	b.n	8002d60 <HAL_RCC_OscConfig+0xd84>
 8002d28:	f107 0320 	add.w	r3, r7, #32
 8002d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f107 0320 	add.w	r3, r7, #32
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f107 0318 	add.w	r3, r7, #24
 8002d46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f107 0318 	add.w	r3, r7, #24
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_RCC_OscConfig+0xe0c>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	f107 0210 	add.w	r2, r7, #16
 8002d64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d68:	6011      	str	r1, [r2, #0]
 8002d6a:	f107 0210 	add.w	r2, r7, #16
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	fa92 f1a2 	rbit	r1, r2
 8002d74:	f107 020c 	add.w	r2, r7, #12
 8002d78:	6011      	str	r1, [r2, #0]
  return result;
 8002d7a:	f107 020c 	add.w	r2, r7, #12
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	fab2 f282 	clz	r2, r2
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	f042 0220 	orr.w	r2, r2, #32
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	f002 021f 	and.w	r2, r2, #31
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f202 	lsl.w	r2, r1, r2
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d19e      	bne.n	8002cda <HAL_RCC_OscConfig+0xcfe>
 8002d9c:	e01e      	b.n	8002ddc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e018      	b.n	8002dde <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dac:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_RCC_OscConfig+0xe0c>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002db4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002db8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002dc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000

08002dec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b09e      	sub	sp, #120	; 0x78
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e162      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e04:	4b90      	ldr	r3, [pc, #576]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d910      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b8d      	ldr	r3, [pc, #564]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 0207 	bic.w	r2, r3, #7
 8002e1a:	498b      	ldr	r1, [pc, #556]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b89      	ldr	r3, [pc, #548]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e14a      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e40:	4b82      	ldr	r3, [pc, #520]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	497f      	ldr	r1, [pc, #508]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80dc 	beq.w	8003018 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d13c      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xf6>
 8002e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d102      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xa6>
 8002e8c:	4b6f      	ldr	r3, [pc, #444]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	e00f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0xc6>
 8002e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	667b      	str	r3, [r7, #100]	; 0x64
 8002ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eae:	4b67      	ldr	r3, [pc, #412]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002eb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eba:	fa92 f2a2 	rbit	r2, r2
 8002ebe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ec0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ec2:	fab2 f282 	clz	r2, r2
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f042 0220 	orr.w	r2, r2, #32
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f002 021f 	and.w	r2, r2, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d17b      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0f3      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d13c      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x178>
 8002eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x128>
 8002f0e:	4b4f      	ldr	r3, [pc, #316]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	e00f      	b.n	8002f34 <HAL_RCC_ClockConfig+0x148>
 8002f14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	647b      	str	r3, [r7, #68]	; 0x44
 8002f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f26:	643b      	str	r3, [r7, #64]	; 0x40
 8002f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f30:	4b46      	ldr	r3, [pc, #280]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f38:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f3c:	fa92 f2a2 	rbit	r2, r2
 8002f40:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f44:	fab2 f282 	clz	r2, r2
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f042 0220 	orr.w	r2, r2, #32
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f002 021f 	and.w	r2, r2, #31
 8002f54:	2101      	movs	r1, #1
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d13a      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0b2      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
 8002f64:	2302      	movs	r3, #2
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d102      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1a0>
 8002f86:	4b31      	ldr	r3, [pc, #196]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	e00d      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x1bc>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	2302      	movs	r3, #2
 8002f9a:	623b      	str	r3, [r7, #32]
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2202      	movs	r2, #2
 8002faa:	61ba      	str	r2, [r7, #24]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	fa92 f2a2 	rbit	r2, r2
 8002fb2:	617a      	str	r2, [r7, #20]
  return result;
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	fab2 f282 	clz	r2, r2
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	f042 0220 	orr.w	r2, r2, #32
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	f002 021f 	and.w	r2, r2, #31
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e079      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f023 0203 	bic.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	491a      	ldr	r1, [pc, #104]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7fd ffe4 	bl	8000fb4 <HAL_GetTick>
 8002fec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fd ffe0 	bl	8000fb4 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e061      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_RCC_ClockConfig+0x260>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 020c 	and.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1eb      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d214      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 0207 	bic.w	r2, r3, #7
 800302e:	4906      	ldr	r1, [pc, #24]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <HAL_RCC_ClockConfig+0x25c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e040      	b.n	80030ca <HAL_RCC_ClockConfig+0x2de>
 8003048:	40022000 	.word	0x40022000
 800304c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <HAL_RCC_ClockConfig+0x2e8>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	491a      	ldr	r1, [pc, #104]	; (80030d4 <HAL_RCC_ClockConfig+0x2e8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307a:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <HAL_RCC_ClockConfig+0x2e8>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4912      	ldr	r1, [pc, #72]	; (80030d4 <HAL_RCC_ClockConfig+0x2e8>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800308e:	f000 f829 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8003092:	4601      	mov	r1, r0
 8003094:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <HAL_RCC_ClockConfig+0x2e8>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309c:	22f0      	movs	r2, #240	; 0xf0
 800309e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	fa92 f2a2 	rbit	r2, r2
 80030a6:	60fa      	str	r2, [r7, #12]
  return result;
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	fab2 f282 	clz	r2, r2
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	40d3      	lsrs	r3, r2
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x2ec>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	fa21 f303 	lsr.w	r3, r1, r3
 80030ba:	4a08      	ldr	r2, [pc, #32]	; (80030dc <HAL_RCC_ClockConfig+0x2f0>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_RCC_ClockConfig+0x2f4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd ff32 	bl	8000f2c <HAL_InitTick>
  
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3778      	adds	r7, #120	; 0x78
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	0800a098 	.word	0x0800a098
 80030dc:	20000008 	.word	0x20000008
 80030e0:	2000000c 	.word	0x2000000c

080030e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b08b      	sub	sp, #44	; 0x2c
 80030e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b04      	cmp	r3, #4
 800310c:	d002      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x30>
 800310e:	2b08      	cmp	r3, #8
 8003110:	d003      	beq.n	800311a <HAL_RCC_GetSysClockFreq+0x36>
 8003112:	e03c      	b.n	800318e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003116:	623b      	str	r3, [r7, #32]
      break;
 8003118:	e03c      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003120:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003124:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	fa92 f2a2 	rbit	r2, r2
 800312c:	607a      	str	r2, [r7, #4]
  return result;
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	fab2 f282 	clz	r2, r2
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	40d3      	lsrs	r3, r2
 8003138:	4a1c      	ldr	r2, [pc, #112]	; (80031ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800313e:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	220f      	movs	r2, #15
 8003148:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	fa92 f2a2 	rbit	r2, r2
 8003150:	60fa      	str	r2, [r7, #12]
  return result;
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	fab2 f282 	clz	r2, r2
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	40d3      	lsrs	r3, r2
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800316c:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	fbb2 f2f3 	udiv	r2, r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
 800317c:	e004      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	4a0c      	ldr	r2, [pc, #48]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	623b      	str	r3, [r7, #32]
      break;
 800318c:	e002      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003190:	623b      	str	r3, [r7, #32]
      break;
 8003192:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003194:	6a3b      	ldr	r3, [r7, #32]
}
 8003196:	4618      	mov	r0, r3
 8003198:	372c      	adds	r7, #44	; 0x2c
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	007a1200 	.word	0x007a1200
 80031ac:	0800a0b0 	.word	0x0800a0b0
 80031b0:	0800a0c0 	.word	0x0800a0c0
 80031b4:	003d0900 	.word	0x003d0900

080031b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_RCC_GetHCLKFreq+0x14>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000008 	.word	0x20000008

080031d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031d6:	f7ff ffef 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031da:	4601      	mov	r1, r0
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	fa92 f2a2 	rbit	r2, r2
 80031f0:	603a      	str	r2, [r7, #0]
  return result;
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	fab2 f282 	clz	r2, r2
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	40d3      	lsrs	r3, r2
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x40>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	0800a0a8 	.word	0x0800a0a8

08003214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800321a:	f7ff ffcd 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 800321e:	4601      	mov	r1, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003228:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800322c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	fa92 f2a2 	rbit	r2, r2
 8003234:	603a      	str	r2, [r7, #0]
  return result;
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	fab2 f282 	clz	r2, r2
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	40d3      	lsrs	r3, r2
 8003240:	4a04      	ldr	r2, [pc, #16]	; (8003254 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003242:	5cd3      	ldrb	r3, [r2, r3]
 8003244:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	0800a0a8 	.word	0x0800a0a8

08003258 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b092      	sub	sp, #72	; 0x48
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003268:	2300      	movs	r3, #0
 800326a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80cd 	beq.w	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327c:	4b86      	ldr	r3, [pc, #536]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10e      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b83      	ldr	r3, [pc, #524]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	4a82      	ldr	r2, [pc, #520]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003292:	61d3      	str	r3, [r2, #28]
 8003294:	4b80      	ldr	r3, [pc, #512]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a6:	4b7d      	ldr	r3, [pc, #500]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d118      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b2:	4b7a      	ldr	r3, [pc, #488]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a79      	ldr	r2, [pc, #484]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032be:	f7fd fe79 	bl	8000fb4 <HAL_GetTick>
 80032c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	e008      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c6:	f7fd fe75 	bl	8000fb4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b64      	cmp	r3, #100	; 0x64
 80032d2:	d901      	bls.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0db      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	4b70      	ldr	r3, [pc, #448]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e4:	4b6c      	ldr	r3, [pc, #432]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d07d      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032fe:	429a      	cmp	r2, r3
 8003300:	d076      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003302:	4b65      	ldr	r3, [pc, #404]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	4b5e      	ldr	r3, [pc, #376]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	461a      	mov	r2, r3
 800332c:	2301      	movs	r3, #1
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003334:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800333e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	4b55      	ldr	r3, [pc, #340]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	461a      	mov	r2, r3
 8003350:	2300      	movs	r3, #0
 8003352:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003354:	4a50      	ldr	r2, [pc, #320]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003358:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800335a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d045      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fd fe26 	bl	8000fb4 <HAL_GetTick>
 8003368:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fd fe22 	bl	8000fb4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e086      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003382:	2302      	movs	r3, #2
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	2302      	movs	r3, #2
 8003390:	623b      	str	r3, [r7, #32]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	61fb      	str	r3, [r7, #28]
  return result;
 800339a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d102      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033b0:	4b39      	ldr	r3, [pc, #228]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	e007      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80033b6:	2302      	movs	r3, #2
 80033b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	4b35      	ldr	r3, [pc, #212]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2202      	movs	r2, #2
 80033c8:	613a      	str	r2, [r7, #16]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	fa92 f2a2 	rbit	r2, r2
 80033d0:	60fa      	str	r2, [r7, #12]
  return result;
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	fab2 f282 	clz	r2, r2
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	f002 021f 	and.w	r2, r2, #31
 80033e4:	2101      	movs	r1, #1
 80033e6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0bd      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033f0:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4926      	ldr	r1, [pc, #152]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003402:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003406:	2b01      	cmp	r3, #1
 8003408:	d105      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340a:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4a22      	ldr	r2, [pc, #136]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003414:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003422:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	491a      	ldr	r1, [pc, #104]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003430:	4313      	orrs	r3, r2
 8003432:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003440:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f023 0210 	bic.w	r2, r3, #16
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4912      	ldr	r1, [pc, #72]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800344e:	4313      	orrs	r3, r2
 8003450:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	490b      	ldr	r1, [pc, #44]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800346c:	4313      	orrs	r3, r2
 800346e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800348a:	4313      	orrs	r3, r2
 800348c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3748      	adds	r7, #72	; 0x48
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	40007000 	.word	0x40007000
 80034a0:	10908100 	.word	0x10908100

080034a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e049      	b.n	800354a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fb96 	bl	8000bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f000 f9aa 	bl	800383c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e049      	b.n	80035f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f841 	bl	8003600 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f000 f953 	bl	800383c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800362e:	2302      	movs	r3, #2
 8003630:	e0ff      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b14      	cmp	r3, #20
 800363e:	f200 80f0 	bhi.w	8003822 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	0800369d 	.word	0x0800369d
 800364c:	08003823 	.word	0x08003823
 8003650:	08003823 	.word	0x08003823
 8003654:	08003823 	.word	0x08003823
 8003658:	080036dd 	.word	0x080036dd
 800365c:	08003823 	.word	0x08003823
 8003660:	08003823 	.word	0x08003823
 8003664:	08003823 	.word	0x08003823
 8003668:	0800371f 	.word	0x0800371f
 800366c:	08003823 	.word	0x08003823
 8003670:	08003823 	.word	0x08003823
 8003674:	08003823 	.word	0x08003823
 8003678:	0800375f 	.word	0x0800375f
 800367c:	08003823 	.word	0x08003823
 8003680:	08003823 	.word	0x08003823
 8003684:	08003823 	.word	0x08003823
 8003688:	080037a1 	.word	0x080037a1
 800368c:	08003823 	.word	0x08003823
 8003690:	08003823 	.word	0x08003823
 8003694:	08003823 	.word	0x08003823
 8003698:	080037e1 	.word	0x080037e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f942 	bl	800392c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0208 	orr.w	r2, r2, #8
 80036b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0204 	bic.w	r2, r2, #4
 80036c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6999      	ldr	r1, [r3, #24]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	619a      	str	r2, [r3, #24]
      break;
 80036da:	e0a5      	b.n	8003828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f9a8 	bl	8003a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6999      	ldr	r1, [r3, #24]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	021a      	lsls	r2, r3, #8
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	619a      	str	r2, [r3, #24]
      break;
 800371c:	e084      	b.n	8003828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fa07 	bl	8003b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0208 	orr.w	r2, r2, #8
 8003738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0204 	bic.w	r2, r2, #4
 8003748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69d9      	ldr	r1, [r3, #28]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	61da      	str	r2, [r3, #28]
      break;
 800375c:	e064      	b.n	8003828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fa65 	bl	8003c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69d9      	ldr	r1, [r3, #28]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	021a      	lsls	r2, r3, #8
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	61da      	str	r2, [r3, #28]
      break;
 800379e:	e043      	b.n	8003828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 faa8 	bl	8003cfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0208 	orr.w	r2, r2, #8
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0204 	bic.w	r2, r2, #4
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037de:	e023      	b.n	8003828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fae6 	bl	8003db8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	021a      	lsls	r2, r3, #8
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003820:	e002      	b.n	8003828 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	75fb      	strb	r3, [r7, #23]
      break;
 8003826:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003830:	7dfb      	ldrb	r3, [r7, #23]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop

0800383c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a32      	ldr	r2, [pc, #200]	; (8003918 <TIM_Base_SetConfig+0xdc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d007      	beq.n	8003864 <TIM_Base_SetConfig+0x28>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385a:	d003      	beq.n	8003864 <TIM_Base_SetConfig+0x28>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a2f      	ldr	r2, [pc, #188]	; (800391c <TIM_Base_SetConfig+0xe0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d108      	bne.n	8003876 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a27      	ldr	r2, [pc, #156]	; (8003918 <TIM_Base_SetConfig+0xdc>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <TIM_Base_SetConfig+0x6a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003884:	d00f      	beq.n	80038a6 <TIM_Base_SetConfig+0x6a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a24      	ldr	r2, [pc, #144]	; (800391c <TIM_Base_SetConfig+0xe0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00b      	beq.n	80038a6 <TIM_Base_SetConfig+0x6a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a23      	ldr	r2, [pc, #140]	; (8003920 <TIM_Base_SetConfig+0xe4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d007      	beq.n	80038a6 <TIM_Base_SetConfig+0x6a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a22      	ldr	r2, [pc, #136]	; (8003924 <TIM_Base_SetConfig+0xe8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <TIM_Base_SetConfig+0x6a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a21      	ldr	r2, [pc, #132]	; (8003928 <TIM_Base_SetConfig+0xec>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d108      	bne.n	80038b8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <TIM_Base_SetConfig+0xdc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00b      	beq.n	80038fc <TIM_Base_SetConfig+0xc0>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <TIM_Base_SetConfig+0xe4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <TIM_Base_SetConfig+0xc0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <TIM_Base_SetConfig+0xe8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0xc0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <TIM_Base_SetConfig+0xec>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d103      	bne.n	8003904 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	615a      	str	r2, [r3, #20]
}
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40012c00 	.word	0x40012c00
 800391c:	40000400 	.word	0x40000400
 8003920:	40014000 	.word	0x40014000
 8003924:	40014400 	.word	0x40014400
 8003928:	40014800 	.word	0x40014800

0800392c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f023 0201 	bic.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f023 0302 	bic.w	r3, r3, #2
 8003978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a28      	ldr	r2, [pc, #160]	; (8003a28 <TIM_OC1_SetConfig+0xfc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00b      	beq.n	80039a4 <TIM_OC1_SetConfig+0x78>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a27      	ldr	r2, [pc, #156]	; (8003a2c <TIM_OC1_SetConfig+0x100>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d007      	beq.n	80039a4 <TIM_OC1_SetConfig+0x78>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a26      	ldr	r2, [pc, #152]	; (8003a30 <TIM_OC1_SetConfig+0x104>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d003      	beq.n	80039a4 <TIM_OC1_SetConfig+0x78>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a25      	ldr	r2, [pc, #148]	; (8003a34 <TIM_OC1_SetConfig+0x108>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d10c      	bne.n	80039be <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0308 	bic.w	r3, r3, #8
 80039aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f023 0304 	bic.w	r3, r3, #4
 80039bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <TIM_OC1_SetConfig+0xfc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00b      	beq.n	80039de <TIM_OC1_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <TIM_OC1_SetConfig+0x100>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <TIM_OC1_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <TIM_OC1_SetConfig+0x104>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d003      	beq.n	80039de <TIM_OC1_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <TIM_OC1_SetConfig+0x108>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d111      	bne.n	8003a02 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40014400 	.word	0x40014400
 8003a34:	40014800 	.word	0x40014800

08003a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f023 0210 	bic.w	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0320 	bic.w	r3, r3, #32
 8003a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <TIM_OC2_SetConfig+0xf0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10d      	bne.n	8003ab8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a1b      	ldr	r2, [pc, #108]	; (8003b28 <TIM_OC2_SetConfig+0xf0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00b      	beq.n	8003ad8 <TIM_OC2_SetConfig+0xa0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a1a      	ldr	r2, [pc, #104]	; (8003b2c <TIM_OC2_SetConfig+0xf4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d007      	beq.n	8003ad8 <TIM_OC2_SetConfig+0xa0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <TIM_OC2_SetConfig+0xf8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_OC2_SetConfig+0xa0>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a18      	ldr	r2, [pc, #96]	; (8003b34 <TIM_OC2_SetConfig+0xfc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d113      	bne.n	8003b00 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ade:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ae6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	40014000 	.word	0x40014000
 8003b30:	40014400 	.word	0x40014400
 8003b34:	40014800 	.word	0x40014800

08003b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <TIM_OC3_SetConfig+0xec>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10d      	bne.n	8003bb6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bb4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <TIM_OC3_SetConfig+0xec>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00b      	beq.n	8003bd6 <TIM_OC3_SetConfig+0x9e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <TIM_OC3_SetConfig+0xf0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d007      	beq.n	8003bd6 <TIM_OC3_SetConfig+0x9e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <TIM_OC3_SetConfig+0xf4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <TIM_OC3_SetConfig+0x9e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <TIM_OC3_SetConfig+0xf8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d113      	bne.n	8003bfe <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	621a      	str	r2, [r3, #32]
}
 8003c18:	bf00      	nop
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800

08003c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	031b      	lsls	r3, r3, #12
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a16      	ldr	r2, [pc, #88]	; (8003cec <TIM_OC4_SetConfig+0xb8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <TIM_OC4_SetConfig+0x7c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <TIM_OC4_SetConfig+0xbc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <TIM_OC4_SetConfig+0x7c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <TIM_OC4_SetConfig+0xc0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_OC4_SetConfig+0x7c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <TIM_OC4_SetConfig+0xc4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d109      	bne.n	8003cc4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	019b      	lsls	r3, r3, #6
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800

08003cfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	041b      	lsls	r3, r3, #16
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a15      	ldr	r2, [pc, #84]	; (8003da8 <TIM_OC5_SetConfig+0xac>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00b      	beq.n	8003d6e <TIM_OC5_SetConfig+0x72>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a14      	ldr	r2, [pc, #80]	; (8003dac <TIM_OC5_SetConfig+0xb0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d007      	beq.n	8003d6e <TIM_OC5_SetConfig+0x72>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <TIM_OC5_SetConfig+0xb4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_OC5_SetConfig+0x72>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <TIM_OC5_SetConfig+0xb8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d109      	bne.n	8003d82 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	621a      	str	r2, [r3, #32]
}
 8003d9c:	bf00      	nop
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40012c00 	.word	0x40012c00
 8003dac:	40014000 	.word	0x40014000
 8003db0:	40014400 	.word	0x40014400
 8003db4:	40014800 	.word	0x40014800

08003db8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	051b      	lsls	r3, r3, #20
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a16      	ldr	r2, [pc, #88]	; (8003e68 <TIM_OC6_SetConfig+0xb0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00b      	beq.n	8003e2c <TIM_OC6_SetConfig+0x74>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <TIM_OC6_SetConfig+0xb4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d007      	beq.n	8003e2c <TIM_OC6_SetConfig+0x74>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <TIM_OC6_SetConfig+0xb8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_OC6_SetConfig+0x74>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <TIM_OC6_SetConfig+0xbc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d109      	bne.n	8003e40 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	029b      	lsls	r3, r3, #10
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40014400 	.word	0x40014400
 8003e74:	40014800 	.word	0x40014800

08003e78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e060      	b.n	8003f56 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d115      	bne.n	8003f44 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	051b      	lsls	r3, r3, #20
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40012c00 	.word	0x40012c00

08003f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e040      	b.n	8003ffc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fc fec6 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	; 0x24
 8003f94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8c0 	bl	800412c <UART_SetConfig>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e022      	b.n	8003ffc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f9ec 	bl	800439c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fa73 	bl	80044e0 <UART_CheckIdleState>
 8003ffa:	4603      	mov	r3, r0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004018:	2b20      	cmp	r3, #32
 800401a:	f040 8082 	bne.w	8004122 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_UART_Transmit+0x26>
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e07a      	b.n	8004124 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_UART_Transmit+0x38>
 8004038:	2302      	movs	r3, #2
 800403a:	e073      	b.n	8004124 <HAL_UART_Transmit+0x120>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2221      	movs	r2, #33	; 0x21
 8004050:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004052:	f7fc ffaf 	bl	8000fb4 <HAL_GetTick>
 8004056:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	88fa      	ldrh	r2, [r7, #6]
 800405c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004070:	d108      	bne.n	8004084 <HAL_UART_Transmit+0x80>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	e003      	b.n	800408c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004088:	2300      	movs	r3, #0
 800408a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004094:	e02d      	b.n	80040f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2200      	movs	r2, #0
 800409e:	2180      	movs	r1, #128	; 0x80
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fa66 	bl	8004572 <UART_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e039      	b.n	8004124 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	881a      	ldrh	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c2:	b292      	uxth	r2, r2
 80040c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	3302      	adds	r3, #2
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e008      	b.n	80040e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	b292      	uxth	r2, r2
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3301      	adds	r3, #1
 80040de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1cb      	bne.n	8004096 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2200      	movs	r2, #0
 8004106:	2140      	movs	r1, #64	; 0x40
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 fa32 	bl	8004572 <UART_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e005      	b.n	8004124 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e000      	b.n	8004124 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004122:	2302      	movs	r3, #2
  }
}
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b8b      	ldr	r3, [pc, #556]	; (8004384 <UART_SetConfig+0x258>)
 8004158:	4013      	ands	r3, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	6979      	ldr	r1, [r7, #20]
 8004160:	430b      	orrs	r3, r1
 8004162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	430a      	orrs	r2, r1
 800419c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a79      	ldr	r2, [pc, #484]	; (8004388 <UART_SetConfig+0x25c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d121      	bne.n	80041ec <UART_SetConfig+0xc0>
 80041a8:	4b78      	ldr	r3, [pc, #480]	; (800438c <UART_SetConfig+0x260>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d817      	bhi.n	80041e4 <UART_SetConfig+0xb8>
 80041b4:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <UART_SetConfig+0x90>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041d9 	.word	0x080041d9
 80041c4:	080041df 	.word	0x080041df
 80041c8:	080041d3 	.word	0x080041d3
 80041cc:	2300      	movs	r3, #0
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e01e      	b.n	8004210 <UART_SetConfig+0xe4>
 80041d2:	2302      	movs	r3, #2
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e01b      	b.n	8004210 <UART_SetConfig+0xe4>
 80041d8:	2304      	movs	r3, #4
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e018      	b.n	8004210 <UART_SetConfig+0xe4>
 80041de:	2308      	movs	r3, #8
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e015      	b.n	8004210 <UART_SetConfig+0xe4>
 80041e4:	2310      	movs	r3, #16
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	bf00      	nop
 80041ea:	e011      	b.n	8004210 <UART_SetConfig+0xe4>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a67      	ldr	r2, [pc, #412]	; (8004390 <UART_SetConfig+0x264>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d102      	bne.n	80041fc <UART_SetConfig+0xd0>
 80041f6:	2300      	movs	r3, #0
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e009      	b.n	8004210 <UART_SetConfig+0xe4>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a64      	ldr	r2, [pc, #400]	; (8004394 <UART_SetConfig+0x268>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d102      	bne.n	800420c <UART_SetConfig+0xe0>
 8004206:	2300      	movs	r3, #0
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e001      	b.n	8004210 <UART_SetConfig+0xe4>
 800420c:	2310      	movs	r3, #16
 800420e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004218:	d15c      	bne.n	80042d4 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800421a:	7ffb      	ldrb	r3, [r7, #31]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d828      	bhi.n	8004272 <UART_SetConfig+0x146>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0xfc>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800424d 	.word	0x0800424d
 800422c:	08004255 	.word	0x08004255
 8004230:	0800425d 	.word	0x0800425d
 8004234:	08004273 	.word	0x08004273
 8004238:	08004263 	.word	0x08004263
 800423c:	08004273 	.word	0x08004273
 8004240:	08004273 	.word	0x08004273
 8004244:	08004273 	.word	0x08004273
 8004248:	0800426b 	.word	0x0800426b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800424c:	f7fe ffc0 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8004250:	61b8      	str	r0, [r7, #24]
        break;
 8004252:	e013      	b.n	800427c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004254:	f7fe ffde 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 8004258:	61b8      	str	r0, [r7, #24]
        break;
 800425a:	e00f      	b.n	800427c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800425c:	4b4e      	ldr	r3, [pc, #312]	; (8004398 <UART_SetConfig+0x26c>)
 800425e:	61bb      	str	r3, [r7, #24]
        break;
 8004260:	e00c      	b.n	800427c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004262:	f7fe ff3f 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8004266:	61b8      	str	r0, [r7, #24]
        break;
 8004268:	e008      	b.n	800427c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800426a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426e:	61bb      	str	r3, [r7, #24]
        break;
 8004270:	e004      	b.n	800427c <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	77bb      	strb	r3, [r7, #30]
        break;
 800427a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d074      	beq.n	800436c <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	005a      	lsls	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	441a      	add	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	fbb2 f3f3 	udiv	r3, r2, r3
 8004296:	b29b      	uxth	r3, r3
 8004298:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b0f      	cmp	r3, #15
 800429e:	d916      	bls.n	80042ce <UART_SetConfig+0x1a2>
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a6:	d212      	bcs.n	80042ce <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f023 030f 	bic.w	r3, r3, #15
 80042b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	b29a      	uxth	r2, r3
 80042be:	89fb      	ldrh	r3, [r7, #14]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	89fa      	ldrh	r2, [r7, #14]
 80042ca:	60da      	str	r2, [r3, #12]
 80042cc:	e04e      	b.n	800436c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	77bb      	strb	r3, [r7, #30]
 80042d2:	e04b      	b.n	800436c <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042d4:	7ffb      	ldrb	r3, [r7, #31]
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d827      	bhi.n	800432a <UART_SetConfig+0x1fe>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0x1b4>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	08004305 	.word	0x08004305
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	08004315 	.word	0x08004315
 80042ec:	0800432b 	.word	0x0800432b
 80042f0:	0800431b 	.word	0x0800431b
 80042f4:	0800432b 	.word	0x0800432b
 80042f8:	0800432b 	.word	0x0800432b
 80042fc:	0800432b 	.word	0x0800432b
 8004300:	08004323 	.word	0x08004323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004304:	f7fe ff64 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8004308:	61b8      	str	r0, [r7, #24]
        break;
 800430a:	e013      	b.n	8004334 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800430c:	f7fe ff82 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 8004310:	61b8      	str	r0, [r7, #24]
        break;
 8004312:	e00f      	b.n	8004334 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004314:	4b20      	ldr	r3, [pc, #128]	; (8004398 <UART_SetConfig+0x26c>)
 8004316:	61bb      	str	r3, [r7, #24]
        break;
 8004318:	e00c      	b.n	8004334 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431a:	f7fe fee3 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 800431e:	61b8      	str	r0, [r7, #24]
        break;
 8004320:	e008      	b.n	8004334 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004326:	61bb      	str	r3, [r7, #24]
        break;
 8004328:	e004      	b.n	8004334 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	77bb      	strb	r3, [r7, #30]
        break;
 8004332:	bf00      	nop
    }

    if (pclk != 0U)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d018      	beq.n	800436c <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	085a      	lsrs	r2, r3, #1
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	441a      	add	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	b29b      	uxth	r3, r3
 800434e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b0f      	cmp	r3, #15
 8004354:	d908      	bls.n	8004368 <UART_SetConfig+0x23c>
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435c:	d204      	bcs.n	8004368 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	e001      	b.n	800436c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004378:	7fbb      	ldrb	r3, [r7, #30]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	efff69f3 	.word	0xefff69f3
 8004388:	40013800 	.word	0x40013800
 800438c:	40021000 	.word	0x40021000
 8004390:	40004400 	.word	0x40004400
 8004394:	40004800 	.word	0x40004800
 8004398:	007a1200 	.word	0x007a1200

0800439c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01a      	beq.n	80044b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449a:	d10a      	bne.n	80044b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	605a      	str	r2, [r3, #4]
  }
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044f0:	f7fc fd60 	bl	8000fb4 <HAL_GetTick>
 80044f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b08      	cmp	r3, #8
 8004502:	d10e      	bne.n	8004522 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f82d 	bl	8004572 <UART_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e023      	b.n	800456a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d10e      	bne.n	800454e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f817 	bl	8004572 <UART_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e00d      	b.n	800456a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b09c      	sub	sp, #112	; 0x70
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	603b      	str	r3, [r7, #0]
 800457e:	4613      	mov	r3, r2
 8004580:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004582:	e0a5      	b.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800458a:	f000 80a1 	beq.w	80046d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458e:	f7fc fd11 	bl	8000fb4 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800459a:	429a      	cmp	r2, r3
 800459c:	d302      	bcc.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800459e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d13e      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045b8:	667b      	str	r3, [r7, #100]	; 0x64
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e6      	bne.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3308      	adds	r3, #8
 80045dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	663b      	str	r3, [r7, #96]	; 0x60
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80045f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e5      	bne.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e067      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d04f      	beq.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463e:	d147      	bne.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004648:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800465e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
 800466a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800466e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e6      	bne.n	800464a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3308      	adds	r3, #8
 8004682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	613b      	str	r3, [r7, #16]
   return(result);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	66bb      	str	r3, [r7, #104]	; 0x68
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3308      	adds	r3, #8
 800469a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800469c:	623a      	str	r2, [r7, #32]
 800469e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	69f9      	ldr	r1, [r7, #28]
 80046a2:	6a3a      	ldr	r2, [r7, #32]
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e5      	bne.n	800467c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e010      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69da      	ldr	r2, [r3, #28]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4013      	ands	r3, r2
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	f43f af4a 	beq.w	8004584 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3770      	adds	r7, #112	; 0x70
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004704:	2300      	movs	r3, #0
 8004706:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f001 fce5 	bl	80060da <VL53L0X_get_offset_calibration_data_micro_meter>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004714:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800472c:	2300      	movs	r3, #0
 800472e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	b2db      	uxtb	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	218a      	movs	r1, #138	; 0x8a
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f004 fee8 	bl	8009510 <VL53L0X_WrByte>
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8004744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004750:	b5b0      	push	{r4, r5, r7, lr}
 8004752:	b096      	sub	sp, #88	; 0x58
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800475e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004762:	2b00      	cmp	r3, #0
 8004764:	d107      	bne.n	8004776 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004766:	2200      	movs	r2, #0
 8004768:	2188      	movs	r1, #136	; 0x88
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f004 fed0 	bl	8009510 <VL53L0X_WrByte>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004784:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800478e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a9e      	ldr	r2, [pc, #632]	; (8004a10 <VL53L0X_DataInit+0x2c0>)
 8004796:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a9d      	ldr	r2, [pc, #628]	; (8004a14 <VL53L0X_DataInit+0x2c4>)
 800479e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fac2 	bl	8004d38 <VL53L0X_GetDeviceParameters>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80047ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d112      	bne.n	80047e8 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80047c2:	2300      	movs	r3, #0
 80047c4:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80047c6:	2300      	movs	r3, #0
 80047c8:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f103 0410 	add.w	r4, r3, #16
 80047d0:	f107 0510 	add.w	r5, r7, #16
 80047d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80047e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2264      	movs	r2, #100	; 0x64
 80047ec:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80047f6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004800:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800480a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004816:	2201      	movs	r2, #1
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f004 fe78 	bl	8009510 <VL53L0X_WrByte>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004828:	4313      	orrs	r3, r2
 800482a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800482e:	2201      	movs	r2, #1
 8004830:	21ff      	movs	r1, #255	; 0xff
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f004 fe6c 	bl	8009510 <VL53L0X_WrByte>
 8004838:	4603      	mov	r3, r0
 800483a:	461a      	mov	r2, r3
 800483c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004840:	4313      	orrs	r3, r2
 8004842:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004846:	2200      	movs	r2, #0
 8004848:	2100      	movs	r1, #0
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f004 fe60 	bl	8009510 <VL53L0X_WrByte>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004858:	4313      	orrs	r3, r2
 800485a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800485e:	f107 030f 	add.w	r3, r7, #15
 8004862:	461a      	mov	r2, r3
 8004864:	2191      	movs	r1, #145	; 0x91
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f004 fed4 	bl	8009614 <VL53L0X_RdByte>
 800486c:	4603      	mov	r3, r0
 800486e:	461a      	mov	r2, r3
 8004870:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004874:	4313      	orrs	r3, r2
 8004876:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004882:	2201      	movs	r2, #1
 8004884:	2100      	movs	r1, #0
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f004 fe42 	bl	8009510 <VL53L0X_WrByte>
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004894:	4313      	orrs	r3, r2
 8004896:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800489a:	2200      	movs	r2, #0
 800489c:	21ff      	movs	r1, #255	; 0xff
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f004 fe36 	bl	8009510 <VL53L0X_WrByte>
 80048a4:	4603      	mov	r3, r0
 80048a6:	461a      	mov	r2, r3
 80048a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80048b2:	2200      	movs	r2, #0
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f004 fe2a 	bl	8009510 <VL53L0X_WrByte>
 80048bc:	4603      	mov	r3, r0
 80048be:	461a      	mov	r2, r3
 80048c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80048ca:	2300      	movs	r3, #0
 80048cc:	653b      	str	r3, [r7, #80]	; 0x50
 80048ce:	e014      	b.n	80048fa <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80048d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d114      	bne.n	8004902 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80048d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2201      	movs	r2, #1
 80048de:	4619      	mov	r1, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fd51 	bl	8005388 <VL53L0X_SetLimitCheckEnable>
 80048e6:	4603      	mov	r3, r0
 80048e8:	461a      	mov	r2, r3
 80048ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80048f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f6:	3301      	adds	r3, #1
 80048f8:	653b      	str	r3, [r7, #80]	; 0x50
 80048fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fc:	2b05      	cmp	r3, #5
 80048fe:	dde7      	ble.n	80048d0 <VL53L0X_DataInit+0x180>
 8004900:	e000      	b.n	8004904 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004902:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004904:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800490c:	2200      	movs	r2, #0
 800490e:	2102      	movs	r1, #2
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fd39 	bl	8005388 <VL53L0X_SetLimitCheckEnable>
 8004916:	4603      	mov	r3, r0
 8004918:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800491c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004920:	2b00      	cmp	r3, #0
 8004922:	d107      	bne.n	8004934 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004924:	2200      	movs	r2, #0
 8004926:	2103      	movs	r1, #3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fd2d 	bl	8005388 <VL53L0X_SetLimitCheckEnable>
 800492e:	4603      	mov	r3, r0
 8004930:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004934:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004938:	2b00      	cmp	r3, #0
 800493a:	d107      	bne.n	800494c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800493c:	2200      	movs	r2, #0
 800493e:	2104      	movs	r1, #4
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fd21 	bl	8005388 <VL53L0X_SetLimitCheckEnable>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800494c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004950:	2b00      	cmp	r3, #0
 8004952:	d107      	bne.n	8004964 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004954:	2200      	movs	r2, #0
 8004956:	2105      	movs	r1, #5
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fd15 	bl	8005388 <VL53L0X_SetLimitCheckEnable>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004964:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004968:	2b00      	cmp	r3, #0
 800496a:	d108      	bne.n	800497e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800496c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004970:	2100      	movs	r1, #0
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fdb8 	bl	80054e8 <VL53L0X_SetLimitCheckValue>
 8004978:	4603      	mov	r3, r0
 800497a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800497e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004982:	2b00      	cmp	r3, #0
 8004984:	d108      	bne.n	8004998 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800498a:	2101      	movs	r1, #1
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fdab 	bl	80054e8 <VL53L0X_SetLimitCheckValue>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004998:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800499c:	2b00      	cmp	r3, #0
 800499e:	d108      	bne.n	80049b2 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80049a0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80049a4:	2102      	movs	r1, #2
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fd9e 	bl	80054e8 <VL53L0X_SetLimitCheckValue>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80049b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80049ba:	2200      	movs	r2, #0
 80049bc:	2103      	movs	r1, #3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fd92 	bl	80054e8 <VL53L0X_SetLimitCheckValue>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80049ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10f      	bne.n	80049f2 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	22ff      	movs	r2, #255	; 0xff
 80049d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80049da:	22ff      	movs	r2, #255	; 0xff
 80049dc:	2101      	movs	r1, #1
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f004 fd96 	bl	8009510 <VL53L0X_WrByte>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80049f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d103      	bne.n	8004a02 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8004a02:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3758      	adds	r7, #88	; 0x58
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	00016b85 	.word	0x00016b85
 8004a14:	000970a4 	.word	0x000970a4

08004a18 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004a18:	b5b0      	push	{r4, r5, r7, lr}
 8004a1a:	b09e      	sub	sp, #120	; 0x78
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004a26:	f107 031c 	add.w	r3, r7, #28
 8004a2a:	2240      	movs	r2, #64	; 0x40
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f004 fed3 	bl	80097da <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004a54:	2101      	movs	r1, #1
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f002 fa95 	bl	8006f86 <VL53L0X_get_info_from_device>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004a68:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8004a70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004a74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d80d      	bhi.n	8004a98 <VL53L0X_StaticInit+0x80>
 8004a7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d102      	bne.n	8004a8a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d806      	bhi.n	8004a98 <VL53L0X_StaticInit+0x80>
 8004a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10e      	bne.n	8004ab0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8004a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a94:	2b0c      	cmp	r3, #12
 8004a96:	d90b      	bls.n	8004ab0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004a98:	f107 0218 	add.w	r2, r7, #24
 8004a9c:	f107 0314 	add.w	r3, r7, #20
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f001 fd14 	bl	80064d0 <VL53L0X_perform_ref_spad_management>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004aae:	e009      	b.n	8004ac4 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f001 ff15 	bl	80068e8 <VL53L0X_set_reference_spads>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004ac4:	4b94      	ldr	r3, [pc, #592]	; (8004d18 <VL53L0X_StaticInit+0x300>)
 8004ac6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004ac8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10f      	bne.n	8004af0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004ad6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004ada:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004ae8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aea:	e001      	b.n	8004af0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004aec:	4b8a      	ldr	r3, [pc, #552]	; (8004d18 <VL53L0X_StaticInit+0x300>)
 8004aee:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004af0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d106      	bne.n	8004b06 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8004af8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f003 fde8 	bl	80086d0 <VL53L0X_load_tuning_settings>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8004b06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	2304      	movs	r3, #4
 8004b14:	2200      	movs	r2, #0
 8004b16:	2100      	movs	r1, #0
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f001 f90d 	bl	8005d38 <VL53L0X_SetGpioConfig>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b24:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d121      	bne.n	8004b70 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	21ff      	movs	r1, #255	; 0xff
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f004 fced 	bl	8009510 <VL53L0X_WrByte>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004b3c:	f107 031a 	add.w	r3, r7, #26
 8004b40:	461a      	mov	r2, r3
 8004b42:	2184      	movs	r1, #132	; 0x84
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f004 fd8f 	bl	8009668 <VL53L0X_RdWord>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004b58:	2200      	movs	r2, #0
 8004b5a:	21ff      	movs	r1, #255	; 0xff
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f004 fcd7 	bl	8009510 <VL53L0X_WrByte>
 8004b62:	4603      	mov	r3, r0
 8004b64:	461a      	mov	r2, r3
 8004b66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b70:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004b78:	8b7b      	ldrh	r3, [r7, #26]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004b84:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d108      	bne.n	8004b9e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004b8c:	f107 031c 	add.w	r3, r7, #28
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f8d0 	bl	8004d38 <VL53L0X_GetDeviceParameters>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8004b9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d110      	bne.n	8004bc8 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004ba6:	f107 0319 	add.w	r3, r7, #25
 8004baa:	4619      	mov	r1, r3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f9ae 	bl	8004f0e <VL53L0X_GetFractionEnable>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004bb8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d103      	bne.n	8004bc8 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004bc0:	7e7a      	ldrb	r2, [r7, #25]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004bc8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10e      	bne.n	8004bee <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f103 0410 	add.w	r4, r3, #16
 8004bd6:	f107 051c 	add.w	r5, r7, #28
 8004bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004be6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004bee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d111      	bne.n	8004c1a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8004bf6:	f107 0319 	add.w	r3, r7, #25
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f004 fd08 	bl	8009614 <VL53L0X_RdByte>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004c0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004c12:	7e7a      	ldrb	r2, [r7, #25]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004c1a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d107      	bne.n	8004c32 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004c22:	2200      	movs	r2, #0
 8004c24:	2100      	movs	r1, #0
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f9e6 	bl	8004ff8 <VL53L0X_SetSequenceStepEnable>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004c32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d107      	bne.n	8004c4a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9da 	bl	8004ff8 <VL53L0X_SetSequenceStepEnable>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004c4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2203      	movs	r2, #3
 8004c56:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004c5a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004c62:	f107 0313 	add.w	r3, r7, #19
 8004c66:	461a      	mov	r2, r3
 8004c68:	2100      	movs	r1, #0
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f9ac 	bl	8004fc8 <VL53L0X_GetVcselPulsePeriod>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004c7e:	7cfa      	ldrb	r2, [r7, #19]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004c86:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004c8e:	f107 0313 	add.w	r3, r7, #19
 8004c92:	461a      	mov	r2, r3
 8004c94:	2101      	movs	r1, #1
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f996 	bl	8004fc8 <VL53L0X_GetVcselPulsePeriod>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004ca2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d103      	bne.n	8004cb2 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004caa:	7cfa      	ldrb	r2, [r7, #19]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004cb2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8004cba:	f107 030c 	add.w	r3, r7, #12
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f002 fee0 	bl	8007a88 <get_sequence_step_timeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d103      	bne.n	8004cde <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004cde:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8004ce6:	f107 030c 	add.w	r3, r7, #12
 8004cea:	461a      	mov	r2, r3
 8004cec:	2104      	movs	r1, #4
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f002 feca 	bl	8007a88 <get_sequence_step_timeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cfa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3770      	adds	r7, #112	; 0x70
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bdb0      	pop	{r4, r5, r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000014 	.word	0x20000014

08004d1c <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8004d24:	239d      	movs	r3, #157	; 0x9d
 8004d26:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8004d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8cc 	bl	8004ee8 <VL53L0X_GetDeviceMode>
 8004d50:	4603      	mov	r3, r0
 8004d52:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d107      	bne.n	8004d6c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	3308      	adds	r3, #8
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa94 	bl	8005290 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2200      	movs	r2, #0
 8004d78:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8004d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	3310      	adds	r3, #16
 8004d86:	4619      	mov	r1, r3
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 faca 	bl	8005322 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8004d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d107      	bne.n	8004daa <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff fcaa 	bl	80046fa <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8004da6:	4603      	mov	r3, r0
 8004da8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8004daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d134      	bne.n	8004e1c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	e02a      	b.n	8004e0e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d12a      	bne.n	8004e16 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	b299      	uxth	r1, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	4413      	add	r3, r2
 8004dce:	3304      	adds	r3, #4
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fbea 	bl	80055ac <VL53L0X_GetLimitCheckValue>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8004de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d117      	bne.n	8004e1a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	b299      	uxth	r1, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	3318      	adds	r3, #24
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	4413      	add	r3, r2
 8004df6:	461a      	mov	r2, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fb51 	bl	80054a0 <VL53L0X_GetLimitCheckEnable>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	461a      	mov	r2, r3
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b05      	cmp	r3, #5
 8004e12:	ddd1      	ble.n	8004db8 <VL53L0X_GetDeviceParameters+0x80>
 8004e14:	e002      	b.n	8004e1c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8004e1a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d107      	bne.n	8004e34 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	333c      	adds	r3, #60	; 0x3c
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fc4c 	bl	80056c8 <VL53L0X_GetWrapAroundCheckEnable>
 8004e30:	4603      	mov	r3, r0
 8004e32:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d107      	bne.n	8004e4c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f895 	bl	8004f72 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	2b15      	cmp	r3, #21
 8004e6c:	d832      	bhi.n	8004ed4 <VL53L0X_SetDeviceMode+0x7c>
 8004e6e:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <VL53L0X_SetDeviceMode+0x1c>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004ecd 	.word	0x08004ecd
 8004e78:	08004ecd 	.word	0x08004ecd
 8004e7c:	08004ed5 	.word	0x08004ed5
 8004e80:	08004ecd 	.word	0x08004ecd
 8004e84:	08004ed5 	.word	0x08004ed5
 8004e88:	08004ed5 	.word	0x08004ed5
 8004e8c:	08004ed5 	.word	0x08004ed5
 8004e90:	08004ed5 	.word	0x08004ed5
 8004e94:	08004ed5 	.word	0x08004ed5
 8004e98:	08004ed5 	.word	0x08004ed5
 8004e9c:	08004ed5 	.word	0x08004ed5
 8004ea0:	08004ed5 	.word	0x08004ed5
 8004ea4:	08004ed5 	.word	0x08004ed5
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	08004ed5 	.word	0x08004ed5
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004ed5 	.word	0x08004ed5
 8004eb8:	08004ed5 	.word	0x08004ed5
 8004ebc:	08004ed5 	.word	0x08004ed5
 8004ec0:	08004ed5 	.word	0x08004ed5
 8004ec4:	08004ecd 	.word	0x08004ecd
 8004ec8:	08004ecd 	.word	0x08004ecd
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	78fa      	ldrb	r2, [r7, #3]
 8004ed0:	741a      	strb	r2, [r3, #16]
		break;
 8004ed2:	e001      	b.n	8004ed8 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004ed4:	23f8      	movs	r3, #248	; 0xf8
 8004ed6:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	7c1a      	ldrb	r2, [r3, #16]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	2109      	movs	r1, #9
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f004 fb77 	bl	8009614 <VL53L0X_RdByte>
 8004f26:	4603      	mov	r3, r0
 8004f28:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f003 fa26 	bl	80083ae <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8004f62:	4603      	mov	r3, r0
 8004f64:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8004f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004f80:	6839      	ldr	r1, [r7, #0]
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f003 faf3 	bl	800856e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8004f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	70fb      	strb	r3, [r7, #3]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8004fac:	78ba      	ldrb	r2, [r7, #2]
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f002 ff3b 	bl	8007e2e <VL53L0X_set_vcsel_pulse_period>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8004fda:	7afb      	ldrb	r3, [r7, #11]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f003 f9ad 	bl	8008340 <VL53L0X_get_vcsel_pulse_period>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
 8005004:	4613      	mov	r3, r2
 8005006:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005008:	2300      	movs	r3, #0
 800500a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005014:	f107 030f 	add.w	r3, r7, #15
 8005018:	461a      	mov	r2, r3
 800501a:	2101      	movs	r1, #1
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f004 faf9 	bl	8009614 <VL53L0X_RdByte>
 8005022:	4603      	mov	r3, r0
 8005024:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800502a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d15a      	bne.n	80050e8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8005032:	78bb      	ldrb	r3, [r7, #2]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d12b      	bne.n	8005090 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	2b04      	cmp	r3, #4
 800503c:	d825      	bhi.n	800508a <VL53L0X_SetSequenceStepEnable+0x92>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005059 	.word	0x08005059
 8005048:	08005063 	.word	0x08005063
 800504c:	0800506d 	.word	0x0800506d
 8005050:	08005077 	.word	0x08005077
 8005054:	08005081 	.word	0x08005081
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005058:	7dbb      	ldrb	r3, [r7, #22]
 800505a:	f043 0310 	orr.w	r3, r3, #16
 800505e:	75bb      	strb	r3, [r7, #22]
				break;
 8005060:	e043      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005062:	7dbb      	ldrb	r3, [r7, #22]
 8005064:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005068:	75bb      	strb	r3, [r7, #22]
				break;
 800506a:	e03e      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800506c:	7dbb      	ldrb	r3, [r7, #22]
 800506e:	f043 0304 	orr.w	r3, r3, #4
 8005072:	75bb      	strb	r3, [r7, #22]
				break;
 8005074:	e039      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005076:	7dbb      	ldrb	r3, [r7, #22]
 8005078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800507c:	75bb      	strb	r3, [r7, #22]
				break;
 800507e:	e034      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005080:	7dbb      	ldrb	r3, [r7, #22]
 8005082:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005086:	75bb      	strb	r3, [r7, #22]
				break;
 8005088:	e02f      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800508a:	23fc      	movs	r3, #252	; 0xfc
 800508c:	75fb      	strb	r3, [r7, #23]
 800508e:	e02c      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	2b04      	cmp	r3, #4
 8005094:	d825      	bhi.n	80050e2 <VL53L0X_SetSequenceStepEnable+0xea>
 8005096:	a201      	add	r2, pc, #4	; (adr r2, 800509c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050b1 	.word	0x080050b1
 80050a0:	080050bb 	.word	0x080050bb
 80050a4:	080050c5 	.word	0x080050c5
 80050a8:	080050cf 	.word	0x080050cf
 80050ac:	080050d9 	.word	0x080050d9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80050b0:	7dbb      	ldrb	r3, [r7, #22]
 80050b2:	f023 0310 	bic.w	r3, r3, #16
 80050b6:	75bb      	strb	r3, [r7, #22]
				break;
 80050b8:	e017      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80050ba:	7dbb      	ldrb	r3, [r7, #22]
 80050bc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80050c0:	75bb      	strb	r3, [r7, #22]
				break;
 80050c2:	e012      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80050c4:	7dbb      	ldrb	r3, [r7, #22]
 80050c6:	f023 0304 	bic.w	r3, r3, #4
 80050ca:	75bb      	strb	r3, [r7, #22]
				break;
 80050cc:	e00d      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80050ce:	7dbb      	ldrb	r3, [r7, #22]
 80050d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d4:	75bb      	strb	r3, [r7, #22]
				break;
 80050d6:	e008      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80050d8:	7dbb      	ldrb	r3, [r7, #22]
 80050da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050de:	75bb      	strb	r3, [r7, #22]
				break;
 80050e0:	e003      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80050e2:	23fc      	movs	r3, #252	; 0xfc
 80050e4:	75fb      	strb	r3, [r7, #23]
 80050e6:	e000      	b.n	80050ea <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80050e8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	7dba      	ldrb	r2, [r7, #22]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d01e      	beq.n	8005130 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80050f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d107      	bne.n	800510a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80050fa:	7dbb      	ldrb	r3, [r7, #22]
 80050fc:	461a      	mov	r2, r3
 80050fe:	2101      	movs	r1, #1
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f004 fa05 	bl	8009510 <VL53L0X_WrByte>
 8005106:	4603      	mov	r3, r0
 8005108:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800510a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	7dba      	ldrb	r2, [r7, #22]
 8005116:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800511a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005128:	6939      	ldr	r1, [r7, #16]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ff0e 	bl	8004f4c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005130:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	607b      	str	r3, [r7, #4]
 8005146:	460b      	mov	r3, r1
 8005148:	72fb      	strb	r3, [r7, #11]
 800514a:	4613      	mov	r3, r2
 800514c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800514e:	2300      	movs	r3, #0
 8005150:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005158:	7afb      	ldrb	r3, [r7, #11]
 800515a:	2b04      	cmp	r3, #4
 800515c:	d836      	bhi.n	80051cc <sequence_step_enabled+0x90>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <sequence_step_enabled+0x28>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	08005179 	.word	0x08005179
 8005168:	0800518b 	.word	0x0800518b
 800516c:	0800519d 	.word	0x0800519d
 8005170:	080051af 	.word	0x080051af
 8005174:	080051c1 	.word	0x080051c1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005178:	7abb      	ldrb	r3, [r7, #10]
 800517a:	111b      	asrs	r3, r3, #4
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	b2da      	uxtb	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	701a      	strb	r2, [r3, #0]
		break;
 8005188:	e022      	b.n	80051d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800518a:	7abb      	ldrb	r3, [r7, #10]
 800518c:	10db      	asrs	r3, r3, #3
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	b2da      	uxtb	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	701a      	strb	r2, [r3, #0]
		break;
 800519a:	e019      	b.n	80051d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800519c:	7abb      	ldrb	r3, [r7, #10]
 800519e:	109b      	asrs	r3, r3, #2
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	701a      	strb	r2, [r3, #0]
		break;
 80051ac:	e010      	b.n	80051d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80051ae:	7abb      	ldrb	r3, [r7, #10]
 80051b0:	119b      	asrs	r3, r3, #6
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	701a      	strb	r2, [r3, #0]
		break;
 80051be:	e007      	b.n	80051d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80051c0:	7abb      	ldrb	r3, [r7, #10]
 80051c2:	09db      	lsrs	r3, r3, #7
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	701a      	strb	r2, [r3, #0]
		break;
 80051ca:	e001      	b.n	80051d0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80051cc:	23fc      	movs	r3, #252	; 0xfc
 80051ce:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80051f2:	f107 030e 	add.w	r3, r7, #14
 80051f6:	461a      	mov	r2, r3
 80051f8:	2101      	movs	r1, #1
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f004 fa0a 	bl	8009614 <VL53L0X_RdByte>
 8005200:	4603      	mov	r3, r0
 8005202:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d107      	bne.n	800521c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800520c:	7bba      	ldrb	r2, [r7, #14]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2100      	movs	r1, #0
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff ff92 	bl	800513c <sequence_step_enabled>
 8005218:	4603      	mov	r3, r0
 800521a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800521c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d108      	bne.n	8005236 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005224:	7bba      	ldrb	r2, [r7, #14]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	3302      	adds	r3, #2
 800522a:	2101      	movs	r1, #1
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff ff85 	bl	800513c <sequence_step_enabled>
 8005232:	4603      	mov	r3, r0
 8005234:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d108      	bne.n	8005250 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800523e:	7bba      	ldrb	r2, [r7, #14]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	3301      	adds	r3, #1
 8005244:	2102      	movs	r1, #2
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff ff78 	bl	800513c <sequence_step_enabled>
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d108      	bne.n	800526a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005258:	7bba      	ldrb	r2, [r7, #14]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	3303      	adds	r3, #3
 800525e:	2103      	movs	r1, #3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff ff6b 	bl	800513c <sequence_step_enabled>
 8005266:	4603      	mov	r3, r0
 8005268:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800526a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d108      	bne.n	8005284 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8005272:	7bba      	ldrb	r2, [r7, #14]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	3304      	adds	r3, #4
 8005278:	2104      	movs	r1, #4
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff ff5e 	bl	800513c <sequence_step_enabled>
 8005280:	4603      	mov	r3, r0
 8005282:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005284:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800529a:	2300      	movs	r3, #0
 800529c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800529e:	f107 030c 	add.w	r3, r7, #12
 80052a2:	461a      	mov	r2, r3
 80052a4:	21f8      	movs	r1, #248	; 0xf8
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f004 f9de 	bl	8009668 <VL53L0X_RdWord>
 80052ac:	4603      	mov	r3, r0
 80052ae:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80052b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d108      	bne.n	80052ca <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80052b8:	f107 0308 	add.w	r3, r7, #8
 80052bc:	461a      	mov	r2, r3
 80052be:	2104      	movs	r1, #4
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f004 fa09 	bl	80096d8 <VL53L0X_RdDWord>
 80052c6:	4603      	mov	r3, r0
 80052c8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80052ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10c      	bne.n	80052ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80052d2:	89bb      	ldrh	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	89ba      	ldrh	r2, [r7, #12]
 80052dc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80052ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	7f1b      	ldrb	r3, [r3, #28]
 800530a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	7bba      	ldrb	r2, [r7, #14]
 8005310:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005312:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800532c:	2300      	movs	r3, #0
 800532e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005330:	f107 030e 	add.w	r3, r7, #14
 8005334:	461a      	mov	r2, r3
 8005336:	2120      	movs	r1, #32
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f004 f995 	bl	8009668 <VL53L0X_RdWord>
 800533e:	4603      	mov	r3, r0
 8005340:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005342:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d118      	bne.n	800537c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800534a:	89fb      	ldrh	r3, [r7, #14]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d109      	bne.n	8005364 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	771a      	strb	r2, [r3, #28]
 8005362:	e00b      	b.n	800537c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005364:	89fb      	ldrh	r3, [r7, #14]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800537c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	807b      	strh	r3, [r7, #2]
 8005394:	4613      	mov	r3, r2
 8005396:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005398:	2300      	movs	r3, #0
 800539a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80053a8:	887b      	ldrh	r3, [r7, #2]
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d902      	bls.n	80053b4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80053ae:	23fc      	movs	r3, #252	; 0xfc
 80053b0:	75fb      	strb	r3, [r7, #23]
 80053b2:	e05b      	b.n	800546c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80053b4:	787b      	ldrb	r3, [r7, #1]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80053c2:	2301      	movs	r3, #1
 80053c4:	73bb      	strb	r3, [r7, #14]
 80053c6:	e00a      	b.n	80053de <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80053c8:	887b      	ldrh	r3, [r7, #2]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	330c      	adds	r3, #12
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80053da:	2301      	movs	r3, #1
 80053dc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80053de:	887b      	ldrh	r3, [r7, #2]
 80053e0:	2b05      	cmp	r3, #5
 80053e2:	d841      	bhi.n	8005468 <VL53L0X_SetLimitCheckEnable+0xe0>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <VL53L0X_SetLimitCheckEnable+0x64>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005405 	.word	0x08005405
 80053f0:	0800540f 	.word	0x0800540f
 80053f4:	08005425 	.word	0x08005425
 80053f8:	0800542f 	.word	0x0800542f
 80053fc:	08005439 	.word	0x08005439
 8005400:	08005451 	.word	0x08005451

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	7bfa      	ldrb	r2, [r7, #15]
 8005408:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800540c:	e02e      	b.n	800546c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005412:	b29b      	uxth	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	2144      	movs	r1, #68	; 0x44
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f004 f89d 	bl	8009558 <VL53L0X_WrWord>
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]

			break;
 8005422:	e023      	b.n	800546c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800542c:	e01e      	b.n	800546c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	7bfa      	ldrb	r2, [r7, #15]
 8005432:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005436:	e019      	b.n	800546c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005438:	7bbb      	ldrb	r3, [r7, #14]
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800543e:	7b7b      	ldrb	r3, [r7, #13]
 8005440:	22fe      	movs	r2, #254	; 0xfe
 8005442:	2160      	movs	r1, #96	; 0x60
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f004 f8b1 	bl	80095ac <VL53L0X_UpdateByte>
 800544a:	4603      	mov	r3, r0
 800544c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800544e:	e00d      	b.n	800546c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005450:	7bbb      	ldrb	r3, [r7, #14]
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005456:	7b7b      	ldrb	r3, [r7, #13]
 8005458:	22ef      	movs	r2, #239	; 0xef
 800545a:	2160      	movs	r1, #96	; 0x60
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f004 f8a5 	bl	80095ac <VL53L0X_UpdateByte>
 8005462:	4603      	mov	r3, r0
 8005464:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005466:	e001      	b.n	800546c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005468:	23fc      	movs	r3, #252	; 0xfc
 800546a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800546c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10f      	bne.n	8005494 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005474:	787b      	ldrb	r3, [r7, #1]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800547a:	887b      	ldrh	r3, [r7, #2]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	4413      	add	r3, r2
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005486:	e005      	b.n	8005494 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005488:	887b      	ldrh	r3, [r7, #2]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	4413      	add	r3, r2
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005494:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	460b      	mov	r3, r1
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80054b2:	897b      	ldrh	r3, [r7, #10]
 80054b4:	2b05      	cmp	r3, #5
 80054b6:	d905      	bls.n	80054c4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80054b8:	23fc      	movs	r3, #252	; 0xfc
 80054ba:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e008      	b.n	80054d6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80054c4:	897b      	ldrh	r3, [r7, #10]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ce:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	7dba      	ldrb	r2, [r7, #22]
 80054d4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80054d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	460b      	mov	r3, r1
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80054fa:	897b      	ldrh	r3, [r7, #10]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005504:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005506:	7dbb      	ldrb	r3, [r7, #22]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d107      	bne.n	800551c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800550c:	897b      	ldrh	r3, [r7, #10]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	330c      	adds	r3, #12
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]
 800551a:	e040      	b.n	800559e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800551c:	897b      	ldrh	r3, [r7, #10]
 800551e:	2b05      	cmp	r3, #5
 8005520:	d830      	bhi.n	8005584 <VL53L0X_SetLimitCheckValue+0x9c>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <VL53L0X_SetLimitCheckValue+0x40>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	08005541 	.word	0x08005541
 800552c:	08005549 	.word	0x08005549
 8005530:	0800555f 	.word	0x0800555f
 8005534:	08005567 	.word	0x08005567
 8005538:	0800556f 	.word	0x0800556f
 800553c:	0800556f 	.word	0x0800556f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005546:	e01f      	b.n	8005588 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800554c:	b29b      	uxth	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	2144      	movs	r1, #68	; 0x44
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f004 f800 	bl	8009558 <VL53L0X_WrWord>
 8005558:	4603      	mov	r3, r0
 800555a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800555c:	e014      	b.n	8005588 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005564:	e010      	b.n	8005588 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800556c:	e00c      	b.n	8005588 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005572:	b29b      	uxth	r3, r3
 8005574:	461a      	mov	r2, r3
 8005576:	2164      	movs	r1, #100	; 0x64
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f003 ffed 	bl	8009558 <VL53L0X_WrWord>
 800557e:	4603      	mov	r3, r0
 8005580:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005582:	e001      	b.n	8005588 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005584:	23fc      	movs	r3, #252	; 0xfc
 8005586:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005588:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d106      	bne.n	800559e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005590:	897b      	ldrh	r3, [r7, #10]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	330c      	adds	r3, #12
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800559e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop

080055ac <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	460b      	mov	r3, r1
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80055c2:	897b      	ldrh	r3, [r7, #10]
 80055c4:	2b05      	cmp	r3, #5
 80055c6:	d847      	bhi.n	8005658 <VL53L0X_GetLimitCheckValue+0xac>
 80055c8:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <VL53L0X_GetLimitCheckValue+0x24>)
 80055ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ce:	bf00      	nop
 80055d0:	080055e9 	.word	0x080055e9
 80055d4:	080055f5 	.word	0x080055f5
 80055d8:	0800561b 	.word	0x0800561b
 80055dc:	08005627 	.word	0x08005627
 80055e0:	08005633 	.word	0x08005633
 80055e4:	08005633 	.word	0x08005633

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ec:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	77bb      	strb	r3, [r7, #30]
		break;
 80055f2:	e033      	b.n	800565c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80055f4:	f107 0316 	add.w	r3, r7, #22
 80055f8:	461a      	mov	r2, r3
 80055fa:	2144      	movs	r1, #68	; 0x44
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f004 f833 	bl	8009668 <VL53L0X_RdWord>
 8005602:	4603      	mov	r3, r0
 8005604:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005606:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800560e:	8afb      	ldrh	r3, [r7, #22]
 8005610:	025b      	lsls	r3, r3, #9
 8005612:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005614:	2301      	movs	r3, #1
 8005616:	77bb      	strb	r3, [r7, #30]
		break;
 8005618:	e020      	b.n	800565c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	77bb      	strb	r3, [r7, #30]
		break;
 8005624:	e01a      	b.n	800565c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	77bb      	strb	r3, [r7, #30]
		break;
 8005630:	e014      	b.n	800565c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005632:	f107 0316 	add.w	r3, r7, #22
 8005636:	461a      	mov	r2, r3
 8005638:	2164      	movs	r1, #100	; 0x64
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f004 f814 	bl	8009668 <VL53L0X_RdWord>
 8005640:	4603      	mov	r3, r0
 8005642:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005644:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800564c:	8afb      	ldrh	r3, [r7, #22]
 800564e:	025b      	lsls	r3, r3, #9
 8005650:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	77bb      	strb	r3, [r7, #30]
		break;
 8005656:	e001      	b.n	800565c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005658:	23fc      	movs	r3, #252	; 0xfc
 800565a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800565c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d12a      	bne.n	80056ba <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005664:	7fbb      	ldrb	r3, [r7, #30]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d124      	bne.n	80056b4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d110      	bne.n	8005692 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005670:	897b      	ldrh	r3, [r7, #10]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	330c      	adds	r3, #12
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005684:	897b      	ldrh	r3, [r7, #10]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005690:	e013      	b.n	80056ba <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005698:	897b      	ldrh	r3, [r7, #10]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	330c      	adds	r3, #12
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80056a6:	897b      	ldrh	r3, [r7, #10]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80056b2:	e002      	b.n	80056ba <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80056ba:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop

080056c8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80056d6:	f107 030e 	add.w	r3, r7, #14
 80056da:	461a      	mov	r2, r3
 80056dc:	2101      	movs	r1, #1
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f003 ff98 	bl	8009614 <VL53L0X_RdByte>
 80056e4:	4603      	mov	r3, r0
 80056e6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80056e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10e      	bne.n	800570e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80056f0:	7bba      	ldrb	r2, [r7, #14]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80056f8:	7bbb      	ldrb	r3, [r7, #14]
 80056fa:	b25b      	sxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	da03      	bge.n	8005708 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2201      	movs	r2, #1
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e002      	b.n	800570e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800570e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005720:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005734:	2300      	movs	r3, #0
 8005736:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005738:	f107 030e 	add.w	r3, r7, #14
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fbd2 	bl	8004ee8 <VL53L0X_GetDeviceMode>
 8005744:	4603      	mov	r3, r0
 8005746:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005750:	7bbb      	ldrb	r3, [r7, #14]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d104      	bne.n	8005760 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f898 	bl	800588c <VL53L0X_StartMeasurement>
 800575c:	4603      	mov	r3, r0
 800575e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f001 fb3f 	bl	8006dec <VL53L0X_measurement_poll_for_completion>
 800576e:	4603      	mov	r3, r0
 8005770:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800577a:	7bbb      	ldrb	r3, [r7, #14]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d103      	bne.n	8005788 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2203      	movs	r2, #3
 8005784:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80057a4:	2301      	movs	r3, #1
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f001 fae1 	bl	8006d72 <VL53L0X_perform_ref_calibration>
 80057b0:	4603      	mov	r3, r0
 80057b2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80057b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80057d6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80057d8:	7dbb      	ldrb	r3, [r7, #22]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d005      	beq.n	80057ea <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80057de:	7dbb      	ldrb	r3, [r7, #22]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d002      	beq.n	80057ea <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80057e4:	7dbb      	ldrb	r3, [r7, #22]
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d147      	bne.n	800587a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80057ea:	f107 030c 	add.w	r3, r7, #12
 80057ee:	f107 0210 	add.w	r2, r7, #16
 80057f2:	2101      	movs	r1, #1
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fbc3 	bl	8005f80 <VL53L0X_GetInterruptThresholds>
 80057fa:	4603      	mov	r3, r0
 80057fc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005804:	d803      	bhi.n	800580e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005806:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005808:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800580c:	d935      	bls.n	800587a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800580e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d131      	bne.n	800587a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d006      	beq.n	800582a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800581c:	491a      	ldr	r1, [pc, #104]	; (8005888 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f002 ff56 	bl	80086d0 <VL53L0X_load_tuning_settings>
 8005824:	4603      	mov	r3, r0
 8005826:	75fb      	strb	r3, [r7, #23]
 8005828:	e027      	b.n	800587a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800582a:	2204      	movs	r2, #4
 800582c:	21ff      	movs	r1, #255	; 0xff
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f003 fe6e 	bl	8009510 <VL53L0X_WrByte>
 8005834:	4603      	mov	r3, r0
 8005836:	461a      	mov	r2, r3
 8005838:	7dfb      	ldrb	r3, [r7, #23]
 800583a:	4313      	orrs	r3, r2
 800583c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800583e:	2200      	movs	r2, #0
 8005840:	2170      	movs	r1, #112	; 0x70
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f003 fe64 	bl	8009510 <VL53L0X_WrByte>
 8005848:	4603      	mov	r3, r0
 800584a:	461a      	mov	r2, r3
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	4313      	orrs	r3, r2
 8005850:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005852:	2200      	movs	r2, #0
 8005854:	21ff      	movs	r1, #255	; 0xff
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f003 fe5a 	bl	8009510 <VL53L0X_WrByte>
 800585c:	4603      	mov	r3, r0
 800585e:	461a      	mov	r2, r3
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	4313      	orrs	r3, r2
 8005864:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005866:	2200      	movs	r2, #0
 8005868:	2180      	movs	r1, #128	; 0x80
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f003 fe50 	bl	8009510 <VL53L0X_WrByte>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	7dfb      	ldrb	r3, [r7, #23]
 8005876:	4313      	orrs	r3, r2
 8005878:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800587a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000108 	.word	0x20000108

0800588c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005894:	2300      	movs	r3, #0
 8005896:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800589c:	f107 030e 	add.w	r3, r7, #14
 80058a0:	4619      	mov	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff fb20 	bl	8004ee8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80058a8:	2201      	movs	r2, #1
 80058aa:	2180      	movs	r1, #128	; 0x80
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f003 fe2f 	bl	8009510 <VL53L0X_WrByte>
 80058b2:	4603      	mov	r3, r0
 80058b4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80058b6:	2201      	movs	r2, #1
 80058b8:	21ff      	movs	r1, #255	; 0xff
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f003 fe28 	bl	8009510 <VL53L0X_WrByte>
 80058c0:	4603      	mov	r3, r0
 80058c2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80058c4:	2200      	movs	r2, #0
 80058c6:	2100      	movs	r1, #0
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f003 fe21 	bl	8009510 <VL53L0X_WrByte>
 80058ce:	4603      	mov	r3, r0
 80058d0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80058d8:	461a      	mov	r2, r3
 80058da:	2191      	movs	r1, #145	; 0x91
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f003 fe17 	bl	8009510 <VL53L0X_WrByte>
 80058e2:	4603      	mov	r3, r0
 80058e4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80058e6:	2201      	movs	r2, #1
 80058e8:	2100      	movs	r1, #0
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f003 fe10 	bl	8009510 <VL53L0X_WrByte>
 80058f0:	4603      	mov	r3, r0
 80058f2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80058f4:	2200      	movs	r2, #0
 80058f6:	21ff      	movs	r1, #255	; 0xff
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f003 fe09 	bl	8009510 <VL53L0X_WrByte>
 80058fe:	4603      	mov	r3, r0
 8005900:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005902:	2200      	movs	r2, #0
 8005904:	2180      	movs	r1, #128	; 0x80
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f003 fe02 	bl	8009510 <VL53L0X_WrByte>
 800590c:	4603      	mov	r3, r0
 800590e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d037      	beq.n	8005986 <VL53L0X_StartMeasurement+0xfa>
 8005916:	2b03      	cmp	r3, #3
 8005918:	d04f      	beq.n	80059ba <VL53L0X_StartMeasurement+0x12e>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d167      	bne.n	80059ee <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800591e:	2201      	movs	r2, #1
 8005920:	2100      	movs	r1, #0
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f003 fdf4 	bl	8009510 <VL53L0X_WrByte>
 8005928:	4603      	mov	r3, r0
 800592a:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005930:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d15d      	bne.n	80059f4 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d008      	beq.n	8005954 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8005942:	f107 030d 	add.w	r3, r7, #13
 8005946:	461a      	mov	r2, r3
 8005948:	2100      	movs	r1, #0
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f003 fe62 	bl	8009614 <VL53L0X_RdByte>
 8005950:	4603      	mov	r3, r0
 8005952:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	3301      	adds	r3, #1
 8005958:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800595a:	7b7a      	ldrb	r2, [r7, #13]
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	4013      	ands	r3, r2
 8005960:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005962:	7bfa      	ldrb	r2, [r7, #15]
 8005964:	429a      	cmp	r2, r3
 8005966:	d107      	bne.n	8005978 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8005968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005976:	d3e1      	bcc.n	800593c <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800597e:	d339      	bcc.n	80059f4 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005980:	23f9      	movs	r3, #249	; 0xf9
 8005982:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005984:	e036      	b.n	80059f4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d105      	bne.n	800599a <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800598e:	2101      	movs	r1, #1
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff ff15 	bl	80057c0 <VL53L0X_CheckAndLoadInterruptSettings>
 8005996:	4603      	mov	r3, r0
 8005998:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800599a:	2202      	movs	r2, #2
 800599c:	2100      	movs	r1, #0
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f003 fdb6 	bl	8009510 <VL53L0X_WrByte>
 80059a4:	4603      	mov	r3, r0
 80059a6:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80059a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d123      	bne.n	80059f8 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2204      	movs	r2, #4
 80059b4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80059b8:	e01e      	b.n	80059f8 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80059ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d105      	bne.n	80059ce <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80059c2:	2101      	movs	r1, #1
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff fefb 	bl	80057c0 <VL53L0X_CheckAndLoadInterruptSettings>
 80059ca:	4603      	mov	r3, r0
 80059cc:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80059ce:	2204      	movs	r2, #4
 80059d0:	2100      	movs	r1, #0
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f003 fd9c 	bl	8009510 <VL53L0X_WrByte>
 80059d8:	4603      	mov	r3, r0
 80059da:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80059dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10b      	bne.n	80059fc <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2204      	movs	r2, #4
 80059e8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80059ec:	e006      	b.n	80059fc <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80059ee:	23f8      	movs	r3, #248	; 0xf8
 80059f0:	75fb      	strb	r3, [r7, #23]
 80059f2:	e004      	b.n	80059fe <VL53L0X_StartMeasurement+0x172>
		break;
 80059f4:	bf00      	nop
 80059f6:	e002      	b.n	80059fe <VL53L0X_StartMeasurement+0x172>
		break;
 80059f8:	bf00      	nop
 80059fa:	e000      	b.n	80059fe <VL53L0X_StartMeasurement+0x172>
		break;
 80059fc:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80059fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a14:	2300      	movs	r3, #0
 8005a16:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005a1e:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d112      	bne.n	8005a4c <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005a26:	f107 0308 	add.w	r3, r7, #8
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fb1d 	bl	800606c <VL53L0X_GetInterruptMaskStatus>
 8005a32:	4603      	mov	r3, r0
 8005a34:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d103      	bne.n	8005a44 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	e01c      	b.n	8005a7e <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	e018      	b.n	8005a7e <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005a4c:	f107 030d 	add.w	r3, r7, #13
 8005a50:	461a      	mov	r2, r3
 8005a52:	2114      	movs	r1, #20
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f003 fddd 	bl	8009614 <VL53L0X_RdByte>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005a66:	7b7b      	ldrb	r3, [r7, #13]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e002      	b.n	8005a7e <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005a8c:	b5b0      	push	{r4, r5, r7, lr}
 8005a8e:	b096      	sub	sp, #88	; 0x58
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005a9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005aa0:	230c      	movs	r3, #12
 8005aa2:	2114      	movs	r1, #20
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f003 fd07 	bl	80094b8 <VL53L0X_ReadMulti>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005ab0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 80d2 	bne.w	8005c5e <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2200      	movs	r2, #0
 8005abe:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005ac6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005ae2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	4413      	add	r3, r2
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	025b      	lsls	r3, r3, #9
 8005af8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005afe:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005b00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	4413      	add	r3, r2
 8005b12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005b16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b1a:	025b      	lsls	r3, r3, #9
 8005b1c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005b22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	021b      	lsls	r3, r3, #8
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005b3e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005b40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005b4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005b56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005b5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b60:	d047      	beq.n	8005bf2 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005b62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b64:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005b70:	4a58      	ldr	r2, [pc, #352]	; (8005cd4 <VL53L0X_GetRangingMeasurementData+0x248>)
 8005b72:	fb82 1203 	smull	r1, r2, r2, r3
 8005b76:	1192      	asrs	r2, r2, #6
 8005b78:	17db      	asrs	r3, r3, #31
 8005b7a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005b7c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	7f1b      	ldrb	r3, [r3, #28]
 8005b8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005b8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d02d      	beq.n	8005bf2 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005b96:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b98:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	121b      	asrs	r3, r3, #8
 8005ba2:	461a      	mov	r2, r3
				if ((SignalRate
 8005ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10d      	bne.n	8005bc6 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8005baa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8005bb2:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005bb6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005bba:	e016      	b.n	8005bea <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8005bbc:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005bc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005bc4:	e011      	b.n	8005bea <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005bc6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bcc:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005bd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bd2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005bda:	121b      	asrs	r3, r3, #8
 8005bdc:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be0:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005be2:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005be6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005bea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005bf2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00d      	beq.n	8005c16 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005bfa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005bfe:	089b      	lsrs	r3, r3, #2
 8005c00:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005c06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	019b      	lsls	r3, r3, #6
 8005c0e:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	75da      	strb	r2, [r3, #23]
 8005c14:	e006      	b.n	8005c24 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005c1c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2200      	movs	r2, #0
 8005c22:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005c24:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005c28:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005c2c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	4613      	mov	r3, r2
 8005c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f003 f9f0 	bl	8009020 <VL53L0X_get_pal_range_status>
 8005c40:	4603      	mov	r3, r0
 8005c42:	461a      	mov	r2, r3
 8005c44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005c4e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d103      	bne.n	8005c5e <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005c56:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c5e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d12f      	bne.n	8005cc6 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f107 040c 	add.w	r4, r7, #12
 8005c6c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c78:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005c80:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005c8e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005c94:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005c9a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005ca0:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005ca6:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005cac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005cb6:	f107 050c 	add.w	r5, r7, #12
 8005cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005cc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005cc6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3750      	adds	r7, #80	; 0x50
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	10624dd3 	.word	0x10624dd3

08005cd8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff f8b5 	bl	8004e58 <VL53L0X_SetDeviceMode>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fd16 	bl	800572c <VL53L0X_PerformSingleMeasurement>
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff febc 	bl	8005a8c <VL53L0X_GetRangingMeasurementData>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8005d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d105      	bne.n	8005d2c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005d20:	2100      	movs	r1, #0
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f962 	bl	8005fec <VL53L0X_ClearInterruptMask>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	4608      	mov	r0, r1
 8005d42:	4611      	mov	r1, r2
 8005d44:	461a      	mov	r2, r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	70fb      	strb	r3, [r7, #3]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70bb      	strb	r3, [r7, #2]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8005d5c:	23f6      	movs	r3, #246	; 0xf6
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	e107      	b.n	8005f72 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8005d62:	78bb      	ldrb	r3, [r7, #2]
 8005d64:	2b14      	cmp	r3, #20
 8005d66:	d110      	bne.n	8005d8a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005d68:	7e3b      	ldrb	r3, [r7, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8005d6e:	2310      	movs	r3, #16
 8005d70:	73bb      	strb	r3, [r7, #14]
 8005d72:	e001      	b.n	8005d78 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8005d74:	2301      	movs	r3, #1
 8005d76:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	2184      	movs	r1, #132	; 0x84
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f003 fbc6 	bl	8009510 <VL53L0X_WrByte>
 8005d84:	4603      	mov	r3, r0
 8005d86:	73fb      	strb	r3, [r7, #15]
 8005d88:	e0f3      	b.n	8005f72 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8005d8a:	78bb      	ldrb	r3, [r7, #2]
 8005d8c:	2b15      	cmp	r3, #21
 8005d8e:	f040 8097 	bne.w	8005ec0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005d92:	2201      	movs	r2, #1
 8005d94:	21ff      	movs	r1, #255	; 0xff
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f003 fbba 	bl	8009510 <VL53L0X_WrByte>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	461a      	mov	r2, r3
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005da6:	2200      	movs	r2, #0
 8005da8:	2100      	movs	r1, #0
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f003 fbb0 	bl	8009510 <VL53L0X_WrByte>
 8005db0:	4603      	mov	r3, r0
 8005db2:	461a      	mov	r2, r3
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005dba:	2200      	movs	r2, #0
 8005dbc:	21ff      	movs	r1, #255	; 0xff
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f003 fba6 	bl	8009510 <VL53L0X_WrByte>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005dce:	2201      	movs	r2, #1
 8005dd0:	2180      	movs	r1, #128	; 0x80
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f003 fb9c 	bl	8009510 <VL53L0X_WrByte>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	461a      	mov	r2, r3
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005de2:	2202      	movs	r2, #2
 8005de4:	2185      	movs	r1, #133	; 0x85
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f003 fb92 	bl	8009510 <VL53L0X_WrByte>
 8005dec:	4603      	mov	r3, r0
 8005dee:	461a      	mov	r2, r3
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005df6:	2204      	movs	r2, #4
 8005df8:	21ff      	movs	r1, #255	; 0xff
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f003 fb88 	bl	8009510 <VL53L0X_WrByte>
 8005e00:	4603      	mov	r3, r0
 8005e02:	461a      	mov	r2, r3
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	21cd      	movs	r1, #205	; 0xcd
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f003 fb7e 	bl	8009510 <VL53L0X_WrByte>
 8005e14:	4603      	mov	r3, r0
 8005e16:	461a      	mov	r2, r3
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005e1e:	2211      	movs	r2, #17
 8005e20:	21cc      	movs	r1, #204	; 0xcc
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f003 fb74 	bl	8009510 <VL53L0X_WrByte>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005e32:	2207      	movs	r2, #7
 8005e34:	21ff      	movs	r1, #255	; 0xff
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f003 fb6a 	bl	8009510 <VL53L0X_WrByte>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	461a      	mov	r2, r3
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005e46:	2200      	movs	r2, #0
 8005e48:	21be      	movs	r1, #190	; 0xbe
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f003 fb60 	bl	8009510 <VL53L0X_WrByte>
 8005e50:	4603      	mov	r3, r0
 8005e52:	461a      	mov	r2, r3
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005e5a:	2206      	movs	r2, #6
 8005e5c:	21ff      	movs	r1, #255	; 0xff
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f003 fb56 	bl	8009510 <VL53L0X_WrByte>
 8005e64:	4603      	mov	r3, r0
 8005e66:	461a      	mov	r2, r3
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005e6e:	2209      	movs	r2, #9
 8005e70:	21cc      	movs	r1, #204	; 0xcc
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f003 fb4c 	bl	8009510 <VL53L0X_WrByte>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005e82:	2200      	movs	r2, #0
 8005e84:	21ff      	movs	r1, #255	; 0xff
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f003 fb42 	bl	8009510 <VL53L0X_WrByte>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	461a      	mov	r2, r3
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005e96:	2201      	movs	r2, #1
 8005e98:	21ff      	movs	r1, #255	; 0xff
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f003 fb38 	bl	8009510 <VL53L0X_WrByte>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2100      	movs	r1, #0
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f003 fb2e 	bl	8009510 <VL53L0X_WrByte>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	73fb      	strb	r3, [r7, #15]
 8005ebe:	e058      	b.n	8005f72 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8005ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d121      	bne.n	8005f0c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8005ec8:	787b      	ldrb	r3, [r7, #1]
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d81b      	bhi.n	8005f06 <VL53L0X_SetGpioConfig+0x1ce>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <VL53L0X_SetGpioConfig+0x19c>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005ee9 	.word	0x08005ee9
 8005ed8:	08005eef 	.word	0x08005eef
 8005edc:	08005ef5 	.word	0x08005ef5
 8005ee0:	08005efb 	.word	0x08005efb
 8005ee4:	08005f01 	.word	0x08005f01
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	73bb      	strb	r3, [r7, #14]
				break;
 8005eec:	e00f      	b.n	8005f0e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	73bb      	strb	r3, [r7, #14]
				break;
 8005ef2:	e00c      	b.n	8005f0e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	73bb      	strb	r3, [r7, #14]
				break;
 8005ef8:	e009      	b.n	8005f0e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8005efa:	2303      	movs	r3, #3
 8005efc:	73bb      	strb	r3, [r7, #14]
				break;
 8005efe:	e006      	b.n	8005f0e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8005f00:	2304      	movs	r3, #4
 8005f02:	73bb      	strb	r3, [r7, #14]
				break;
 8005f04:	e003      	b.n	8005f0e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8005f06:	23f5      	movs	r3, #245	; 0xf5
 8005f08:	73fb      	strb	r3, [r7, #15]
 8005f0a:	e000      	b.n	8005f0e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8005f0c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8005f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d107      	bne.n	8005f26 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	210a      	movs	r1, #10
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f003 faf7 	bl	8009510 <VL53L0X_WrByte>
 8005f22:	4603      	mov	r3, r0
 8005f24:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8005f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10f      	bne.n	8005f4e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005f2e:	7e3b      	ldrb	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73bb      	strb	r3, [r7, #14]
 8005f38:	e001      	b.n	8005f3e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8005f3a:	2310      	movs	r3, #16
 8005f3c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	22ef      	movs	r2, #239	; 0xef
 8005f42:	2184      	movs	r1, #132	; 0x84
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f003 fb31 	bl	80095ac <VL53L0X_UpdateByte>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8005f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d103      	bne.n	8005f5e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	787a      	ldrb	r2, [r7, #1]
 8005f5a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8005f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d105      	bne.n	8005f72 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005f66:	2100      	movs	r1, #0
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f83f 	bl	8005fec <VL53L0X_ClearInterruptMask>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop

08005f80 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	607a      	str	r2, [r7, #4]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f90:	2300      	movs	r3, #0
 8005f92:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005f94:	f107 0314 	add.w	r3, r7, #20
 8005f98:	461a      	mov	r2, r3
 8005f9a:	210e      	movs	r1, #14
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f003 fb63 	bl	8009668 <VL53L0X_RdWord>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005fa6:	8abb      	ldrh	r3, [r7, #20]
 8005fa8:	045b      	lsls	r3, r3, #17
 8005faa:	461a      	mov	r2, r3
 8005fac:	4b0e      	ldr	r3, [pc, #56]	; (8005fe8 <VL53L0X_GetInterruptThresholds+0x68>)
 8005fae:	4013      	ands	r3, r2
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10f      	bne.n	8005fdc <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005fbc:	f107 0314 	add.w	r3, r7, #20
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	210c      	movs	r1, #12
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f003 fb4f 	bl	8009668 <VL53L0X_RdWord>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005fce:	8abb      	ldrh	r3, [r7, #20]
 8005fd0:	045b      	lsls	r3, r3, #17
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4b04      	ldr	r3, [pc, #16]	; (8005fe8 <VL53L0X_GetInterruptThresholds+0x68>)
 8005fd6:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	1ffe0000 	.word	0x1ffe0000

08005fec <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8005ffe:	2201      	movs	r2, #1
 8006000:	210b      	movs	r1, #11
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f003 fa84 	bl	8009510 <VL53L0X_WrByte>
 8006008:	4603      	mov	r3, r0
 800600a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800600c:	2200      	movs	r2, #0
 800600e:	210b      	movs	r1, #11
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f003 fa7d 	bl	8009510 <VL53L0X_WrByte>
 8006016:	4603      	mov	r3, r0
 8006018:	461a      	mov	r2, r3
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	4313      	orrs	r3, r2
 800601e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006020:	f107 030d 	add.w	r3, r7, #13
 8006024:	461a      	mov	r2, r3
 8006026:	2113      	movs	r1, #19
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f003 faf3 	bl	8009614 <VL53L0X_RdByte>
 800602e:	4603      	mov	r3, r0
 8006030:	461a      	mov	r2, r3
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	4313      	orrs	r3, r2
 8006036:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006038:	7bbb      	ldrb	r3, [r7, #14]
 800603a:	3301      	adds	r3, #1
 800603c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800603e:	7b7b      	ldrb	r3, [r7, #13]
 8006040:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006044:	2b00      	cmp	r3, #0
 8006046:	d006      	beq.n	8006056 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d803      	bhi.n	8006056 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800604e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0d3      	beq.n	8005ffe <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006056:	7bbb      	ldrb	r3, [r7, #14]
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800605c:	23f4      	movs	r3, #244	; 0xf4
 800605e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006060:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006076:	2300      	movs	r3, #0
 8006078:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800607a:	f107 030e 	add.w	r3, r7, #14
 800607e:	461a      	mov	r2, r3
 8006080:	2113      	movs	r1, #19
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f003 fac6 	bl	8009614 <VL53L0X_RdByte>
 8006088:	4603      	mov	r3, r0
 800608a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800608c:	7bbb      	ldrb	r3, [r7, #14]
 800608e:	f003 0207 	and.w	r2, r3, #7
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	f003 0318 	and.w	r3, r3, #24
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80060a0:	23fa      	movs	r3, #250	; 0xfa
 80060a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80060a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060bc:	2300      	movs	r3, #0
 80060be:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 fa03 	bl	80064d0 <VL53L0X_perform_ref_spad_management>
 80060ca:	4603      	mov	r3, r0
 80060cc:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80060ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80060e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80060ec:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80060ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060f2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80060f4:	f107 0308 	add.w	r3, r7, #8
 80060f8:	461a      	mov	r2, r3
 80060fa:	2128      	movs	r1, #40	; 0x28
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f003 fab3 	bl	8009668 <VL53L0X_RdWord>
 8006102:	4603      	mov	r3, r0
 8006104:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8006106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d11e      	bne.n	800614c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800610e:	893b      	ldrh	r3, [r7, #8]
 8006110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006114:	b29b      	uxth	r3, r3
 8006116:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006118:	893b      	ldrh	r3, [r7, #8]
 800611a:	461a      	mov	r2, r3
 800611c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006120:	429a      	cmp	r2, r3
 8006122:	dd0b      	ble.n	800613c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006124:	893a      	ldrh	r2, [r7, #8]
 8006126:	897b      	ldrh	r3, [r7, #10]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	b29b      	uxth	r3, r3
 800612c:	b21b      	sxth	r3, r3
 800612e:	461a      	mov	r2, r3
					* 250;
 8006130:	23fa      	movs	r3, #250	; 0xfa
 8006132:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e007      	b.n	800614c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800613c:	893b      	ldrh	r3, [r7, #8]
 800613e:	b21b      	sxth	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	23fa      	movs	r3, #250	; 0xfa
 8006144:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800614c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006158:	b480      	push	{r7}
 800615a:	b08b      	sub	sp, #44	; 0x2c
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8006166:	2308      	movs	r3, #8
 8006168:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006174:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	fbb2 f3f3 	udiv	r3, r2, r3
 800617e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	fbb3 f2f2 	udiv	r2, r3, r2
 8006188:	69b9      	ldr	r1, [r7, #24]
 800618a:	fb01 f202 	mul.w	r2, r1, r2
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
 8006196:	e030      	b.n	80061fa <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	4413      	add	r3, r2
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80061a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d11e      	bne.n	80061ec <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80061ae:	7ffa      	ldrb	r2, [r7, #31]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	fa42 f303 	asr.w	r3, r2, r3
 80061b6:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80061bc:	e016      	b.n	80061ec <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80061be:	7ffb      	ldrb	r3, [r7, #31]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00b      	beq.n	80061e0 <get_next_good_spad+0x88>
				success = 1;
 80061c8:	2301      	movs	r3, #1
 80061ca:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	fb02 f203 	mul.w	r2, r2, r3
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	4413      	add	r3, r2
 80061d8:	461a      	mov	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	601a      	str	r2, [r3, #0]
				break;
 80061de:	e009      	b.n	80061f4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80061e0:	7ffb      	ldrb	r3, [r7, #31]
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	3301      	adds	r3, #1
 80061ea:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80061ec:	6a3a      	ldr	r2, [r7, #32]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d3e4      	bcc.n	80061be <get_next_good_spad+0x66>
				coarseIndex++) {
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	3301      	adds	r3, #1
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80061fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d202      	bcs.n	8006208 <get_next_good_spad+0xb0>
 8006202:	7fbb      	ldrb	r3, [r7, #30]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0c7      	beq.n	8006198 <get_next_good_spad+0x40>
		}
	}
}
 8006208:	bf00      	nop
 800620a:	372c      	adds	r7, #44	; 0x2c
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800621c:	2301      	movs	r3, #1
 800621e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	099b      	lsrs	r3, r3, #6
 8006224:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006226:	4a07      	ldr	r2, [pc, #28]	; (8006244 <is_aperture+0x30>)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <is_aperture+0x22>
		isAperture = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	200002c0 	.word	0x200002c0

08006248 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006248:	b480      	push	{r7}
 800624a:	b089      	sub	sp, #36	; 0x24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006254:	2300      	movs	r3, #0
 8006256:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006258:	2308      	movs	r3, #8
 800625a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	fbb3 f2f2 	udiv	r2, r3, r2
 800626e:	69b9      	ldr	r1, [r7, #24]
 8006270:	fb01 f202 	mul.w	r2, r1, r2
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	429a      	cmp	r2, r3
 800627e:	d302      	bcc.n	8006286 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006280:	23ce      	movs	r3, #206	; 0xce
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e010      	b.n	80062a8 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	4413      	add	r3, r2
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	b25a      	sxtb	r2, r3
 8006290:	2101      	movs	r1, #1
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	fa01 f303 	lsl.w	r3, r1, r3
 8006298:	b25b      	sxtb	r3, r3
 800629a:	4313      	orrs	r3, r2
 800629c:	b259      	sxtb	r1, r3
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	b2ca      	uxtb	r2, r1
 80062a6:	701a      	strb	r2, [r3, #0]

	return status;
 80062a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3724      	adds	r7, #36	; 0x24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80062c2:	2306      	movs	r3, #6
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	21b0      	movs	r1, #176	; 0xb0
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f003 f8c5 	bl	8009458 <VL53L0X_WriteMulti>
 80062ce:	4603      	mov	r3, r0
 80062d0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80062d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80062e8:	2306      	movs	r3, #6
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	21b0      	movs	r1, #176	; 0xb0
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f003 f8e2 	bl	80094b8 <VL53L0X_ReadMulti>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80062f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08c      	sub	sp, #48	; 0x30
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	607a      	str	r2, [r7, #4]
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	460b      	mov	r3, r1
 8006312:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006314:	2300      	movs	r3, #0
 8006316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800631a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800631e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006320:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006322:	2300      	movs	r3, #0
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
 8006326:	e02b      	b.n	8006380 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006328:	f107 031c 	add.w	r3, r7, #28
 800632c:	6a3a      	ldr	r2, [r7, #32]
 800632e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ff11 	bl	8006158 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800633c:	d103      	bne.n	8006346 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800633e:	23ce      	movs	r3, #206	; 0xce
 8006340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006344:	e020      	b.n	8006388 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	461a      	mov	r2, r3
 800634a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634c:	4413      	add	r3, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff ff60 	bl	8006214 <is_aperture>
 8006354:	4603      	mov	r3, r0
 8006356:	461a      	mov	r2, r3
 8006358:	7afb      	ldrb	r3, [r7, #11]
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800635e:	23ce      	movs	r3, #206	; 0xce
 8006360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006364:	e010      	b.n	8006388 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800636a:	6a3a      	ldr	r2, [r7, #32]
 800636c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800636e:	6838      	ldr	r0, [r7, #0]
 8006370:	f7ff ff6a 	bl	8006248 <enable_spad_bit>
		currentSpad++;
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	3301      	adds	r3, #1
 8006378:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	3301      	adds	r3, #1
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006384:	429a      	cmp	r2, r3
 8006386:	d3cf      	bcc.n	8006328 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800638a:	6a3a      	ldr	r2, [r7, #32]
 800638c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800638e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff ff8d 	bl	80062b8 <set_ref_spad_map>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80063a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d121      	bne.n	80063f0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80063ac:	f107 0314 	add.w	r3, r7, #20
 80063b0:	4619      	mov	r1, r3
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f7ff ff93 	bl	80062de <get_ref_spad_map>
 80063b8:	4603      	mov	r3, r0
 80063ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80063c2:	e011      	b.n	80063e8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	4413      	add	r3, r2
 80063ca:	781a      	ldrb	r2, [r3, #0]
 80063cc:	f107 0114 	add.w	r1, r7, #20
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	440b      	add	r3, r1
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d003      	beq.n	80063e2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80063da:	23ce      	movs	r3, #206	; 0xce
 80063dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80063e0:	e006      	b.n	80063f0 <enable_ref_spads+0xec>
			}
			i++;
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	3301      	adds	r3, #1
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80063e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d3e9      	bcc.n	80063c4 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80063f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3730      	adds	r7, #48	; 0x30
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08a      	sub	sp, #40	; 0x28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006406:	2300      	movs	r3, #0
 8006408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006418:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800641c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006420:	2b00      	cmp	r3, #0
 8006422:	d107      	bne.n	8006434 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006424:	22c0      	movs	r2, #192	; 0xc0
 8006426:	2101      	movs	r1, #1
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f003 f871 	bl	8009510 <VL53L0X_WrByte>
 800642e:	4603      	mov	r3, r0
 8006430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006434:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006438:	2b00      	cmp	r3, #0
 800643a:	d108      	bne.n	800644e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800643c:	f107 0308 	add.w	r3, r7, #8
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff fc48 	bl	8005cd8 <VL53L0X_PerformSingleRangingMeasurement>
 8006448:	4603      	mov	r3, r0
 800644a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800644e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006456:	2201      	movs	r2, #1
 8006458:	21ff      	movs	r1, #255	; 0xff
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f003 f858 	bl	8009510 <VL53L0X_WrByte>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8006466:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800646a:	2b00      	cmp	r3, #0
 800646c:	d107      	bne.n	800647e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	21b6      	movs	r1, #182	; 0xb6
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f003 f8f8 	bl	8009668 <VL53L0X_RdWord>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800647e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006482:	2b00      	cmp	r3, #0
 8006484:	d107      	bne.n	8006496 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006486:	2200      	movs	r2, #0
 8006488:	21ff      	movs	r1, #255	; 0xff
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f003 f840 	bl	8009510 <VL53L0X_WrByte>
 8006490:	4603      	mov	r3, r0
 8006492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006496:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800649a:	2b00      	cmp	r3, #0
 800649c:	d112      	bne.n	80064c4 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800649e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064a2:	461a      	mov	r2, r3
 80064a4:	2101      	movs	r1, #1
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f003 f832 	bl	8009510 <VL53L0X_WrByte>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80064b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d104      	bne.n	80064c4 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80064c0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80064c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3728      	adds	r7, #40	; 0x28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80064d0:	b590      	push	{r4, r7, lr}
 80064d2:	b09d      	sub	sp, #116	; 0x74
 80064d4:	af06      	add	r7, sp, #24
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064dc:	2300      	movs	r3, #0
 80064de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80064e2:	23b4      	movs	r3, #180	; 0xb4
 80064e4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80064e8:	2303      	movs	r3, #3
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80064ec:	232c      	movs	r3, #44	; 0x2c
 80064ee:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80064fc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006500:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800650a:	2306      	movs	r3, #6
 800650c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006524:	2300      	movs	r3, #0
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8006534:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8006536:	2300      	movs	r3, #0
 8006538:	64bb      	str	r3, [r7, #72]	; 0x48
 800653a:	e009      	b.n	8006550 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006540:	4413      	add	r3, r2
 8006542:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006546:	2200      	movs	r2, #0
 8006548:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800654a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800654c:	3301      	adds	r3, #1
 800654e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	429a      	cmp	r2, r3
 8006556:	d3f1      	bcc.n	800653c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006558:	2201      	movs	r2, #1
 800655a:	21ff      	movs	r1, #255	; 0xff
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f002 ffd7 	bl	8009510 <VL53L0X_WrByte>
 8006562:	4603      	mov	r3, r0
 8006564:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006568:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800656c:	2b00      	cmp	r3, #0
 800656e:	d107      	bne.n	8006580 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006570:	2200      	movs	r2, #0
 8006572:	214f      	movs	r1, #79	; 0x4f
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f002 ffcb 	bl	8009510 <VL53L0X_WrByte>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006580:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006584:	2b00      	cmp	r3, #0
 8006586:	d107      	bne.n	8006598 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006588:	222c      	movs	r2, #44	; 0x2c
 800658a:	214e      	movs	r1, #78	; 0x4e
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f002 ffbf 	bl	8009510 <VL53L0X_WrByte>
 8006592:	4603      	mov	r3, r0
 8006594:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006598:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800659c:	2b00      	cmp	r3, #0
 800659e:	d107      	bne.n	80065b0 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80065a0:	2200      	movs	r2, #0
 80065a2:	21ff      	movs	r1, #255	; 0xff
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f002 ffb3 	bl	8009510 <VL53L0X_WrByte>
 80065aa:	4603      	mov	r3, r0
 80065ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80065b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80065b8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80065bc:	461a      	mov	r2, r3
 80065be:	21b6      	movs	r1, #182	; 0xb6
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f002 ffa5 	bl	8009510 <VL53L0X_WrByte>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80065cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d107      	bne.n	80065e4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80065d4:	2200      	movs	r2, #0
 80065d6:	2180      	movs	r1, #128	; 0x80
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f002 ff99 	bl	8009510 <VL53L0X_WrByte>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80065e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80065ec:	f107 0210 	add.w	r2, r7, #16
 80065f0:	f107 0111 	add.w	r1, r7, #17
 80065f4:	2300      	movs	r3, #0
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fbbb 	bl	8006d72 <VL53L0X_perform_ref_calibration>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006602:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006606:	2b00      	cmp	r3, #0
 8006608:	d121      	bne.n	800664e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800660e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006610:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006618:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006626:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800662a:	f107 0218 	add.w	r2, r7, #24
 800662e:	9204      	str	r2, [sp, #16]
 8006630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006632:	9203      	str	r2, [sp, #12]
 8006634:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006636:	9202      	str	r2, [sp, #8]
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	4623      	mov	r3, r4
 8006640:	4602      	mov	r2, r0
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f7ff fe5e 	bl	8006304 <enable_ref_spads>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800664e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006652:	2b00      	cmp	r3, #0
 8006654:	d174      	bne.n	8006740 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800665a:	f107 0312 	add.w	r3, r7, #18
 800665e:	4619      	mov	r1, r3
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7ff fecb 	bl	80063fc <perform_ref_signal_measurement>
 8006666:	4603      	mov	r3, r0
 8006668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800666c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006670:	2b00      	cmp	r3, #0
 8006672:	d161      	bne.n	8006738 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006674:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006676:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006678:	429a      	cmp	r2, r3
 800667a:	d25d      	bcs.n	8006738 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800667c:	2300      	movs	r3, #0
 800667e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006680:	e009      	b.n	8006696 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006686:	4413      	add	r3, r2
 8006688:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006692:	3301      	adds	r3, #1
 8006694:	64bb      	str	r3, [r7, #72]	; 0x48
 8006696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	429a      	cmp	r2, r3
 800669c:	d3f1      	bcc.n	8006682 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800669e:	e002      	b.n	80066a6 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80066a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a2:	3301      	adds	r3, #1
 80066a4:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80066a6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80066aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ac:	4413      	add	r3, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fdb0 	bl	8006214 <is_aperture>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d103      	bne.n	80066c2 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80066ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	429a      	cmp	r2, r3
 80066c0:	d3ee      	bcc.n	80066a0 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80066c2:	2301      	movs	r3, #1
 80066c4:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80066c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80066d6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80066da:	f107 0218 	add.w	r2, r7, #24
 80066de:	9204      	str	r2, [sp, #16]
 80066e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066e2:	9203      	str	r2, [sp, #12]
 80066e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066e6:	9202      	str	r2, [sp, #8]
 80066e8:	9301      	str	r3, [sp, #4]
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	4623      	mov	r3, r4
 80066f0:	4602      	mov	r2, r0
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff fe06 	bl	8006304 <enable_ref_spads>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80066fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006702:	2b00      	cmp	r3, #0
 8006704:	d11b      	bne.n	800673e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800670a:	f107 0312 	add.w	r3, r7, #18
 800670e:	4619      	mov	r1, r3
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f7ff fe73 	bl	80063fc <perform_ref_signal_measurement>
 8006716:	4603      	mov	r3, r0
 8006718:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800671c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10c      	bne.n	800673e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006724:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006726:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006728:	429a      	cmp	r2, r3
 800672a:	d208      	bcs.n	800673e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006734:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006736:	e002      	b.n	800673e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006738:	2300      	movs	r3, #0
 800673a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800673c:	e000      	b.n	8006740 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800673e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006740:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006744:	2b00      	cmp	r3, #0
 8006746:	f040 80af 	bne.w	80068a8 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800674a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800674c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800674e:	429a      	cmp	r2, r3
 8006750:	f240 80aa 	bls.w	80068a8 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006756:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006764:	f107 031c 	add.w	r3, r7, #28
 8006768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800676a:	4618      	mov	r0, r3
 800676c:	f003 f82a 	bl	80097c4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006770:	8a7b      	ldrh	r3, [r7, #18]
 8006772:	461a      	mov	r2, r3
 8006774:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	bfb8      	it	lt
 800677c:	425b      	neglt	r3, r3
 800677e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006786:	e086      	b.n	8006896 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800678e:	f107 0314 	add.w	r3, r7, #20
 8006792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006796:	f7ff fcdf 	bl	8006158 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a0:	d103      	bne.n	80067aa <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80067a2:	23ce      	movs	r3, #206	; 0xce
 80067a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80067a8:	e07e      	b.n	80068a8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80067aa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4413      	add	r3, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fd2e 	bl	8006214 <is_aperture>
 80067b8:	4603      	mov	r3, r0
 80067ba:	461a      	mov	r2, r3
 80067bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80067c8:	e06e      	b.n	80068a8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80067ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067cc:	3301      	adds	r3, #1
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80067da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fd32 	bl	8006248 <enable_spad_bit>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80067ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10c      	bne.n	800680c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80067f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f4:	3301      	adds	r3, #1
 80067f6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80067fe:	4619      	mov	r1, r3
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7ff fd59 	bl	80062b8 <set_ref_spad_map>
 8006806:	4603      	mov	r3, r0
 8006808:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800680c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006810:	2b00      	cmp	r3, #0
 8006812:	d146      	bne.n	80068a2 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006814:	f107 0312 	add.w	r3, r7, #18
 8006818:	4619      	mov	r1, r3
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff fdee 	bl	80063fc <perform_ref_signal_measurement>
 8006820:	4603      	mov	r3, r0
 8006822:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006826:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800682a:	2b00      	cmp	r3, #0
 800682c:	d13b      	bne.n	80068a6 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800682e:	8a7b      	ldrh	r3, [r7, #18]
 8006830:	461a      	mov	r2, r3
 8006832:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfb8      	it	lt
 800683a:	425b      	neglt	r3, r3
 800683c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800683e:	8a7b      	ldrh	r3, [r7, #18]
 8006840:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006842:	429a      	cmp	r2, r3
 8006844:	d21c      	bcs.n	8006880 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800684a:	429a      	cmp	r2, r3
 800684c:	d914      	bls.n	8006878 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800684e:	f107 031c 	add.w	r3, r7, #28
 8006852:	4619      	mov	r1, r3
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff fd2f 	bl	80062b8 <set_ref_spad_map>
 800685a:	4603      	mov	r3, r0
 800685c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8006866:	f107 011c 	add.w	r1, r7, #28
 800686a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800686c:	4618      	mov	r0, r3
 800686e:	f002 ffa9 	bl	80097c4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006874:	3b01      	subs	r3, #1
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687e:	e00a      	b.n	8006896 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800688a:	f107 031c 	add.w	r3, r7, #28
 800688e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006890:	4618      	mov	r0, r3
 8006892:	f002 ff97 	bl	80097c4 <memcpy>
		while (!complete) {
 8006896:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800689a:	2b00      	cmp	r3, #0
 800689c:	f43f af74 	beq.w	8006788 <VL53L0X_perform_ref_spad_management+0x2b8>
 80068a0:	e002      	b.n	80068a8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80068a2:	bf00      	nop
 80068a4:	e000      	b.n	80068a8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80068a6:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d115      	bne.n	80068dc <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068b4:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80068bc:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	781a      	ldrb	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80068dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	375c      	adds	r7, #92	; 0x5c
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd90      	pop	{r4, r7, pc}

080068e8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80068e8:	b590      	push	{r4, r7, lr}
 80068ea:	b093      	sub	sp, #76	; 0x4c
 80068ec:	af06      	add	r7, sp, #24
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068f6:	2300      	movs	r3, #0
 80068f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006900:	23b4      	movs	r3, #180	; 0xb4
 8006902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006906:	2306      	movs	r3, #6
 8006908:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800690a:	232c      	movs	r3, #44	; 0x2c
 800690c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800690e:	2201      	movs	r2, #1
 8006910:	21ff      	movs	r1, #255	; 0xff
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f002 fdfc 	bl	8009510 <VL53L0X_WrByte>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800691e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006922:	2b00      	cmp	r3, #0
 8006924:	d107      	bne.n	8006936 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006926:	2200      	movs	r2, #0
 8006928:	214f      	movs	r1, #79	; 0x4f
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f002 fdf0 	bl	8009510 <VL53L0X_WrByte>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006936:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800693a:	2b00      	cmp	r3, #0
 800693c:	d107      	bne.n	800694e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800693e:	222c      	movs	r2, #44	; 0x2c
 8006940:	214e      	movs	r1, #78	; 0x4e
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f002 fde4 	bl	8009510 <VL53L0X_WrByte>
 8006948:	4603      	mov	r3, r0
 800694a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800694e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006952:	2b00      	cmp	r3, #0
 8006954:	d107      	bne.n	8006966 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006956:	2200      	movs	r2, #0
 8006958:	21ff      	movs	r1, #255	; 0xff
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f002 fdd8 	bl	8009510 <VL53L0X_WrByte>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006966:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800696e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006972:	461a      	mov	r2, r3
 8006974:	21b6      	movs	r1, #182	; 0xb6
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f002 fdca 	bl	8009510 <VL53L0X_WrByte>
 800697c:	4603      	mov	r3, r0
 800697e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006982:	2300      	movs	r3, #0
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
 8006986:	e009      	b.n	800699c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	4413      	add	r3, r2
 800698e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	3301      	adds	r3, #1
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
 800699c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d3f1      	bcc.n	8006988 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d011      	beq.n	80069ce <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80069aa:	e002      	b.n	80069b2 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	3301      	adds	r3, #1
 80069b0:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80069b2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	4413      	add	r3, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff fc2a 	bl	8006214 <is_aperture>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <VL53L0X_set_reference_spads+0xe6>
 80069c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d3ee      	bcc.n	80069ac <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80069da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069de:	79f9      	ldrb	r1, [r7, #7]
 80069e0:	f107 0214 	add.w	r2, r7, #20
 80069e4:	9204      	str	r2, [sp, #16]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	9203      	str	r2, [sp, #12]
 80069ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ec:	9202      	str	r2, [sp, #8]
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	4623      	mov	r3, r4
 80069f6:	4602      	mov	r2, r0
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff fc83 	bl	8006304 <enable_ref_spads>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006a04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10c      	bne.n	8006a26 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	79fa      	ldrb	r2, [r7, #7]
 8006a22:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006a26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3734      	adds	r7, #52	; 0x34
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd90      	pop	{r4, r7, pc}

08006a32 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	f043 0301 	orr.w	r3, r3, #1
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	2100      	movs	r1, #0
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f002 fd5a 	bl	8009510 <VL53L0X_WrByte>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f9bf 	bl	8006dec <VL53L0X_measurement_poll_for_completion>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d105      	bne.n	8006a86 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff fab5 	bl	8005fec <VL53L0X_ClearInterruptMask>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2100      	movs	r1, #0
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f002 fd3c 	bl	8009510 <VL53L0X_WrByte>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	70fb      	strb	r3, [r7, #3]
 8006aba:	460b      	mov	r3, r1
 8006abc:	70bb      	strb	r3, [r7, #2]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006aca:	2201      	movs	r2, #1
 8006acc:	21ff      	movs	r1, #255	; 0xff
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f002 fd1e 	bl	8009510 <VL53L0X_WrByte>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f002 fd14 	bl	8009510 <VL53L0X_WrByte>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	461a      	mov	r2, r3
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006af2:	2200      	movs	r2, #0
 8006af4:	21ff      	movs	r1, #255	; 0xff
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f002 fd0a 	bl	8009510 <VL53L0X_WrByte>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006b06:	78fb      	ldrb	r3, [r7, #3]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01e      	beq.n	8006b4a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d009      	beq.n	8006b28 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	21cb      	movs	r1, #203	; 0xcb
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f002 fd7b 	bl	8009614 <VL53L0X_RdByte>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	461a      	mov	r2, r3
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006b28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d02a      	beq.n	8006b86 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006b30:	f107 030e 	add.w	r3, r7, #14
 8006b34:	461a      	mov	r2, r3
 8006b36:	21ee      	movs	r1, #238	; 0xee
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f002 fd6b 	bl	8009614 <VL53L0X_RdByte>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	461a      	mov	r2, r3
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	73fb      	strb	r3, [r7, #15]
 8006b48:	e01d      	b.n	8006b86 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8006b4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006b52:	78bb      	ldrb	r3, [r7, #2]
 8006b54:	461a      	mov	r2, r3
 8006b56:	21cb      	movs	r1, #203	; 0xcb
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f002 fcd9 	bl	8009510 <VL53L0X_WrByte>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	461a      	mov	r2, r3
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006b68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006b70:	787b      	ldrb	r3, [r7, #1]
 8006b72:	2280      	movs	r2, #128	; 0x80
 8006b74:	21ee      	movs	r1, #238	; 0xee
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f002 fd18 	bl	80095ac <VL53L0X_UpdateByte>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006b86:	2201      	movs	r2, #1
 8006b88:	21ff      	movs	r1, #255	; 0xff
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f002 fcc0 	bl	8009510 <VL53L0X_WrByte>
 8006b90:	4603      	mov	r3, r0
 8006b92:	461a      	mov	r2, r3
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f002 fcb6 	bl	8009510 <VL53L0X_WrByte>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006bae:	2200      	movs	r2, #0
 8006bb0:	21ff      	movs	r1, #255	; 0xff
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f002 fcac 	bl	8009510 <VL53L0X_WrByte>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	f023 0310 	bic.w	r3, r3, #16
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	701a      	strb	r2, [r3, #0]

	return Status;
 8006bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b08a      	sub	sp, #40	; 0x28
 8006bde:	af04      	add	r7, sp, #16
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	4611      	mov	r1, r2
 8006be6:	461a      	mov	r2, r3
 8006be8:	460b      	mov	r3, r1
 8006bea:	71fb      	strb	r3, [r7, #7]
 8006bec:	4613      	mov	r3, r2
 8006bee:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006c04:	79bb      	ldrb	r3, [r7, #6]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006c10:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006c12:	2201      	movs	r2, #1
 8006c14:	2101      	movs	r1, #1
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f002 fc7a 	bl	8009510 <VL53L0X_WrByte>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006c28:	2140      	movs	r1, #64	; 0x40
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f7ff ff01 	bl	8006a32 <VL53L0X_perform_single_ref_calibration>
 8006c30:	4603      	mov	r3, r0
 8006c32:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d115      	bne.n	8006c68 <VL53L0X_perform_vhv_calibration+0x8e>
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d112      	bne.n	8006c68 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006c42:	7d39      	ldrb	r1, [r7, #20]
 8006c44:	7d7a      	ldrb	r2, [r7, #21]
 8006c46:	2300      	movs	r3, #0
 8006c48:	9303      	str	r3, [sp, #12]
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	9302      	str	r3, [sp, #8]
 8006c4e:	f107 0313 	add.w	r3, r7, #19
 8006c52:	9301      	str	r3, [sp, #4]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f7ff ff23 	bl	8006aa8 <VL53L0X_ref_calibration_io>
 8006c62:	4603      	mov	r3, r0
 8006c64:	75fb      	strb	r3, [r7, #23]
 8006c66:	e002      	b.n	8006c6e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006c6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d112      	bne.n	8006c9c <VL53L0X_perform_vhv_calibration+0xc2>
 8006c76:	79bb      	ldrb	r3, [r7, #6]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00f      	beq.n	8006c9c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006c7c:	7dbb      	ldrb	r3, [r7, #22]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	2101      	movs	r1, #1
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f002 fc44 	bl	8009510 <VL53L0X_WrByte>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	7dba      	ldrb	r2, [r7, #22]
 8006c98:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08a      	sub	sp, #40	; 0x28
 8006cac:	af04      	add	r7, sp, #16
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	71fb      	strb	r3, [r7, #7]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006cce:	79bb      	ldrb	r3, [r7, #6]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006cda:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006cdc:	2202      	movs	r2, #2
 8006cde:	2101      	movs	r1, #1
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f002 fc15 	bl	8009510 <VL53L0X_WrByte>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d105      	bne.n	8006cfe <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7ff fe9c 	bl	8006a32 <VL53L0X_perform_single_ref_calibration>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d115      	bne.n	8006d32 <VL53L0X_perform_phase_calibration+0x8a>
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d112      	bne.n	8006d32 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006d0c:	7d39      	ldrb	r1, [r7, #20]
 8006d0e:	7d7a      	ldrb	r2, [r7, #21]
 8006d10:	2301      	movs	r3, #1
 8006d12:	9303      	str	r3, [sp, #12]
 8006d14:	2300      	movs	r3, #0
 8006d16:	9302      	str	r3, [sp, #8]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	9301      	str	r3, [sp, #4]
 8006d1c:	f107 0313 	add.w	r3, r7, #19
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	460b      	mov	r3, r1
 8006d24:	2101      	movs	r1, #1
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f7ff febe 	bl	8006aa8 <VL53L0X_ref_calibration_io>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	75fb      	strb	r3, [r7, #23]
 8006d30:	e002      	b.n	8006d38 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006d38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d112      	bne.n	8006d66 <VL53L0X_perform_phase_calibration+0xbe>
 8006d40:	79bb      	ldrb	r3, [r7, #6]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00f      	beq.n	8006d66 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006d46:	7dbb      	ldrb	r3, [r7, #22]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f002 fbdf 	bl	8009510 <VL53L0X_WrByte>
 8006d52:	4603      	mov	r3, r0
 8006d54:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006d56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	7dba      	ldrb	r2, [r7, #22]
 8006d62:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b086      	sub	sp, #24
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006d8e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006d90:	78fa      	ldrb	r2, [r7, #3]
 8006d92:	2300      	movs	r3, #0
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff ff1f 	bl	8006bda <VL53L0X_perform_vhv_calibration>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d107      	bne.n	8006db8 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8006da8:	78fa      	ldrb	r2, [r7, #3]
 8006daa:	2300      	movs	r3, #0
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f7ff ff7a 	bl	8006ca8 <VL53L0X_perform_phase_calibration>
 8006db4:	4603      	mov	r3, r0
 8006db6:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8006db8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10f      	bne.n	8006de0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006dc0:	7dbb      	ldrb	r3, [r7, #22]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f002 fba2 	bl	8009510 <VL53L0X_WrByte>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d103      	bne.n	8006de0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	7dba      	ldrb	r2, [r7, #22]
 8006ddc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006e00:	f107 030f 	add.w	r3, r7, #15
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fe fdff 	bl	8005a0a <VL53L0X_GetMeasurementDataReady>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d110      	bne.n	8006e3a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d00f      	beq.n	8006e3e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	3301      	adds	r3, #1
 8006e22:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e2a:	d302      	bcc.n	8006e32 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006e2c:	23f9      	movs	r3, #249	; 0xf9
 8006e2e:	75fb      	strb	r3, [r7, #23]
			break;
 8006e30:	e006      	b.n	8006e40 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f002 fc8c 	bl	8009750 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006e38:	e7e2      	b.n	8006e00 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8006e3a:	bf00      	nop
 8006e3c:	e000      	b.n	8006e40 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8006e3e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	4603      	mov	r3, r0
 8006e7a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	085b      	lsrs	r3, r3, #1
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8006ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ea8:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006eaa:	e002      	b.n	8006eb2 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	089b      	lsrs	r3, r3, #2
 8006eb0:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d8f8      	bhi.n	8006eac <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8006eba:	e017      	b.n	8006eec <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d30b      	bcc.n	8006ee0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	4413      	add	r3, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	085b      	lsrs	r3, r3, #1
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	4413      	add	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	e002      	b.n	8006ee6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	085b      	lsrs	r3, r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	089b      	lsrs	r3, r3, #2
 8006eea:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e4      	bne.n	8006ebc <VL53L0X_isqrt+0x24>
	}

	return res;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2183      	movs	r1, #131	; 0x83
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f002 fafd 	bl	8009510 <VL53L0X_WrByte>
 8006f16:	4603      	mov	r3, r0
 8006f18:	461a      	mov	r2, r3
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8006f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d11e      	bne.n	8006f66 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006f2c:	f107 030f 	add.w	r3, r7, #15
 8006f30:	461a      	mov	r2, r3
 8006f32:	2183      	movs	r1, #131	; 0x83
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f002 fb6d 	bl	8009614 <VL53L0X_RdByte>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <VL53L0X_device_read_strobe+0x5a>
 8006f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d106      	bne.n	8006f5a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006f58:	d3e8      	bcc.n	8006f2c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006f60:	d301      	bcc.n	8006f66 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006f62:	23f9      	movs	r3, #249	; 0xf9
 8006f64:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006f66:	2201      	movs	r2, #1
 8006f68:	2183      	movs	r1, #131	; 0x83
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f002 fad0 	bl	8009510 <VL53L0X_WrByte>
 8006f70:	4603      	mov	r3, r0
 8006f72:	461a      	mov	r2, r3
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8006f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b098      	sub	sp, #96	; 0x60
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8006fac:	2300      	movs	r3, #0
 8006fae:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8006fb6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006fba:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006fce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8006fd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006fd6:	2b07      	cmp	r3, #7
 8006fd8:	f000 8408 	beq.w	80077ec <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006fdc:	2201      	movs	r2, #1
 8006fde:	2180      	movs	r1, #128	; 0x80
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f002 fa95 	bl	8009510 <VL53L0X_WrByte>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	21ff      	movs	r1, #255	; 0xff
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f002 fa89 	bl	8009510 <VL53L0X_WrByte>
 8006ffe:	4603      	mov	r3, r0
 8007000:	461a      	mov	r2, r3
 8007002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007006:	4313      	orrs	r3, r2
 8007008:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800700c:	2200      	movs	r2, #0
 800700e:	2100      	movs	r1, #0
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f002 fa7d 	bl	8009510 <VL53L0X_WrByte>
 8007016:	4603      	mov	r3, r0
 8007018:	461a      	mov	r2, r3
 800701a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800701e:	4313      	orrs	r3, r2
 8007020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007024:	2206      	movs	r2, #6
 8007026:	21ff      	movs	r1, #255	; 0xff
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f002 fa71 	bl	8009510 <VL53L0X_WrByte>
 800702e:	4603      	mov	r3, r0
 8007030:	461a      	mov	r2, r3
 8007032:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007036:	4313      	orrs	r3, r2
 8007038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800703c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007040:	461a      	mov	r2, r3
 8007042:	2183      	movs	r1, #131	; 0x83
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f002 fae5 	bl	8009614 <VL53L0X_RdByte>
 800704a:	4603      	mov	r3, r0
 800704c:	461a      	mov	r2, r3
 800704e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007052:	4313      	orrs	r3, r2
 8007054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800705c:	f043 0304 	orr.w	r3, r3, #4
 8007060:	b2db      	uxtb	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	2183      	movs	r1, #131	; 0x83
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f002 fa52 	bl	8009510 <VL53L0X_WrByte>
 800706c:	4603      	mov	r3, r0
 800706e:	461a      	mov	r2, r3
 8007070:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007074:	4313      	orrs	r3, r2
 8007076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800707a:	2207      	movs	r2, #7
 800707c:	21ff      	movs	r1, #255	; 0xff
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f002 fa46 	bl	8009510 <VL53L0X_WrByte>
 8007084:	4603      	mov	r3, r0
 8007086:	461a      	mov	r2, r3
 8007088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800708c:	4313      	orrs	r3, r2
 800708e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007092:	2201      	movs	r2, #1
 8007094:	2181      	movs	r1, #129	; 0x81
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f002 fa3a 	bl	8009510 <VL53L0X_WrByte>
 800709c:	4603      	mov	r3, r0
 800709e:	461a      	mov	r2, r3
 80070a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070a4:	4313      	orrs	r3, r2
 80070a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f002 fb50 	bl	8009750 <VL53L0X_PollingDelay>
 80070b0:	4603      	mov	r3, r0
 80070b2:	461a      	mov	r2, r3
 80070b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80070be:	2201      	movs	r2, #1
 80070c0:	2180      	movs	r1, #128	; 0x80
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f002 fa24 	bl	8009510 <VL53L0X_WrByte>
 80070c8:	4603      	mov	r3, r0
 80070ca:	461a      	mov	r2, r3
 80070cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8098 	beq.w	8007212 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80070e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80070e6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f040 8091 	bne.w	8007212 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80070f0:	226b      	movs	r2, #107	; 0x6b
 80070f2:	2194      	movs	r1, #148	; 0x94
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f002 fa0b 	bl	8009510 <VL53L0X_WrByte>
 80070fa:	4603      	mov	r3, r0
 80070fc:	461a      	mov	r2, r3
 80070fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007102:	4313      	orrs	r3, r2
 8007104:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff fef9 	bl	8006f00 <VL53L0X_device_read_strobe>
 800710e:	4603      	mov	r3, r0
 8007110:	461a      	mov	r2, r3
 8007112:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007116:	4313      	orrs	r3, r2
 8007118:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800711c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007120:	461a      	mov	r2, r3
 8007122:	2190      	movs	r1, #144	; 0x90
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f002 fad7 	bl	80096d8 <VL53L0X_RdDWord>
 800712a:	4603      	mov	r3, r0
 800712c:	461a      	mov	r2, r3
 800712e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007132:	4313      	orrs	r3, r2
 8007134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713a:	0a1b      	lsrs	r3, r3, #8
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007142:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	0bdb      	lsrs	r3, r3, #15
 800714a:	b2db      	uxtb	r3, r3
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8007154:	2224      	movs	r2, #36	; 0x24
 8007156:	2194      	movs	r1, #148	; 0x94
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f002 f9d9 	bl	8009510 <VL53L0X_WrByte>
 800715e:	4603      	mov	r3, r0
 8007160:	461a      	mov	r2, r3
 8007162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007166:	4313      	orrs	r3, r2
 8007168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff fec7 	bl	8006f00 <VL53L0X_device_read_strobe>
 8007172:	4603      	mov	r3, r0
 8007174:	461a      	mov	r2, r3
 8007176:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800717a:	4313      	orrs	r3, r2
 800717c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007184:	461a      	mov	r2, r3
 8007186:	2190      	movs	r1, #144	; 0x90
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f002 faa5 	bl	80096d8 <VL53L0X_RdDWord>
 800718e:	4603      	mov	r3, r0
 8007190:	461a      	mov	r2, r3
 8007192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007196:	4313      	orrs	r3, r2
 8007198:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	0e1b      	lsrs	r3, r3, #24
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	0c1b      	lsrs	r3, r3, #16
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80071ba:	2225      	movs	r2, #37	; 0x25
 80071bc:	2194      	movs	r1, #148	; 0x94
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f002 f9a6 	bl	8009510 <VL53L0X_WrByte>
 80071c4:	4603      	mov	r3, r0
 80071c6:	461a      	mov	r2, r3
 80071c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff fe94 	bl	8006f00 <VL53L0X_device_read_strobe>
 80071d8:	4603      	mov	r3, r0
 80071da:	461a      	mov	r2, r3
 80071dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80071e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071ea:	461a      	mov	r2, r3
 80071ec:	2190      	movs	r1, #144	; 0x90
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f002 fa72 	bl	80096d8 <VL53L0X_RdDWord>
 80071f4:	4603      	mov	r3, r0
 80071f6:	461a      	mov	r2, r3
 80071f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	0e1b      	lsrs	r3, r3, #24
 8007206:	b2db      	uxtb	r3, r3
 8007208:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	0c1b      	lsrs	r3, r3, #16
 800720e:	b2db      	uxtb	r3, r3
 8007210:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8189 	beq.w	8007530 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800721e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007222:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007226:	2b00      	cmp	r3, #0
 8007228:	f040 8182 	bne.w	8007530 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800722c:	2202      	movs	r2, #2
 800722e:	2194      	movs	r1, #148	; 0x94
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f002 f96d 	bl	8009510 <VL53L0X_WrByte>
 8007236:	4603      	mov	r3, r0
 8007238:	461a      	mov	r2, r3
 800723a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800723e:	4313      	orrs	r3, r2
 8007240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff fe5b 	bl	8006f00 <VL53L0X_device_read_strobe>
 800724a:	4603      	mov	r3, r0
 800724c:	461a      	mov	r2, r3
 800724e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007252:	4313      	orrs	r3, r2
 8007254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007258:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800725c:	461a      	mov	r2, r3
 800725e:	2190      	movs	r1, #144	; 0x90
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f002 f9d7 	bl	8009614 <VL53L0X_RdByte>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800726e:	4313      	orrs	r3, r2
 8007270:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007274:	227b      	movs	r2, #123	; 0x7b
 8007276:	2194      	movs	r1, #148	; 0x94
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f002 f949 	bl	8009510 <VL53L0X_WrByte>
 800727e:	4603      	mov	r3, r0
 8007280:	461a      	mov	r2, r3
 8007282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007286:	4313      	orrs	r3, r2
 8007288:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff fe37 	bl	8006f00 <VL53L0X_device_read_strobe>
 8007292:	4603      	mov	r3, r0
 8007294:	461a      	mov	r2, r3
 8007296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800729a:	4313      	orrs	r3, r2
 800729c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80072a0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80072a4:	461a      	mov	r2, r3
 80072a6:	2190      	movs	r1, #144	; 0x90
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f002 f9b3 	bl	8009614 <VL53L0X_RdByte>
 80072ae:	4603      	mov	r3, r0
 80072b0:	461a      	mov	r2, r3
 80072b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80072bc:	2277      	movs	r2, #119	; 0x77
 80072be:	2194      	movs	r1, #148	; 0x94
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f002 f925 	bl	8009510 <VL53L0X_WrByte>
 80072c6:	4603      	mov	r3, r0
 80072c8:	461a      	mov	r2, r3
 80072ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff fe13 	bl	8006f00 <VL53L0X_device_read_strobe>
 80072da:	4603      	mov	r3, r0
 80072dc:	461a      	mov	r2, r3
 80072de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80072e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072ec:	461a      	mov	r2, r3
 80072ee:	2190      	movs	r1, #144	; 0x90
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f002 f9f1 	bl	80096d8 <VL53L0X_RdDWord>
 80072f6:	4603      	mov	r3, r0
 80072f8:	461a      	mov	r2, r3
 80072fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072fe:	4313      	orrs	r3, r2
 8007300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	0e5b      	lsrs	r3, r3, #25
 8007308:	b2db      	uxtb	r3, r3
 800730a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730e:	b2db      	uxtb	r3, r3
 8007310:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	0c9b      	lsrs	r3, r3, #18
 8007316:	b2db      	uxtb	r3, r3
 8007318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731c:	b2db      	uxtb	r3, r3
 800731e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	0adb      	lsrs	r3, r3, #11
 8007324:	b2db      	uxtb	r3, r3
 8007326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732a:	b2db      	uxtb	r3, r3
 800732c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	091b      	lsrs	r3, r3, #4
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007338:	b2db      	uxtb	r3, r3
 800733a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	b2db      	uxtb	r3, r3
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007348:	b2db      	uxtb	r3, r3
 800734a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800734e:	2278      	movs	r2, #120	; 0x78
 8007350:	2194      	movs	r1, #148	; 0x94
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f002 f8dc 	bl	8009510 <VL53L0X_WrByte>
 8007358:	4603      	mov	r3, r0
 800735a:	461a      	mov	r2, r3
 800735c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007360:	4313      	orrs	r3, r2
 8007362:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff fdca 	bl	8006f00 <VL53L0X_device_read_strobe>
 800736c:	4603      	mov	r3, r0
 800736e:	461a      	mov	r2, r3
 8007370:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007374:	4313      	orrs	r3, r2
 8007376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800737a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800737e:	461a      	mov	r2, r3
 8007380:	2190      	movs	r1, #144	; 0x90
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f002 f9a8 	bl	80096d8 <VL53L0X_RdDWord>
 8007388:	4603      	mov	r3, r0
 800738a:	461a      	mov	r2, r3
 800738c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007390:	4313      	orrs	r3, r2
 8007392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	0f5b      	lsrs	r3, r3, #29
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a0:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80073a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073a6:	4413      	add	r3, r2
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	0d9b      	lsrs	r3, r3, #22
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	0bdb      	lsrs	r3, r3, #15
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	0a1b      	lsrs	r3, r3, #8
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	085b      	lsrs	r3, r3, #1
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	019b      	lsls	r3, r3, #6
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80073f6:	2279      	movs	r2, #121	; 0x79
 80073f8:	2194      	movs	r1, #148	; 0x94
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f002 f888 	bl	8009510 <VL53L0X_WrByte>
 8007400:	4603      	mov	r3, r0
 8007402:	461a      	mov	r2, r3
 8007404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007408:	4313      	orrs	r3, r2
 800740a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff fd76 	bl	8006f00 <VL53L0X_device_read_strobe>
 8007414:	4603      	mov	r3, r0
 8007416:	461a      	mov	r2, r3
 8007418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800741c:	4313      	orrs	r3, r2
 800741e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007426:	461a      	mov	r2, r3
 8007428:	2190      	movs	r1, #144	; 0x90
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f002 f954 	bl	80096d8 <VL53L0X_RdDWord>
 8007430:	4603      	mov	r3, r0
 8007432:	461a      	mov	r2, r3
 8007434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007438:	4313      	orrs	r3, r2
 800743a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	0e9b      	lsrs	r3, r3, #26
 8007442:	b2db      	uxtb	r3, r3
 8007444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007448:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800744a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800744e:	4413      	add	r3, r2
 8007450:	b2db      	uxtb	r3, r3
 8007452:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	0cdb      	lsrs	r3, r3, #19
 8007458:	b2db      	uxtb	r3, r3
 800745a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800745e:	b2db      	uxtb	r3, r3
 8007460:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	0b1b      	lsrs	r3, r3, #12
 8007466:	b2db      	uxtb	r3, r3
 8007468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800746c:	b2db      	uxtb	r3, r3
 800746e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	b2db      	uxtb	r3, r3
 8007476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800747a:	b2db      	uxtb	r3, r3
 800747c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	b2db      	uxtb	r3, r3
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007490:	227a      	movs	r2, #122	; 0x7a
 8007492:	2194      	movs	r1, #148	; 0x94
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f002 f83b 	bl	8009510 <VL53L0X_WrByte>
 800749a:	4603      	mov	r3, r0
 800749c:	461a      	mov	r2, r3
 800749e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff fd29 	bl	8006f00 <VL53L0X_device_read_strobe>
 80074ae:	4603      	mov	r3, r0
 80074b0:	461a      	mov	r2, r3
 80074b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074b6:	4313      	orrs	r3, r2
 80074b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80074bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074c0:	461a      	mov	r2, r3
 80074c2:	2190      	movs	r1, #144	; 0x90
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f002 f907 	bl	80096d8 <VL53L0X_RdDWord>
 80074ca:	4603      	mov	r3, r0
 80074cc:	461a      	mov	r2, r3
 80074ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	0f9b      	lsrs	r3, r3, #30
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80074e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074e8:	4413      	add	r3, r2
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	0ddb      	lsrs	r3, r3, #23
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	0c1b      	lsrs	r3, r3, #16
 8007500:	b2db      	uxtb	r3, r3
 8007502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007506:	b2db      	uxtb	r3, r3
 8007508:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	0a5b      	lsrs	r3, r3, #9
 800750e:	b2db      	uxtb	r3, r3
 8007510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	089b      	lsrs	r3, r3, #2
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007524:	b2db      	uxtb	r3, r3
 8007526:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800752a:	2300      	movs	r3, #0
 800752c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	f003 0304 	and.w	r3, r3, #4
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 80f1 	beq.w	800771e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800753c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007540:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007544:	2b00      	cmp	r3, #0
 8007546:	f040 80ea 	bne.w	800771e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800754a:	227b      	movs	r2, #123	; 0x7b
 800754c:	2194      	movs	r1, #148	; 0x94
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 ffde 	bl	8009510 <VL53L0X_WrByte>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800755c:	4313      	orrs	r3, r2
 800755e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff fccc 	bl	8006f00 <VL53L0X_device_read_strobe>
 8007568:	4603      	mov	r3, r0
 800756a:	461a      	mov	r2, r3
 800756c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007570:	4313      	orrs	r3, r2
 8007572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800757a:	461a      	mov	r2, r3
 800757c:	2190      	movs	r1, #144	; 0x90
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f002 f8aa 	bl	80096d8 <VL53L0X_RdDWord>
 8007584:	4603      	mov	r3, r0
 8007586:	461a      	mov	r2, r3
 8007588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800758c:	4313      	orrs	r3, r2
 800758e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007592:	227c      	movs	r2, #124	; 0x7c
 8007594:	2194      	movs	r1, #148	; 0x94
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 ffba 	bl	8009510 <VL53L0X_WrByte>
 800759c:	4603      	mov	r3, r0
 800759e:	461a      	mov	r2, r3
 80075a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075a4:	4313      	orrs	r3, r2
 80075a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff fca8 	bl	8006f00 <VL53L0X_device_read_strobe>
 80075b0:	4603      	mov	r3, r0
 80075b2:	461a      	mov	r2, r3
 80075b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80075be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075c2:	461a      	mov	r2, r3
 80075c4:	2190      	movs	r1, #144	; 0x90
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f002 f886 	bl	80096d8 <VL53L0X_RdDWord>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075d4:	4313      	orrs	r3, r2
 80075d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80075da:	2273      	movs	r2, #115	; 0x73
 80075dc:	2194      	movs	r1, #148	; 0x94
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 ff96 	bl	8009510 <VL53L0X_WrByte>
 80075e4:	4603      	mov	r3, r0
 80075e6:	461a      	mov	r2, r3
 80075e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075ec:	4313      	orrs	r3, r2
 80075ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff fc84 	bl	8006f00 <VL53L0X_device_read_strobe>
 80075f8:	4603      	mov	r3, r0
 80075fa:	461a      	mov	r2, r3
 80075fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007600:	4313      	orrs	r3, r2
 8007602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800760a:	461a      	mov	r2, r3
 800760c:	2190      	movs	r1, #144	; 0x90
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f002 f862 	bl	80096d8 <VL53L0X_RdDWord>
 8007614:	4603      	mov	r3, r0
 8007616:	461a      	mov	r2, r3
 8007618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800761c:	4313      	orrs	r3, r2
 800761e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8007626:	b29b      	uxth	r3, r3
 8007628:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800762a:	2274      	movs	r2, #116	; 0x74
 800762c:	2194      	movs	r1, #148	; 0x94
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 ff6e 	bl	8009510 <VL53L0X_WrByte>
 8007634:	4603      	mov	r3, r0
 8007636:	461a      	mov	r2, r3
 8007638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800763c:	4313      	orrs	r3, r2
 800763e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7ff fc5c 	bl	8006f00 <VL53L0X_device_read_strobe>
 8007648:	4603      	mov	r3, r0
 800764a:	461a      	mov	r2, r3
 800764c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007650:	4313      	orrs	r3, r2
 8007652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007656:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800765a:	461a      	mov	r2, r3
 800765c:	2190      	movs	r1, #144	; 0x90
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f002 f83a 	bl	80096d8 <VL53L0X_RdDWord>
 8007664:	4603      	mov	r3, r0
 8007666:	461a      	mov	r2, r3
 8007668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800766c:	4313      	orrs	r3, r2
 800766e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007676:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007678:	4313      	orrs	r3, r2
 800767a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800767c:	2275      	movs	r2, #117	; 0x75
 800767e:	2194      	movs	r1, #148	; 0x94
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 ff45 	bl	8009510 <VL53L0X_WrByte>
 8007686:	4603      	mov	r3, r0
 8007688:	461a      	mov	r2, r3
 800768a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800768e:	4313      	orrs	r3, r2
 8007690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff fc33 	bl	8006f00 <VL53L0X_device_read_strobe>
 800769a:	4603      	mov	r3, r0
 800769c:	461a      	mov	r2, r3
 800769e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80076a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076ac:	461a      	mov	r2, r3
 80076ae:	2190      	movs	r1, #144	; 0x90
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f002 f811 	bl	80096d8 <VL53L0X_RdDWord>
 80076b6:	4603      	mov	r3, r0
 80076b8:	461a      	mov	r2, r3
 80076ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076be:	4313      	orrs	r3, r2
 80076c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80076cc:	2276      	movs	r2, #118	; 0x76
 80076ce:	2194      	movs	r1, #148	; 0x94
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 ff1d 	bl	8009510 <VL53L0X_WrByte>
 80076d6:	4603      	mov	r3, r0
 80076d8:	461a      	mov	r2, r3
 80076da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076de:	4313      	orrs	r3, r2
 80076e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff fc0b 	bl	8006f00 <VL53L0X_device_read_strobe>
 80076ea:	4603      	mov	r3, r0
 80076ec:	461a      	mov	r2, r3
 80076ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80076f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076fc:	461a      	mov	r2, r3
 80076fe:	2190      	movs	r1, #144	; 0x90
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 ffe9 	bl	80096d8 <VL53L0X_RdDWord>
 8007706:	4603      	mov	r3, r0
 8007708:	461a      	mov	r2, r3
 800770a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800770e:	4313      	orrs	r3, r2
 8007710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007718:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800771a:	4313      	orrs	r3, r2
 800771c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800771e:	2200      	movs	r2, #0
 8007720:	2181      	movs	r1, #129	; 0x81
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fef4 	bl	8009510 <VL53L0X_WrByte>
 8007728:	4603      	mov	r3, r0
 800772a:	461a      	mov	r2, r3
 800772c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007730:	4313      	orrs	r3, r2
 8007732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007736:	2206      	movs	r2, #6
 8007738:	21ff      	movs	r1, #255	; 0xff
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fee8 	bl	8009510 <VL53L0X_WrByte>
 8007740:	4603      	mov	r3, r0
 8007742:	461a      	mov	r2, r3
 8007744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007748:	4313      	orrs	r3, r2
 800774a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800774e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007752:	461a      	mov	r2, r3
 8007754:	2183      	movs	r1, #131	; 0x83
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 ff5c 	bl	8009614 <VL53L0X_RdByte>
 800775c:	4603      	mov	r3, r0
 800775e:	461a      	mov	r2, r3
 8007760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007764:	4313      	orrs	r3, r2
 8007766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800776a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800776e:	f023 0304 	bic.w	r3, r3, #4
 8007772:	b2db      	uxtb	r3, r3
 8007774:	461a      	mov	r2, r3
 8007776:	2183      	movs	r1, #131	; 0x83
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 fec9 	bl	8009510 <VL53L0X_WrByte>
 800777e:	4603      	mov	r3, r0
 8007780:	461a      	mov	r2, r3
 8007782:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007786:	4313      	orrs	r3, r2
 8007788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800778c:	2201      	movs	r2, #1
 800778e:	21ff      	movs	r1, #255	; 0xff
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 febd 	bl	8009510 <VL53L0X_WrByte>
 8007796:	4603      	mov	r3, r0
 8007798:	461a      	mov	r2, r3
 800779a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800779e:	4313      	orrs	r3, r2
 80077a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80077a4:	2201      	movs	r2, #1
 80077a6:	2100      	movs	r1, #0
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 feb1 	bl	8009510 <VL53L0X_WrByte>
 80077ae:	4603      	mov	r3, r0
 80077b0:	461a      	mov	r2, r3
 80077b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80077bc:	2200      	movs	r2, #0
 80077be:	21ff      	movs	r1, #255	; 0xff
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 fea5 	bl	8009510 <VL53L0X_WrByte>
 80077c6:	4603      	mov	r3, r0
 80077c8:	461a      	mov	r2, r3
 80077ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80077d4:	2200      	movs	r2, #0
 80077d6:	2180      	movs	r1, #128	; 0x80
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 fe99 	bl	8009510 <VL53L0X_WrByte>
 80077de:	4603      	mov	r3, r0
 80077e0:	461a      	mov	r2, r3
 80077e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077e6:	4313      	orrs	r3, r2
 80077e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80077ec:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 808f 	bne.w	8007914 <VL53L0X_get_info_from_device+0x98e>
 80077f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077fa:	2b07      	cmp	r3, #7
 80077fc:	f000 808a 	beq.w	8007914 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d024      	beq.n	8007854 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800780a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800780e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007812:	2b00      	cmp	r3, #0
 8007814:	d11e      	bne.n	8007854 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800781c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007826:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800782a:	2300      	movs	r3, #0
 800782c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800782e:	e00e      	b.n	800784e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007830:	f107 0208 	add.w	r2, r7, #8
 8007834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007836:	4413      	add	r3, r2
 8007838:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783e:	4413      	add	r3, r2
 8007840:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007844:	460a      	mov	r2, r1
 8007846:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800784a:	3301      	adds	r3, #1
 800784c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800784e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007850:	2b05      	cmp	r3, #5
 8007852:	dded      	ble.n	8007830 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d018      	beq.n	8007890 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800785e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007862:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007866:	2b00      	cmp	r3, #0
 8007868:	d112      	bne.n	8007890 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800786a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007874:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	33f3      	adds	r3, #243	; 0xf3
 8007882:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007884:	f107 0310 	add.w	r3, r7, #16
 8007888:	4619      	mov	r1, r3
 800788a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800788c:	f001 ffce 	bl	800982c <strcpy>

		}

		if (((option & 4) == 4) &&
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	d030      	beq.n	80078fc <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800789a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800789e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d12a      	bne.n	80078fc <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80078a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80078ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80078b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b8:	025b      	lsls	r3, r3, #9
 80078ba:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078c0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80078ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d011      	beq.n	80078f4 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80078d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80078d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80078de:	fb02 f303 	mul.w	r3, r2, r3
 80078e2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80078e4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80078e8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80078ec:	425b      	negs	r3, r3
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80078f4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80078fc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	4313      	orrs	r3, r2
 8007904:	b2db      	uxtb	r3, r3
 8007906:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800790a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007914:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007918:	4618      	mov	r0, r3
 800791a:	3760      	adds	r7, #96	; 0x60
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007920:	b490      	push	{r4, r7}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800792c:	f240 6377 	movw	r3, #1655	; 0x677
 8007930:	f04f 0400 	mov.w	r4, #0
 8007934:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8007938:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800793c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	fb02 f303 	mul.w	r3, r2, r3
 800794c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800794e:	68bb      	ldr	r3, [r7, #8]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bc90      	pop	{r4, r7}
 8007958:	4770      	bx	lr

0800795a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800795a:	b480      	push	{r7}
 800795c:	b087      	sub	sp, #28
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800796a:	2300      	movs	r3, #0
 800796c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d017      	beq.n	80079a4 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3b01      	subs	r3, #1
 8007978:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800797a:	e005      	b.n	8007988 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	085b      	lsrs	r3, r3, #1
 8007980:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007982:	89fb      	ldrh	r3, [r7, #14]
 8007984:	3301      	adds	r3, #1
 8007986:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1f4      	bne.n	800797c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007992:	89fb      	ldrh	r3, [r7, #14]
 8007994:	021b      	lsls	r3, r3, #8
 8007996:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	b29b      	uxth	r3, r3
 800799c:	b2db      	uxtb	r3, r3
 800799e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80079a0:	4413      	add	r3, r2
 80079a2:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80079a4:	8afb      	ldrh	r3, [r7, #22]

}
 80079a6:	4618      	mov	r0, r3
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b085      	sub	sp, #20
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	4603      	mov	r3, r0
 80079ba:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80079c4:	88fa      	ldrh	r2, [r7, #6]
 80079c6:	0a12      	lsrs	r2, r2, #8
 80079c8:	b292      	uxth	r2, r2
 80079ca:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80079cc:	3301      	adds	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80079d0:	68fb      	ldr	r3, [r7, #12]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
	...

080079e0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	4619      	mov	r1, r3
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7ff ff92 	bl	8007920 <VL53L0X_calc_macro_period_ps>
 80079fc:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a04:	4a0a      	ldr	r2, [pc, #40]	; (8007a30 <VL53L0X_calc_timeout_mclks+0x50>)
 8007a06:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0a:	099b      	lsrs	r3, r3, #6
 8007a0c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a14:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	441a      	add	r2, r3
	timeout_period_mclks =
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a24:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8007a26:	69fb      	ldr	r3, [r7, #28]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3720      	adds	r7, #32
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	10624dd3 	.word	0x10624dd3

08007a34 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	807b      	strh	r3, [r7, #2]
 8007a40:	4613      	mov	r3, r2
 8007a42:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007a48:	787b      	ldrb	r3, [r7, #1]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff ff67 	bl	8007920 <VL53L0X_calc_macro_period_ps>
 8007a52:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a5a:	4a0a      	ldr	r2, [pc, #40]	; (8007a84 <VL53L0X_calc_timeout_us+0x50>)
 8007a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a60:	099b      	lsrs	r3, r3, #6
 8007a62:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007a64:	887b      	ldrh	r3, [r7, #2]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	fb02 f303 	mul.w	r3, r2, r3
 8007a6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007a70:	4a04      	ldr	r2, [pc, #16]	; (8007a84 <VL53L0X_calc_timeout_us+0x50>)
 8007a72:	fba2 2303 	umull	r2, r3, r2, r3
 8007a76:	099b      	lsrs	r3, r3, #6
 8007a78:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007a7a:	697b      	ldr	r3, [r7, #20]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	10624dd3 	.word	0x10624dd3

08007a88 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08c      	sub	sp, #48	; 0x30
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	460b      	mov	r3, r1
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007aae:	7afb      	ldrb	r3, [r7, #11]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <get_sequence_step_timeout+0x38>
 8007ab4:	7afb      	ldrb	r3, [r7, #11]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d002      	beq.n	8007ac0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007aba:	7afb      	ldrb	r3, [r7, #11]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d128      	bne.n	8007b12 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ac0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7fd fa7d 	bl	8004fc8 <VL53L0X_GetVcselPulsePeriod>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007ad4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d109      	bne.n	8007af0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007adc:	f107 0320 	add.w	r3, r7, #32
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2146      	movs	r1, #70	; 0x46
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f001 fd95 	bl	8009614 <VL53L0X_RdByte>
 8007aea:	4603      	mov	r3, r0
 8007aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007af0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff ff5b 	bl	80079b2 <VL53L0X_decode_timeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007b00:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007b04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007b06:	4619      	mov	r1, r3
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7ff ff93 	bl	8007a34 <VL53L0X_calc_timeout_us>
 8007b0e:	62b8      	str	r0, [r7, #40]	; 0x28
 8007b10:	e092      	b.n	8007c38 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007b12:	7afb      	ldrb	r3, [r7, #11]
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d135      	bne.n	8007b84 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007b18:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	2100      	movs	r1, #0
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7fd fa51 	bl	8004fc8 <VL53L0X_GetVcselPulsePeriod>
 8007b26:	4603      	mov	r3, r0
 8007b28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007b2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f040 8081 	bne.w	8007c38 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007b36:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f7fd fa42 	bl	8004fc8 <VL53L0X_GetVcselPulsePeriod>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007b4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007b52:	f107 031e 	add.w	r3, r7, #30
 8007b56:	461a      	mov	r2, r3
 8007b58:	2151      	movs	r1, #81	; 0x51
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f001 fd84 	bl	8009668 <VL53L0X_RdWord>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007b66:	8bfb      	ldrh	r3, [r7, #30]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff ff22 	bl	80079b2 <VL53L0X_decode_timeout>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007b72:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007b76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b78:	4619      	mov	r1, r3
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f7ff ff5a 	bl	8007a34 <VL53L0X_calc_timeout_us>
 8007b80:	62b8      	str	r0, [r7, #40]	; 0x28
 8007b82:	e059      	b.n	8007c38 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007b84:	7afb      	ldrb	r3, [r7, #11]
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d156      	bne.n	8007c38 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007b8a:	f107 0314 	add.w	r3, r7, #20
 8007b8e:	4619      	mov	r1, r3
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f7fd fb25 	bl	80051e0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d01d      	beq.n	8007bdc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ba0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7fd fa0d 	bl	8004fc8 <VL53L0X_GetVcselPulsePeriod>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007bb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10f      	bne.n	8007bdc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007bbc:	f107 031e 	add.w	r3, r7, #30
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	2151      	movs	r1, #81	; 0x51
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f001 fd4f 	bl	8009668 <VL53L0X_RdWord>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007bd0:	8bfb      	ldrh	r3, [r7, #30]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff feed 	bl	80079b2 <VL53L0X_decode_timeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007bdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d109      	bne.n	8007bf8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007be4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007be8:	461a      	mov	r2, r3
 8007bea:	2101      	movs	r1, #1
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f7fd f9eb 	bl	8004fc8 <VL53L0X_GetVcselPulsePeriod>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007bf8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10f      	bne.n	8007c20 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007c00:	f107 031c 	add.w	r3, r7, #28
 8007c04:	461a      	mov	r2, r3
 8007c06:	2171      	movs	r1, #113	; 0x71
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f001 fd2d 	bl	8009668 <VL53L0X_RdWord>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007c14:	8bbb      	ldrh	r3, [r7, #28]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fecb 	bl	80079b2 <VL53L0X_decode_timeout>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007c20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007c28:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007c2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c2e:	4619      	mov	r1, r3
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff feff 	bl	8007a34 <VL53L0X_calc_timeout_us>
 8007c36:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c3c:	601a      	str	r2, [r3, #0]

	return Status;
 8007c3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3730      	adds	r7, #48	; 0x30
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b08a      	sub	sp, #40	; 0x28
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	460b      	mov	r3, r1
 8007c54:	607a      	str	r2, [r7, #4]
 8007c56:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <set_sequence_step_timeout+0x26>
 8007c64:	7afb      	ldrb	r3, [r7, #11]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d002      	beq.n	8007c70 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007c6a:	7afb      	ldrb	r3, [r7, #11]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d138      	bne.n	8007ce2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007c70:	f107 031b 	add.w	r3, r7, #27
 8007c74:	461a      	mov	r2, r3
 8007c76:	2100      	movs	r1, #0
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f7fd f9a5 	bl	8004fc8 <VL53L0X_GetVcselPulsePeriod>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007c84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11a      	bne.n	8007cc2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007c8c:	7efb      	ldrb	r3, [r7, #27]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff fea4 	bl	80079e0 <VL53L0X_calc_timeout_mclks>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007c9c:	8bbb      	ldrh	r3, [r7, #28]
 8007c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ca2:	d903      	bls.n	8007cac <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007ca4:	23ff      	movs	r3, #255	; 0xff
 8007ca6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007caa:	e004      	b.n	8007cb6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007cac:	8bbb      	ldrh	r3, [r7, #28]
 8007cae:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007cb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007cc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f040 80ab 	bne.w	8007e22 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	2146      	movs	r1, #70	; 0x46
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f001 fc1b 	bl	8009510 <VL53L0X_WrByte>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007ce0:	e09f      	b.n	8007e22 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007ce2:	7afb      	ldrb	r3, [r7, #11]
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d135      	bne.n	8007d54 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007ce8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d11b      	bne.n	8007d28 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007cf0:	f107 031b 	add.w	r3, r7, #27
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7fd f965 	bl	8004fc8 <VL53L0X_GetVcselPulsePeriod>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007d04:	7efb      	ldrb	r3, [r7, #27]
 8007d06:	461a      	mov	r2, r3
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff fe68 	bl	80079e0 <VL53L0X_calc_timeout_mclks>
 8007d10:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007d12:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff fe1f 	bl	800795a <VL53L0X_encode_timeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007d20:	8b3a      	ldrh	r2, [r7, #24]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007d28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d108      	bne.n	8007d42 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007d30:	8b3b      	ldrh	r3, [r7, #24]
 8007d32:	461a      	mov	r2, r3
 8007d34:	2151      	movs	r1, #81	; 0x51
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f001 fc0e 	bl	8009558 <VL53L0X_WrWord>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007d42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d16b      	bne.n	8007e22 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8007d52:	e066      	b.n	8007e22 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d160      	bne.n	8007e1c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8007d5a:	f107 0310 	add.w	r3, r7, #16
 8007d5e:	4619      	mov	r1, r3
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7fd fa3d 	bl	80051e0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8007d6a:	7cfb      	ldrb	r3, [r7, #19]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01d      	beq.n	8007dac <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007d70:	f107 031b 	add.w	r3, r7, #27
 8007d74:	461a      	mov	r2, r3
 8007d76:	2100      	movs	r1, #0
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7fd f925 	bl	8004fc8 <VL53L0X_GetVcselPulsePeriod>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8007d84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10f      	bne.n	8007dac <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007d8c:	f107 0318 	add.w	r3, r7, #24
 8007d90:	461a      	mov	r2, r3
 8007d92:	2151      	movs	r1, #81	; 0x51
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f001 fc67 	bl	8009668 <VL53L0X_RdWord>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8007da0:	8b3b      	ldrh	r3, [r7, #24]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fe05 	bl	80079b2 <VL53L0X_decode_timeout>
 8007da8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8007daa:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007dac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d109      	bne.n	8007dc8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007db4:	f107 031b 	add.w	r3, r7, #27
 8007db8:	461a      	mov	r2, r3
 8007dba:	2101      	movs	r1, #1
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7fd f903 	bl	8004fc8 <VL53L0X_GetVcselPulsePeriod>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007dc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d128      	bne.n	8007e22 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007dd0:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7ff fe02 	bl	80079e0 <VL53L0X_calc_timeout_mclks>
 8007ddc:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8007dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007de0:	6a3a      	ldr	r2, [r7, #32]
 8007de2:	4413      	add	r3, r2
 8007de4:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8007de6:	6a38      	ldr	r0, [r7, #32]
 8007de8:	f7ff fdb7 	bl	800795a <VL53L0X_encode_timeout>
 8007dec:	4603      	mov	r3, r0
 8007dee:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8007df0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d108      	bne.n	8007e0a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007df8:	8bfb      	ldrh	r3, [r7, #30]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	2171      	movs	r1, #113	; 0x71
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f001 fbaa 	bl	8009558 <VL53L0X_WrWord>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8007e0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d107      	bne.n	8007e22 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8007e1a:	e002      	b.n	8007e22 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e1c:	23fc      	movs	r3, #252	; 0xfc
 8007e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8007e22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3728      	adds	r7, #40	; 0x28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b08a      	sub	sp, #40	; 0x28
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8007e44:	230c      	movs	r3, #12
 8007e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8007e4a:	2312      	movs	r3, #18
 8007e4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8007e50:	2308      	movs	r3, #8
 8007e52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8007e56:	230e      	movs	r3, #14
 8007e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8007e60:	78bb      	ldrb	r3, [r7, #2]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e6c:	23fc      	movs	r3, #252	; 0xfc
 8007e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e72:	e020      	b.n	8007eb6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10d      	bne.n	8007e96 <VL53L0X_set_vcsel_pulse_period+0x68>
 8007e7a:	78ba      	ldrb	r2, [r7, #2]
 8007e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d304      	bcc.n	8007e8e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8007e84:	78ba      	ldrb	r2, [r7, #2]
 8007e86:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d903      	bls.n	8007e96 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e8e:	23fc      	movs	r3, #252	; 0xfc
 8007e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e94:	e00f      	b.n	8007eb6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8007e96:	78fb      	ldrb	r3, [r7, #3]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d10c      	bne.n	8007eb6 <VL53L0X_set_vcsel_pulse_period+0x88>
 8007e9c:	78ba      	ldrb	r2, [r7, #2]
 8007e9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d304      	bcc.n	8007eb0 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8007ea6:	78ba      	ldrb	r2, [r7, #2]
 8007ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d902      	bls.n	8007eb6 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007eb0:	23fc      	movs	r3, #252	; 0xfc
 8007eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8007eb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8007ebe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ec2:	e239      	b.n	8008338 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d150      	bne.n	8007f6c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8007eca:	78bb      	ldrb	r3, [r7, #2]
 8007ecc:	2b0c      	cmp	r3, #12
 8007ece:	d110      	bne.n	8007ef2 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8007ed0:	2218      	movs	r2, #24
 8007ed2:	2157      	movs	r1, #87	; 0x57
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 fb1b 	bl	8009510 <VL53L0X_WrByte>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	2156      	movs	r1, #86	; 0x56
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 fb13 	bl	8009510 <VL53L0X_WrByte>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ef0:	e17f      	b.n	80081f2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007ef2:	78bb      	ldrb	r3, [r7, #2]
 8007ef4:	2b0e      	cmp	r3, #14
 8007ef6:	d110      	bne.n	8007f1a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8007ef8:	2230      	movs	r2, #48	; 0x30
 8007efa:	2157      	movs	r1, #87	; 0x57
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 fb07 	bl	8009510 <VL53L0X_WrByte>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8007f08:	2208      	movs	r2, #8
 8007f0a:	2156      	movs	r1, #86	; 0x56
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 faff 	bl	8009510 <VL53L0X_WrByte>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f18:	e16b      	b.n	80081f2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8007f1a:	78bb      	ldrb	r3, [r7, #2]
 8007f1c:	2b10      	cmp	r3, #16
 8007f1e:	d110      	bne.n	8007f42 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8007f20:	2240      	movs	r2, #64	; 0x40
 8007f22:	2157      	movs	r1, #87	; 0x57
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 faf3 	bl	8009510 <VL53L0X_WrByte>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8007f30:	2208      	movs	r2, #8
 8007f32:	2156      	movs	r1, #86	; 0x56
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 faeb 	bl	8009510 <VL53L0X_WrByte>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f40:	e157      	b.n	80081f2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8007f42:	78bb      	ldrb	r3, [r7, #2]
 8007f44:	2b12      	cmp	r3, #18
 8007f46:	f040 8154 	bne.w	80081f2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007f4a:	2250      	movs	r2, #80	; 0x50
 8007f4c:	2157      	movs	r1, #87	; 0x57
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 fade 	bl	8009510 <VL53L0X_WrByte>
 8007f54:	4603      	mov	r3, r0
 8007f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8007f5a:	2208      	movs	r2, #8
 8007f5c:	2156      	movs	r1, #86	; 0x56
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fad6 	bl	8009510 <VL53L0X_WrByte>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f6a:	e142      	b.n	80081f2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	f040 813f 	bne.w	80081f2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8007f74:	78bb      	ldrb	r3, [r7, #2]
 8007f76:	2b08      	cmp	r3, #8
 8007f78:	d14c      	bne.n	8008014 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	2148      	movs	r1, #72	; 0x48
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 fac6 	bl	8009510 <VL53L0X_WrByte>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8007f8a:	2208      	movs	r2, #8
 8007f8c:	2147      	movs	r1, #71	; 0x47
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 fabe 	bl	8009510 <VL53L0X_WrByte>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	2132      	movs	r1, #50	; 0x32
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fab6 	bl	8009510 <VL53L0X_WrByte>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fac:	4313      	orrs	r3, r2
 8007fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8007fb2:	220c      	movs	r2, #12
 8007fb4:	2130      	movs	r1, #48	; 0x30
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 faaa 	bl	8009510 <VL53L0X_WrByte>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007fca:	2201      	movs	r2, #1
 8007fcc:	21ff      	movs	r1, #255	; 0xff
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 fa9e 	bl	8009510 <VL53L0X_WrByte>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007fe2:	2230      	movs	r2, #48	; 0x30
 8007fe4:	2130      	movs	r1, #48	; 0x30
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 fa92 	bl	8009510 <VL53L0X_WrByte>
 8007fec:	4603      	mov	r3, r0
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	21ff      	movs	r1, #255	; 0xff
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 fa86 	bl	8009510 <VL53L0X_WrByte>
 8008004:	4603      	mov	r3, r0
 8008006:	461a      	mov	r2, r3
 8008008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800800c:	4313      	orrs	r3, r2
 800800e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008012:	e0ee      	b.n	80081f2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8008014:	78bb      	ldrb	r3, [r7, #2]
 8008016:	2b0a      	cmp	r3, #10
 8008018:	d14c      	bne.n	80080b4 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800801a:	2228      	movs	r2, #40	; 0x28
 800801c:	2148      	movs	r1, #72	; 0x48
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 fa76 	bl	8009510 <VL53L0X_WrByte>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800802a:	2208      	movs	r2, #8
 800802c:	2147      	movs	r1, #71	; 0x47
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 fa6e 	bl	8009510 <VL53L0X_WrByte>
 8008034:	4603      	mov	r3, r0
 8008036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800803a:	2203      	movs	r2, #3
 800803c:	2132      	movs	r1, #50	; 0x32
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 fa66 	bl	8009510 <VL53L0X_WrByte>
 8008044:	4603      	mov	r3, r0
 8008046:	461a      	mov	r2, r3
 8008048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800804c:	4313      	orrs	r3, r2
 800804e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008052:	2209      	movs	r2, #9
 8008054:	2130      	movs	r1, #48	; 0x30
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 fa5a 	bl	8009510 <VL53L0X_WrByte>
 800805c:	4603      	mov	r3, r0
 800805e:	461a      	mov	r2, r3
 8008060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008064:	4313      	orrs	r3, r2
 8008066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800806a:	2201      	movs	r2, #1
 800806c:	21ff      	movs	r1, #255	; 0xff
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 fa4e 	bl	8009510 <VL53L0X_WrByte>
 8008074:	4603      	mov	r3, r0
 8008076:	461a      	mov	r2, r3
 8008078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800807c:	4313      	orrs	r3, r2
 800807e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008082:	2220      	movs	r2, #32
 8008084:	2130      	movs	r1, #48	; 0x30
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 fa42 	bl	8009510 <VL53L0X_WrByte>
 800808c:	4603      	mov	r3, r0
 800808e:	461a      	mov	r2, r3
 8008090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008094:	4313      	orrs	r3, r2
 8008096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800809a:	2200      	movs	r2, #0
 800809c:	21ff      	movs	r1, #255	; 0xff
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 fa36 	bl	8009510 <VL53L0X_WrByte>
 80080a4:	4603      	mov	r3, r0
 80080a6:	461a      	mov	r2, r3
 80080a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080ac:	4313      	orrs	r3, r2
 80080ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80080b2:	e09e      	b.n	80081f2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80080b4:	78bb      	ldrb	r3, [r7, #2]
 80080b6:	2b0c      	cmp	r3, #12
 80080b8:	d14c      	bne.n	8008154 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80080ba:	2238      	movs	r2, #56	; 0x38
 80080bc:	2148      	movs	r1, #72	; 0x48
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 fa26 	bl	8009510 <VL53L0X_WrByte>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80080ca:	2208      	movs	r2, #8
 80080cc:	2147      	movs	r1, #71	; 0x47
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 fa1e 	bl	8009510 <VL53L0X_WrByte>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80080da:	2203      	movs	r2, #3
 80080dc:	2132      	movs	r1, #50	; 0x32
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 fa16 	bl	8009510 <VL53L0X_WrByte>
 80080e4:	4603      	mov	r3, r0
 80080e6:	461a      	mov	r2, r3
 80080e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080ec:	4313      	orrs	r3, r2
 80080ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80080f2:	2208      	movs	r2, #8
 80080f4:	2130      	movs	r1, #48	; 0x30
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f001 fa0a 	bl	8009510 <VL53L0X_WrByte>
 80080fc:	4603      	mov	r3, r0
 80080fe:	461a      	mov	r2, r3
 8008100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008104:	4313      	orrs	r3, r2
 8008106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800810a:	2201      	movs	r2, #1
 800810c:	21ff      	movs	r1, #255	; 0xff
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 f9fe 	bl	8009510 <VL53L0X_WrByte>
 8008114:	4603      	mov	r3, r0
 8008116:	461a      	mov	r2, r3
 8008118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800811c:	4313      	orrs	r3, r2
 800811e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008122:	2220      	movs	r2, #32
 8008124:	2130      	movs	r1, #48	; 0x30
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 f9f2 	bl	8009510 <VL53L0X_WrByte>
 800812c:	4603      	mov	r3, r0
 800812e:	461a      	mov	r2, r3
 8008130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008134:	4313      	orrs	r3, r2
 8008136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800813a:	2200      	movs	r2, #0
 800813c:	21ff      	movs	r1, #255	; 0xff
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 f9e6 	bl	8009510 <VL53L0X_WrByte>
 8008144:	4603      	mov	r3, r0
 8008146:	461a      	mov	r2, r3
 8008148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800814c:	4313      	orrs	r3, r2
 800814e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008152:	e04e      	b.n	80081f2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008154:	78bb      	ldrb	r3, [r7, #2]
 8008156:	2b0e      	cmp	r3, #14
 8008158:	d14b      	bne.n	80081f2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800815a:	2248      	movs	r2, #72	; 0x48
 800815c:	2148      	movs	r1, #72	; 0x48
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 f9d6 	bl	8009510 <VL53L0X_WrByte>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800816a:	2208      	movs	r2, #8
 800816c:	2147      	movs	r1, #71	; 0x47
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 f9ce 	bl	8009510 <VL53L0X_WrByte>
 8008174:	4603      	mov	r3, r0
 8008176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800817a:	2203      	movs	r2, #3
 800817c:	2132      	movs	r1, #50	; 0x32
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 f9c6 	bl	8009510 <VL53L0X_WrByte>
 8008184:	4603      	mov	r3, r0
 8008186:	461a      	mov	r2, r3
 8008188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800818c:	4313      	orrs	r3, r2
 800818e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008192:	2207      	movs	r2, #7
 8008194:	2130      	movs	r1, #48	; 0x30
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 f9ba 	bl	8009510 <VL53L0X_WrByte>
 800819c:	4603      	mov	r3, r0
 800819e:	461a      	mov	r2, r3
 80081a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081a4:	4313      	orrs	r3, r2
 80081a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80081aa:	2201      	movs	r2, #1
 80081ac:	21ff      	movs	r1, #255	; 0xff
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f001 f9ae 	bl	8009510 <VL53L0X_WrByte>
 80081b4:	4603      	mov	r3, r0
 80081b6:	461a      	mov	r2, r3
 80081b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081bc:	4313      	orrs	r3, r2
 80081be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80081c2:	2220      	movs	r2, #32
 80081c4:	2130      	movs	r1, #48	; 0x30
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 f9a2 	bl	8009510 <VL53L0X_WrByte>
 80081cc:	4603      	mov	r3, r0
 80081ce:	461a      	mov	r2, r3
 80081d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081d4:	4313      	orrs	r3, r2
 80081d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80081da:	2200      	movs	r2, #0
 80081dc:	21ff      	movs	r1, #255	; 0xff
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 f996 	bl	8009510 <VL53L0X_WrByte>
 80081e4:	4603      	mov	r3, r0
 80081e6:	461a      	mov	r2, r3
 80081e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081ec:	4313      	orrs	r3, r2
 80081ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80081f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d17f      	bne.n	80082fa <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80081fa:	78bb      	ldrb	r3, [r7, #2]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fe fe38 	bl	8006e72 <VL53L0X_encode_vcsel_period>
 8008202:	4603      	mov	r3, r0
 8008204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800820e:	2b01      	cmp	r3, #1
 8008210:	d045      	beq.n	800829e <VL53L0X_set_vcsel_pulse_period+0x470>
 8008212:	e06e      	b.n	80082f2 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008214:	f107 0314 	add.w	r3, r7, #20
 8008218:	461a      	mov	r2, r3
 800821a:	2103      	movs	r1, #3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7ff fc33 	bl	8007a88 <get_sequence_step_timeout>
 8008222:	4603      	mov	r3, r0
 8008224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008228:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800822c:	2b00      	cmp	r3, #0
 800822e:	d109      	bne.n	8008244 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8008230:	f107 0310 	add.w	r3, r7, #16
 8008234:	461a      	mov	r2, r3
 8008236:	2102      	movs	r1, #2
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7ff fc25 	bl	8007a88 <get_sequence_step_timeout>
 800823e:	4603      	mov	r3, r0
 8008240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008244:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008248:	2b00      	cmp	r3, #0
 800824a:	d109      	bne.n	8008260 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800824c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008250:	461a      	mov	r2, r3
 8008252:	2150      	movs	r1, #80	; 0x50
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 f95b 	bl	8009510 <VL53L0X_WrByte>
 800825a:	4603      	mov	r3, r0
 800825c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008260:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008264:	2b00      	cmp	r3, #0
 8008266:	d108      	bne.n	800827a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	461a      	mov	r2, r3
 800826c:	2103      	movs	r1, #3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff fceb 	bl	8007c4a <set_sequence_step_timeout>
 8008274:	4603      	mov	r3, r0
 8008276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800827a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800827e:	2b00      	cmp	r3, #0
 8008280:	d108      	bne.n	8008294 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	461a      	mov	r2, r3
 8008286:	2102      	movs	r1, #2
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff fcde 	bl	8007c4a <set_sequence_step_timeout>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	78ba      	ldrb	r2, [r7, #2]
 8008298:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800829c:	e02e      	b.n	80082fc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800829e:	f107 0318 	add.w	r3, r7, #24
 80082a2:	461a      	mov	r2, r3
 80082a4:	2104      	movs	r1, #4
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff fbee 	bl	8007a88 <get_sequence_step_timeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80082b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80082ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80082be:	461a      	mov	r2, r3
 80082c0:	2170      	movs	r1, #112	; 0x70
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f001 f924 	bl	8009510 <VL53L0X_WrByte>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80082ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d108      	bne.n	80082e8 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	461a      	mov	r2, r3
 80082da:	2104      	movs	r1, #4
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff fcb4 	bl	8007c4a <set_sequence_step_timeout>
 80082e2:	4603      	mov	r3, r0
 80082e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	78ba      	ldrb	r2, [r7, #2]
 80082ec:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80082f0:	e004      	b.n	80082fc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80082f2:	23fc      	movs	r3, #252	; 0xfc
 80082f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082f8:	e000      	b.n	80082fc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80082fa:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80082fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008300:	2b00      	cmp	r3, #0
 8008302:	d109      	bne.n	8008318 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800830a:	69f9      	ldr	r1, [r7, #28]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7fc fe1d 	bl	8004f4c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8008312:	4603      	mov	r3, r0
 8008314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8008318:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800831c:	2b00      	cmp	r3, #0
 800831e:	d109      	bne.n	8008334 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8008320:	f107 010f 	add.w	r1, r7, #15
 8008324:	2301      	movs	r3, #1
 8008326:	2200      	movs	r2, #0
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7fe fcbd 	bl	8006ca8 <VL53L0X_perform_phase_calibration>
 800832e:	4603      	mov	r3, r0
 8008330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8008334:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008338:	4618      	mov	r0, r3
 800833a:	3728      	adds	r7, #40	; 0x28
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	460b      	mov	r3, r1
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800834e:	2300      	movs	r3, #0
 8008350:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008352:	7afb      	ldrb	r3, [r7, #11]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <VL53L0X_get_vcsel_pulse_period+0x1e>
 8008358:	2b01      	cmp	r3, #1
 800835a:	d00a      	beq.n	8008372 <VL53L0X_get_vcsel_pulse_period+0x32>
 800835c:	e013      	b.n	8008386 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800835e:	f107 0316 	add.w	r3, r7, #22
 8008362:	461a      	mov	r2, r3
 8008364:	2150      	movs	r1, #80	; 0x50
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f001 f954 	bl	8009614 <VL53L0X_RdByte>
 800836c:	4603      	mov	r3, r0
 800836e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008370:	e00b      	b.n	800838a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008372:	f107 0316 	add.w	r3, r7, #22
 8008376:	461a      	mov	r2, r3
 8008378:	2170      	movs	r1, #112	; 0x70
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f001 f94a 	bl	8009614 <VL53L0X_RdByte>
 8008380:	4603      	mov	r3, r0
 8008382:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008384:	e001      	b.n	800838a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008386:	23fc      	movs	r3, #252	; 0xfc
 8008388:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800838a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d107      	bne.n	80083a2 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008392:	7dbb      	ldrb	r3, [r7, #22]
 8008394:	4618      	mov	r0, r3
 8008396:	f7fe fd59 	bl	8006e4c <VL53L0X_decode_vcsel_period>
 800839a:	4603      	mov	r3, r0
 800839c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	701a      	strb	r2, [r3, #0]

	return Status;
 80083a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b092      	sub	sp, #72	; 0x48
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80083be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80083c2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80083c4:	f240 7376 	movw	r3, #1910	; 0x776
 80083c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80083ca:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80083ce:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80083d0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80083d4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80083d6:	f240 234e 	movw	r3, #590	; 0x24e
 80083da:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80083dc:	f240 23b2 	movw	r3, #690	; 0x2b2
 80083e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80083e2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80083e6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80083e8:	f240 2326 	movw	r3, #550	; 0x226
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80083f2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80083f6:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	429a      	cmp	r2, r3
 8008402:	d205      	bcs.n	8008410 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008404:	23fc      	movs	r3, #252	; 0xfc
 8008406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800840a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800840e:	e0aa      	b.n	8008566 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800841c:	f107 0314 	add.w	r3, r7, #20
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7fc fedc 	bl	80051e0 <VL53L0X_GetSequenceStepEnables>
 8008428:	4603      	mov	r3, r0
 800842a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800842e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008432:	2b00      	cmp	r3, #0
 8008434:	d15b      	bne.n	80084ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008436:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008438:	2b00      	cmp	r3, #0
 800843a:	d105      	bne.n	8008448 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800843c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800843e:	2b00      	cmp	r3, #0
 8008440:	d102      	bne.n	8008448 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8008442:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8008444:	2b00      	cmp	r3, #0
 8008446:	d052      	beq.n	80084ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008448:	f107 0310 	add.w	r3, r7, #16
 800844c:	461a      	mov	r2, r3
 800844e:	2102      	movs	r1, #2
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff fb19 	bl	8007a88 <get_sequence_step_timeout>
 8008456:	4603      	mov	r3, r0
 8008458:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800845c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008464:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008468:	e07d      	b.n	8008566 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800846a:	7d3b      	ldrb	r3, [r7, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00f      	beq.n	8008490 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008470:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008474:	4413      	add	r3, r2
 8008476:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800847c:	429a      	cmp	r2, r3
 800847e:	d204      	bcs.n	800848a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	643b      	str	r3, [r7, #64]	; 0x40
 8008488:	e002      	b.n	8008490 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800848a:	23fc      	movs	r3, #252	; 0xfc
 800848c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008490:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8008498:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800849c:	e063      	b.n	8008566 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800849e:	7dbb      	ldrb	r3, [r7, #22]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d011      	beq.n	80084c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a8:	4413      	add	r3, r2
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80084ae:	69fa      	ldr	r2, [r7, #28]
 80084b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d204      	bcs.n	80084c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80084b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	643b      	str	r3, [r7, #64]	; 0x40
 80084be:	e016      	b.n	80084ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80084c0:	23fc      	movs	r3, #252	; 0xfc
 80084c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80084c6:	e012      	b.n	80084ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80084c8:	7d7b      	ldrb	r3, [r7, #21]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00f      	beq.n	80084ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084d2:	4413      	add	r3, r2
 80084d4:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80084d6:	69fa      	ldr	r2, [r7, #28]
 80084d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084da:	429a      	cmp	r2, r3
 80084dc:	d204      	bcs.n	80084e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80084de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	643b      	str	r3, [r7, #64]	; 0x40
 80084e6:	e002      	b.n	80084ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80084e8:	23fc      	movs	r3, #252	; 0xfc
 80084ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80084ee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80084f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80084fa:	e034      	b.n	8008566 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d019      	beq.n	8008536 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008502:	f107 030c 	add.w	r3, r7, #12
 8008506:	461a      	mov	r2, r3
 8008508:	2103      	movs	r1, #3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff fabc 	bl	8007a88 <get_sequence_step_timeout>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800851a:	4413      	add	r3, r2
 800851c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008522:	429a      	cmp	r2, r3
 8008524:	d204      	bcs.n	8008530 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	643b      	str	r3, [r7, #64]	; 0x40
 800852e:	e002      	b.n	8008536 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008530:	23fc      	movs	r3, #252	; 0xfc
 8008532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008536:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800853a:	2b00      	cmp	r3, #0
 800853c:	d111      	bne.n	8008562 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800853e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00e      	beq.n	8008562 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8008544:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800854c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800854e:	2104      	movs	r1, #4
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff fb7a 	bl	8007c4a <set_sequence_step_timeout>
 8008556:	4603      	mov	r3, r0
 8008558:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008562:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008566:	4618      	mov	r0, r3
 8008568:	3748      	adds	r7, #72	; 0x48
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b090      	sub	sp, #64	; 0x40
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008578:	2300      	movs	r3, #0
 800857a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800857e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008582:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008584:	f240 7376 	movw	r3, #1910	; 0x776
 8008588:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800858a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008590:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008594:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8008596:	f240 234e 	movw	r3, #590	; 0x24e
 800859a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800859c:	f240 23b2 	movw	r3, #690	; 0x2b2
 80085a0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80085a2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80085a8:	f240 2326 	movw	r3, #550	; 0x226
 80085ac:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80085b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b6:	441a      	add	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80085bc:	f107 0318 	add.w	r3, r7, #24
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7fc fe0c 	bl	80051e0 <VL53L0X_GetSequenceStepEnables>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80085ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80085d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80085da:	e075      	b.n	80086c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80085dc:	7e3b      	ldrb	r3, [r7, #24]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d105      	bne.n	80085ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80085e2:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d102      	bne.n	80085ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80085e8:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d030      	beq.n	8008650 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80085ee:	f107 0310 	add.w	r3, r7, #16
 80085f2:	461a      	mov	r2, r3
 80085f4:	2102      	movs	r1, #2
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff fa46 	bl	8007a88 <get_sequence_step_timeout>
 80085fc:	4603      	mov	r3, r0
 80085fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008602:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008606:	2b00      	cmp	r3, #0
 8008608:	d122      	bne.n	8008650 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800860a:	7e3b      	ldrb	r3, [r7, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d007      	beq.n	8008620 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008614:	6939      	ldr	r1, [r7, #16]
 8008616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008618:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800861a:	441a      	add	r2, r3
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8008620:	7ebb      	ldrb	r3, [r7, #26]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d009      	beq.n	800863a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800862a:	6939      	ldr	r1, [r7, #16]
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	440b      	add	r3, r1
 8008630:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008632:	441a      	add	r2, r3
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	e00a      	b.n	8008650 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800863a:	7e7b      	ldrb	r3, [r7, #25]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d007      	beq.n	8008650 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008644:	6939      	ldr	r1, [r7, #16]
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800864a:	441a      	add	r2, r3
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008650:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008654:	2b00      	cmp	r3, #0
 8008656:	d114      	bne.n	8008682 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8008658:	7efb      	ldrb	r3, [r7, #27]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d011      	beq.n	8008682 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800865e:	f107 030c 	add.w	r3, r7, #12
 8008662:	461a      	mov	r2, r3
 8008664:	2103      	movs	r1, #3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff fa0e 	bl	8007a88 <get_sequence_step_timeout>
 800866c:	4603      	mov	r3, r0
 800866e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8008676:	68f9      	ldr	r1, [r7, #12]
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800867c:	441a      	add	r2, r3
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008682:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008686:	2b00      	cmp	r3, #0
 8008688:	d114      	bne.n	80086b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800868a:	7f3b      	ldrb	r3, [r7, #28]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d011      	beq.n	80086b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008690:	f107 0314 	add.w	r3, r7, #20
 8008694:	461a      	mov	r2, r3
 8008696:	2104      	movs	r1, #4
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff f9f5 	bl	8007a88 <get_sequence_step_timeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80086a8:	6979      	ldr	r1, [r7, #20]
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80086ae:	441a      	add	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80086b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d103      	bne.n	80086c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80086c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3740      	adds	r7, #64	; 0x40
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086da:	2300      	movs	r3, #0
 80086dc:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80086e2:	e0c6      	b.n	8008872 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	4413      	add	r3, r2
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	74fb      	strb	r3, [r7, #19]
		Index++;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	3301      	adds	r3, #1
 80086f2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80086f4:	7cfb      	ldrb	r3, [r7, #19]
 80086f6:	2bff      	cmp	r3, #255	; 0xff
 80086f8:	f040 808d 	bne.w	8008816 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	4413      	add	r3, r2
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	747b      	strb	r3, [r7, #17]
			Index++;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	3301      	adds	r3, #1
 800870a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800870c:	7c7b      	ldrb	r3, [r7, #17]
 800870e:	2b03      	cmp	r3, #3
 8008710:	d87e      	bhi.n	8008810 <VL53L0X_load_tuning_settings+0x140>
 8008712:	a201      	add	r2, pc, #4	; (adr r2, 8008718 <VL53L0X_load_tuning_settings+0x48>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	08008729 	.word	0x08008729
 800871c:	08008763 	.word	0x08008763
 8008720:	0800879d 	.word	0x0800879d
 8008724:	080087d7 	.word	0x080087d7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	4413      	add	r3, r2
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	743b      	strb	r3, [r7, #16]
				Index++;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	3301      	adds	r3, #1
 8008736:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	4413      	add	r3, r2
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	3301      	adds	r3, #1
 8008746:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008748:	7c3b      	ldrb	r3, [r7, #16]
 800874a:	b29b      	uxth	r3, r3
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	b29a      	uxth	r2, r3
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	b29b      	uxth	r3, r3
 8008754:	4413      	add	r3, r2
 8008756:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	89ba      	ldrh	r2, [r7, #12]
 800875c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008760:	e087      	b.n	8008872 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	4413      	add	r3, r2
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	743b      	strb	r3, [r7, #16]
				Index++;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	3301      	adds	r3, #1
 8008770:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	4413      	add	r3, r2
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	3301      	adds	r3, #1
 8008780:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008782:	7c3b      	ldrb	r3, [r7, #16]
 8008784:	b29b      	uxth	r3, r3
 8008786:	021b      	lsls	r3, r3, #8
 8008788:	b29a      	uxth	r2, r3
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	b29b      	uxth	r3, r3
 800878e:	4413      	add	r3, r2
 8008790:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	89ba      	ldrh	r2, [r7, #12]
 8008796:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800879a:	e06a      	b.n	8008872 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	4413      	add	r3, r2
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	743b      	strb	r3, [r7, #16]
				Index++;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	3301      	adds	r3, #1
 80087aa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	4413      	add	r3, r2
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	3301      	adds	r3, #1
 80087ba:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80087bc:	7c3b      	ldrb	r3, [r7, #16]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	021b      	lsls	r3, r3, #8
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	4413      	add	r3, r2
 80087ca:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	89ba      	ldrh	r2, [r7, #12]
 80087d0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80087d4:	e04d      	b.n	8008872 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	4413      	add	r3, r2
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	743b      	strb	r3, [r7, #16]
				Index++;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	3301      	adds	r3, #1
 80087e4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	4413      	add	r3, r2
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	73fb      	strb	r3, [r7, #15]
				Index++;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	3301      	adds	r3, #1
 80087f4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80087f6:	7c3b      	ldrb	r3, [r7, #16]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	021b      	lsls	r3, r3, #8
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	b29b      	uxth	r3, r3
 8008802:	4413      	add	r3, r2
 8008804:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	89ba      	ldrh	r2, [r7, #12]
 800880a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800880e:	e030      	b.n	8008872 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008810:	23fc      	movs	r3, #252	; 0xfc
 8008812:	77fb      	strb	r3, [r7, #31]
 8008814:	e02d      	b.n	8008872 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008816:	7cfb      	ldrb	r3, [r7, #19]
 8008818:	2b04      	cmp	r3, #4
 800881a:	d828      	bhi.n	800886e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	4413      	add	r3, r2
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	3301      	adds	r3, #1
 800882a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800882c:	2300      	movs	r3, #0
 800882e:	61bb      	str	r3, [r7, #24]
 8008830:	e00f      	b.n	8008852 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	4413      	add	r3, r2
 8008838:	7819      	ldrb	r1, [r3, #0]
 800883a:	f107 0208 	add.w	r2, r7, #8
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	4413      	add	r3, r2
 8008842:	460a      	mov	r2, r1
 8008844:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	3301      	adds	r3, #1
 800884a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	3301      	adds	r3, #1
 8008850:	61bb      	str	r3, [r7, #24]
 8008852:	7cfb      	ldrb	r3, [r7, #19]
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	429a      	cmp	r2, r3
 8008858:	dbeb      	blt.n	8008832 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800885a:	7cfb      	ldrb	r3, [r7, #19]
 800885c:	f107 0208 	add.w	r2, r7, #8
 8008860:	7cb9      	ldrb	r1, [r7, #18]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fdf8 	bl	8009458 <VL53L0X_WriteMulti>
 8008868:	4603      	mov	r3, r0
 800886a:	77fb      	strb	r3, [r7, #31]
 800886c:	e001      	b.n	8008872 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800886e:	23fc      	movs	r3, #252	; 0xfc
 8008870:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	4413      	add	r3, r2
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d004      	beq.n	8008888 <VL53L0X_load_tuning_settings+0x1b8>
 800887e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008882:	2b00      	cmp	r3, #0
 8008884:	f43f af2e 	beq.w	80086e4 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008888:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3720      	adds	r7, #32
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088a0:	2300      	movs	r3, #0
 80088a2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80088aa:	f107 0313 	add.w	r3, r7, #19
 80088ae:	4619      	mov	r1, r3
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f7fc fd21 	bl	80052f8 <VL53L0X_GetXTalkCompensationEnable>
 80088b6:	4603      	mov	r3, r0
 80088b8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80088ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d111      	bne.n	80088e6 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80088c2:	7cfb      	ldrb	r3, [r7, #19]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00e      	beq.n	80088e6 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	8a9b      	ldrh	r3, [r3, #20]
 80088d2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
 80088da:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	3380      	adds	r3, #128	; 0x80
 80088e0:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80088e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3720      	adds	r7, #32
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b086      	sub	sp, #24
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088fe:	2300      	movs	r3, #0
 8008900:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800890a:	f107 0310 	add.w	r3, r7, #16
 800890e:	461a      	mov	r2, r3
 8008910:	68b9      	ldr	r1, [r7, #8]
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff ffbe 	bl	8008894 <VL53L0X_get_total_xtalk_rate>
 8008918:	4603      	mov	r3, r0
 800891a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800891c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d105      	bne.n	8008930 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	441a      	add	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]

	return Status;
 8008930:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b09a      	sub	sp, #104	; 0x68
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800894a:	2312      	movs	r3, #18
 800894c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800894e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008952:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008954:	2342      	movs	r3, #66	; 0x42
 8008956:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008958:	2306      	movs	r3, #6
 800895a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800895c:	2307      	movs	r3, #7
 800895e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008960:	2300      	movs	r3, #0
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800896c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008974:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8008976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800897a:	fb02 f303 	mul.w	r3, r2, r3
 800897e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008982:	3380      	adds	r3, #128	; 0x80
 8008984:	0a1b      	lsrs	r3, r3, #8
 8008986:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8008988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800898c:	fb02 f303 	mul.w	r3, r2, r3
 8008990:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008992:	2300      	movs	r3, #0
 8008994:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01b      	beq.n	80089d4 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	029b      	lsls	r3, r3, #10
 80089a0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80089a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089a8:	4413      	add	r3, r2
 80089aa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80089ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80089b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80089b8:	4613      	mov	r3, r2
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	4413      	add	r3, r2
 80089be:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80089c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80089c4:	fb02 f303 	mul.w	r3, r2, r3
 80089c8:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80089ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80089d0:	0c1b      	lsrs	r3, r3, #16
 80089d2:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089d8:	fb02 f303 	mul.w	r3, r2, r3
 80089dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80089e4:	0c1b      	lsrs	r3, r3, #16
 80089e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80089e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ec:	fb02 f303 	mul.w	r3, r2, r3
 80089f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80089f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80089f8:	0c1b      	lsrs	r3, r3, #16
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80089fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089fe:	085a      	lsrs	r2, r3, #1
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	441a      	add	r2, r3
 8008a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a10:	fb02 f303 	mul.w	r3, r2, r3
 8008a14:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a1c:	d302      	bcc.n	8008a24 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8008a1e:	4b55      	ldr	r3, [pc, #340]	; (8008b74 <VL53L0X_calc_dmax+0x238>)
 8008a20:	663b      	str	r3, [r7, #96]	; 0x60
 8008a22:	e016      	b.n	8008a52 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8008a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a26:	085a      	lsrs	r2, r3, #1
 8008a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a2a:	441a      	add	r2, r3
 8008a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a32:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8008a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a38:	fb02 f303 	mul.w	r3, r2, r3
 8008a3c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8008a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008a44:	0c1b      	lsrs	r3, r3, #16
 8008a46:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8008a48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a4c:	fb02 f303 	mul.w	r3, r2, r3
 8008a50:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a54:	039b      	lsls	r3, r3, #14
 8008a56:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a5a:	4a47      	ldr	r2, [pc, #284]	; (8008b78 <VL53L0X_calc_dmax+0x23c>)
 8008a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a60:	099b      	lsrs	r3, r3, #6
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a68:	fb02 f303 	mul.w	r3, r2, r3
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a72:	fb02 f303 	mul.w	r3, r2, r3
 8008a76:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	091b      	lsrs	r3, r3, #4
 8008a7e:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	4413      	add	r3, r2
 8008a90:	011b      	lsls	r3, r3, #4
 8008a92:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008a9a:	0b9b      	lsrs	r3, r3, #14
 8008a9c:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aa2:	4413      	add	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aa8:	085b      	lsrs	r3, r3, #1
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	4413      	add	r3, r2
 8008aae:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab8:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	039b      	lsls	r3, r3, #14
 8008abe:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	085b      	lsrs	r3, r3, #1
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad2:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ad8:	fb02 f303 	mul.w	r3, r2, r3
 8008adc:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008ae4:	4a24      	ldr	r2, [pc, #144]	; (8008b78 <VL53L0X_calc_dmax+0x23c>)
 8008ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aea:	099b      	lsrs	r3, r3, #6
 8008aec:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008afa:	4a1f      	ldr	r2, [pc, #124]	; (8008b78 <VL53L0X_calc_dmax+0x23c>)
 8008afc:	fba2 2303 	umull	r2, r3, r2, r3
 8008b00:	099b      	lsrs	r3, r3, #6
 8008b02:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8008b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b06:	3380      	adds	r3, #128	; 0x80
 8008b08:	0a1b      	lsrs	r3, r3, #8
 8008b0a:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d008      	beq.n	8008b24 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	085a      	lsrs	r2, r3, #1
 8008b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b18:	441a      	add	r2, r3
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b20:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b22:	e001      	b.n	8008b28 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8008b28:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008b2a:	f7fe f9b5 	bl	8006e98 <VL53L0X_isqrt>
 8008b2e:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d008      	beq.n	8008b48 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	085a      	lsrs	r2, r3, #1
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3c:	441a      	add	r2, r3
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b46:	e001      	b.n	8008b4c <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8008b4c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008b4e:	f7fe f9a3 	bl	8006e98 <VL53L0X_isqrt>
 8008b52:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8008b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d902      	bls.n	8008b68 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8008b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b66:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008b68:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3768      	adds	r7, #104	; 0x68
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	fff00000 	.word	0xfff00000
 8008b78:	10624dd3 	.word	0x10624dd3

08008b7c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b0b4      	sub	sp, #208	; 0xd0
 8008b80:	af04      	add	r7, sp, #16
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008b8a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008b92:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008b96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008b9a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8008b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008ba2:	f241 235c 	movw	r3, #4700	; 0x125c
 8008ba6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008baa:	4b9e      	ldr	r3, [pc, #632]	; (8008e24 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008bac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008bb0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008bb6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008bc4:	4b98      	ldr	r3, [pc, #608]	; (8008e28 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008bc6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008bc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bcc:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008bce:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008bd4:	f240 6377 	movw	r3, #1655	; 0x677
 8008bd8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bee:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8008bf2:	0c1b      	lsrs	r3, r3, #16
 8008bf4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008bfc:	f107 0310 	add.w	r3, r7, #16
 8008c00:	461a      	mov	r2, r3
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f7ff fe74 	bl	80088f2 <VL53L0X_get_total_signal_rate>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8008c10:	f107 0314 	add.w	r3, r7, #20
 8008c14:	461a      	mov	r2, r3
 8008c16:	68b9      	ldr	r1, [r7, #8]
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff fe3b 	bl	8008894 <VL53L0X_get_total_xtalk_rate>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c2a:	fb02 f303 	mul.w	r3, r2, r3
 8008c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8008c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c32:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008c36:	0c1b      	lsrs	r3, r3, #16
 8008c38:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c40:	fb02 f303 	mul.w	r3, r2, r3
 8008c44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008c48:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d902      	bls.n	8008c58 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8008c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008c58:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d168      	bne.n	8008d32 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008c66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008c70:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008c74:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008c78:	461a      	mov	r2, r3
 8008c7a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f7fe feae 	bl	80079e0 <VL53L0X_calc_timeout_mclks>
 8008c84:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008c96:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008c9a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f7fe fe9b 	bl	80079e0 <VL53L0X_calc_timeout_mclks>
 8008caa:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008cac:	2303      	movs	r3, #3
 8008cae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8008cb2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008cb6:	2b08      	cmp	r3, #8
 8008cb8:	d102      	bne.n	8008cc0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008cba:	2302      	movs	r3, #2
 8008cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cc4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008cc6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008cca:	fb02 f303 	mul.w	r3, r2, r3
 8008cce:	02db      	lsls	r3, r3, #11
 8008cd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008cd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cd8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008cdc:	4a53      	ldr	r2, [pc, #332]	; (8008e2c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008cde:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce2:	099b      	lsrs	r3, r3, #6
 8008ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008ce8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008cee:	fb02 f303 	mul.w	r3, r2, r3
 8008cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008cf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cfa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008cfe:	4a4b      	ldr	r2, [pc, #300]	; (8008e2c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008d00:	fba2 2303 	umull	r2, r3, r2, r3
 8008d04:	099b      	lsrs	r3, r3, #6
 8008d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	3380      	adds	r3, #128	; 0x80
 8008d0e:	0a1b      	lsrs	r3, r3, #8
 8008d10:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d18:	fb02 f303 	mul.w	r3, r2, r3
 8008d1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8008d20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d24:	3380      	adds	r3, #128	; 0x80
 8008d26:	0a1b      	lsrs	r3, r3, #8
 8008d28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	021b      	lsls	r3, r3, #8
 8008d30:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008d32:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008d3a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008d3e:	e165      	b.n	800900c <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8008d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10c      	bne.n	8008d60 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d4c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d54:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	e153      	b.n	8009008 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8008d60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d72:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d76:	041a      	lsls	r2, r3, #16
 8008d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8008d82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d902      	bls.n	8008d92 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8008d92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d96:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008d9a:	fb02 f303 	mul.w	r3, r2, r3
 8008d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8008da2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008da6:	4613      	mov	r3, r2
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe f872 	bl	8006e98 <VL53L0X_isqrt>
 8008db4:	4603      	mov	r3, r0
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	891b      	ldrh	r3, [r3, #8]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dc2:	fb02 f303 	mul.w	r3, r2, r3
 8008dc6:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dca:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008dcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008dd0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008dd2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008dd4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008dd8:	4a14      	ldr	r2, [pc, #80]	; (8008e2c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008dda:	fba2 2303 	umull	r2, r3, r2, r3
 8008dde:	099b      	lsrs	r3, r3, #6
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8008de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008de4:	041b      	lsls	r3, r3, #16
 8008de6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008dea:	4a10      	ldr	r2, [pc, #64]	; (8008e2c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008dec:	fba2 2303 	umull	r2, r3, r2, r3
 8008df0:	099b      	lsrs	r3, r3, #6
 8008df2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df6:	021b      	lsls	r3, r3, #8
 8008df8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008dfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	bfb8      	it	lt
 8008e06:	425b      	neglt	r3, r3
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0c:	021b      	lsls	r3, r3, #8
 8008e0e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	7e1b      	ldrb	r3, [r3, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00b      	beq.n	8008e30 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8008e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e20:	e035      	b.n	8008e8e <VL53L0X_calc_sigma_estimate+0x312>
 8008e22:	bf00      	nop
 8008e24:	028f87ae 	.word	0x028f87ae
 8008e28:	0006999a 	.word	0x0006999a
 8008e2c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008e30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e48:	fb02 f303 	mul.w	r3, r2, r3
 8008e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008e50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e56:	4413      	add	r3, r2
 8008e58:	0c1b      	lsrs	r3, r3, #16
 8008e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e62:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008e66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e6e:	085b      	lsrs	r3, r3, #1
 8008e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008e7c:	fb02 f303 	mul.w	r3, r2, r3
 8008e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e88:	0b9b      	lsrs	r3, r3, #14
 8008e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e94:	fb02 f303 	mul.w	r3, r2, r3
 8008e98:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008ea0:	0c1b      	lsrs	r3, r3, #16
 8008ea2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea8:	fb02 f303 	mul.w	r3, r2, r3
 8008eac:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8008eae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008eba:	0c1b      	lsrs	r3, r3, #16
 8008ebc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec2:	fb02 f303 	mul.w	r3, r2, r3
 8008ec6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	4413      	add	r3, r2
 8008ece:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ed2:	f7fd ffe1 	bl	8006e98 <VL53L0X_isqrt>
 8008ed6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	041b      	lsls	r3, r3, #16
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	3332      	adds	r3, #50	; 0x32
 8008ee2:	4a4c      	ldr	r2, [pc, #304]	; (8009014 <VL53L0X_calc_sigma_estimate+0x498>)
 8008ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee8:	095a      	lsrs	r2, r3, #5
 8008eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008ef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ef8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8008efc:	fb02 f303 	mul.w	r3, r2, r3
 8008f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f08:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8008f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f16:	4a40      	ldr	r2, [pc, #256]	; (8009018 <VL53L0X_calc_sigma_estimate+0x49c>)
 8008f18:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1c:	0b5b      	lsrs	r3, r3, #13
 8008f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008f22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d902      	bls.n	8008f32 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008f2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008f32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008f40:	4a36      	ldr	r2, [pc, #216]	; (800901c <VL53L0X_calc_sigma_estimate+0x4a0>)
 8008f42:	fba2 2303 	umull	r2, r3, r2, r3
 8008f46:	099b      	lsrs	r3, r3, #6
 8008f48:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f52:	441a      	add	r2, r3
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fd ff9c 	bl	8006e98 <VL53L0X_isqrt>
 8008f60:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	021b      	lsls	r3, r3, #8
 8008f66:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008f6e:	4a2b      	ldr	r2, [pc, #172]	; (800901c <VL53L0X_calc_sigma_estimate+0x4a0>)
 8008f70:	fba2 2303 	umull	r2, r3, r2, r3
 8008f74:	099b      	lsrs	r3, r3, #6
 8008f76:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008f78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f7c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f80:	fb02 f303 	mul.w	r3, r2, r3
 8008f84:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	fb02 f303 	mul.w	r3, r2, r3
 8008f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f94:	4413      	add	r3, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fd ff7e 	bl	8006e98 <VL53L0X_isqrt>
 8008f9c:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008fa4:	fb02 f303 	mul.w	r3, r2, r3
 8008fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8008fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d009      	beq.n	8008fc6 <VL53L0X_calc_sigma_estimate+0x44a>
 8008fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <VL53L0X_calc_sigma_estimate+0x44a>
 8008fba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d903      	bls.n	8008fce <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8008fc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008fd4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8008fe0:	6939      	ldr	r1, [r7, #16]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	9303      	str	r3, [sp, #12]
 8008fe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fea:	9302      	str	r3, [sp, #8]
 8008fec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ffa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff fc9d 	bl	800893c <VL53L0X_calc_dmax>
 8009002:	4603      	mov	r3, r0
 8009004:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009008:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800900c:	4618      	mov	r0, r3
 800900e:	37c0      	adds	r7, #192	; 0xc0
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	51eb851f 	.word	0x51eb851f
 8009018:	d1b71759 	.word	0xd1b71759
 800901c:	10624dd3 	.word	0x10624dd3

08009020 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b090      	sub	sp, #64	; 0x40
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	607a      	str	r2, [r7, #4]
 800902a:	461a      	mov	r2, r3
 800902c:	460b      	mov	r3, r1
 800902e:	72fb      	strb	r3, [r7, #11]
 8009030:	4613      	mov	r3, r2
 8009032:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009034:	2300      	movs	r3, #0
 8009036:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009058:	2300      	movs	r3, #0
 800905a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800906e:	2300      	movs	r3, #0
 8009070:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	10db      	asrs	r3, r3, #3
 8009076:	b2db      	uxtb	r3, r3
 8009078:	f003 030f 	and.w	r3, r3, #15
 800907c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009080:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009084:	2b00      	cmp	r3, #0
 8009086:	d017      	beq.n	80090b8 <VL53L0X_get_pal_range_status+0x98>
 8009088:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800908c:	2b05      	cmp	r3, #5
 800908e:	d013      	beq.n	80090b8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009090:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009094:	2b07      	cmp	r3, #7
 8009096:	d00f      	beq.n	80090b8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009098:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800909c:	2b0c      	cmp	r3, #12
 800909e:	d00b      	beq.n	80090b8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80090a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80090a4:	2b0d      	cmp	r3, #13
 80090a6:	d007      	beq.n	80090b8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80090a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80090ac:	2b0e      	cmp	r3, #14
 80090ae:	d003      	beq.n	80090b8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80090b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80090b4:	2b0f      	cmp	r3, #15
 80090b6:	d103      	bne.n	80090c0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80090b8:	2301      	movs	r3, #1
 80090ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80090be:	e002      	b.n	80090c6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80090c0:	2300      	movs	r3, #0
 80090c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80090c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80090ce:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80090d2:	461a      	mov	r2, r3
 80090d4:	2100      	movs	r1, #0
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f7fc f9e2 	bl	80054a0 <VL53L0X_GetLimitCheckEnable>
 80090dc:	4603      	mov	r3, r0
 80090de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80090e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d02e      	beq.n	8009148 <VL53L0X_get_pal_range_status+0x128>
 80090ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d12a      	bne.n	8009148 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80090f2:	f107 0310 	add.w	r3, r7, #16
 80090f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80090fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f7ff fd3d 	bl	8008b7c <VL53L0X_calc_sigma_estimate>
 8009102:	4603      	mov	r3, r0
 8009104:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8009108:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800910c:	2b00      	cmp	r3, #0
 800910e:	d103      	bne.n	8009118 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	b29a      	uxth	r2, r3
 8009114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009116:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8009118:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800911c:	2b00      	cmp	r3, #0
 800911e:	d113      	bne.n	8009148 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8009120:	f107 0320 	add.w	r3, r7, #32
 8009124:	461a      	mov	r2, r3
 8009126:	2100      	movs	r1, #0
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7fc fa3f 	bl	80055ac <VL53L0X_GetLimitCheckValue>
 800912e:	4603      	mov	r3, r0
 8009130:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d006      	beq.n	8009148 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800913a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800913e:	429a      	cmp	r2, r3
 8009140:	d902      	bls.n	8009148 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8009142:	2301      	movs	r3, #1
 8009144:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009148:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800914c:	2b00      	cmp	r3, #0
 800914e:	d109      	bne.n	8009164 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009150:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009154:	461a      	mov	r2, r3
 8009156:	2102      	movs	r1, #2
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f7fc f9a1 	bl	80054a0 <VL53L0X_GetLimitCheckEnable>
 800915e:	4603      	mov	r3, r0
 8009160:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009164:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009168:	2b00      	cmp	r3, #0
 800916a:	d044      	beq.n	80091f6 <VL53L0X_get_pal_range_status+0x1d6>
 800916c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009170:	2b00      	cmp	r3, #0
 8009172:	d140      	bne.n	80091f6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009174:	f107 031c 	add.w	r3, r7, #28
 8009178:	461a      	mov	r2, r3
 800917a:	2102      	movs	r1, #2
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f7fc fa15 	bl	80055ac <VL53L0X_GetLimitCheckValue>
 8009182:	4603      	mov	r3, r0
 8009184:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009188:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800918c:	2b00      	cmp	r3, #0
 800918e:	d107      	bne.n	80091a0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009190:	2201      	movs	r2, #1
 8009192:	21ff      	movs	r1, #255	; 0xff
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 f9bb 	bl	8009510 <VL53L0X_WrByte>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80091a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d109      	bne.n	80091bc <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80091a8:	f107 0316 	add.w	r3, r7, #22
 80091ac:	461a      	mov	r2, r3
 80091ae:	21b6      	movs	r1, #182	; 0xb6
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 fa59 	bl	8009668 <VL53L0X_RdWord>
 80091b6:	4603      	mov	r3, r0
 80091b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80091bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d107      	bne.n	80091d4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80091c4:	2200      	movs	r2, #0
 80091c6:	21ff      	movs	r1, #255	; 0xff
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f9a1 	bl	8009510 <VL53L0X_WrByte>
 80091ce:	4603      	mov	r3, r0
 80091d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80091d4:	8afb      	ldrh	r3, [r7, #22]
 80091d6:	025b      	lsls	r3, r3, #9
 80091d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091de:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d006      	beq.n	80091f6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80091e8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80091ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d902      	bls.n	80091f6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80091f0:	2301      	movs	r3, #1
 80091f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80091f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80091fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009202:	461a      	mov	r2, r3
 8009204:	2103      	movs	r1, #3
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7fc f94a 	bl	80054a0 <VL53L0X_GetLimitCheckEnable>
 800920c:	4603      	mov	r3, r0
 800920e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8009212:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009216:	2b00      	cmp	r3, #0
 8009218:	d023      	beq.n	8009262 <VL53L0X_get_pal_range_status+0x242>
 800921a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800921e:	2b00      	cmp	r3, #0
 8009220:	d11f      	bne.n	8009262 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8009222:	893b      	ldrh	r3, [r7, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d102      	bne.n	800922e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	637b      	str	r3, [r7, #52]	; 0x34
 800922c:	e005      	b.n	800923a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	021a      	lsls	r2, r3, #8
 8009232:	893b      	ldrh	r3, [r7, #8]
 8009234:	fbb2 f3f3 	udiv	r3, r2, r3
 8009238:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800923a:	f107 0318 	add.w	r3, r7, #24
 800923e:	461a      	mov	r2, r3
 8009240:	2103      	movs	r1, #3
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7fc f9b2 	bl	80055ac <VL53L0X_GetLimitCheckValue>
 8009248:	4603      	mov	r3, r0
 800924a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d006      	beq.n	8009262 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009254:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8009256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009258:	429a      	cmp	r2, r3
 800925a:	d202      	bcs.n	8009262 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800925c:	2301      	movs	r3, #1
 800925e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009262:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009266:	2b00      	cmp	r3, #0
 8009268:	d14a      	bne.n	8009300 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800926a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800926e:	2b01      	cmp	r3, #1
 8009270:	d103      	bne.n	800927a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009274:	22ff      	movs	r2, #255	; 0xff
 8009276:	701a      	strb	r2, [r3, #0]
 8009278:	e042      	b.n	8009300 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800927a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800927e:	2b01      	cmp	r3, #1
 8009280:	d007      	beq.n	8009292 <VL53L0X_get_pal_range_status+0x272>
 8009282:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009286:	2b02      	cmp	r3, #2
 8009288:	d003      	beq.n	8009292 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800928a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800928e:	2b03      	cmp	r3, #3
 8009290:	d103      	bne.n	800929a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009294:	2205      	movs	r2, #5
 8009296:	701a      	strb	r2, [r3, #0]
 8009298:	e032      	b.n	8009300 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800929a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800929e:	2b06      	cmp	r3, #6
 80092a0:	d003      	beq.n	80092aa <VL53L0X_get_pal_range_status+0x28a>
 80092a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80092a6:	2b09      	cmp	r3, #9
 80092a8:	d103      	bne.n	80092b2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80092aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ac:	2204      	movs	r2, #4
 80092ae:	701a      	strb	r2, [r3, #0]
 80092b0:	e026      	b.n	8009300 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80092b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80092b6:	2b08      	cmp	r3, #8
 80092b8:	d007      	beq.n	80092ca <VL53L0X_get_pal_range_status+0x2aa>
 80092ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80092be:	2b0a      	cmp	r3, #10
 80092c0:	d003      	beq.n	80092ca <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80092c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d103      	bne.n	80092d2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80092ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092cc:	2203      	movs	r2, #3
 80092ce:	701a      	strb	r2, [r3, #0]
 80092d0:	e016      	b.n	8009300 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80092d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	d003      	beq.n	80092e2 <VL53L0X_get_pal_range_status+0x2c2>
 80092da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d103      	bne.n	80092ea <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80092e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e4:	2202      	movs	r2, #2
 80092e6:	701a      	strb	r2, [r3, #0]
 80092e8:	e00a      	b.n	8009300 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80092ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d103      	bne.n	80092fa <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80092f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f4:	2201      	movs	r2, #1
 80092f6:	701a      	strb	r2, [r3, #0]
 80092f8:	e002      	b.n	8009300 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80092fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fc:	2200      	movs	r2, #0
 80092fe:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d102      	bne.n	800930e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800930a:	2200      	movs	r2, #0
 800930c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800930e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8009312:	461a      	mov	r2, r3
 8009314:	2101      	movs	r1, #1
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7fc f8c2 	bl	80054a0 <VL53L0X_GetLimitCheckEnable>
 800931c:	4603      	mov	r3, r0
 800931e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8009322:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009326:	2b00      	cmp	r3, #0
 8009328:	d14f      	bne.n	80093ca <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800932a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <VL53L0X_get_pal_range_status+0x31a>
 8009332:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009336:	2b01      	cmp	r3, #1
 8009338:	d103      	bne.n	8009342 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800933a:	2301      	movs	r3, #1
 800933c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009340:	e002      	b.n	8009348 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800934e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8009352:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009356:	2b04      	cmp	r3, #4
 8009358:	d003      	beq.n	8009362 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800935a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800935e:	2b00      	cmp	r3, #0
 8009360:	d103      	bne.n	800936a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009362:	2301      	movs	r3, #1
 8009364:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009368:	e002      	b.n	8009370 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009376:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800937a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <VL53L0X_get_pal_range_status+0x36a>
 8009382:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009386:	2b01      	cmp	r3, #1
 8009388:	d103      	bne.n	8009392 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800938a:	2301      	movs	r3, #1
 800938c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009390:	e002      	b.n	8009398 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800939e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80093a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d003      	beq.n	80093b2 <VL53L0X_get_pal_range_status+0x392>
 80093aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d103      	bne.n	80093ba <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80093b2:	2301      	movs	r3, #1
 80093b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093b8:	e002      	b.n	80093c0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80093c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80093ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3740      	adds	r7, #64	; 0x40
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b088      	sub	sp, #32
 80093da:	af02      	add	r7, sp, #8
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	330a      	adds	r3, #10
 80093e6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80093f4:	b299      	uxth	r1, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	4613      	mov	r3, r2
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	f7f8 f979 	bl	80016f8 <HAL_I2C_Master_Transmit>
 8009406:	4603      	mov	r3, r0
 8009408:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800940a:	693b      	ldr	r3, [r7, #16]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b088      	sub	sp, #32
 8009418:	af02      	add	r7, sp, #8
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	330a      	adds	r3, #10
 8009424:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009432:	f043 0301 	orr.w	r3, r3, #1
 8009436:	b2db      	uxtb	r3, r3
 8009438:	b299      	uxth	r1, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	b29a      	uxth	r2, r3
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	4613      	mov	r3, r2
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	f7f8 fa4b 	bl	80018e0 <HAL_I2C_Master_Receive>
 800944a:	4603      	mov	r3, r0
 800944c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800944e:	693b      	ldr	r3, [r7, #16]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	607a      	str	r2, [r7, #4]
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	460b      	mov	r3, r1
 8009466:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009468:	2300      	movs	r3, #0
 800946a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b3f      	cmp	r3, #63	; 0x3f
 8009470:	d902      	bls.n	8009478 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8009472:	f06f 0303 	mvn.w	r3, #3
 8009476:	e016      	b.n	80094a6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8009478:	4a0d      	ldr	r2, [pc, #52]	; (80094b0 <VL53L0X_WriteMulti+0x58>)
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	480c      	ldr	r0, [pc, #48]	; (80094b4 <VL53L0X_WriteMulti+0x5c>)
 8009484:	f000 f99e 	bl	80097c4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	3301      	adds	r3, #1
 800948c:	461a      	mov	r2, r3
 800948e:	4908      	ldr	r1, [pc, #32]	; (80094b0 <VL53L0X_WriteMulti+0x58>)
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7ff ffa0 	bl	80093d6 <_I2CWrite>
 8009496:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800949e:	23ec      	movs	r3, #236	; 0xec
 80094a0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80094a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	2000086c 	.word	0x2000086c
 80094b4:	2000086d 	.word	0x2000086d

080094b8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	607a      	str	r2, [r7, #4]
 80094c2:	603b      	str	r3, [r7, #0]
 80094c4:	460b      	mov	r3, r1
 80094c6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094c8:	2300      	movs	r3, #0
 80094ca:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80094cc:	f107 030b 	add.w	r3, r7, #11
 80094d0:	2201      	movs	r2, #1
 80094d2:	4619      	mov	r1, r3
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f7ff ff7e 	bl	80093d6 <_I2CWrite>
 80094da:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80094e2:	23ec      	movs	r3, #236	; 0xec
 80094e4:	75fb      	strb	r3, [r7, #23]
        goto done;
 80094e6:	e00c      	b.n	8009502 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	6879      	ldr	r1, [r7, #4]
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f7ff ff91 	bl	8009414 <_I2CRead>
 80094f2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80094fa:	23ec      	movs	r3, #236	; 0xec
 80094fc:	75fb      	strb	r3, [r7, #23]
 80094fe:	e000      	b.n	8009502 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8009500:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009502:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	460b      	mov	r3, r1
 800951a:	70fb      	strb	r3, [r7, #3]
 800951c:	4613      	mov	r3, r2
 800951e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009524:	4a0b      	ldr	r2, [pc, #44]	; (8009554 <VL53L0X_WrByte+0x44>)
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800952a:	4a0a      	ldr	r2, [pc, #40]	; (8009554 <VL53L0X_WrByte+0x44>)
 800952c:	78bb      	ldrb	r3, [r7, #2]
 800952e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009530:	2202      	movs	r2, #2
 8009532:	4908      	ldr	r1, [pc, #32]	; (8009554 <VL53L0X_WrByte+0x44>)
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff ff4e 	bl	80093d6 <_I2CWrite>
 800953a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009542:	23ec      	movs	r3, #236	; 0xec
 8009544:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	2000086c 	.word	0x2000086c

08009558 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
 8009564:	4613      	mov	r3, r2
 8009566:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800956c:	4a0e      	ldr	r2, [pc, #56]	; (80095a8 <VL53L0X_WrWord+0x50>)
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8009572:	883b      	ldrh	r3, [r7, #0]
 8009574:	0a1b      	lsrs	r3, r3, #8
 8009576:	b29b      	uxth	r3, r3
 8009578:	b2da      	uxtb	r2, r3
 800957a:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <VL53L0X_WrWord+0x50>)
 800957c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800957e:	883b      	ldrh	r3, [r7, #0]
 8009580:	b2da      	uxtb	r2, r3
 8009582:	4b09      	ldr	r3, [pc, #36]	; (80095a8 <VL53L0X_WrWord+0x50>)
 8009584:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009586:	2203      	movs	r2, #3
 8009588:	4907      	ldr	r1, [pc, #28]	; (80095a8 <VL53L0X_WrWord+0x50>)
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff ff23 	bl	80093d6 <_I2CWrite>
 8009590:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009598:	23ec      	movs	r3, #236	; 0xec
 800959a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800959c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	2000086c 	.word	0x2000086c

080095ac <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	4608      	mov	r0, r1
 80095b6:	4611      	mov	r1, r2
 80095b8:	461a      	mov	r2, r3
 80095ba:	4603      	mov	r3, r0
 80095bc:	70fb      	strb	r3, [r7, #3]
 80095be:	460b      	mov	r3, r1
 80095c0:	70bb      	strb	r3, [r7, #2]
 80095c2:	4613      	mov	r3, r2
 80095c4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80095ca:	f107 020e 	add.w	r2, r7, #14
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f81e 	bl	8009614 <VL53L0X_RdByte>
 80095d8:	4603      	mov	r3, r0
 80095da:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80095dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d110      	bne.n	8009606 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80095e4:	7bba      	ldrb	r2, [r7, #14]
 80095e6:	78bb      	ldrb	r3, [r7, #2]
 80095e8:	4013      	ands	r3, r2
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	787b      	ldrb	r3, [r7, #1]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80095f4:	7bba      	ldrb	r2, [r7, #14]
 80095f6:	78fb      	ldrb	r3, [r7, #3]
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff ff88 	bl	8009510 <VL53L0X_WrByte>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]
 8009604:	e000      	b.n	8009608 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8009606:	bf00      	nop
done:
    return Status;
 8009608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	460b      	mov	r3, r1
 800961e:	607a      	str	r2, [r7, #4]
 8009620:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009622:	2300      	movs	r3, #0
 8009624:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009626:	f107 030b 	add.w	r3, r7, #11
 800962a:	2201      	movs	r2, #1
 800962c:	4619      	mov	r1, r3
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff fed1 	bl	80093d6 <_I2CWrite>
 8009634:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800963c:	23ec      	movs	r3, #236	; 0xec
 800963e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009640:	e00c      	b.n	800965c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8009642:	2201      	movs	r2, #1
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f7ff fee4 	bl	8009414 <_I2CRead>
 800964c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009654:	23ec      	movs	r3, #236	; 0xec
 8009656:	75fb      	strb	r3, [r7, #23]
 8009658:	e000      	b.n	800965c <VL53L0X_RdByte+0x48>
    }
done:
 800965a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800965c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	460b      	mov	r3, r1
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009676:	2300      	movs	r3, #0
 8009678:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800967a:	f107 030b 	add.w	r3, r7, #11
 800967e:	2201      	movs	r2, #1
 8009680:	4619      	mov	r1, r3
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f7ff fea7 	bl	80093d6 <_I2CWrite>
 8009688:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009690:	23ec      	movs	r3, #236	; 0xec
 8009692:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009694:	e017      	b.n	80096c6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009696:	2202      	movs	r2, #2
 8009698:	490e      	ldr	r1, [pc, #56]	; (80096d4 <VL53L0X_RdWord+0x6c>)
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f7ff feba 	bl	8009414 <_I2CRead>
 80096a0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80096a8:	23ec      	movs	r3, #236	; 0xec
 80096aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 80096ac:	e00b      	b.n	80096c6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80096ae:	4b09      	ldr	r3, [pc, #36]	; (80096d4 <VL53L0X_RdWord+0x6c>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	021b      	lsls	r3, r3, #8
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <VL53L0X_RdWord+0x6c>)
 80096ba:	785b      	ldrb	r3, [r3, #1]
 80096bc:	b29b      	uxth	r3, r3
 80096be:	4413      	add	r3, r2
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80096c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	2000086c 	.word	0x2000086c

080096d8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	460b      	mov	r3, r1
 80096e2:	607a      	str	r2, [r7, #4]
 80096e4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096e6:	2300      	movs	r3, #0
 80096e8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80096ea:	f107 030b 	add.w	r3, r7, #11
 80096ee:	2201      	movs	r2, #1
 80096f0:	4619      	mov	r1, r3
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f7ff fe6f 	bl	80093d6 <_I2CWrite>
 80096f8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009700:	23ec      	movs	r3, #236	; 0xec
 8009702:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009704:	e01b      	b.n	800973e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8009706:	2204      	movs	r2, #4
 8009708:	4910      	ldr	r1, [pc, #64]	; (800974c <VL53L0X_RdDWord+0x74>)
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f7ff fe82 	bl	8009414 <_I2CRead>
 8009710:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009718:	23ec      	movs	r3, #236	; 0xec
 800971a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800971c:	e00f      	b.n	800973e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800971e:	4b0b      	ldr	r3, [pc, #44]	; (800974c <VL53L0X_RdDWord+0x74>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	061a      	lsls	r2, r3, #24
 8009724:	4b09      	ldr	r3, [pc, #36]	; (800974c <VL53L0X_RdDWord+0x74>)
 8009726:	785b      	ldrb	r3, [r3, #1]
 8009728:	041b      	lsls	r3, r3, #16
 800972a:	441a      	add	r2, r3
 800972c:	4b07      	ldr	r3, [pc, #28]	; (800974c <VL53L0X_RdDWord+0x74>)
 800972e:	789b      	ldrb	r3, [r3, #2]
 8009730:	021b      	lsls	r3, r3, #8
 8009732:	4413      	add	r3, r2
 8009734:	4a05      	ldr	r2, [pc, #20]	; (800974c <VL53L0X_RdDWord+0x74>)
 8009736:	78d2      	ldrb	r2, [r2, #3]
 8009738:	441a      	add	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800973e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	2000086c 	.word	0x2000086c

08009750 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800975c:	2002      	movs	r0, #2
 800975e:	f7f7 fc35 	bl	8000fcc <HAL_Delay>
    return status;
 8009762:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
	...

08009770 <__errno>:
 8009770:	4b01      	ldr	r3, [pc, #4]	; (8009778 <__errno+0x8>)
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	200002d0 	.word	0x200002d0

0800977c <__libc_init_array>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	4e0d      	ldr	r6, [pc, #52]	; (80097b4 <__libc_init_array+0x38>)
 8009780:	4c0d      	ldr	r4, [pc, #52]	; (80097b8 <__libc_init_array+0x3c>)
 8009782:	1ba4      	subs	r4, r4, r6
 8009784:	10a4      	asrs	r4, r4, #2
 8009786:	2500      	movs	r5, #0
 8009788:	42a5      	cmp	r5, r4
 800978a:	d109      	bne.n	80097a0 <__libc_init_array+0x24>
 800978c:	4e0b      	ldr	r6, [pc, #44]	; (80097bc <__libc_init_array+0x40>)
 800978e:	4c0c      	ldr	r4, [pc, #48]	; (80097c0 <__libc_init_array+0x44>)
 8009790:	f000 fc30 	bl	8009ff4 <_init>
 8009794:	1ba4      	subs	r4, r4, r6
 8009796:	10a4      	asrs	r4, r4, #2
 8009798:	2500      	movs	r5, #0
 800979a:	42a5      	cmp	r5, r4
 800979c:	d105      	bne.n	80097aa <__libc_init_array+0x2e>
 800979e:	bd70      	pop	{r4, r5, r6, pc}
 80097a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097a4:	4798      	blx	r3
 80097a6:	3501      	adds	r5, #1
 80097a8:	e7ee      	b.n	8009788 <__libc_init_array+0xc>
 80097aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097ae:	4798      	blx	r3
 80097b0:	3501      	adds	r5, #1
 80097b2:	e7f2      	b.n	800979a <__libc_init_array+0x1e>
 80097b4:	0800a104 	.word	0x0800a104
 80097b8:	0800a104 	.word	0x0800a104
 80097bc:	0800a104 	.word	0x0800a104
 80097c0:	0800a108 	.word	0x0800a108

080097c4 <memcpy>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	1e43      	subs	r3, r0, #1
 80097c8:	440a      	add	r2, r1
 80097ca:	4291      	cmp	r1, r2
 80097cc:	d100      	bne.n	80097d0 <memcpy+0xc>
 80097ce:	bd10      	pop	{r4, pc}
 80097d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097d8:	e7f7      	b.n	80097ca <memcpy+0x6>

080097da <memset>:
 80097da:	4402      	add	r2, r0
 80097dc:	4603      	mov	r3, r0
 80097de:	4293      	cmp	r3, r2
 80097e0:	d100      	bne.n	80097e4 <memset+0xa>
 80097e2:	4770      	bx	lr
 80097e4:	f803 1b01 	strb.w	r1, [r3], #1
 80097e8:	e7f9      	b.n	80097de <memset+0x4>
	...

080097ec <siprintf>:
 80097ec:	b40e      	push	{r1, r2, r3}
 80097ee:	b500      	push	{lr}
 80097f0:	b09c      	sub	sp, #112	; 0x70
 80097f2:	ab1d      	add	r3, sp, #116	; 0x74
 80097f4:	9002      	str	r0, [sp, #8]
 80097f6:	9006      	str	r0, [sp, #24]
 80097f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097fc:	4809      	ldr	r0, [pc, #36]	; (8009824 <siprintf+0x38>)
 80097fe:	9107      	str	r1, [sp, #28]
 8009800:	9104      	str	r1, [sp, #16]
 8009802:	4909      	ldr	r1, [pc, #36]	; (8009828 <siprintf+0x3c>)
 8009804:	f853 2b04 	ldr.w	r2, [r3], #4
 8009808:	9105      	str	r1, [sp, #20]
 800980a:	6800      	ldr	r0, [r0, #0]
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	a902      	add	r1, sp, #8
 8009810:	f000 f86e 	bl	80098f0 <_svfiprintf_r>
 8009814:	9b02      	ldr	r3, [sp, #8]
 8009816:	2200      	movs	r2, #0
 8009818:	701a      	strb	r2, [r3, #0]
 800981a:	b01c      	add	sp, #112	; 0x70
 800981c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009820:	b003      	add	sp, #12
 8009822:	4770      	bx	lr
 8009824:	200002d0 	.word	0x200002d0
 8009828:	ffff0208 	.word	0xffff0208

0800982c <strcpy>:
 800982c:	4603      	mov	r3, r0
 800982e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009832:	f803 2b01 	strb.w	r2, [r3], #1
 8009836:	2a00      	cmp	r2, #0
 8009838:	d1f9      	bne.n	800982e <strcpy+0x2>
 800983a:	4770      	bx	lr

0800983c <__ssputs_r>:
 800983c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009840:	688e      	ldr	r6, [r1, #8]
 8009842:	429e      	cmp	r6, r3
 8009844:	4682      	mov	sl, r0
 8009846:	460c      	mov	r4, r1
 8009848:	4690      	mov	r8, r2
 800984a:	4699      	mov	r9, r3
 800984c:	d837      	bhi.n	80098be <__ssputs_r+0x82>
 800984e:	898a      	ldrh	r2, [r1, #12]
 8009850:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009854:	d031      	beq.n	80098ba <__ssputs_r+0x7e>
 8009856:	6825      	ldr	r5, [r4, #0]
 8009858:	6909      	ldr	r1, [r1, #16]
 800985a:	1a6f      	subs	r7, r5, r1
 800985c:	6965      	ldr	r5, [r4, #20]
 800985e:	2302      	movs	r3, #2
 8009860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009864:	fb95 f5f3 	sdiv	r5, r5, r3
 8009868:	f109 0301 	add.w	r3, r9, #1
 800986c:	443b      	add	r3, r7
 800986e:	429d      	cmp	r5, r3
 8009870:	bf38      	it	cc
 8009872:	461d      	movcc	r5, r3
 8009874:	0553      	lsls	r3, r2, #21
 8009876:	d530      	bpl.n	80098da <__ssputs_r+0x9e>
 8009878:	4629      	mov	r1, r5
 800987a:	f000 fb21 	bl	8009ec0 <_malloc_r>
 800987e:	4606      	mov	r6, r0
 8009880:	b950      	cbnz	r0, 8009898 <__ssputs_r+0x5c>
 8009882:	230c      	movs	r3, #12
 8009884:	f8ca 3000 	str.w	r3, [sl]
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009898:	463a      	mov	r2, r7
 800989a:	6921      	ldr	r1, [r4, #16]
 800989c:	f7ff ff92 	bl	80097c4 <memcpy>
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098aa:	81a3      	strh	r3, [r4, #12]
 80098ac:	6126      	str	r6, [r4, #16]
 80098ae:	6165      	str	r5, [r4, #20]
 80098b0:	443e      	add	r6, r7
 80098b2:	1bed      	subs	r5, r5, r7
 80098b4:	6026      	str	r6, [r4, #0]
 80098b6:	60a5      	str	r5, [r4, #8]
 80098b8:	464e      	mov	r6, r9
 80098ba:	454e      	cmp	r6, r9
 80098bc:	d900      	bls.n	80098c0 <__ssputs_r+0x84>
 80098be:	464e      	mov	r6, r9
 80098c0:	4632      	mov	r2, r6
 80098c2:	4641      	mov	r1, r8
 80098c4:	6820      	ldr	r0, [r4, #0]
 80098c6:	f000 fa93 	bl	8009df0 <memmove>
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	1b9b      	subs	r3, r3, r6
 80098ce:	60a3      	str	r3, [r4, #8]
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	441e      	add	r6, r3
 80098d4:	6026      	str	r6, [r4, #0]
 80098d6:	2000      	movs	r0, #0
 80098d8:	e7dc      	b.n	8009894 <__ssputs_r+0x58>
 80098da:	462a      	mov	r2, r5
 80098dc:	f000 fb4a 	bl	8009f74 <_realloc_r>
 80098e0:	4606      	mov	r6, r0
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d1e2      	bne.n	80098ac <__ssputs_r+0x70>
 80098e6:	6921      	ldr	r1, [r4, #16]
 80098e8:	4650      	mov	r0, sl
 80098ea:	f000 fa9b 	bl	8009e24 <_free_r>
 80098ee:	e7c8      	b.n	8009882 <__ssputs_r+0x46>

080098f0 <_svfiprintf_r>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	461d      	mov	r5, r3
 80098f6:	898b      	ldrh	r3, [r1, #12]
 80098f8:	061f      	lsls	r7, r3, #24
 80098fa:	b09d      	sub	sp, #116	; 0x74
 80098fc:	4680      	mov	r8, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	4616      	mov	r6, r2
 8009902:	d50f      	bpl.n	8009924 <_svfiprintf_r+0x34>
 8009904:	690b      	ldr	r3, [r1, #16]
 8009906:	b96b      	cbnz	r3, 8009924 <_svfiprintf_r+0x34>
 8009908:	2140      	movs	r1, #64	; 0x40
 800990a:	f000 fad9 	bl	8009ec0 <_malloc_r>
 800990e:	6020      	str	r0, [r4, #0]
 8009910:	6120      	str	r0, [r4, #16]
 8009912:	b928      	cbnz	r0, 8009920 <_svfiprintf_r+0x30>
 8009914:	230c      	movs	r3, #12
 8009916:	f8c8 3000 	str.w	r3, [r8]
 800991a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800991e:	e0c8      	b.n	8009ab2 <_svfiprintf_r+0x1c2>
 8009920:	2340      	movs	r3, #64	; 0x40
 8009922:	6163      	str	r3, [r4, #20]
 8009924:	2300      	movs	r3, #0
 8009926:	9309      	str	r3, [sp, #36]	; 0x24
 8009928:	2320      	movs	r3, #32
 800992a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800992e:	2330      	movs	r3, #48	; 0x30
 8009930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009934:	9503      	str	r5, [sp, #12]
 8009936:	f04f 0b01 	mov.w	fp, #1
 800993a:	4637      	mov	r7, r6
 800993c:	463d      	mov	r5, r7
 800993e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009942:	b10b      	cbz	r3, 8009948 <_svfiprintf_r+0x58>
 8009944:	2b25      	cmp	r3, #37	; 0x25
 8009946:	d13e      	bne.n	80099c6 <_svfiprintf_r+0xd6>
 8009948:	ebb7 0a06 	subs.w	sl, r7, r6
 800994c:	d00b      	beq.n	8009966 <_svfiprintf_r+0x76>
 800994e:	4653      	mov	r3, sl
 8009950:	4632      	mov	r2, r6
 8009952:	4621      	mov	r1, r4
 8009954:	4640      	mov	r0, r8
 8009956:	f7ff ff71 	bl	800983c <__ssputs_r>
 800995a:	3001      	adds	r0, #1
 800995c:	f000 80a4 	beq.w	8009aa8 <_svfiprintf_r+0x1b8>
 8009960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009962:	4453      	add	r3, sl
 8009964:	9309      	str	r3, [sp, #36]	; 0x24
 8009966:	783b      	ldrb	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 809d 	beq.w	8009aa8 <_svfiprintf_r+0x1b8>
 800996e:	2300      	movs	r3, #0
 8009970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	9307      	str	r3, [sp, #28]
 800997c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009980:	931a      	str	r3, [sp, #104]	; 0x68
 8009982:	462f      	mov	r7, r5
 8009984:	2205      	movs	r2, #5
 8009986:	f817 1b01 	ldrb.w	r1, [r7], #1
 800998a:	4850      	ldr	r0, [pc, #320]	; (8009acc <_svfiprintf_r+0x1dc>)
 800998c:	f7f6 fc20 	bl	80001d0 <memchr>
 8009990:	9b04      	ldr	r3, [sp, #16]
 8009992:	b9d0      	cbnz	r0, 80099ca <_svfiprintf_r+0xda>
 8009994:	06d9      	lsls	r1, r3, #27
 8009996:	bf44      	itt	mi
 8009998:	2220      	movmi	r2, #32
 800999a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800999e:	071a      	lsls	r2, r3, #28
 80099a0:	bf44      	itt	mi
 80099a2:	222b      	movmi	r2, #43	; 0x2b
 80099a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099a8:	782a      	ldrb	r2, [r5, #0]
 80099aa:	2a2a      	cmp	r2, #42	; 0x2a
 80099ac:	d015      	beq.n	80099da <_svfiprintf_r+0xea>
 80099ae:	9a07      	ldr	r2, [sp, #28]
 80099b0:	462f      	mov	r7, r5
 80099b2:	2000      	movs	r0, #0
 80099b4:	250a      	movs	r5, #10
 80099b6:	4639      	mov	r1, r7
 80099b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099bc:	3b30      	subs	r3, #48	; 0x30
 80099be:	2b09      	cmp	r3, #9
 80099c0:	d94d      	bls.n	8009a5e <_svfiprintf_r+0x16e>
 80099c2:	b1b8      	cbz	r0, 80099f4 <_svfiprintf_r+0x104>
 80099c4:	e00f      	b.n	80099e6 <_svfiprintf_r+0xf6>
 80099c6:	462f      	mov	r7, r5
 80099c8:	e7b8      	b.n	800993c <_svfiprintf_r+0x4c>
 80099ca:	4a40      	ldr	r2, [pc, #256]	; (8009acc <_svfiprintf_r+0x1dc>)
 80099cc:	1a80      	subs	r0, r0, r2
 80099ce:	fa0b f000 	lsl.w	r0, fp, r0
 80099d2:	4318      	orrs	r0, r3
 80099d4:	9004      	str	r0, [sp, #16]
 80099d6:	463d      	mov	r5, r7
 80099d8:	e7d3      	b.n	8009982 <_svfiprintf_r+0x92>
 80099da:	9a03      	ldr	r2, [sp, #12]
 80099dc:	1d11      	adds	r1, r2, #4
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	9103      	str	r1, [sp, #12]
 80099e2:	2a00      	cmp	r2, #0
 80099e4:	db01      	blt.n	80099ea <_svfiprintf_r+0xfa>
 80099e6:	9207      	str	r2, [sp, #28]
 80099e8:	e004      	b.n	80099f4 <_svfiprintf_r+0x104>
 80099ea:	4252      	negs	r2, r2
 80099ec:	f043 0302 	orr.w	r3, r3, #2
 80099f0:	9207      	str	r2, [sp, #28]
 80099f2:	9304      	str	r3, [sp, #16]
 80099f4:	783b      	ldrb	r3, [r7, #0]
 80099f6:	2b2e      	cmp	r3, #46	; 0x2e
 80099f8:	d10c      	bne.n	8009a14 <_svfiprintf_r+0x124>
 80099fa:	787b      	ldrb	r3, [r7, #1]
 80099fc:	2b2a      	cmp	r3, #42	; 0x2a
 80099fe:	d133      	bne.n	8009a68 <_svfiprintf_r+0x178>
 8009a00:	9b03      	ldr	r3, [sp, #12]
 8009a02:	1d1a      	adds	r2, r3, #4
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	9203      	str	r2, [sp, #12]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	bfb8      	it	lt
 8009a0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a10:	3702      	adds	r7, #2
 8009a12:	9305      	str	r3, [sp, #20]
 8009a14:	4d2e      	ldr	r5, [pc, #184]	; (8009ad0 <_svfiprintf_r+0x1e0>)
 8009a16:	7839      	ldrb	r1, [r7, #0]
 8009a18:	2203      	movs	r2, #3
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f7f6 fbd8 	bl	80001d0 <memchr>
 8009a20:	b138      	cbz	r0, 8009a32 <_svfiprintf_r+0x142>
 8009a22:	2340      	movs	r3, #64	; 0x40
 8009a24:	1b40      	subs	r0, r0, r5
 8009a26:	fa03 f000 	lsl.w	r0, r3, r0
 8009a2a:	9b04      	ldr	r3, [sp, #16]
 8009a2c:	4303      	orrs	r3, r0
 8009a2e:	3701      	adds	r7, #1
 8009a30:	9304      	str	r3, [sp, #16]
 8009a32:	7839      	ldrb	r1, [r7, #0]
 8009a34:	4827      	ldr	r0, [pc, #156]	; (8009ad4 <_svfiprintf_r+0x1e4>)
 8009a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a3a:	2206      	movs	r2, #6
 8009a3c:	1c7e      	adds	r6, r7, #1
 8009a3e:	f7f6 fbc7 	bl	80001d0 <memchr>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d038      	beq.n	8009ab8 <_svfiprintf_r+0x1c8>
 8009a46:	4b24      	ldr	r3, [pc, #144]	; (8009ad8 <_svfiprintf_r+0x1e8>)
 8009a48:	bb13      	cbnz	r3, 8009a90 <_svfiprintf_r+0x1a0>
 8009a4a:	9b03      	ldr	r3, [sp, #12]
 8009a4c:	3307      	adds	r3, #7
 8009a4e:	f023 0307 	bic.w	r3, r3, #7
 8009a52:	3308      	adds	r3, #8
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a58:	444b      	add	r3, r9
 8009a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a5c:	e76d      	b.n	800993a <_svfiprintf_r+0x4a>
 8009a5e:	fb05 3202 	mla	r2, r5, r2, r3
 8009a62:	2001      	movs	r0, #1
 8009a64:	460f      	mov	r7, r1
 8009a66:	e7a6      	b.n	80099b6 <_svfiprintf_r+0xc6>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	3701      	adds	r7, #1
 8009a6c:	9305      	str	r3, [sp, #20]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	250a      	movs	r5, #10
 8009a72:	4638      	mov	r0, r7
 8009a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a78:	3a30      	subs	r2, #48	; 0x30
 8009a7a:	2a09      	cmp	r2, #9
 8009a7c:	d903      	bls.n	8009a86 <_svfiprintf_r+0x196>
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0c8      	beq.n	8009a14 <_svfiprintf_r+0x124>
 8009a82:	9105      	str	r1, [sp, #20]
 8009a84:	e7c6      	b.n	8009a14 <_svfiprintf_r+0x124>
 8009a86:	fb05 2101 	mla	r1, r5, r1, r2
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	e7f0      	b.n	8009a72 <_svfiprintf_r+0x182>
 8009a90:	ab03      	add	r3, sp, #12
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	4622      	mov	r2, r4
 8009a96:	4b11      	ldr	r3, [pc, #68]	; (8009adc <_svfiprintf_r+0x1ec>)
 8009a98:	a904      	add	r1, sp, #16
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	f3af 8000 	nop.w
 8009aa0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009aa4:	4681      	mov	r9, r0
 8009aa6:	d1d6      	bne.n	8009a56 <_svfiprintf_r+0x166>
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	065b      	lsls	r3, r3, #25
 8009aac:	f53f af35 	bmi.w	800991a <_svfiprintf_r+0x2a>
 8009ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ab2:	b01d      	add	sp, #116	; 0x74
 8009ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab8:	ab03      	add	r3, sp, #12
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	4622      	mov	r2, r4
 8009abe:	4b07      	ldr	r3, [pc, #28]	; (8009adc <_svfiprintf_r+0x1ec>)
 8009ac0:	a904      	add	r1, sp, #16
 8009ac2:	4640      	mov	r0, r8
 8009ac4:	f000 f882 	bl	8009bcc <_printf_i>
 8009ac8:	e7ea      	b.n	8009aa0 <_svfiprintf_r+0x1b0>
 8009aca:	bf00      	nop
 8009acc:	0800a0d0 	.word	0x0800a0d0
 8009ad0:	0800a0d6 	.word	0x0800a0d6
 8009ad4:	0800a0da 	.word	0x0800a0da
 8009ad8:	00000000 	.word	0x00000000
 8009adc:	0800983d 	.word	0x0800983d

08009ae0 <_printf_common>:
 8009ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae4:	4691      	mov	r9, r2
 8009ae6:	461f      	mov	r7, r3
 8009ae8:	688a      	ldr	r2, [r1, #8]
 8009aea:	690b      	ldr	r3, [r1, #16]
 8009aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009af0:	4293      	cmp	r3, r2
 8009af2:	bfb8      	it	lt
 8009af4:	4613      	movlt	r3, r2
 8009af6:	f8c9 3000 	str.w	r3, [r9]
 8009afa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009afe:	4606      	mov	r6, r0
 8009b00:	460c      	mov	r4, r1
 8009b02:	b112      	cbz	r2, 8009b0a <_printf_common+0x2a>
 8009b04:	3301      	adds	r3, #1
 8009b06:	f8c9 3000 	str.w	r3, [r9]
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	0699      	lsls	r1, r3, #26
 8009b0e:	bf42      	ittt	mi
 8009b10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b14:	3302      	addmi	r3, #2
 8009b16:	f8c9 3000 	strmi.w	r3, [r9]
 8009b1a:	6825      	ldr	r5, [r4, #0]
 8009b1c:	f015 0506 	ands.w	r5, r5, #6
 8009b20:	d107      	bne.n	8009b32 <_printf_common+0x52>
 8009b22:	f104 0a19 	add.w	sl, r4, #25
 8009b26:	68e3      	ldr	r3, [r4, #12]
 8009b28:	f8d9 2000 	ldr.w	r2, [r9]
 8009b2c:	1a9b      	subs	r3, r3, r2
 8009b2e:	42ab      	cmp	r3, r5
 8009b30:	dc28      	bgt.n	8009b84 <_printf_common+0xa4>
 8009b32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b36:	6822      	ldr	r2, [r4, #0]
 8009b38:	3300      	adds	r3, #0
 8009b3a:	bf18      	it	ne
 8009b3c:	2301      	movne	r3, #1
 8009b3e:	0692      	lsls	r2, r2, #26
 8009b40:	d42d      	bmi.n	8009b9e <_printf_common+0xbe>
 8009b42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b46:	4639      	mov	r1, r7
 8009b48:	4630      	mov	r0, r6
 8009b4a:	47c0      	blx	r8
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d020      	beq.n	8009b92 <_printf_common+0xb2>
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	68e5      	ldr	r5, [r4, #12]
 8009b54:	f8d9 2000 	ldr.w	r2, [r9]
 8009b58:	f003 0306 	and.w	r3, r3, #6
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	bf08      	it	eq
 8009b60:	1aad      	subeq	r5, r5, r2
 8009b62:	68a3      	ldr	r3, [r4, #8]
 8009b64:	6922      	ldr	r2, [r4, #16]
 8009b66:	bf0c      	ite	eq
 8009b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b6c:	2500      	movne	r5, #0
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	bfc4      	itt	gt
 8009b72:	1a9b      	subgt	r3, r3, r2
 8009b74:	18ed      	addgt	r5, r5, r3
 8009b76:	f04f 0900 	mov.w	r9, #0
 8009b7a:	341a      	adds	r4, #26
 8009b7c:	454d      	cmp	r5, r9
 8009b7e:	d11a      	bne.n	8009bb6 <_printf_common+0xd6>
 8009b80:	2000      	movs	r0, #0
 8009b82:	e008      	b.n	8009b96 <_printf_common+0xb6>
 8009b84:	2301      	movs	r3, #1
 8009b86:	4652      	mov	r2, sl
 8009b88:	4639      	mov	r1, r7
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	47c0      	blx	r8
 8009b8e:	3001      	adds	r0, #1
 8009b90:	d103      	bne.n	8009b9a <_printf_common+0xba>
 8009b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9a:	3501      	adds	r5, #1
 8009b9c:	e7c3      	b.n	8009b26 <_printf_common+0x46>
 8009b9e:	18e1      	adds	r1, r4, r3
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	2030      	movs	r0, #48	; 0x30
 8009ba4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ba8:	4422      	add	r2, r4
 8009baa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bb2:	3302      	adds	r3, #2
 8009bb4:	e7c5      	b.n	8009b42 <_printf_common+0x62>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4622      	mov	r2, r4
 8009bba:	4639      	mov	r1, r7
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	47c0      	blx	r8
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d0e6      	beq.n	8009b92 <_printf_common+0xb2>
 8009bc4:	f109 0901 	add.w	r9, r9, #1
 8009bc8:	e7d8      	b.n	8009b7c <_printf_common+0x9c>
	...

08009bcc <_printf_i>:
 8009bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	7e09      	ldrb	r1, [r1, #24]
 8009bd8:	b085      	sub	sp, #20
 8009bda:	296e      	cmp	r1, #110	; 0x6e
 8009bdc:	4617      	mov	r7, r2
 8009bde:	4606      	mov	r6, r0
 8009be0:	4698      	mov	r8, r3
 8009be2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009be4:	f000 80b3 	beq.w	8009d4e <_printf_i+0x182>
 8009be8:	d822      	bhi.n	8009c30 <_printf_i+0x64>
 8009bea:	2963      	cmp	r1, #99	; 0x63
 8009bec:	d036      	beq.n	8009c5c <_printf_i+0x90>
 8009bee:	d80a      	bhi.n	8009c06 <_printf_i+0x3a>
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	f000 80b9 	beq.w	8009d68 <_printf_i+0x19c>
 8009bf6:	2958      	cmp	r1, #88	; 0x58
 8009bf8:	f000 8083 	beq.w	8009d02 <_printf_i+0x136>
 8009bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c04:	e032      	b.n	8009c6c <_printf_i+0xa0>
 8009c06:	2964      	cmp	r1, #100	; 0x64
 8009c08:	d001      	beq.n	8009c0e <_printf_i+0x42>
 8009c0a:	2969      	cmp	r1, #105	; 0x69
 8009c0c:	d1f6      	bne.n	8009bfc <_printf_i+0x30>
 8009c0e:	6820      	ldr	r0, [r4, #0]
 8009c10:	6813      	ldr	r3, [r2, #0]
 8009c12:	0605      	lsls	r5, r0, #24
 8009c14:	f103 0104 	add.w	r1, r3, #4
 8009c18:	d52a      	bpl.n	8009c70 <_printf_i+0xa4>
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6011      	str	r1, [r2, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	da03      	bge.n	8009c2a <_printf_i+0x5e>
 8009c22:	222d      	movs	r2, #45	; 0x2d
 8009c24:	425b      	negs	r3, r3
 8009c26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c2a:	486f      	ldr	r0, [pc, #444]	; (8009de8 <_printf_i+0x21c>)
 8009c2c:	220a      	movs	r2, #10
 8009c2e:	e039      	b.n	8009ca4 <_printf_i+0xd8>
 8009c30:	2973      	cmp	r1, #115	; 0x73
 8009c32:	f000 809d 	beq.w	8009d70 <_printf_i+0x1a4>
 8009c36:	d808      	bhi.n	8009c4a <_printf_i+0x7e>
 8009c38:	296f      	cmp	r1, #111	; 0x6f
 8009c3a:	d020      	beq.n	8009c7e <_printf_i+0xb2>
 8009c3c:	2970      	cmp	r1, #112	; 0x70
 8009c3e:	d1dd      	bne.n	8009bfc <_printf_i+0x30>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	f043 0320 	orr.w	r3, r3, #32
 8009c46:	6023      	str	r3, [r4, #0]
 8009c48:	e003      	b.n	8009c52 <_printf_i+0x86>
 8009c4a:	2975      	cmp	r1, #117	; 0x75
 8009c4c:	d017      	beq.n	8009c7e <_printf_i+0xb2>
 8009c4e:	2978      	cmp	r1, #120	; 0x78
 8009c50:	d1d4      	bne.n	8009bfc <_printf_i+0x30>
 8009c52:	2378      	movs	r3, #120	; 0x78
 8009c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c58:	4864      	ldr	r0, [pc, #400]	; (8009dec <_printf_i+0x220>)
 8009c5a:	e055      	b.n	8009d08 <_printf_i+0x13c>
 8009c5c:	6813      	ldr	r3, [r2, #0]
 8009c5e:	1d19      	adds	r1, r3, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6011      	str	r1, [r2, #0]
 8009c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e08c      	b.n	8009d8a <_printf_i+0x1be>
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6011      	str	r1, [r2, #0]
 8009c74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c78:	bf18      	it	ne
 8009c7a:	b21b      	sxthne	r3, r3
 8009c7c:	e7cf      	b.n	8009c1e <_printf_i+0x52>
 8009c7e:	6813      	ldr	r3, [r2, #0]
 8009c80:	6825      	ldr	r5, [r4, #0]
 8009c82:	1d18      	adds	r0, r3, #4
 8009c84:	6010      	str	r0, [r2, #0]
 8009c86:	0628      	lsls	r0, r5, #24
 8009c88:	d501      	bpl.n	8009c8e <_printf_i+0xc2>
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	e002      	b.n	8009c94 <_printf_i+0xc8>
 8009c8e:	0668      	lsls	r0, r5, #25
 8009c90:	d5fb      	bpl.n	8009c8a <_printf_i+0xbe>
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	4854      	ldr	r0, [pc, #336]	; (8009de8 <_printf_i+0x21c>)
 8009c96:	296f      	cmp	r1, #111	; 0x6f
 8009c98:	bf14      	ite	ne
 8009c9a:	220a      	movne	r2, #10
 8009c9c:	2208      	moveq	r2, #8
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ca4:	6865      	ldr	r5, [r4, #4]
 8009ca6:	60a5      	str	r5, [r4, #8]
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	f2c0 8095 	blt.w	8009dd8 <_printf_i+0x20c>
 8009cae:	6821      	ldr	r1, [r4, #0]
 8009cb0:	f021 0104 	bic.w	r1, r1, #4
 8009cb4:	6021      	str	r1, [r4, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d13d      	bne.n	8009d36 <_printf_i+0x16a>
 8009cba:	2d00      	cmp	r5, #0
 8009cbc:	f040 808e 	bne.w	8009ddc <_printf_i+0x210>
 8009cc0:	4665      	mov	r5, ip
 8009cc2:	2a08      	cmp	r2, #8
 8009cc4:	d10b      	bne.n	8009cde <_printf_i+0x112>
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	07db      	lsls	r3, r3, #31
 8009cca:	d508      	bpl.n	8009cde <_printf_i+0x112>
 8009ccc:	6923      	ldr	r3, [r4, #16]
 8009cce:	6862      	ldr	r2, [r4, #4]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	bfde      	ittt	le
 8009cd4:	2330      	movle	r3, #48	; 0x30
 8009cd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cda:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009cde:	ebac 0305 	sub.w	r3, ip, r5
 8009ce2:	6123      	str	r3, [r4, #16]
 8009ce4:	f8cd 8000 	str.w	r8, [sp]
 8009ce8:	463b      	mov	r3, r7
 8009cea:	aa03      	add	r2, sp, #12
 8009cec:	4621      	mov	r1, r4
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f7ff fef6 	bl	8009ae0 <_printf_common>
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d14d      	bne.n	8009d94 <_printf_i+0x1c8>
 8009cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cfc:	b005      	add	sp, #20
 8009cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d02:	4839      	ldr	r0, [pc, #228]	; (8009de8 <_printf_i+0x21c>)
 8009d04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d08:	6813      	ldr	r3, [r2, #0]
 8009d0a:	6821      	ldr	r1, [r4, #0]
 8009d0c:	1d1d      	adds	r5, r3, #4
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6015      	str	r5, [r2, #0]
 8009d12:	060a      	lsls	r2, r1, #24
 8009d14:	d50b      	bpl.n	8009d2e <_printf_i+0x162>
 8009d16:	07ca      	lsls	r2, r1, #31
 8009d18:	bf44      	itt	mi
 8009d1a:	f041 0120 	orrmi.w	r1, r1, #32
 8009d1e:	6021      	strmi	r1, [r4, #0]
 8009d20:	b91b      	cbnz	r3, 8009d2a <_printf_i+0x15e>
 8009d22:	6822      	ldr	r2, [r4, #0]
 8009d24:	f022 0220 	bic.w	r2, r2, #32
 8009d28:	6022      	str	r2, [r4, #0]
 8009d2a:	2210      	movs	r2, #16
 8009d2c:	e7b7      	b.n	8009c9e <_printf_i+0xd2>
 8009d2e:	064d      	lsls	r5, r1, #25
 8009d30:	bf48      	it	mi
 8009d32:	b29b      	uxthmi	r3, r3
 8009d34:	e7ef      	b.n	8009d16 <_printf_i+0x14a>
 8009d36:	4665      	mov	r5, ip
 8009d38:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d3c:	fb02 3311 	mls	r3, r2, r1, r3
 8009d40:	5cc3      	ldrb	r3, [r0, r3]
 8009d42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d46:	460b      	mov	r3, r1
 8009d48:	2900      	cmp	r1, #0
 8009d4a:	d1f5      	bne.n	8009d38 <_printf_i+0x16c>
 8009d4c:	e7b9      	b.n	8009cc2 <_printf_i+0xf6>
 8009d4e:	6813      	ldr	r3, [r2, #0]
 8009d50:	6825      	ldr	r5, [r4, #0]
 8009d52:	6961      	ldr	r1, [r4, #20]
 8009d54:	1d18      	adds	r0, r3, #4
 8009d56:	6010      	str	r0, [r2, #0]
 8009d58:	0628      	lsls	r0, r5, #24
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	d501      	bpl.n	8009d62 <_printf_i+0x196>
 8009d5e:	6019      	str	r1, [r3, #0]
 8009d60:	e002      	b.n	8009d68 <_printf_i+0x19c>
 8009d62:	066a      	lsls	r2, r5, #25
 8009d64:	d5fb      	bpl.n	8009d5e <_printf_i+0x192>
 8009d66:	8019      	strh	r1, [r3, #0]
 8009d68:	2300      	movs	r3, #0
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	4665      	mov	r5, ip
 8009d6e:	e7b9      	b.n	8009ce4 <_printf_i+0x118>
 8009d70:	6813      	ldr	r3, [r2, #0]
 8009d72:	1d19      	adds	r1, r3, #4
 8009d74:	6011      	str	r1, [r2, #0]
 8009d76:	681d      	ldr	r5, [r3, #0]
 8009d78:	6862      	ldr	r2, [r4, #4]
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f7f6 fa27 	bl	80001d0 <memchr>
 8009d82:	b108      	cbz	r0, 8009d88 <_printf_i+0x1bc>
 8009d84:	1b40      	subs	r0, r0, r5
 8009d86:	6060      	str	r0, [r4, #4]
 8009d88:	6863      	ldr	r3, [r4, #4]
 8009d8a:	6123      	str	r3, [r4, #16]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d92:	e7a7      	b.n	8009ce4 <_printf_i+0x118>
 8009d94:	6923      	ldr	r3, [r4, #16]
 8009d96:	462a      	mov	r2, r5
 8009d98:	4639      	mov	r1, r7
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	47c0      	blx	r8
 8009d9e:	3001      	adds	r0, #1
 8009da0:	d0aa      	beq.n	8009cf8 <_printf_i+0x12c>
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	079b      	lsls	r3, r3, #30
 8009da6:	d413      	bmi.n	8009dd0 <_printf_i+0x204>
 8009da8:	68e0      	ldr	r0, [r4, #12]
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	4298      	cmp	r0, r3
 8009dae:	bfb8      	it	lt
 8009db0:	4618      	movlt	r0, r3
 8009db2:	e7a3      	b.n	8009cfc <_printf_i+0x130>
 8009db4:	2301      	movs	r3, #1
 8009db6:	464a      	mov	r2, r9
 8009db8:	4639      	mov	r1, r7
 8009dba:	4630      	mov	r0, r6
 8009dbc:	47c0      	blx	r8
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	d09a      	beq.n	8009cf8 <_printf_i+0x12c>
 8009dc2:	3501      	adds	r5, #1
 8009dc4:	68e3      	ldr	r3, [r4, #12]
 8009dc6:	9a03      	ldr	r2, [sp, #12]
 8009dc8:	1a9b      	subs	r3, r3, r2
 8009dca:	42ab      	cmp	r3, r5
 8009dcc:	dcf2      	bgt.n	8009db4 <_printf_i+0x1e8>
 8009dce:	e7eb      	b.n	8009da8 <_printf_i+0x1dc>
 8009dd0:	2500      	movs	r5, #0
 8009dd2:	f104 0919 	add.w	r9, r4, #25
 8009dd6:	e7f5      	b.n	8009dc4 <_printf_i+0x1f8>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1ac      	bne.n	8009d36 <_printf_i+0x16a>
 8009ddc:	7803      	ldrb	r3, [r0, #0]
 8009dde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009de2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009de6:	e76c      	b.n	8009cc2 <_printf_i+0xf6>
 8009de8:	0800a0e1 	.word	0x0800a0e1
 8009dec:	0800a0f2 	.word	0x0800a0f2

08009df0 <memmove>:
 8009df0:	4288      	cmp	r0, r1
 8009df2:	b510      	push	{r4, lr}
 8009df4:	eb01 0302 	add.w	r3, r1, r2
 8009df8:	d807      	bhi.n	8009e0a <memmove+0x1a>
 8009dfa:	1e42      	subs	r2, r0, #1
 8009dfc:	4299      	cmp	r1, r3
 8009dfe:	d00a      	beq.n	8009e16 <memmove+0x26>
 8009e00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e04:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e08:	e7f8      	b.n	8009dfc <memmove+0xc>
 8009e0a:	4283      	cmp	r3, r0
 8009e0c:	d9f5      	bls.n	8009dfa <memmove+0xa>
 8009e0e:	1881      	adds	r1, r0, r2
 8009e10:	1ad2      	subs	r2, r2, r3
 8009e12:	42d3      	cmn	r3, r2
 8009e14:	d100      	bne.n	8009e18 <memmove+0x28>
 8009e16:	bd10      	pop	{r4, pc}
 8009e18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e1c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e20:	e7f7      	b.n	8009e12 <memmove+0x22>
	...

08009e24 <_free_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4605      	mov	r5, r0
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	d045      	beq.n	8009eb8 <_free_r+0x94>
 8009e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e30:	1f0c      	subs	r4, r1, #4
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	bfb8      	it	lt
 8009e36:	18e4      	addlt	r4, r4, r3
 8009e38:	f000 f8d2 	bl	8009fe0 <__malloc_lock>
 8009e3c:	4a1f      	ldr	r2, [pc, #124]	; (8009ebc <_free_r+0x98>)
 8009e3e:	6813      	ldr	r3, [r2, #0]
 8009e40:	4610      	mov	r0, r2
 8009e42:	b933      	cbnz	r3, 8009e52 <_free_r+0x2e>
 8009e44:	6063      	str	r3, [r4, #4]
 8009e46:	6014      	str	r4, [r2, #0]
 8009e48:	4628      	mov	r0, r5
 8009e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e4e:	f000 b8c8 	b.w	8009fe2 <__malloc_unlock>
 8009e52:	42a3      	cmp	r3, r4
 8009e54:	d90c      	bls.n	8009e70 <_free_r+0x4c>
 8009e56:	6821      	ldr	r1, [r4, #0]
 8009e58:	1862      	adds	r2, r4, r1
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	bf04      	itt	eq
 8009e5e:	681a      	ldreq	r2, [r3, #0]
 8009e60:	685b      	ldreq	r3, [r3, #4]
 8009e62:	6063      	str	r3, [r4, #4]
 8009e64:	bf04      	itt	eq
 8009e66:	1852      	addeq	r2, r2, r1
 8009e68:	6022      	streq	r2, [r4, #0]
 8009e6a:	6004      	str	r4, [r0, #0]
 8009e6c:	e7ec      	b.n	8009e48 <_free_r+0x24>
 8009e6e:	4613      	mov	r3, r2
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	b10a      	cbz	r2, 8009e78 <_free_r+0x54>
 8009e74:	42a2      	cmp	r2, r4
 8009e76:	d9fa      	bls.n	8009e6e <_free_r+0x4a>
 8009e78:	6819      	ldr	r1, [r3, #0]
 8009e7a:	1858      	adds	r0, r3, r1
 8009e7c:	42a0      	cmp	r0, r4
 8009e7e:	d10b      	bne.n	8009e98 <_free_r+0x74>
 8009e80:	6820      	ldr	r0, [r4, #0]
 8009e82:	4401      	add	r1, r0
 8009e84:	1858      	adds	r0, r3, r1
 8009e86:	4282      	cmp	r2, r0
 8009e88:	6019      	str	r1, [r3, #0]
 8009e8a:	d1dd      	bne.n	8009e48 <_free_r+0x24>
 8009e8c:	6810      	ldr	r0, [r2, #0]
 8009e8e:	6852      	ldr	r2, [r2, #4]
 8009e90:	605a      	str	r2, [r3, #4]
 8009e92:	4401      	add	r1, r0
 8009e94:	6019      	str	r1, [r3, #0]
 8009e96:	e7d7      	b.n	8009e48 <_free_r+0x24>
 8009e98:	d902      	bls.n	8009ea0 <_free_r+0x7c>
 8009e9a:	230c      	movs	r3, #12
 8009e9c:	602b      	str	r3, [r5, #0]
 8009e9e:	e7d3      	b.n	8009e48 <_free_r+0x24>
 8009ea0:	6820      	ldr	r0, [r4, #0]
 8009ea2:	1821      	adds	r1, r4, r0
 8009ea4:	428a      	cmp	r2, r1
 8009ea6:	bf04      	itt	eq
 8009ea8:	6811      	ldreq	r1, [r2, #0]
 8009eaa:	6852      	ldreq	r2, [r2, #4]
 8009eac:	6062      	str	r2, [r4, #4]
 8009eae:	bf04      	itt	eq
 8009eb0:	1809      	addeq	r1, r1, r0
 8009eb2:	6021      	streq	r1, [r4, #0]
 8009eb4:	605c      	str	r4, [r3, #4]
 8009eb6:	e7c7      	b.n	8009e48 <_free_r+0x24>
 8009eb8:	bd38      	pop	{r3, r4, r5, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000354 	.word	0x20000354

08009ec0 <_malloc_r>:
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	1ccd      	adds	r5, r1, #3
 8009ec4:	f025 0503 	bic.w	r5, r5, #3
 8009ec8:	3508      	adds	r5, #8
 8009eca:	2d0c      	cmp	r5, #12
 8009ecc:	bf38      	it	cc
 8009ece:	250c      	movcc	r5, #12
 8009ed0:	2d00      	cmp	r5, #0
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	db01      	blt.n	8009eda <_malloc_r+0x1a>
 8009ed6:	42a9      	cmp	r1, r5
 8009ed8:	d903      	bls.n	8009ee2 <_malloc_r+0x22>
 8009eda:	230c      	movs	r3, #12
 8009edc:	6033      	str	r3, [r6, #0]
 8009ede:	2000      	movs	r0, #0
 8009ee0:	bd70      	pop	{r4, r5, r6, pc}
 8009ee2:	f000 f87d 	bl	8009fe0 <__malloc_lock>
 8009ee6:	4a21      	ldr	r2, [pc, #132]	; (8009f6c <_malloc_r+0xac>)
 8009ee8:	6814      	ldr	r4, [r2, #0]
 8009eea:	4621      	mov	r1, r4
 8009eec:	b991      	cbnz	r1, 8009f14 <_malloc_r+0x54>
 8009eee:	4c20      	ldr	r4, [pc, #128]	; (8009f70 <_malloc_r+0xb0>)
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	b91b      	cbnz	r3, 8009efc <_malloc_r+0x3c>
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f000 f863 	bl	8009fc0 <_sbrk_r>
 8009efa:	6020      	str	r0, [r4, #0]
 8009efc:	4629      	mov	r1, r5
 8009efe:	4630      	mov	r0, r6
 8009f00:	f000 f85e 	bl	8009fc0 <_sbrk_r>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d124      	bne.n	8009f52 <_malloc_r+0x92>
 8009f08:	230c      	movs	r3, #12
 8009f0a:	6033      	str	r3, [r6, #0]
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f000 f868 	bl	8009fe2 <__malloc_unlock>
 8009f12:	e7e4      	b.n	8009ede <_malloc_r+0x1e>
 8009f14:	680b      	ldr	r3, [r1, #0]
 8009f16:	1b5b      	subs	r3, r3, r5
 8009f18:	d418      	bmi.n	8009f4c <_malloc_r+0x8c>
 8009f1a:	2b0b      	cmp	r3, #11
 8009f1c:	d90f      	bls.n	8009f3e <_malloc_r+0x7e>
 8009f1e:	600b      	str	r3, [r1, #0]
 8009f20:	50cd      	str	r5, [r1, r3]
 8009f22:	18cc      	adds	r4, r1, r3
 8009f24:	4630      	mov	r0, r6
 8009f26:	f000 f85c 	bl	8009fe2 <__malloc_unlock>
 8009f2a:	f104 000b 	add.w	r0, r4, #11
 8009f2e:	1d23      	adds	r3, r4, #4
 8009f30:	f020 0007 	bic.w	r0, r0, #7
 8009f34:	1ac3      	subs	r3, r0, r3
 8009f36:	d0d3      	beq.n	8009ee0 <_malloc_r+0x20>
 8009f38:	425a      	negs	r2, r3
 8009f3a:	50e2      	str	r2, [r4, r3]
 8009f3c:	e7d0      	b.n	8009ee0 <_malloc_r+0x20>
 8009f3e:	428c      	cmp	r4, r1
 8009f40:	684b      	ldr	r3, [r1, #4]
 8009f42:	bf16      	itet	ne
 8009f44:	6063      	strne	r3, [r4, #4]
 8009f46:	6013      	streq	r3, [r2, #0]
 8009f48:	460c      	movne	r4, r1
 8009f4a:	e7eb      	b.n	8009f24 <_malloc_r+0x64>
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	6849      	ldr	r1, [r1, #4]
 8009f50:	e7cc      	b.n	8009eec <_malloc_r+0x2c>
 8009f52:	1cc4      	adds	r4, r0, #3
 8009f54:	f024 0403 	bic.w	r4, r4, #3
 8009f58:	42a0      	cmp	r0, r4
 8009f5a:	d005      	beq.n	8009f68 <_malloc_r+0xa8>
 8009f5c:	1a21      	subs	r1, r4, r0
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f000 f82e 	bl	8009fc0 <_sbrk_r>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d0cf      	beq.n	8009f08 <_malloc_r+0x48>
 8009f68:	6025      	str	r5, [r4, #0]
 8009f6a:	e7db      	b.n	8009f24 <_malloc_r+0x64>
 8009f6c:	20000354 	.word	0x20000354
 8009f70:	20000358 	.word	0x20000358

08009f74 <_realloc_r>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	4607      	mov	r7, r0
 8009f78:	4614      	mov	r4, r2
 8009f7a:	460e      	mov	r6, r1
 8009f7c:	b921      	cbnz	r1, 8009f88 <_realloc_r+0x14>
 8009f7e:	4611      	mov	r1, r2
 8009f80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f84:	f7ff bf9c 	b.w	8009ec0 <_malloc_r>
 8009f88:	b922      	cbnz	r2, 8009f94 <_realloc_r+0x20>
 8009f8a:	f7ff ff4b 	bl	8009e24 <_free_r>
 8009f8e:	4625      	mov	r5, r4
 8009f90:	4628      	mov	r0, r5
 8009f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f94:	f000 f826 	bl	8009fe4 <_malloc_usable_size_r>
 8009f98:	42a0      	cmp	r0, r4
 8009f9a:	d20f      	bcs.n	8009fbc <_realloc_r+0x48>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	f7ff ff8e 	bl	8009ec0 <_malloc_r>
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d0f2      	beq.n	8009f90 <_realloc_r+0x1c>
 8009faa:	4631      	mov	r1, r6
 8009fac:	4622      	mov	r2, r4
 8009fae:	f7ff fc09 	bl	80097c4 <memcpy>
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	f7ff ff35 	bl	8009e24 <_free_r>
 8009fba:	e7e9      	b.n	8009f90 <_realloc_r+0x1c>
 8009fbc:	4635      	mov	r5, r6
 8009fbe:	e7e7      	b.n	8009f90 <_realloc_r+0x1c>

08009fc0 <_sbrk_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4c06      	ldr	r4, [pc, #24]	; (8009fdc <_sbrk_r+0x1c>)
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	f7f6 ff26 	bl	8000e1c <_sbrk>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_sbrk_r+0x1a>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_sbrk_r+0x1a>
 8009fd8:	602b      	str	r3, [r5, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	200008ac 	.word	0x200008ac

08009fe0 <__malloc_lock>:
 8009fe0:	4770      	bx	lr

08009fe2 <__malloc_unlock>:
 8009fe2:	4770      	bx	lr

08009fe4 <_malloc_usable_size_r>:
 8009fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fe8:	1f18      	subs	r0, r3, #4
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	bfbc      	itt	lt
 8009fee:	580b      	ldrlt	r3, [r1, r0]
 8009ff0:	18c0      	addlt	r0, r0, r3
 8009ff2:	4770      	bx	lr

08009ff4 <_init>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	bf00      	nop
 8009ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffa:	bc08      	pop	{r3}
 8009ffc:	469e      	mov	lr, r3
 8009ffe:	4770      	bx	lr

0800a000 <_fini>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	bf00      	nop
 800a004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a006:	bc08      	pop	{r3}
 800a008:	469e      	mov	lr, r3
 800a00a:	4770      	bx	lr
