
VL53L0X_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800b56c  0800b56c  0001b56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b734  0800b734  000204a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b734  0800b734  000204a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b734  0800b734  000204a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b734  0800b734  0001b734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b738  0800b738  0001b738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a4  20000000  0800b73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  200004a4  0800bbe0  000204a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  0800bbe0  00020bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021143  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003441  00000000  00000000  00041617  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001600  00000000  00000000  00044a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  00046058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003f90  00000000  00000000  00047500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001421e  00000000  00000000  0004b490  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad1ac  00000000  00000000  0005f6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010c85a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006288  00000000  00000000  0010c8d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004a4 	.word	0x200004a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b554 	.word	0x0800b554

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004a8 	.word	0x200004a8
 80001cc:	0800b554 	.word	0x0800b554

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <distance_sensors_init>:

const uint8_t addresses[3] = {ADDR_SENSOR_0, ADDR_SENSOR_1, ADDR_SENSOR_2};
GPIO_TypeDef *port[3] = {TOF_XSHUT_0_GPIO_Port, TOF_XSHUT_1_GPIO_Port, TOF_XSHUT_2_GPIO_Port};
const uint16_t pin[3] = {TOF_XSHUT_0_Pin, TOF_XSHUT_1_Pin, TOF_XSHUT_2_Pin} ;

void distance_sensors_init(distance_sensors_t *distance_sensors, I2C_HandleTypeDef *hi2c){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i < 3; ++i){
 800027a:	2300      	movs	r3, #0
 800027c:	73fb      	strb	r3, [r7, #15]
 800027e:	e018      	b.n	80002b2 <distance_sensors_init+0x42>
		distance_sensors->sensors[i] = &distance_sensors->vl53l0x[i];
 8000280:	7bfa      	ldrb	r2, [r7, #15]
 8000282:	7bfb      	ldrb	r3, [r7, #15]
 8000284:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000288:	fb01 f202 	mul.w	r2, r1, r2
 800028c:	3250      	adds	r2, #80	; 0x50
 800028e:	6879      	ldr	r1, [r7, #4]
 8000290:	440a      	add	r2, r1
 8000292:	3204      	adds	r2, #4
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	440b      	add	r3, r1
 800029e:	605a      	str	r2, [r3, #4]
		distance_sensors->data_ready[i] = 0;
 80002a0:	7bfb      	ldrb	r3, [r7, #15]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	2200      	movs	r2, #0
 80002a8:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(uint8_t i = 0; i < 3; ++i){
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
 80002ae:	3301      	adds	r3, #1
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d9e3      	bls.n	8000280 <distance_sensors_init+0x10>

	}

	for(uint8_t i = 0; i < 3; ++i){
 80002b8:	2300      	movs	r3, #0
 80002ba:	73bb      	strb	r3, [r7, #14]
 80002bc:	e016      	b.n	80002ec <distance_sensors_init+0x7c>
		distance_sensors->sensors[i]->I2cHandle = hi2c;
 80002be:	7bbb      	ldrb	r3, [r7, #14]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	4413      	add	r3, r2
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	683a      	ldr	r2, [r7, #0]
 80002ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		distance_sensors->sensors[i]->I2cDevAddr = 0x52;
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	4413      	add	r3, r2
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	2252      	movs	r2, #82	; 0x52
 80002e2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	for(uint8_t i = 0; i < 3; ++i){
 80002e6:	7bbb      	ldrb	r3, [r7, #14]
 80002e8:	3301      	adds	r3, #1
 80002ea:	73bb      	strb	r3, [r7, #14]
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d9e5      	bls.n	80002be <distance_sensors_init+0x4e>
	}

	for(uint8_t i = 0; i < 3; ++i){
 80002f2:	2300      	movs	r3, #0
 80002f4:	737b      	strb	r3, [r7, #13]
 80002f6:	e011      	b.n	800031c <distance_sensors_init+0xac>
		HAL_GPIO_WritePin(port[i], pin[i], GPIO_PIN_RESET);
 80002f8:	7b7b      	ldrb	r3, [r7, #13]
 80002fa:	4a87      	ldr	r2, [pc, #540]	; (8000518 <distance_sensors_init+0x2a8>)
 80002fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000300:	7b7b      	ldrb	r3, [r7, #13]
 8000302:	4a86      	ldr	r2, [pc, #536]	; (800051c <distance_sensors_init+0x2ac>)
 8000304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000308:	2200      	movs	r2, #0
 800030a:	4619      	mov	r1, r3
 800030c:	f001 fc3a 	bl	8001b84 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8000310:	2014      	movs	r0, #20
 8000312:	f001 f8eb 	bl	80014ec <HAL_Delay>
	for(uint8_t i = 0; i < 3; ++i){
 8000316:	7b7b      	ldrb	r3, [r7, #13]
 8000318:	3301      	adds	r3, #1
 800031a:	737b      	strb	r3, [r7, #13]
 800031c:	7b7b      	ldrb	r3, [r7, #13]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d9ea      	bls.n	80002f8 <distance_sensors_init+0x88>
	}

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000322:	2006      	movs	r0, #6
 8000324:	f001 fa2b 	bl	800177e <HAL_NVIC_DisableIRQ>
 	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000328:	2028      	movs	r0, #40	; 0x28
 800032a:	f001 fa28 	bl	800177e <HAL_NVIC_DisableIRQ>
 	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800032e:	2007      	movs	r0, #7
 8000330:	f001 fa25 	bl	800177e <HAL_NVIC_DisableIRQ>

 	for(uint8_t i = 0; i < 3; ++i){
 8000334:	2300      	movs	r3, #0
 8000336:	733b      	strb	r3, [r7, #12]
 8000338:	e0dd      	b.n	80004f6 <distance_sensors_init+0x286>
 		HAL_GPIO_WritePin(port[i], pin[i], GPIO_PIN_SET);
 800033a:	7b3b      	ldrb	r3, [r7, #12]
 800033c:	4a76      	ldr	r2, [pc, #472]	; (8000518 <distance_sensors_init+0x2a8>)
 800033e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000342:	7b3b      	ldrb	r3, [r7, #12]
 8000344:	4a75      	ldr	r2, [pc, #468]	; (800051c <distance_sensors_init+0x2ac>)
 8000346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800034a:	2201      	movs	r2, #1
 800034c:	4619      	mov	r1, r3
 800034e:	f001 fc19 	bl	8001b84 <HAL_GPIO_WritePin>
 		HAL_Delay(20);
 8000352:	2014      	movs	r0, #20
 8000354:	f001 f8ca 	bl	80014ec <HAL_Delay>
 		VL53L0X_WaitDeviceBooted(distance_sensors->sensors[i]);
 8000358:	7b3b      	ldrb	r3, [r7, #12]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	4413      	add	r3, r2
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	4618      	mov	r0, r3
 8000368:	f005 febe 	bl	80060e8 <VL53L0X_WaitDeviceBooted>
 		VL53L0X_DataInit(distance_sensors->sensors[i]);
 800036c:	7b3b      	ldrb	r3, [r7, #12]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	4413      	add	r3, r2
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	4618      	mov	r0, r3
 800037c:	f005 fbce 	bl	8005b1c <VL53L0X_DataInit>
 		VL53L0X_SetDeviceAddress(distance_sensors->sensors[i],addresses[i]);
 8000380:	7b3b      	ldrb	r3, [r7, #12]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	4413      	add	r3, r2
 800038c:	6858      	ldr	r0, [r3, #4]
 800038e:	7b3b      	ldrb	r3, [r7, #12]
 8000390:	4a63      	ldr	r2, [pc, #396]	; (8000520 <distance_sensors_init+0x2b0>)
 8000392:	5cd3      	ldrb	r3, [r2, r3]
 8000394:	4619      	mov	r1, r3
 8000396:	f005 fba9 	bl	8005aec <VL53L0X_SetDeviceAddress>
 		distance_sensors->sensors[i]->I2cDevAddr = addresses[i];
 800039a:	7b3a      	ldrb	r2, [r7, #12]
 800039c:	7b3b      	ldrb	r3, [r7, #12]
 800039e:	6879      	ldr	r1, [r7, #4]
 80003a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	440b      	add	r3, r1
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	495d      	ldr	r1, [pc, #372]	; (8000520 <distance_sensors_init+0x2b0>)
 80003ac:	5c8a      	ldrb	r2, [r1, r2]
 80003ae:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 		VL53L0X_WaitDeviceBooted(distance_sensors->sensors[i]);
 80003b2:	7b3b      	ldrb	r3, [r7, #12]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f005 fe91 	bl	80060e8 <VL53L0X_WaitDeviceBooted>
 		VL53L0X_StaticInit(distance_sensors->sensors[i]);
 80003c6:	7b3b      	ldrb	r3, [r7, #12]
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	4413      	add	r3, r2
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f005 fd05 	bl	8005de4 <VL53L0X_StaticInit>
		VL53L0X_PerformRefCalibration(distance_sensors->sensors[i], &distance_sensors->VhvSettings, &distance_sensors->PhaseCal);
 80003da:	7b3b      	ldrb	r3, [r7, #12]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	4413      	add	r3, r2
 80003e6:	6858      	ldr	r0, [r3, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f203 5119 	addw	r1, r3, #1305	; 0x519
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f203 531a 	addw	r3, r3, #1306	; 0x51a
 80003f4:	461a      	mov	r2, r3
 80003f6:	f006 fbb3 	bl	8006b60 <VL53L0X_PerformRefCalibration>
		VL53L0X_PerformRefSpadManagement(distance_sensors->sensors[i], &distance_sensors->refSpadCount, &distance_sensors->isApertureSpads);
 80003fa:	7b3b      	ldrb	r3, [r7, #12]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4413      	add	r3, r2
 8000406:	6858      	ldr	r0, [r3, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f203 5114 	addw	r1, r3, #1300	; 0x514
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8000414:	461a      	mov	r2, r3
 8000416:	f007 f831 	bl	800747c <VL53L0X_PerformRefSpadManagement>
		VL53L0X_SetDeviceMode(distance_sensors->sensors[i], VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800041a:	7b3b      	ldrb	r3, [r7, #12]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	4413      	add	r3, r2
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	2101      	movs	r1, #1
 800042a:	4618      	mov	r0, r3
 800042c:	f005 fefa 	bl	8006224 <VL53L0X_SetDeviceMode>

		VL53L0X_SetLimitCheckEnable(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000430:	7b3b      	ldrb	r3, [r7, #12]
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	4413      	add	r3, r2
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	2201      	movs	r2, #1
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f006 f986 	bl	8006754 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckEnable(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000448:	7b3b      	ldrb	r3, [r7, #12]
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4413      	add	r3, r2
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	2201      	movs	r2, #1
 8000458:	2101      	movs	r1, #1
 800045a:	4618      	mov	r0, r3
 800045c:	f006 f97a 	bl	8006754 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckValue(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000460:	7b3b      	ldrb	r3, [r7, #12]
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4413      	add	r3, r2
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	f641 1299 	movw	r2, #6553	; 0x1999
 8000472:	2101      	movs	r1, #1
 8000474:	4618      	mov	r0, r3
 8000476:	f006 fa1d 	bl	80068b4 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetLimitCheckValue(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800047a:	7b3b      	ldrb	r3, [r7, #12]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4413      	add	r3, r2
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f006 fa10 	bl	80068b4 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(distance_sensors->sensors[i], 33000);
 8000494:	7b3b      	ldrb	r3, [r7, #12]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80004a6:	4618      	mov	r0, r3
 80004a8:	f005 ff36 	bl	8006318 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		VL53L0X_SetVcselPulsePeriod(distance_sensors->sensors[i], VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80004ac:	7b3b      	ldrb	r3, [r7, #12]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4413      	add	r3, r2
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	2212      	movs	r2, #18
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f005 ff50 	bl	8006364 <VL53L0X_SetVcselPulsePeriod>
		VL53L0X_SetVcselPulsePeriod(distance_sensors->sensors[i], VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80004c4:	7b3b      	ldrb	r3, [r7, #12]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4413      	add	r3, r2
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	220e      	movs	r2, #14
 80004d4:	2101      	movs	r1, #1
 80004d6:	4618      	mov	r0, r3
 80004d8:	f005 ff44 	bl	8006364 <VL53L0X_SetVcselPulsePeriod>

		VL53L0X_StartMeasurement(distance_sensors->sensors[i]);
 80004dc:	7b3b      	ldrb	r3, [r7, #12]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f006 fbb4 	bl	8006c58 <VL53L0X_StartMeasurement>
 	for(uint8_t i = 0; i < 3; ++i){
 80004f0:	7b3b      	ldrb	r3, [r7, #12]
 80004f2:	3301      	adds	r3, #1
 80004f4:	733b      	strb	r3, [r7, #12]
 80004f6:	7b3b      	ldrb	r3, [r7, #12]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	f67f af1e 	bls.w	800033a <distance_sensors_init+0xca>
 	}



	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004fe:	2006      	movs	r0, #6
 8000500:	f001 f92f 	bl	8001762 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000504:	2028      	movs	r0, #40	; 0x28
 8000506:	f001 f92c 	bl	8001762 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800050a:	2007      	movs	r0, #7
 800050c:	f001 f929 	bl	8001762 <HAL_NVIC_EnableIRQ>

}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000000 	.word	0x20000000
 800051c:	0800b5b4 	.word	0x0800b5b4
 8000520:	0800b5b0 	.word	0x0800b5b0

08000524 <distance_sensors_is_data_ready>:

uint8_t distance_sensors_is_data_ready(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]
	return distance_sensors->data_ready[num_of_sensor];
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 800053a:	b2db      	uxtb	r3, r3
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <distance_sensors_cleer_interrupt>:

void distance_sensors_cleer_interrupt(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
	distance_sensors->data_ready[num_of_sensor] = 0;
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	2200      	movs	r2, #0
 800055c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <distance_sensors_set_interrupt>:

void distance_sensors_set_interrupt(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]
	distance_sensors->data_ready[num_of_sensor] = 1;
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	2201      	movs	r2, #1
 8000580:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <distance_sensors_get_distance>:

uint16_t distance_sensors_get_distance(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_GetRangingMeasurementData(distance_sensors->sensors[num_of_sensor], &distance_sensors->ranging_data[num_of_sensor]);
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	6858      	ldr	r0, [r3, #4]
 80005aa:	78fa      	ldrb	r2, [r7, #3]
 80005ac:	4613      	mov	r3, r2
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	4619      	mov	r1, r3
 80005ba:	f006 fc4d 	bl	8006e58 <VL53L0X_GetRangingMeasurementData>
	VL53L0X_ClearInterruptMask(distance_sensors->sensors[num_of_sensor], VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 80005be:	78fb      	ldrb	r3, [r7, #3]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 fef2 	bl	80073b8 <VL53L0X_ClearInterruptMask>
	return distance_sensors->ranging_data[num_of_sensor].RangeMilliMeter;
 80005d4:	78fa      	ldrb	r2, [r7, #3]
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	4613      	mov	r3, r2
 80005da:	00db      	lsls	r3, r3, #3
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	3308      	adds	r3, #8
 80005e4:	881b      	ldrh	r3, [r3, #0]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 ff13 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f8b1 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fa69 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 fa33 	bl	8000a6c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000606:	f000 f903 	bl	8000810 <MX_I2C1_Init>
  MX_TIM16_Init();
 800060a:	f000 f93f 	bl	800088c <MX_TIM16_Init>
  MX_TIM17_Init();
 800060e:	f000 f9b5 	bl	800097c <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   distance_sensors_init(&distance_sensors, &hi2c1);
 8000612:	4949      	ldr	r1, [pc, #292]	; (8000738 <main+0x148>)
 8000614:	4849      	ldr	r0, [pc, #292]	; (800073c <main+0x14c>)
 8000616:	f7ff fe2b 	bl	8000270 <distance_sensors_init>
   remote_controller_init(&remote_controller, &huart2);
 800061a:	4949      	ldr	r1, [pc, #292]	; (8000740 <main+0x150>)
 800061c:	4849      	ldr	r0, [pc, #292]	; (8000744 <main+0x154>)
 800061e:	f000 fba7 	bl	8000d70 <remote_controller_init>
   motors_init(&htim16, &htim17);
 8000622:	4949      	ldr	r1, [pc, #292]	; (8000748 <main+0x158>)
 8000624:	4849      	ldr	r0, [pc, #292]	; (800074c <main+0x15c>)
 8000626:	f000 fb47 	bl	8000cb8 <motors_init>
   motors_set_speed(RIGHT_MOTOR, 50);
 800062a:	2132      	movs	r1, #50	; 0x32
 800062c:	2001      	movs	r0, #1
 800062e:	f000 fb77 	bl	8000d20 <motors_set_speed>
   motors_set_speed(LEFT_MOTOR, 50);
 8000632:	2132      	movs	r1, #50	; 0x32
 8000634:	2000      	movs	r0, #0
 8000636:	f000 fb73 	bl	8000d20 <motors_set_speed>
   HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 800063a:	4b42      	ldr	r3, [pc, #264]	; (8000744 <main+0x154>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2201      	movs	r2, #1
 8000640:	4943      	ldr	r1, [pc, #268]	; (8000750 <main+0x160>)
 8000642:	4618      	mov	r0, r3
 8000644:	f004 f954 	bl	80048f0 <HAL_UART_Receive_IT>
   uint16_t x;

  while (1)
  {

	  if(distance_sensors_is_data_ready(&distance_sensors, 0))
 8000648:	2100      	movs	r1, #0
 800064a:	483c      	ldr	r0, [pc, #240]	; (800073c <main+0x14c>)
 800064c:	f7ff ff6a 	bl	8000524 <distance_sensors_is_data_ready>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d011      	beq.n	800067a <main+0x8a>
	  {

		x = sprintf((char*)tab, "L 1: %i\n",distance_sensors_get_distance(&distance_sensors, 0));
 8000656:	2100      	movs	r1, #0
 8000658:	4838      	ldr	r0, [pc, #224]	; (800073c <main+0x14c>)
 800065a:	f7ff ff99 	bl	8000590 <distance_sensors_get_distance>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	493b      	ldr	r1, [pc, #236]	; (8000754 <main+0x164>)
 8000668:	4618      	mov	r0, r3
 800066a:	f00a faa9 	bl	800abc0 <siprintf>
 800066e:	4603      	mov	r3, r0
 8000670:	84fb      	strh	r3, [r7, #38]	; 0x26
		//HAL_UART_Transmit(&huart2, tab, x, 100);
		distance_sensors_cleer_interrupt(&distance_sensors, 0);
 8000672:	2100      	movs	r1, #0
 8000674:	4831      	ldr	r0, [pc, #196]	; (800073c <main+0x14c>)
 8000676:	f7ff ff67 	bl	8000548 <distance_sensors_cleer_interrupt>

	  }

	  if(distance_sensors_is_data_ready(&distance_sensors, 1))
 800067a:	2101      	movs	r1, #1
 800067c:	482f      	ldr	r0, [pc, #188]	; (800073c <main+0x14c>)
 800067e:	f7ff ff51 	bl	8000524 <distance_sensors_is_data_ready>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d011      	beq.n	80006ac <main+0xbc>
	 	  {

		  	  x = sprintf((char*)tab, "L 2: %i\n",distance_sensors_get_distance(&distance_sensors, 1));
 8000688:	2101      	movs	r1, #1
 800068a:	482c      	ldr	r0, [pc, #176]	; (800073c <main+0x14c>)
 800068c:	f7ff ff80 	bl	8000590 <distance_sensors_get_distance>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	492f      	ldr	r1, [pc, #188]	; (8000758 <main+0x168>)
 800069a:	4618      	mov	r0, r3
 800069c:	f00a fa90 	bl	800abc0 <siprintf>
 80006a0:	4603      	mov	r3, r0
 80006a2:	84fb      	strh	r3, [r7, #38]	; 0x26
		  		//HAL_UART_Transmit(&huart2, tab, x, 100);
	 		distance_sensors_cleer_interrupt(&distance_sensors, 1);
 80006a4:	2101      	movs	r1, #1
 80006a6:	4825      	ldr	r0, [pc, #148]	; (800073c <main+0x14c>)
 80006a8:	f7ff ff4e 	bl	8000548 <distance_sensors_cleer_interrupt>

	 	  }

	  if(distance_sensors_is_data_ready(&distance_sensors, 2))
 80006ac:	2102      	movs	r1, #2
 80006ae:	4823      	ldr	r0, [pc, #140]	; (800073c <main+0x14c>)
 80006b0:	f7ff ff38 	bl	8000524 <distance_sensors_is_data_ready>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d011      	beq.n	80006de <main+0xee>
	  	 	  {

	  		  	  x = sprintf((char*)tab, "L 3: %i\n",distance_sensors_get_distance(&distance_sensors, 2));
 80006ba:	2102      	movs	r1, #2
 80006bc:	481f      	ldr	r0, [pc, #124]	; (800073c <main+0x14c>)
 80006be:	f7ff ff67 	bl	8000590 <distance_sensors_get_distance>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	4924      	ldr	r1, [pc, #144]	; (800075c <main+0x16c>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f00a fa77 	bl	800abc0 <siprintf>
 80006d2:	4603      	mov	r3, r0
 80006d4:	84fb      	strh	r3, [r7, #38]	; 0x26
	  		  //	HAL_UART_Transmit(&huart2, tab, x, 100);
	  	 		distance_sensors_cleer_interrupt(&distance_sensors, 2);
 80006d6:	2102      	movs	r1, #2
 80006d8:	4818      	ldr	r0, [pc, #96]	; (800073c <main+0x14c>)
 80006da:	f7ff ff35 	bl	8000548 <distance_sensors_cleer_interrupt>

	  	 	  }
	  if(remote_controller_is_data_ready(&remote_controller)){
 80006de:	4819      	ldr	r0, [pc, #100]	; (8000744 <main+0x154>)
 80006e0:	f000 fb8a 	bl	8000df8 <remote_controller_is_data_ready>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0ae      	beq.n	8000648 <main+0x58>
		  remote_controller_parser(&remote_controller);
 80006ea:	4816      	ldr	r0, [pc, #88]	; (8000744 <main+0x154>)
 80006ec:	f000 fbd0 	bl	8000e90 <remote_controller_parser>
		  motors_set_speed(RIGHT_MOTOR, (int)(remote_controller.ki));
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <main+0x154>)
 80006f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80006f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80006fe:	793b      	ldrb	r3, [r7, #4]
 8000700:	4619      	mov	r1, r3
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fb0c 	bl	8000d20 <motors_set_speed>
		  motors_set_speed(LEFT_MOTOR, (int)(remote_controller.ki));
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <main+0x154>)
 800070a:	edd3 7a05 	vldr	s15, [r3, #20]
 800070e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000712:	edc7 7a01 	vstr	s15, [r7, #4]
 8000716:	793b      	ldrb	r3, [r7, #4]
 8000718:	4619      	mov	r1, r3
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fb00 	bl	8000d20 <motors_set_speed>
		  remote_controller_celar_interrupt(&remote_controller);
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <main+0x154>)
 8000722:	f000 fb76 	bl	8000e12 <remote_controller_celar_interrupt>
		  HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <main+0x154>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2201      	movs	r2, #1
 800072c:	4908      	ldr	r1, [pc, #32]	; (8000750 <main+0x160>)
 800072e:	4618      	mov	r0, r3
 8000730:	f004 f8de 	bl	80048f0 <HAL_UART_Receive_IT>
	  if(distance_sensors_is_data_ready(&distance_sensors, 0))
 8000734:	e788      	b.n	8000648 <main+0x58>
 8000736:	bf00      	nop
 8000738:	200004cc 	.word	0x200004cc
 800073c:	20000588 	.word	0x20000588
 8000740:	20000aa4 	.word	0x20000aa4
 8000744:	20000564 	.word	0x20000564
 8000748:	20000518 	.word	0x20000518
 800074c:	20000b28 	.word	0x20000b28
 8000750:	20000568 	.word	0x20000568
 8000754:	0800b56c 	.word	0x0800b56c
 8000758:	0800b578 	.word	0x0800b578
 800075c:	0800b584 	.word	0x0800b584

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b096      	sub	sp, #88	; 0x58
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076a:	2228      	movs	r2, #40	; 0x28
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f00a fa1d 	bl	800abae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
 8000792:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007a8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 ff18 	bl	80025e8 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007be:	f000 fa73 	bl	8000ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	2102      	movs	r1, #2
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fe0a 	bl	80033f8 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007ea:	f000 fa5d 	bl	8000ca8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ee:	2320      	movs	r3, #32
 80007f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 f833 	bl	8003864 <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000804:	f000 fa50 	bl	8000ca8 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3758      	adds	r7, #88	; 0x58
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_I2C1_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <MX_I2C1_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_I2C1_Init+0x74>)
 800081c:	f240 220b 	movw	r2, #523	; 0x20b
 8000820:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_I2C1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_I2C1_Init+0x74>)
 800082a:	2201      	movs	r2, #1
 800082c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_I2C1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2C1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_I2C1_Init+0x74>)
 800084e:	f001 f9c9 	bl	8001be4 <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000858:	f000 fa26 	bl	8000ca8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085c:	2100      	movs	r1, #0
 800085e:	4809      	ldr	r0, [pc, #36]	; (8000884 <MX_I2C1_Init+0x74>)
 8000860:	f001 fe2a 	bl	80024b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800086a:	f000 fa1d 	bl	8000ca8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800086e:	2100      	movs	r1, #0
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_I2C1_Init+0x74>)
 8000872:	f001 fe6c 	bl	800254e <HAL_I2CEx_ConfigDigitalFilter>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800087c:	f000 fa14 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200004cc 	.word	0x200004cc
 8000888:	40005400 	.word	0x40005400

0800088c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b092      	sub	sp, #72	; 0x48
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	222c      	movs	r2, #44	; 0x2c
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f00a f97e 	bl	800abae <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008b2:	4b30      	ldr	r3, [pc, #192]	; (8000974 <MX_TIM16_Init+0xe8>)
 80008b4:	4a30      	ldr	r2, [pc, #192]	; (8000978 <MX_TIM16_Init+0xec>)
 80008b6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9;
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_TIM16_Init+0xe8>)
 80008ba:	2209      	movs	r2, #9
 80008bc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_TIM16_Init+0xe8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_TIM16_Init+0xe8>)
 80008c6:	2263      	movs	r2, #99	; 0x63
 80008c8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MX_TIM16_Init+0xe8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_TIM16_Init+0xe8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_TIM16_Init+0xe8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008dc:	4825      	ldr	r0, [pc, #148]	; (8000974 <MX_TIM16_Init+0xe8>)
 80008de:	f003 f8e7 	bl	8003ab0 <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80008e8:	f000 f9de 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80008ec:	4821      	ldr	r0, [pc, #132]	; (8000974 <MX_TIM16_Init+0xe8>)
 80008ee:	f003 f993 	bl	8003c18 <HAL_TIM_PWM_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80008f8:	f000 f9d6 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fc:	2360      	movs	r3, #96	; 0x60
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000908:	2300      	movs	r3, #0
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091c:	2200      	movs	r2, #0
 800091e:	4619      	mov	r1, r3
 8000920:	4814      	ldr	r0, [pc, #80]	; (8000974 <MX_TIM16_Init+0xe8>)
 8000922:	f003 fac7 	bl	8003eb4 <HAL_TIM_PWM_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 800092c:	f000 f9bc 	bl	8000ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <MX_TIM16_Init+0xe8>)
 8000958:	f003 ff04 	bl	8004764 <HAL_TIMEx_ConfigBreakDeadTime>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000962:	f000 f9a1 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000966:	4803      	ldr	r0, [pc, #12]	; (8000974 <MX_TIM16_Init+0xe8>)
 8000968:	f000 fbf4 	bl	8001154 <HAL_TIM_MspPostInit>

}
 800096c:	bf00      	nop
 800096e:	3748      	adds	r7, #72	; 0x48
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000b28 	.word	0x20000b28
 8000978:	40014400 	.word	0x40014400

0800097c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b092      	sub	sp, #72	; 0x48
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	222c      	movs	r2, #44	; 0x2c
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f00a f906 	bl	800abae <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009a2:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <MX_TIM17_Init+0xe8>)
 80009a4:	4a30      	ldr	r2, [pc, #192]	; (8000a68 <MX_TIM17_Init+0xec>)
 80009a6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 9;
 80009a8:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <MX_TIM17_Init+0xe8>)
 80009aa:	2209      	movs	r2, #9
 80009ac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_TIM17_Init+0xe8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_TIM17_Init+0xe8>)
 80009b6:	2263      	movs	r2, #99	; 0x63
 80009b8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_TIM17_Init+0xe8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80009c0:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_TIM17_Init+0xe8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_TIM17_Init+0xe8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80009cc:	4825      	ldr	r0, [pc, #148]	; (8000a64 <MX_TIM17_Init+0xe8>)
 80009ce:	f003 f86f 	bl	8003ab0 <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 f966 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80009dc:	4821      	ldr	r0, [pc, #132]	; (8000a64 <MX_TIM17_Init+0xe8>)
 80009de:	f003 f91b 	bl	8003c18 <HAL_TIM_PWM_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80009e8:	f000 f95e 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ec:	2360      	movs	r3, #96	; 0x60
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f4:	2300      	movs	r3, #0
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4814      	ldr	r0, [pc, #80]	; (8000a64 <MX_TIM17_Init+0xe8>)
 8000a12:	f003 fa4f 	bl	8003eb4 <HAL_TIM_PWM_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000a1c:	f000 f944 	bl	8000ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MX_TIM17_Init+0xe8>)
 8000a48:	f003 fe8c 	bl	8004764 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000a52:	f000 f929 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <MX_TIM17_Init+0xe8>)
 8000a58:	f000 fb7c 	bl	8001154 <HAL_TIM_MspPostInit>

}
 8000a5c:	bf00      	nop
 8000a5e:	3748      	adds	r7, #72	; 0x48
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000518 	.word	0x20000518
 8000a68:	40014800 	.word	0x40014800

08000a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <MX_USART2_UART_Init+0x64>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000a78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000ab0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USART2_UART_Init+0x60>)
 8000ab8:	f003 fecc 	bl	8004854 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000ac2:	f000 f8f1 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000aa4 	.word	0x20000aa4
 8000ad0:	40004400 	.word	0x40004400

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aea:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a42      	ldr	r2, [pc, #264]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000af0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af4:	6153      	str	r3, [r2, #20]
 8000af6:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a3c      	ldr	r2, [pc, #240]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	6153      	str	r3, [r2, #20]
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	4a36      	ldr	r2, [pc, #216]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b24:	6153      	str	r3, [r2, #20]
 8000b26:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SILNIK_P_2_Pin|TOF_XSHUT_2_Pin|SILNIK_L_2_Pin|SILNIK_L_1_Pin
 8000b32:	2200      	movs	r2, #0
 8000b34:	f241 7190 	movw	r1, #6032	; 0x1790
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f001 f822 	bl	8001b84 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_1_Pin|TOF_XSHUT_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SILNIK_P_1_GPIO_Port, SILNIK_P_1_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2108      	movs	r1, #8
 8000b44:	482d      	ldr	r0, [pc, #180]	; (8000bfc <MX_GPIO_Init+0x128>)
 8000b46:	f001 f81d 	bl	8001b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SILNIK_P_2_Pin TOF_XSHUT_2_Pin SILNIK_L_2_Pin SILNIK_L_1_Pin
                           TOF_XSHUT_1_Pin TOF_XSHUT_0_Pin */
  GPIO_InitStruct.Pin = SILNIK_P_2_Pin|TOF_XSHUT_2_Pin|SILNIK_L_2_Pin|SILNIK_L_1_Pin
 8000b4a:	f241 7390 	movw	r3, #6032	; 0x1790
 8000b4e:	60fb      	str	r3, [r7, #12]
                          |TOF_XSHUT_1_Pin|TOF_XSHUT_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b66:	f000 fe9b 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_INT_0_Pin TOF_INT_2_Pin */
  GPIO_InitStruct.Pin = TOF_INT_0_Pin|TOF_INT_2_Pin;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481f      	ldr	r0, [pc, #124]	; (8000bfc <MX_GPIO_Init+0x128>)
 8000b80:	f000 fe8e 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_1_Pin */
  GPIO_InitStruct.Pin = TOF_INT_1_Pin;
 8000b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_1_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f000 fe7f 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SILNIK_P_1_Pin */
  GPIO_InitStruct.Pin = SILNIK_P_1_Pin;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SILNIK_P_1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4810      	ldr	r0, [pc, #64]	; (8000bfc <MX_GPIO_Init+0x128>)
 8000bba:	f000 fe71 	bl	80018a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2006      	movs	r0, #6
 8000bc4:	f000 fdb1 	bl	800172a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bc8:	2006      	movs	r0, #6
 8000bca:	f000 fdca 	bl	8001762 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f000 fda9 	bl	800172a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bd8:	2007      	movs	r0, #7
 8000bda:	f000 fdc2 	bl	8001762 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2028      	movs	r0, #40	; 0x28
 8000be4:	f000 fda1 	bl	800172a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000be8:	2028      	movs	r0, #40	; 0x28
 8000bea:	f000 fdba 	bl	8001762 <HAL_NVIC_EnableIRQ>

}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000400 	.word	0x48000400

08000c00 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOF_INT_0_Pin)
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d103      	bne.n	8000c18 <HAL_GPIO_EXTI_Callback+0x18>
	{
//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
		distance_sensors_set_interrupt(&distance_sensors, 0);
 8000c10:	2100      	movs	r1, #0
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x40>)
 8000c14:	f7ff fcaa 	bl	800056c <distance_sensors_set_interrupt>

	}

	if(GPIO_Pin == TOF_INT_1_Pin)
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c1e:	d103      	bne.n	8000c28 <HAL_GPIO_EXTI_Callback+0x28>
		{
	//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
	//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
		distance_sensors_set_interrupt(&distance_sensors, 1);
 8000c20:	2101      	movs	r1, #1
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x40>)
 8000c24:	f7ff fca2 	bl	800056c <distance_sensors_set_interrupt>

		}
	if(GPIO_Pin == TOF_INT_2_Pin)
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d103      	bne.n	8000c36 <HAL_GPIO_EXTI_Callback+0x36>
			{
		//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
		//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
			distance_sensors_set_interrupt(&distance_sensors, 2);
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x40>)
 8000c32:	f7ff fc9b 	bl	800056c <distance_sensors_set_interrupt>

			}
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000588 	.word	0x20000588

08000c44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

	if(huart->Instance == remote_controller.uart->Instance){
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d11d      	bne.n	8000c96 <HAL_UART_RxCpltCallback+0x52>
		remote_controller.data[remote_controller.buf_counter++] = remote_controller.one_byte;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c5c:	795b      	ldrb	r3, [r3, #5]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	b2d1      	uxtb	r1, r2
 8000c62:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c64:	7151      	strb	r1, [r2, #5]
 8000c66:	4619      	mov	r1, r3
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c6a:	791a      	ldrb	r2, [r3, #4]
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c6e:	440b      	add	r3, r1
 8000c70:	719a      	strb	r2, [r3, #6]
		if(remote_controller.one_byte != '\n'){
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c74:	791b      	ldrb	r3, [r3, #4]
 8000c76:	2b0a      	cmp	r3, #10
 8000c78:	d007      	beq.n	8000c8a <HAL_UART_RxCpltCallback+0x46>
			HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <HAL_UART_RxCpltCallback+0x60>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f003 fe34 	bl	80048f0 <HAL_UART_Receive_IT>
			remote_controller.buf_counter = 0;
		}
	}


}
 8000c88:	e005      	b.n	8000c96 <HAL_UART_RxCpltCallback+0x52>
			remote_controller_set_interrupt(&remote_controller);
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c8c:	f000 f8a6 	bl	8000ddc <remote_controller_set_interrupt>
			remote_controller.buf_counter = 0;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_UART_RxCpltCallback+0x5c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	715a      	strb	r2, [r3, #5]
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000564 	.word	0x20000564
 8000ca4:	20000568 	.word	0x20000568

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <motors_init>:

TIM_HandleTypeDef *timer_left_motor;
TIM_HandleTypeDef *timer_right_motor;


void motors_init(TIM_HandleTypeDef *timer_1, TIM_HandleTypeDef *timer_2){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
	timer_left_motor = timer_1;
 8000cc2:	4a15      	ldr	r2, [pc, #84]	; (8000d18 <motors_init+0x60>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6013      	str	r3, [r2, #0]
	timer_right_motor = timer_2;
 8000cc8:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <motors_init+0x64>)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(timer_left_motor);
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <motors_init+0x60>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 ff44 	bl	8003b60 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(timer_right_motor);
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <motors_init+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 ff3f 	bl	8003b60 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(timer_left_motor, TIM_CHANNEL_1);
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <motors_init+0x60>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 fff7 	bl	8003cdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer_right_motor, TIM_CHANNEL_1);
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <motors_init+0x64>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 fff1 	bl	8003cdc <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(timer_left_motor, TIM_CHANNEL_1, 0);
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <motors_init+0x60>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2200      	movs	r2, #0
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, 0);
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <motors_init+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000b78 	.word	0x20000b78
 8000d1c:	20000b74 	.word	0x20000b74

08000d20 <motors_set_speed>:


void motors_set_speed(motors_t motor, uint8_t speed){
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	71bb      	strb	r3, [r7, #6]
	if(speed < 0){
		speed = 0;
	}else if(speed > 100){
 8000d30:	79bb      	ldrb	r3, [r7, #6]
 8000d32:	2b64      	cmp	r3, #100	; 0x64
 8000d34:	d901      	bls.n	8000d3a <motors_set_speed+0x1a>
		speed = 100;
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	71bb      	strb	r3, [r7, #6]
	}

	if(motor == LEFT_MOTOR){
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d105      	bne.n	8000d4c <motors_set_speed+0x2c>
		__HAL_TIM_SetCompare(timer_left_motor, TIM_CHANNEL_1, speed);
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <motors_set_speed+0x48>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	79ba      	ldrb	r2, [r7, #6]
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
	}else if(motor == RIGHT_MOTOR){
		__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, speed);
	}
}
 8000d4a:	e007      	b.n	8000d5c <motors_set_speed+0x3c>
	}else if(motor == RIGHT_MOTOR){
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d104      	bne.n	8000d5c <motors_set_speed+0x3c>
		__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, speed);
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <motors_set_speed+0x4c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	79ba      	ldrb	r2, [r7, #6]
 8000d5a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	20000b78 	.word	0x20000b78
 8000d6c:	20000b74 	.word	0x20000b74

08000d70 <remote_controller_init>:
#include "remote_controller.h"

void remote_controller_init(remote_controller_t *controller, UART_HandleTypeDef *uart){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
	controller->uart = uart;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	601a      	str	r2, [r3, #0]
	controller->one_byte = 0;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	711a      	strb	r2, [r3, #4]
	controller->buf_counter = 0;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	715a      	strb	r2, [r3, #5]
    memset(controller->data,0,BUF_SIZE);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3306      	adds	r3, #6
 8000d90:	220a      	movs	r2, #10
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f009 ff0a 	bl	800abae <memset>
	controller->kp = 0.0f;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
	controller->ki = 0.0f;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
	controller->kd = 0.0f;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f04f 0200 	mov.w	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
	controller->dist_from_wall = 0;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	839a      	strh	r2, [r3, #28]
	controller->free_drive = 0;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	779a      	strb	r2, [r3, #30]
	controller->robot_state = 0;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	77da      	strb	r2, [r3, #31]
	controller->pwm_l = 0;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2020 	strb.w	r2, [r3, #32]
	controller->pwm_r = 0;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <remote_controller_set_interrupt>:
void remote_controller_set_interrupt(remote_controller_t *controller){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	controller->interrupt = 1;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <remote_controller_is_data_ready>:
uint8_t remote_controller_is_data_ready(remote_controller_t *controller){
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	return controller->interrupt;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <remote_controller_celar_interrupt>:
void remote_controller_celar_interrupt(remote_controller_t *controller){
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
	controller->interrupt = 0;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <str_to_num>:

uint16_t str_to_num(uint8_t *data){
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	uint8_t str_to_num[10];
	uint8_t j = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i = 3; i != '\n'; ++i,++j ){
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	75bb      	strb	r3, [r7, #22]
 8000e3e:	e00f      	b.n	8000e60 <str_to_num+0x32>
		str_to_num[j] = data[i];
 8000e40:	7dbb      	ldrb	r3, [r7, #22]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	441a      	add	r2, r3
 8000e46:	7dfb      	ldrb	r3, [r7, #23]
 8000e48:	7812      	ldrb	r2, [r2, #0]
 8000e4a:	f107 0118 	add.w	r1, r7, #24
 8000e4e:	440b      	add	r3, r1
 8000e50:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 3; i != '\n'; ++i,++j ){
 8000e54:	7dbb      	ldrb	r3, [r7, #22]
 8000e56:	3301      	adds	r3, #1
 8000e58:	75bb      	strb	r3, [r7, #22]
 8000e5a:	7dfb      	ldrb	r3, [r7, #23]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	75fb      	strb	r3, [r7, #23]
 8000e60:	7dbb      	ldrb	r3, [r7, #22]
 8000e62:	2b0a      	cmp	r3, #10
 8000e64:	d1ec      	bne.n	8000e40 <str_to_num+0x12>
	}
	str_to_num[++j] = '\0';
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	75fb      	strb	r3, [r7, #23]
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	f107 0218 	add.w	r2, r7, #24
 8000e72:	4413      	add	r3, r2
 8000e74:	2200      	movs	r2, #0
 8000e76:	f803 2c0c 	strb.w	r2, [r3, #-12]


	return (atoi((char *)str_to_num));
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f009 fe5b 	bl	800ab3a <atoi>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b29b      	uxth	r3, r3
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <remote_controller_parser>:

void remote_controller_parser(remote_controller_t *controller){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

	if(!strncmp((char *) controller->data,"kp",2)){
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3306      	adds	r3, #6
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	4957      	ldr	r1, [pc, #348]	; (8000ffc <remote_controller_parser+0x16c>)
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f009 feb5 	bl	800ac10 <strncmp>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10d      	bne.n	8000ec8 <remote_controller_parser+0x38>
		controller->kp = str_to_num(controller->data);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3306      	adds	r3, #6
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ffbc 	bl	8000e2e <str_to_num>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	ee07 3a90 	vmov	s15, r3
 8000ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	edc3 7a04 	vstr	s15, [r3, #16]
		controller->pwm_l = str_to_num(controller->data);
	}else if(!strncmp((char *) controller->data,"pr",2)){ //pwm r
		controller->pwm_r = str_to_num(controller->data);
	}

}
 8000ec6:	e094      	b.n	8000ff2 <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"ki",2)){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3306      	adds	r3, #6
 8000ecc:	2202      	movs	r2, #2
 8000ece:	494c      	ldr	r1, [pc, #304]	; (8001000 <remote_controller_parser+0x170>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f009 fe9d 	bl	800ac10 <strncmp>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10d      	bne.n	8000ef8 <remote_controller_parser+0x68>
		controller->ki = str_to_num(controller->data);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3306      	adds	r3, #6
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ffa4 	bl	8000e2e <str_to_num>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000ef6:	e07c      	b.n	8000ff2 <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"kd",2)){
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3306      	adds	r3, #6
 8000efc:	2202      	movs	r2, #2
 8000efe:	4941      	ldr	r1, [pc, #260]	; (8001004 <remote_controller_parser+0x174>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f009 fe85 	bl	800ac10 <strncmp>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10d      	bne.n	8000f28 <remote_controller_parser+0x98>
		controller->kd = str_to_num(controller->data);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3306      	adds	r3, #6
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff8c 	bl	8000e2e <str_to_num>
 8000f16:	4603      	mov	r3, r0
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8000f26:	e064      	b.n	8000ff2 <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"dw",2)){ //dist from wall
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3306      	adds	r3, #6
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	4936      	ldr	r1, [pc, #216]	; (8001008 <remote_controller_parser+0x178>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f009 fe6d 	bl	800ac10 <strncmp>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d109      	bne.n	8000f50 <remote_controller_parser+0xc0>
		controller->dist_from_wall = str_to_num(controller->data);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3306      	adds	r3, #6
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff74 	bl	8000e2e <str_to_num>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	839a      	strh	r2, [r3, #28]
}
 8000f4e:	e050      	b.n	8000ff2 <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"fd",2)){ //free drive
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3306      	adds	r3, #6
 8000f54:	2202      	movs	r2, #2
 8000f56:	492d      	ldr	r1, [pc, #180]	; (800100c <remote_controller_parser+0x17c>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f009 fe59 	bl	800ac10 <strncmp>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d109      	bne.n	8000f78 <remote_controller_parser+0xe8>
		controller->free_drive = str_to_num(controller->data);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3306      	adds	r3, #6
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff60 	bl	8000e2e <str_to_num>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	779a      	strb	r2, [r3, #30]
}
 8000f76:	e03c      	b.n	8000ff2 <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"rs",2)){ //robot state
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3306      	adds	r3, #6
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	4924      	ldr	r1, [pc, #144]	; (8001010 <remote_controller_parser+0x180>)
 8000f80:	4618      	mov	r0, r3
 8000f82:	f009 fe45 	bl	800ac10 <strncmp>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d109      	bne.n	8000fa0 <remote_controller_parser+0x110>
		controller->robot_state = str_to_num(controller->data);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3306      	adds	r3, #6
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff4c 	bl	8000e2e <str_to_num>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	77da      	strb	r2, [r3, #31]
}
 8000f9e:	e028      	b.n	8000ff2 <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"pl",2)){ //pwm l
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3306      	adds	r3, #6
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	491b      	ldr	r1, [pc, #108]	; (8001014 <remote_controller_parser+0x184>)
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f009 fe31 	bl	800ac10 <strncmp>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10a      	bne.n	8000fca <remote_controller_parser+0x13a>
		controller->pwm_l = str_to_num(controller->data);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3306      	adds	r3, #6
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff38 	bl	8000e2e <str_to_num>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000fc8:	e013      	b.n	8000ff2 <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"pr",2)){ //pwm r
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3306      	adds	r3, #6
 8000fce:	2202      	movs	r2, #2
 8000fd0:	4911      	ldr	r1, [pc, #68]	; (8001018 <remote_controller_parser+0x188>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f009 fe1c 	bl	800ac10 <strncmp>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d109      	bne.n	8000ff2 <remote_controller_parser+0x162>
		controller->pwm_r = str_to_num(controller->data);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3306      	adds	r3, #6
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff23 	bl	8000e2e <str_to_num>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	0800b590 	.word	0x0800b590
 8001000:	0800b594 	.word	0x0800b594
 8001004:	0800b598 	.word	0x0800b598
 8001008:	0800b59c 	.word	0x0800b59c
 800100c:	0800b5a0 	.word	0x0800b5a0
 8001010:	0800b5a4 	.word	0x0800b5a4
 8001014:	0800b5a8 	.word	0x0800b5a8
 8001018:	0800b5ac 	.word	0x0800b5ac

0800101c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x44>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x44>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x44>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x44>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x44>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x44>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_I2C_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d127      	bne.n	80010d6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001090:	6153      	str	r3, [r2, #20]
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800109e:	23c0      	movs	r3, #192	; 0xc0
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a2:	2312      	movs	r3, #18
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ae:	2304      	movs	r3, #4
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <HAL_I2C_MspInit+0x84>)
 80010ba:	f000 fbf1 	bl	80018a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40005400 	.word	0x40005400
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000400 	.word	0x48000400

080010ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a13      	ldr	r2, [pc, #76]	; (8001148 <HAL_TIM_Base_MspInit+0x5c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10c      	bne.n	8001118 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_TIM_Base_MspInit+0x60>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <HAL_TIM_Base_MspInit+0x60>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <HAL_TIM_Base_MspInit+0x60>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001116:	e010      	b.n	800113a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <HAL_TIM_Base_MspInit+0x64>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d10b      	bne.n	800113a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_TIM_Base_MspInit+0x60>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <HAL_TIM_Base_MspInit+0x60>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6193      	str	r3, [r2, #24]
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_TIM_Base_MspInit+0x60>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40014400 	.word	0x40014400
 800114c:	40021000 	.word	0x40021000
 8001150:	40014800 	.word	0x40014800

08001154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <HAL_TIM_MspPostInit+0xa8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d11c      	bne.n	80011b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <HAL_TIM_MspPostInit+0xac>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_TIM_MspPostInit+0xac>)
 800117c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <HAL_TIM_MspPostInit+0xac>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 800118e:	2310      	movs	r3, #16
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800119e:	2301      	movs	r3, #1
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4816      	ldr	r0, [pc, #88]	; (8001204 <HAL_TIM_MspPostInit+0xb0>)
 80011aa:	f000 fb79 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80011ae:	e020      	b.n	80011f2 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM17)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <HAL_TIM_MspPostInit+0xb4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d11b      	bne.n	80011f2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_TIM_MspPostInit+0xac>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_TIM_MspPostInit+0xac>)
 80011c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c4:	6153      	str	r3, [r2, #20]
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_TIM_MspPostInit+0xac>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_P_Pin;
 80011d2:	2320      	movs	r3, #32
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80011e2:	230a      	movs	r3, #10
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_P_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_TIM_MspPostInit+0xb0>)
 80011ee:	f000 fb57 	bl	80018a0 <HAL_GPIO_Init>
}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40014400 	.word	0x40014400
 8001200:	40021000 	.word	0x40021000
 8001204:	48000400 	.word	0x48000400
 8001208:	40014800 	.word	0x40014800

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <HAL_UART_MspInit+0x8c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d130      	bne.n	8001290 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <HAL_UART_MspInit+0x90>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a1a      	ldr	r2, [pc, #104]	; (800129c <HAL_UART_MspInit+0x90>)
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_UART_MspInit+0x90>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_UART_MspInit+0x90>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a14      	ldr	r2, [pc, #80]	; (800129c <HAL_UART_MspInit+0x90>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_UART_MspInit+0x90>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800125e:	230c      	movs	r3, #12
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800126e:	2307      	movs	r3, #7
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127c:	f000 fb10 	bl	80018a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	2026      	movs	r0, #38	; 0x26
 8001286:	f000 fa50 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800128a:	2026      	movs	r0, #38	; 0x26
 800128c:	f000 fa69 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40004400 	.word	0x40004400
 800129c:	40021000 	.word	0x40021000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f4:	f000 f8da 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001300:	2001      	movs	r0, #1
 8001302:	f000 fc57 	bl	8001bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}

0800130a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800130e:	2002      	movs	r0, #2
 8001310:	f000 fc50 	bl	8001bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <USART2_IRQHandler+0x10>)
 800131e:	f003 fb35 	bl	800498c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000aa4 	.word	0x20000aa4

0800132c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001330:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001334:	f000 fc3e 	bl	8001bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f009 fbea 	bl	800ab44 <__errno>
 8001370:	4602      	mov	r2, r0
 8001372:	230c      	movs	r3, #12
 8001374:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20003000 	.word	0x20003000
 800139c:	00000400 	.word	0x00000400
 80013a0:	200004c0 	.word	0x200004c0
 80013a4:	20000bc8 	.word	0x20000bc8

080013a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d2:	490e      	ldr	r1, [pc, #56]	; (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e8:	4c0b      	ldr	r4, [pc, #44]	; (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013f6:	f7ff ffd7 	bl	80013a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fa:	f009 fba9 	bl	800ab50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7ff f8f7 	bl	80005f0 <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001404:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	200004a4 	.word	0x200004a4
  ldr r2, =_sidata
 8001410:	0800b73c 	.word	0x0800b73c
  ldr r2, =_sbss
 8001414:	200004a4 	.word	0x200004a4
  ldr r4, =_ebss
 8001418:	20000bc4 	.word	0x20000bc4

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x28>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f96f 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fdee 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f995 	bl	800179a <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001488:	f000 f94f 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000000c 	.word	0x2000000c
 80014a4:	20000014 	.word	0x20000014
 80014a8:	20000010 	.word	0x20000010

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000014 	.word	0x20000014
 80014d0:	20000b7c 	.word	0x20000b7c

080014d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000b7c 	.word	0x20000b7c

080014ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_Delay+0x40>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffde 	bl	80014d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000014 	.word	0x20000014

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <__NVIC_EnableIRQ+0x38>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db10      	blt.n	8001604 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4909      	ldr	r1, [pc, #36]	; (8001610 <__NVIC_DisableIRQ+0x40>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	3320      	adds	r3, #32
 80015f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001600:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f4:	f7ff ff8e 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff07 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff1c 	bl	8001578 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff8e 	bl	8001668 <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5d 	bl	8001614 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff0f 	bl	8001594 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff1f 	bl	80015d0 <__NVIC_DisableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ff94 	bl	80016d0 <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d008      	beq.n	80017d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2204      	movs	r2, #4
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e020      	b.n	8001818 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 020e 	bic.w	r2, r2, #14
 80017e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f202 	lsl.w	r2, r1, r2
 8001804:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001836:	2b02      	cmp	r3, #2
 8001838:	d005      	beq.n	8001846 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2204      	movs	r2, #4
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	e027      	b.n	8001896 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 020e 	bic.w	r2, r2, #14
 8001854:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0201 	bic.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3
    } 
  }
  return status;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	e14e      	b.n	8001b4e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2101      	movs	r1, #1
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8140 	beq.w	8001b48 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d005      	beq.n	80018e0 <HAL_GPIO_Init+0x40>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d130      	bne.n	8001942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001916:	2201      	movs	r2, #1
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	f003 0201 	and.w	r2, r3, #1
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b03      	cmp	r3, #3
 800194c:	d017      	beq.n	800197e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d123      	bne.n	80019d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	6939      	ldr	r1, [r7, #16]
 80019ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0203 	and.w	r2, r3, #3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 809a 	beq.w	8001b48 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a14:	4b55      	ldr	r3, [pc, #340]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a54      	ldr	r2, [pc, #336]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b52      	ldr	r3, [pc, #328]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a2c:	4a50      	ldr	r2, [pc, #320]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a56:	d013      	beq.n	8001a80 <HAL_GPIO_Init+0x1e0>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a46      	ldr	r2, [pc, #280]	; (8001b74 <HAL_GPIO_Init+0x2d4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <HAL_GPIO_Init+0x1dc>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <HAL_GPIO_Init+0x2d8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0x1d8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a44      	ldr	r2, [pc, #272]	; (8001b7c <HAL_GPIO_Init+0x2dc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_GPIO_Init+0x1d4>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x1e2>
 8001a74:	2305      	movs	r3, #5
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x1e2>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x1e2>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x1e2>
 8001a80:	2300      	movs	r3, #0
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a92:	4937      	ldr	r1, [pc, #220]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ac4:	4a2e      	ldr	r2, [pc, #184]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aee:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b18:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f47f aea9 	bne.w	80018b0 <HAL_GPIO_Init+0x10>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000
 8001b74:	48000400 	.word	0x48000400
 8001b78:	48000800 	.word	0x48000800
 8001b7c:	48000c00 	.word	0x48000c00
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f814 	bl	8000c00 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40010400 	.word	0x40010400

08001be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e081      	b.n	8001cfa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fa2a 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2224      	movs	r2, #36	; 0x24
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	e006      	b.n	8001c6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d104      	bne.n	8001c7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ca0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69d9      	ldr	r1, [r3, #28]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1a      	ldr	r2, [r3, #32]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	460b      	mov	r3, r1
 8001d12:	817b      	strh	r3, [r7, #10]
 8001d14:	4613      	mov	r3, r2
 8001d16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	f040 80da 	bne.w	8001eda <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_I2C_Master_Transmit+0x30>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e0d3      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d3c:	f7ff fbca 	bl	80014d4 <HAL_GetTick>
 8001d40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2319      	movs	r3, #25
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f9e6 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0be      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2221      	movs	r2, #33	; 0x21
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	893a      	ldrh	r2, [r7, #8]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2bff      	cmp	r3, #255	; 0xff
 8001d8e:	d90e      	bls.n	8001dae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	22ff      	movs	r2, #255	; 0xff
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	8979      	ldrh	r1, [r7, #10]
 8001d9e:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fb58 	bl	800245c <I2C_TransferConfig>
 8001dac:	e06c      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	8979      	ldrh	r1, [r7, #10]
 8001dc0:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 fb47 	bl	800245c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001dce:	e05b      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	6a39      	ldr	r1, [r7, #32]
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f9e3 	bl	80021a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e07b      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d034      	beq.n	8001e88 <HAL_I2C_Master_Transmit+0x184>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d130      	bne.n	8001e88 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2180      	movs	r1, #128	; 0x80
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f975 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e04d      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2bff      	cmp	r3, #255	; 0xff
 8001e48:	d90e      	bls.n	8001e68 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	22ff      	movs	r2, #255	; 0xff
 8001e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	8979      	ldrh	r1, [r7, #10]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 fafb 	bl	800245c <I2C_TransferConfig>
 8001e66:	e00f      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	8979      	ldrh	r1, [r7, #10]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 faea 	bl	800245c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d19e      	bne.n	8001dd0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	6a39      	ldr	r1, [r7, #32]
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f9c2 	bl	8002220 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e01a      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001eba:	400b      	ands	r3, r1
 8001ebc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001eda:	2302      	movs	r3, #2
  }
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	80002000 	.word	0x80002000
 8001ee8:	fe00e800 	.word	0xfe00e800

08001eec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	460b      	mov	r3, r1
 8001efa:	817b      	strh	r3, [r7, #10]
 8001efc:	4613      	mov	r3, r2
 8001efe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	f040 80db 	bne.w	80020c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_I2C_Master_Receive+0x30>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e0d4      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f24:	f7ff fad6 	bl	80014d4 <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2319      	movs	r3, #25
 8001f30:	2201      	movs	r2, #1
 8001f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f8f2 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0bf      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2222      	movs	r2, #34	; 0x22
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2210      	movs	r2, #16
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	893a      	ldrh	r2, [r7, #8]
 8001f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2bff      	cmp	r3, #255	; 0xff
 8001f76:	d90e      	bls.n	8001f96 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	22ff      	movs	r2, #255	; 0xff
 8001f7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	8979      	ldrh	r1, [r7, #10]
 8001f86:	4b52      	ldr	r3, [pc, #328]	; (80020d0 <HAL_I2C_Master_Receive+0x1e4>)
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fa64 	bl	800245c <I2C_TransferConfig>
 8001f94:	e06d      	b.n	8002072 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	8979      	ldrh	r1, [r7, #10]
 8001fa8:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <HAL_I2C_Master_Receive+0x1e4>)
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 fa53 	bl	800245c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001fb6:	e05c      	b.n	8002072 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	6a39      	ldr	r1, [r7, #32]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f96b 	bl	8002298 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e07c      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d034      	beq.n	8002072 <HAL_I2C_Master_Receive+0x186>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	d130      	bne.n	8002072 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	2200      	movs	r2, #0
 8002018:	2180      	movs	r1, #128	; 0x80
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f880 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e04d      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202e:	b29b      	uxth	r3, r3
 8002030:	2bff      	cmp	r3, #255	; 0xff
 8002032:	d90e      	bls.n	8002052 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	22ff      	movs	r2, #255	; 0xff
 8002038:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	b2da      	uxtb	r2, r3
 8002040:	8979      	ldrh	r1, [r7, #10]
 8002042:	2300      	movs	r3, #0
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fa06 	bl	800245c <I2C_TransferConfig>
 8002050:	e00f      	b.n	8002072 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	b2da      	uxtb	r2, r3
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	2300      	movs	r3, #0
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f9f5 	bl	800245c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d19d      	bne.n	8001fb8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	6a39      	ldr	r1, [r7, #32]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f8cd 	bl	8002220 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e01a      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2220      	movs	r2, #32
 8002096:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_I2C_Master_Receive+0x1e8>)
 80020a4:	400b      	ands	r3, r1
 80020a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e000      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80020c4:	2302      	movs	r3, #2
  }
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	80002400 	.word	0x80002400
 80020d4:	fe00e800 	.word	0xfe00e800

080020d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d103      	bne.n	80020f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2200      	movs	r2, #0
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d007      	beq.n	8002114 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	619a      	str	r2, [r3, #24]
  }
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002130:	e022      	b.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002138:	d01e      	beq.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213a:	f7ff f9cb 	bl	80014d4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d302      	bcc.n	8002150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d113      	bne.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	f043 0220 	orr.w	r2, r3, #32
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e00f      	b.n	8002198 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4013      	ands	r3, r2
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	429a      	cmp	r2, r3
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	429a      	cmp	r2, r3
 8002194:	d0cd      	beq.n	8002132 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021ac:	e02c      	b.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f8dc 	bl	8002370 <I2C_IsAcknowledgeFailed>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e02a      	b.n	8002218 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c8:	d01e      	beq.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ca:	f7ff f983 	bl	80014d4 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d302      	bcc.n	80021e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d113      	bne.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e007      	b.n	8002218 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d1cb      	bne.n	80021ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800222c:	e028      	b.n	8002280 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f89c 	bl	8002370 <I2C_IsAcknowledgeFailed>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e026      	b.n	8002290 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002242:	f7ff f947 	bl	80014d4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	429a      	cmp	r2, r3
 8002250:	d302      	bcc.n	8002258 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d113      	bne.n	8002280 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e007      	b.n	8002290 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b20      	cmp	r3, #32
 800228c:	d1cf      	bne.n	800222e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022a4:	e055      	b.n	8002352 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f860 	bl	8002370 <I2C_IsAcknowledgeFailed>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e053      	b.n	8002362 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d129      	bne.n	800231c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d105      	bne.n	80022e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e03f      	b.n	8002362 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2220      	movs	r2, #32
 80022e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80022f6:	400b      	ands	r3, r1
 80022f8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e022      	b.n	8002362 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231c:	f7ff f8da 	bl	80014d4 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	d302      	bcc.n	8002332 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10f      	bne.n	8002352 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e007      	b.n	8002362 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b04      	cmp	r3, #4
 800235e:	d1a2      	bne.n	80022a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	fe00e800 	.word	0xfe00e800

08002370 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b10      	cmp	r3, #16
 8002388:	d161      	bne.n	800244e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002398:	d02b      	beq.n	80023f2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023a8:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023aa:	e022      	b.n	80023f2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b2:	d01e      	beq.n	80023f2 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b4:	f7ff f88e 	bl	80014d4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d302      	bcc.n	80023ca <I2C_IsAcknowledgeFailed+0x5a>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d113      	bne.n	80023f2 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f043 0220 	orr.w	r2, r3, #32
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e02e      	b.n	8002450 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d1d5      	bne.n	80023ac <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2210      	movs	r2, #16
 8002406:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2220      	movs	r2, #32
 800240e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff fe61 	bl	80020d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <I2C_IsAcknowledgeFailed+0xe8>)
 8002422:	400b      	ands	r3, r1
 8002424:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f043 0204 	orr.w	r2, r3, #4
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	fe00e800 	.word	0xfe00e800

0800245c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	817b      	strh	r3, [r7, #10]
 800246a:	4613      	mov	r3, r2
 800246c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	0d5b      	lsrs	r3, r3, #21
 8002478:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <I2C_TransferConfig+0x58>)
 800247e:	430b      	orrs	r3, r1
 8002480:	43db      	mvns	r3, r3
 8002482:	ea02 0103 	and.w	r1, r2, r3
 8002486:	897b      	ldrh	r3, [r7, #10]
 8002488:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800248c:	7a7b      	ldrb	r3, [r7, #9]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	431a      	orrs	r2, r3
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	03ff63ff 	.word	0x03ff63ff

080024b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d138      	bne.n	8002540 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024d8:	2302      	movs	r3, #2
 80024da:	e032      	b.n	8002542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800250a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6819      	ldr	r1, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b20      	cmp	r3, #32
 8002562:	d139      	bne.n	80025d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800256e:	2302      	movs	r3, #2
 8002570:	e033      	b.n	80025da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2224      	movs	r2, #36	; 0x24
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d102      	bne.n	8002602 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f000 bef4 	b.w	80033ea <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 816a 	beq.w	80028e6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002612:	4bb3      	ldr	r3, [pc, #716]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b04      	cmp	r3, #4
 800261c:	d00c      	beq.n	8002638 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800261e:	4bb0      	ldr	r3, [pc, #704]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b08      	cmp	r3, #8
 8002628:	d159      	bne.n	80026de <HAL_RCC_OscConfig+0xf6>
 800262a:	4bad      	ldr	r3, [pc, #692]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002636:	d152      	bne.n	80026de <HAL_RCC_OscConfig+0xf6>
 8002638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800264c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d102      	bne.n	800266a <HAL_RCC_OscConfig+0x82>
 8002664:	4b9e      	ldr	r3, [pc, #632]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	e015      	b.n	8002696 <HAL_RCC_OscConfig+0xae>
 800266a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800266e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800267e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002682:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002686:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002692:	4b93      	ldr	r3, [pc, #588]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800269a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800269e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026a2:	fa92 f2a2 	rbit	r2, r2
 80026a6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80026aa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80026ae:	fab2 f282 	clz	r2, r2
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f042 0220 	orr.w	r2, r2, #32
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	f002 021f 	and.w	r2, r2, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 810c 	beq.w	80028e4 <HAL_RCC_OscConfig+0x2fc>
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 8106 	bne.w	80028e4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f000 be86 	b.w	80033ea <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x110>
 80026ea:	4b7d      	ldr	r3, [pc, #500]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a7c      	ldr	r2, [pc, #496]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e030      	b.n	800275a <HAL_RCC_OscConfig+0x172>
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x134>
 8002702:	4b77      	ldr	r3, [pc, #476]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a76      	ldr	r2, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b74      	ldr	r3, [pc, #464]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a73      	ldr	r2, [pc, #460]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e01e      	b.n	800275a <HAL_RCC_OscConfig+0x172>
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002726:	d10c      	bne.n	8002742 <HAL_RCC_OscConfig+0x15a>
 8002728:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a6c      	ldr	r2, [pc, #432]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 800272e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a69      	ldr	r2, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0x172>
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a66      	ldr	r2, [pc, #408]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a63      	ldr	r2, [pc, #396]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 8002754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002758:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800275a:	4b61      	ldr	r3, [pc, #388]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	f023 020f 	bic.w	r2, r3, #15
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	495d      	ldr	r1, [pc, #372]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d059      	beq.n	800282c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe feac 	bl	80014d4 <HAL_GetTick>
 800277c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002782:	f7fe fea7 	bl	80014d4 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d902      	bls.n	8002798 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	f000 be29 	b.w	80033ea <HAL_RCC_OscConfig+0xe02>
 8002798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80027ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d102      	bne.n	80027ca <HAL_RCC_OscConfig+0x1e2>
 80027c4:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x20e>
 80027ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027e6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027fa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027fe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002802:	fa92 f2a2 	rbit	r2, r2
 8002806:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800280a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800280e:	fab2 f282 	clz	r2, r2
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f042 0220 	orr.w	r2, r2, #32
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f002 021f 	and.w	r2, r2, #31
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f202 	lsl.w	r2, r1, r2
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ab      	beq.n	8002782 <HAL_RCC_OscConfig+0x19a>
 800282a:	e05c      	b.n	80028e6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fe52 	bl	80014d4 <HAL_GetTick>
 8002830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002836:	f7fe fe4d 	bl	80014d4 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	; 0x64
 8002844:	d902      	bls.n	800284c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	f000 bdcf 	b.w	80033ea <HAL_RCC_OscConfig+0xe02>
 800284c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002850:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002860:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d102      	bne.n	800287e <HAL_RCC_OscConfig+0x296>
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	e015      	b.n	80028aa <HAL_RCC_OscConfig+0x2c2>
 800287e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002882:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002892:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002896:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800289a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_RCC_OscConfig+0x2f8>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028ae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80028b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028b6:	fa92 f2a2 	rbit	r2, r2
 80028ba:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80028be:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80028c2:	fab2 f282 	clz	r2, r2
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f042 0220 	orr.w	r2, r2, #32
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	f002 021f 	and.w	r2, r2, #31
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f202 	lsl.w	r2, r1, r2
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ab      	bne.n	8002836 <HAL_RCC_OscConfig+0x24e>
 80028de:	e002      	b.n	80028e6 <HAL_RCC_OscConfig+0x2fe>
 80028e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 816f 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028f6:	4bd0      	ldr	r3, [pc, #832]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002902:	4bcd      	ldr	r3, [pc, #820]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b08      	cmp	r3, #8
 800290c:	d16c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x400>
 800290e:	4bca      	ldr	r3, [pc, #808]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d166      	bne.n	80029e8 <HAL_RCC_OscConfig+0x400>
 800291a:	2302      	movs	r3, #2
 800291c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800292c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d102      	bne.n	800294a <HAL_RCC_OscConfig+0x362>
 8002944:	4bbc      	ldr	r3, [pc, #752]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	e013      	b.n	8002972 <HAL_RCC_OscConfig+0x38a>
 800294a:	2302      	movs	r3, #2
 800294c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800295c:	2302      	movs	r3, #2
 800295e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002962:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800296e:	4bb2      	ldr	r3, [pc, #712]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	2202      	movs	r2, #2
 8002974:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002978:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800297c:	fa92 f2a2 	rbit	r2, r2
 8002980:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002984:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002988:	fab2 f282 	clz	r2, r2
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f042 0220 	orr.w	r2, r2, #32
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f002 021f 	and.w	r2, r2, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f202 	lsl.w	r2, r1, r2
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f000 bd1b 	b.w	80033ea <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4ba0      	ldr	r3, [pc, #640]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	21f8      	movs	r1, #248	; 0xf8
 80029c4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029cc:	fa91 f1a1 	rbit	r1, r1
 80029d0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80029d4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80029d8:	fab1 f181 	clz	r1, r1
 80029dc:	b2c9      	uxtb	r1, r1
 80029de:	408b      	lsls	r3, r1
 80029e0:	4995      	ldr	r1, [pc, #596]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	e0f5      	b.n	8002bd4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8085 	beq.w	8002afe <HAL_RCC_OscConfig+0x516>
 80029f4:	2301      	movs	r3, #1
 80029f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a06:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe fd58 	bl	80014d4 <HAL_GetTick>
 8002a24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7fe fd53 	bl	80014d4 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d902      	bls.n	8002a40 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	f000 bcd5 	b.w	80033ea <HAL_RCC_OscConfig+0xe02>
 8002a40:	2302      	movs	r3, #2
 8002a42:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d102      	bne.n	8002a70 <HAL_RCC_OscConfig+0x488>
 8002a6a:	4b73      	ldr	r3, [pc, #460]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	e013      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b0>
 8002a70:	2302      	movs	r3, #2
 8002a72:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a82:	2302      	movs	r3, #2
 8002a84:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a88:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a94:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a9e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002aa2:	fa92 f2a2 	rbit	r2, r2
 8002aa6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002aaa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002aae:	fab2 f282 	clz	r2, r2
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f042 0220 	orr.w	r2, r2, #32
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	f002 021f 	and.w	r2, r2, #31
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0af      	beq.n	8002a2a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b5b      	ldr	r3, [pc, #364]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	21f8      	movs	r1, #248	; 0xf8
 8002ada:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ae2:	fa91 f1a1 	rbit	r1, r1
 8002ae6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002aea:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002aee:	fab1 f181 	clz	r1, r1
 8002af2:	b2c9      	uxtb	r1, r1
 8002af4:	408b      	lsls	r3, r1
 8002af6:	4950      	ldr	r1, [pc, #320]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
 8002afc:	e06a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x5ec>
 8002afe:	2301      	movs	r3, #1
 8002b00:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	461a      	mov	r2, r3
 8002b26:	2300      	movs	r3, #0
 8002b28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fcd3 	bl	80014d4 <HAL_GetTick>
 8002b2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fe fcce 	bl	80014d4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d902      	bls.n	8002b4a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	f000 bc50 	b.w	80033ea <HAL_RCC_OscConfig+0xe02>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d102      	bne.n	8002b7a <HAL_RCC_OscConfig+0x592>
 8002b74:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	e013      	b.n	8002ba2 <HAL_RCC_OscConfig+0x5ba>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <HAL_RCC_OscConfig+0x650>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002ba8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002bac:	fa92 f2a2 	rbit	r2, r2
 8002bb0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002bb4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002bb8:	fab2 f282 	clz	r2, r2
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	f042 0220 	orr.w	r2, r2, #32
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	f002 021f 	and.w	r2, r2, #31
 8002bc8:	2101      	movs	r1, #1
 8002bca:	fa01 f202 	lsl.w	r2, r1, r2
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1af      	bne.n	8002b34 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 80da 	beq.w	8002d98 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d069      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_OscConfig+0x654>)
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	461a      	mov	r2, r3
 8002c14:	2301      	movs	r3, #1
 8002c16:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c18:	f7fe fc5c 	bl	80014d4 <HAL_GetTick>
 8002c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c20:	e00e      	b.n	8002c40 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c22:	f7fe fc57 	bl	80014d4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d906      	bls.n	8002c40 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e3d9      	b.n	80033ea <HAL_RCC_OscConfig+0xe02>
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	10908120 	.word	0x10908120
 8002c40:	2302      	movs	r3, #2
 8002c42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c52:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c56:	2202      	movs	r2, #2
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	fa93 f2a3 	rbit	r2, r3
 8002c64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c6e:	2202      	movs	r2, #2
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c82:	4ba5      	ldr	r3, [pc, #660]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c86:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	6019      	str	r1, [r3, #0]
 8002c8e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	fa93 f1a3 	rbit	r1, r3
 8002c98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c9c:	6019      	str	r1, [r3, #0]
  return result;
 8002c9e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0b0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x63a>
 8002cc0:	e06a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7b0>
 8002cc2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	fa93 f2a3 	rbit	r2, r3
 8002cd4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cd8:	601a      	str	r2, [r3, #0]
  return result;
 8002cda:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cde:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b8c      	ldr	r3, [pc, #560]	; (8002f1c <HAL_RCC_OscConfig+0x934>)
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fbee 	bl	80014d4 <HAL_GetTick>
 8002cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	e009      	b.n	8002d12 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fbe9 	bl	80014d4 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e36b      	b.n	80033ea <HAL_RCC_OscConfig+0xe02>
 8002d12:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d16:	2202      	movs	r2, #2
 8002d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d46:	2202      	movs	r2, #2
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f2a3 	rbit	r2, r3
 8002d54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5a:	4b6f      	ldr	r3, [pc, #444]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d5e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d62:	2102      	movs	r1, #2
 8002d64:	6019      	str	r1, [r3, #0]
 8002d66:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	fa93 f1a3 	rbit	r1, r3
 8002d70:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d74:	6019      	str	r1, [r3, #0]
  return result;
 8002d76:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1b2      	bne.n	8002cfe <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8158 	beq.w	8003058 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b5a      	ldr	r3, [pc, #360]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d112      	bne.n	8002de0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b57      	ldr	r3, [pc, #348]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	4a56      	ldr	r2, [pc, #344]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	61d3      	str	r3, [r2, #28]
 8002dc6:	4b54      	ldr	r3, [pc, #336]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002dce:	f107 0308 	add.w	r3, r7, #8
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f107 0308 	add.w	r3, r7, #8
 8002dd8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <HAL_RCC_OscConfig+0x938>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11a      	bne.n	8002e22 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dec:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_RCC_OscConfig+0x938>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a4b      	ldr	r2, [pc, #300]	; (8002f20 <HAL_RCC_OscConfig+0x938>)
 8002df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df8:	f7fe fb6c 	bl	80014d4 <HAL_GetTick>
 8002dfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	e009      	b.n	8002e16 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e02:	f7fe fb67 	bl	80014d4 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e2e9      	b.n	80033ea <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <HAL_RCC_OscConfig+0x938>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ef      	beq.n	8002e02 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x852>
 8002e2c:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4a39      	ldr	r2, [pc, #228]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6213      	str	r3, [r2, #32]
 8002e38:	e02f      	b.n	8002e9a <HAL_RCC_OscConfig+0x8b2>
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10c      	bne.n	8002e5e <HAL_RCC_OscConfig+0x876>
 8002e44:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4a33      	ldr	r2, [pc, #204]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	6213      	str	r3, [r2, #32]
 8002e50:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e56:	f023 0304 	bic.w	r3, r3, #4
 8002e5a:	6213      	str	r3, [r2, #32]
 8002e5c:	e01d      	b.n	8002e9a <HAL_RCC_OscConfig+0x8b2>
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d10c      	bne.n	8002e82 <HAL_RCC_OscConfig+0x89a>
 8002e68:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e6e:	f043 0304 	orr.w	r3, r3, #4
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	e00b      	b.n	8002e9a <HAL_RCC_OscConfig+0x8b2>
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	6213      	str	r3, [r2, #32]
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002e94:	f023 0304 	bic.w	r3, r3, #4
 8002e98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d06b      	beq.n	8002f7c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fb16 	bl	80014d4 <HAL_GetTick>
 8002ea8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	e00b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe fb11 	bl	80014d4 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e291      	b.n	80033ea <HAL_RCC_OscConfig+0xe02>
 8002ec6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002eca:	2202      	movs	r2, #2
 8002ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ef4:	601a      	str	r2, [r3, #0]
  return result;
 8002ef6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002efa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f043 0302 	orr.w	r3, r3, #2
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d109      	bne.n	8002f24 <HAL_RCC_OscConfig+0x93c>
 8002f10:	4b01      	ldr	r3, [pc, #4]	; (8002f18 <HAL_RCC_OscConfig+0x930>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	e014      	b.n	8002f40 <HAL_RCC_OscConfig+0x958>
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	10908120 	.word	0x10908120
 8002f20:	40007000 	.word	0x40007000
 8002f24:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f28:	2202      	movs	r2, #2
 8002f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	fa93 f2a3 	rbit	r2, r3
 8002f36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	4bbb      	ldr	r3, [pc, #748]	; (800322c <HAL_RCC_OscConfig+0xc44>)
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f44:	2102      	movs	r1, #2
 8002f46:	6011      	str	r1, [r2, #0]
 8002f48:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	fa92 f1a2 	rbit	r1, r2
 8002f52:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f56:	6011      	str	r1, [r2, #0]
  return result;
 8002f58:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	fab2 f282 	clz	r2, r2
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	f002 021f 	and.w	r2, r2, #31
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f202 	lsl.w	r2, r1, r2
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d099      	beq.n	8002eae <HAL_RCC_OscConfig+0x8c6>
 8002f7a:	e063      	b.n	8003044 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7c:	f7fe faaa 	bl	80014d4 <HAL_GetTick>
 8002f80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	e00b      	b.n	8002f9e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe faa5 	bl	80014d4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e225      	b.n	80033ea <HAL_RCC_OscConfig+0xe02>
 8002f9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	fa93 f2a3 	rbit	r2, r3
 8002fb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002fba:	2202      	movs	r2, #2
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	fa93 f2a3 	rbit	r2, r3
 8002fc8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fcc:	601a      	str	r2, [r3, #0]
  return result;
 8002fce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fd2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d102      	bne.n	8002fee <HAL_RCC_OscConfig+0xa06>
 8002fe8:	4b90      	ldr	r3, [pc, #576]	; (800322c <HAL_RCC_OscConfig+0xc44>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	e00d      	b.n	800300a <HAL_RCC_OscConfig+0xa22>
 8002fee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f2a3 	rbit	r2, r3
 8003000:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	4b89      	ldr	r3, [pc, #548]	; (800322c <HAL_RCC_OscConfig+0xc44>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800300e:	2102      	movs	r1, #2
 8003010:	6011      	str	r1, [r2, #0]
 8003012:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	fa92 f1a2 	rbit	r1, r2
 800301c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003020:	6011      	str	r1, [r2, #0]
  return result;
 8003022:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	fab2 f282 	clz	r2, r2
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f002 021f 	and.w	r2, r2, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1a0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003044:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304c:	4b77      	ldr	r3, [pc, #476]	; (800322c <HAL_RCC_OscConfig+0xc44>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	4a76      	ldr	r2, [pc, #472]	; (800322c <HAL_RCC_OscConfig+0xc44>)
 8003052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003056:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003058:	1d3b      	adds	r3, r7, #4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 81c2 	beq.w	80033e8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003064:	4b71      	ldr	r3, [pc, #452]	; (800322c <HAL_RCC_OscConfig+0xc44>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	f000 819c 	beq.w	80033aa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	2b02      	cmp	r3, #2
 800307a:	f040 8114 	bne.w	80032a6 <HAL_RCC_OscConfig+0xcbe>
 800307e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003082:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	fa93 f2a3 	rbit	r2, r3
 8003092:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003096:	601a      	str	r2, [r3, #0]
  return result;
 8003098:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800309c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	461a      	mov	r2, r3
 80030b0:	2300      	movs	r3, #0
 80030b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fe fa0e 	bl	80014d4 <HAL_GetTick>
 80030b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030bc:	e009      	b.n	80030d2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe fa09 	bl	80014d4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e18b      	b.n	80033ea <HAL_RCC_OscConfig+0xe02>
 80030d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fa93 f2a3 	rbit	r2, r3
 80030e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030ea:	601a      	str	r2, [r3, #0]
  return result;
 80030ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d102      	bne.n	800310c <HAL_RCC_OscConfig+0xb24>
 8003106:	4b49      	ldr	r3, [pc, #292]	; (800322c <HAL_RCC_OscConfig+0xc44>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	e01b      	b.n	8003144 <HAL_RCC_OscConfig+0xb5c>
 800310c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	fa93 f2a3 	rbit	r2, r3
 8003120:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800312a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	fa93 f2a3 	rbit	r2, r3
 800313a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	4b3a      	ldr	r3, [pc, #232]	; (800322c <HAL_RCC_OscConfig+0xc44>)
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003148:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800314c:	6011      	str	r1, [r2, #0]
 800314e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	fa92 f1a2 	rbit	r1, r2
 8003158:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800315c:	6011      	str	r1, [r2, #0]
  return result;
 800315e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	fab2 f282 	clz	r2, r2
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f042 0220 	orr.w	r2, r2, #32
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f002 021f 	and.w	r2, r2, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d19e      	bne.n	80030be <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003180:	4b2a      	ldr	r3, [pc, #168]	; (800322c <HAL_RCC_OscConfig+0xc44>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	430b      	orrs	r3, r1
 8003196:	4925      	ldr	r1, [pc, #148]	; (800322c <HAL_RCC_OscConfig+0xc44>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
 800319c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031b4:	601a      	str	r2, [r3, #0]
  return result;
 80031b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031ba:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	461a      	mov	r2, r3
 80031ce:	2301      	movs	r3, #1
 80031d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe f97f 	bl	80014d4 <HAL_GetTick>
 80031d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031da:	e009      	b.n	80031f0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe f97a 	bl	80014d4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e0fc      	b.n	80033ea <HAL_RCC_OscConfig+0xe02>
 80031f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	fa93 f2a3 	rbit	r2, r3
 8003204:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003208:	601a      	str	r2, [r3, #0]
  return result;
 800320a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800320e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <HAL_RCC_OscConfig+0xc48>
 8003224:	4b01      	ldr	r3, [pc, #4]	; (800322c <HAL_RCC_OscConfig+0xc44>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	e01e      	b.n	8003268 <HAL_RCC_OscConfig+0xc80>
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
 8003230:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f2a3 	rbit	r2, r3
 8003244:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800324e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	4b63      	ldr	r3, [pc, #396]	; (80033f4 <HAL_RCC_OscConfig+0xe0c>)
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800326c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003270:	6011      	str	r1, [r2, #0]
 8003272:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	fa92 f1a2 	rbit	r1, r2
 800327c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003280:	6011      	str	r1, [r2, #0]
  return result;
 8003282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	fab2 f282 	clz	r2, r2
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	f042 0220 	orr.w	r2, r2, #32
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	f002 021f 	and.w	r2, r2, #31
 8003298:	2101      	movs	r1, #1
 800329a:	fa01 f202 	lsl.w	r2, r1, r2
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d09b      	beq.n	80031dc <HAL_RCC_OscConfig+0xbf4>
 80032a4:	e0a0      	b.n	80033e8 <HAL_RCC_OscConfig+0xe00>
 80032a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	fa93 f2a3 	rbit	r2, r3
 80032ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032be:	601a      	str	r2, [r3, #0]
  return result;
 80032c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	461a      	mov	r2, r3
 80032d8:	2300      	movs	r3, #0
 80032da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe f8fa 	bl	80014d4 <HAL_GetTick>
 80032e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e4:	e009      	b.n	80032fa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fe f8f5 	bl	80014d4 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e077      	b.n	80033ea <HAL_RCC_OscConfig+0xe02>
 80032fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	fa93 f2a3 	rbit	r2, r3
 800330e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003312:	601a      	str	r2, [r3, #0]
  return result;
 8003314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003318:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d102      	bne.n	8003334 <HAL_RCC_OscConfig+0xd4c>
 800332e:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_RCC_OscConfig+0xe0c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	e01b      	b.n	800336c <HAL_RCC_OscConfig+0xd84>
 8003334:	f107 0320 	add.w	r3, r7, #32
 8003338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800333c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f107 0320 	add.w	r3, r7, #32
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	fa93 f2a3 	rbit	r2, r3
 8003348:	f107 031c 	add.w	r3, r7, #28
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f107 0318 	add.w	r3, r7, #24
 8003352:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f107 0318 	add.w	r3, r7, #24
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	fa93 f2a3 	rbit	r2, r3
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <HAL_RCC_OscConfig+0xe0c>)
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f107 0210 	add.w	r2, r7, #16
 8003370:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003374:	6011      	str	r1, [r2, #0]
 8003376:	f107 0210 	add.w	r2, r7, #16
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	fa92 f1a2 	rbit	r1, r2
 8003380:	f107 020c 	add.w	r2, r7, #12
 8003384:	6011      	str	r1, [r2, #0]
  return result;
 8003386:	f107 020c 	add.w	r2, r7, #12
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	fab2 f282 	clz	r2, r2
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	f042 0220 	orr.w	r2, r2, #32
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	f002 021f 	and.w	r2, r2, #31
 800339c:	2101      	movs	r1, #1
 800339e:	fa01 f202 	lsl.w	r2, r1, r2
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d19e      	bne.n	80032e6 <HAL_RCC_OscConfig+0xcfe>
 80033a8:	e01e      	b.n	80033e8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e018      	b.n	80033ea <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_RCC_OscConfig+0xe0c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033c0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d108      	bne.n	80033e4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033da:	1d3b      	adds	r3, r7, #4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000

080033f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b09e      	sub	sp, #120	; 0x78
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e162      	b.n	80036d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003410:	4b90      	ldr	r3, [pc, #576]	; (8003654 <HAL_RCC_ClockConfig+0x25c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d910      	bls.n	8003440 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b8d      	ldr	r3, [pc, #564]	; (8003654 <HAL_RCC_ClockConfig+0x25c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 0207 	bic.w	r2, r3, #7
 8003426:	498b      	ldr	r1, [pc, #556]	; (8003654 <HAL_RCC_ClockConfig+0x25c>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b89      	ldr	r3, [pc, #548]	; (8003654 <HAL_RCC_ClockConfig+0x25c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e14a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344c:	4b82      	ldr	r3, [pc, #520]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	497f      	ldr	r1, [pc, #508]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80dc 	beq.w	8003624 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d13c      	bne.n	80034ee <HAL_RCC_ClockConfig+0xf6>
 8003474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003478:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003484:	fab3 f383 	clz	r3, r3
 8003488:	b2db      	uxtb	r3, r3
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	d102      	bne.n	800349e <HAL_RCC_ClockConfig+0xa6>
 8003498:	4b6f      	ldr	r3, [pc, #444]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	e00f      	b.n	80034be <HAL_RCC_ClockConfig+0xc6>
 800349e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	667b      	str	r3, [r7, #100]	; 0x64
 80034ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034b0:	663b      	str	r3, [r7, #96]	; 0x60
 80034b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ba:	4b67      	ldr	r3, [pc, #412]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80034c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034c6:	fa92 f2a2 	rbit	r2, r2
 80034ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034ce:	fab2 f282 	clz	r2, r2
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	f042 0220 	orr.w	r2, r2, #32
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f002 021f 	and.w	r2, r2, #31
 80034de:	2101      	movs	r1, #1
 80034e0:	fa01 f202 	lsl.w	r2, r1, r2
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d17b      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0f3      	b.n	80036d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d13c      	bne.n	8003570 <HAL_RCC_ClockConfig+0x178>
 80034f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d102      	bne.n	8003520 <HAL_RCC_ClockConfig+0x128>
 800351a:	4b4f      	ldr	r3, [pc, #316]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	e00f      	b.n	8003540 <HAL_RCC_ClockConfig+0x148>
 8003520:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003524:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	647b      	str	r3, [r7, #68]	; 0x44
 800352e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003532:	643b      	str	r3, [r7, #64]	; 0x40
 8003534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800353c:	4b46      	ldr	r3, [pc, #280]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003544:	63ba      	str	r2, [r7, #56]	; 0x38
 8003546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003548:	fa92 f2a2 	rbit	r2, r2
 800354c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800354e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003550:	fab2 f282 	clz	r2, r2
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f042 0220 	orr.w	r2, r2, #32
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	f002 021f 	and.w	r2, r2, #31
 8003560:	2101      	movs	r1, #1
 8003562:	fa01 f202 	lsl.w	r2, r1, r2
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d13a      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0b2      	b.n	80036d6 <HAL_RCC_ClockConfig+0x2de>
 8003570:	2302      	movs	r3, #2
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d102      	bne.n	8003598 <HAL_RCC_ClockConfig+0x1a0>
 8003592:	4b31      	ldr	r3, [pc, #196]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	e00d      	b.n	80035b4 <HAL_RCC_ClockConfig+0x1bc>
 8003598:	2302      	movs	r3, #2
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
 80035a4:	2302      	movs	r3, #2
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	4b29      	ldr	r3, [pc, #164]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2202      	movs	r2, #2
 80035b6:	61ba      	str	r2, [r7, #24]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	fa92 f2a2 	rbit	r2, r2
 80035be:	617a      	str	r2, [r7, #20]
  return result;
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	fab2 f282 	clz	r2, r2
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f042 0220 	orr.w	r2, r2, #32
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f002 021f 	and.w	r2, r2, #31
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e079      	b.n	80036d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e2:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f023 0203 	bic.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	491a      	ldr	r1, [pc, #104]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f4:	f7fd ff6e 	bl	80014d4 <HAL_GetTick>
 80035f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035fc:	f7fd ff6a 	bl	80014d4 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e061      	b.n	80036d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 020c 	and.w	r2, r3, #12
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	429a      	cmp	r2, r3
 8003622:	d1eb      	bne.n	80035fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_RCC_ClockConfig+0x25c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d214      	bcs.n	800365c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_RCC_ClockConfig+0x25c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4906      	ldr	r1, [pc, #24]	; (8003654 <HAL_RCC_ClockConfig+0x25c>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b04      	ldr	r3, [pc, #16]	; (8003654 <HAL_RCC_ClockConfig+0x25c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e040      	b.n	80036d6 <HAL_RCC_ClockConfig+0x2de>
 8003654:	40022000 	.word	0x40022000
 8003658:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCC_ClockConfig+0x2e8>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	491a      	ldr	r1, [pc, #104]	; (80036e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003676:	4313      	orrs	r3, r2
 8003678:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4912      	ldr	r1, [pc, #72]	; (80036e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800369a:	f000 f829 	bl	80036f0 <HAL_RCC_GetSysClockFreq>
 800369e:	4601      	mov	r1, r0
 80036a0:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <HAL_RCC_ClockConfig+0x2e8>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a8:	22f0      	movs	r2, #240	; 0xf0
 80036aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	fa92 f2a2 	rbit	r2, r2
 80036b2:	60fa      	str	r2, [r7, #12]
  return result;
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	fab2 f282 	clz	r2, r2
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	40d3      	lsrs	r3, r2
 80036be:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <HAL_RCC_ClockConfig+0x2ec>)
 80036c0:	5cd3      	ldrb	r3, [r2, r3]
 80036c2:	fa21 f303 	lsr.w	r3, r1, r3
 80036c6:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <HAL_RCC_ClockConfig+0x2f0>)
 80036c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036ca:	4b08      	ldr	r3, [pc, #32]	; (80036ec <HAL_RCC_ClockConfig+0x2f4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd febc 	bl	800144c <HAL_InitTick>
  
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3778      	adds	r7, #120	; 0x78
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	0800b5bc 	.word	0x0800b5bc
 80036e8:	2000000c 	.word	0x2000000c
 80036ec:	20000010 	.word	0x20000010

080036f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b08b      	sub	sp, #44	; 0x2c
 80036f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	2300      	movs	r3, #0
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800370a:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b04      	cmp	r3, #4
 8003718:	d002      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x30>
 800371a:	2b08      	cmp	r3, #8
 800371c:	d003      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x36>
 800371e:	e03c      	b.n	800379a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003720:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003722:	623b      	str	r3, [r7, #32]
      break;
 8003724:	e03c      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800372c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003730:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	fa92 f2a2 	rbit	r2, r2
 8003738:	607a      	str	r2, [r7, #4]
  return result;
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	fab2 f282 	clz	r2, r2
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	40d3      	lsrs	r3, r2
 8003744:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800374a:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	220f      	movs	r2, #15
 8003754:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	fa92 f2a2 	rbit	r2, r2
 800375c:	60fa      	str	r2, [r7, #12]
  return result;
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	fab2 f282 	clz	r2, r2
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	40d3      	lsrs	r3, r2
 8003768:	4a14      	ldr	r2, [pc, #80]	; (80037bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003778:	4a0e      	ldr	r2, [pc, #56]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
 8003788:	e004      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	4a0c      	ldr	r2, [pc, #48]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	623b      	str	r3, [r7, #32]
      break;
 8003798:	e002      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800379c:	623b      	str	r3, [r7, #32]
      break;
 800379e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037a0:	6a3b      	ldr	r3, [r7, #32]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	372c      	adds	r7, #44	; 0x2c
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000
 80037b4:	007a1200 	.word	0x007a1200
 80037b8:	0800b5d4 	.word	0x0800b5d4
 80037bc:	0800b5e4 	.word	0x0800b5e4
 80037c0:	003d0900 	.word	0x003d0900

080037c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ca:	681b      	ldr	r3, [r3, #0]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	2000000c 	.word	0x2000000c

080037dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037e2:	f7ff ffef 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 80037e6:	4601      	mov	r1, r0
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	fa92 f2a2 	rbit	r2, r2
 80037fc:	603a      	str	r2, [r7, #0]
  return result;
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	fab2 f282 	clz	r2, r2
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	40d3      	lsrs	r3, r2
 8003808:	4a04      	ldr	r2, [pc, #16]	; (800381c <HAL_RCC_GetPCLK1Freq+0x40>)
 800380a:	5cd3      	ldrb	r3, [r2, r3]
 800380c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	0800b5cc 	.word	0x0800b5cc

08003820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003826:	f7ff ffcd 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 800382a:	4601      	mov	r1, r0
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003834:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003838:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	fa92 f2a2 	rbit	r2, r2
 8003840:	603a      	str	r2, [r7, #0]
  return result;
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	fab2 f282 	clz	r2, r2
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	40d3      	lsrs	r3, r2
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x40>)
 800384e:	5cd3      	ldrb	r3, [r2, r3]
 8003850:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000
 8003860:	0800b5cc 	.word	0x0800b5cc

08003864 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b092      	sub	sp, #72	; 0x48
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003874:	2300      	movs	r3, #0
 8003876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80cd 	beq.w	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003888:	4b86      	ldr	r3, [pc, #536]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10e      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003894:	4b83      	ldr	r3, [pc, #524]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4a82      	ldr	r2, [pc, #520]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389e:	61d3      	str	r3, [r2, #28]
 80038a0:	4b80      	ldr	r3, [pc, #512]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	4b7d      	ldr	r3, [pc, #500]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d118      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038be:	4b7a      	ldr	r3, [pc, #488]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a79      	ldr	r2, [pc, #484]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ca:	f7fd fe03 	bl	80014d4 <HAL_GetTick>
 80038ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	e008      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d2:	f7fd fdff 	bl	80014d4 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d901      	bls.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0db      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e4:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f0:	4b6c      	ldr	r3, [pc, #432]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d07d      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800390a:	429a      	cmp	r2, r3
 800390c:	d076      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800390e:	4b65      	ldr	r3, [pc, #404]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800391c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	4b5e      	ldr	r3, [pc, #376]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	461a      	mov	r2, r3
 8003938:	2301      	movs	r3, #1
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003940:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800394c:	fab3 f383 	clz	r3, r3
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	4b55      	ldr	r3, [pc, #340]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	461a      	mov	r2, r3
 800395c:	2300      	movs	r3, #0
 800395e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003960:	4a50      	ldr	r2, [pc, #320]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003964:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d045      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fd fdb0 	bl	80014d4 <HAL_GetTick>
 8003974:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	e00a      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003978:	f7fd fdac 	bl	80014d4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	; 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e086      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800398e:	2302      	movs	r3, #2
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
 800399a:	2302      	movs	r3, #2
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	61fb      	str	r3, [r7, #28]
  return result;
 80039a6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a8:	fab3 f383 	clz	r3, r3
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d102      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80039bc:	4b39      	ldr	r3, [pc, #228]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	e007      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80039c2:	2302      	movs	r3, #2
 80039c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	4b35      	ldr	r3, [pc, #212]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2202      	movs	r2, #2
 80039d4:	613a      	str	r2, [r7, #16]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	fa92 f2a2 	rbit	r2, r2
 80039dc:	60fa      	str	r2, [r7, #12]
  return result;
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f002 021f 	and.w	r2, r2, #31
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f202 	lsl.w	r2, r1, r2
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0bd      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039fc:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4926      	ldr	r1, [pc, #152]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a16:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a20:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f023 0203 	bic.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	491a      	ldr	r1, [pc, #104]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a4c:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	f023 0210 	bic.w	r2, r3, #16
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4912      	ldr	r1, [pc, #72]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a6a:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	490b      	ldr	r1, [pc, #44]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	4903      	ldr	r1, [pc, #12]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3748      	adds	r7, #72	; 0x48
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40007000 	.word	0x40007000
 8003aac:	10908100 	.word	0x10908100

08003ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e049      	b.n	8003b56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd fb08 	bl	80010ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f000 faf4 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d001      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e040      	b.n	8003bfa <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <HAL_TIM_Base_Start_IT+0xa8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00e      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x58>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba2:	d009      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x58>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_TIM_Base_Start_IT+0xac>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x58>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <HAL_TIM_Base_Start_IT+0xb0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d115      	bne.n	8003be4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_TIM_Base_Start_IT+0xb4>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d015      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x96>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d011      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be2:	e008      	b.n	8003bf6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e000      	b.n	8003bf8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	00010007 	.word	0x00010007

08003c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e049      	b.n	8003cbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f841 	bl	8003cc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 fa40 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x24>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e03c      	b.n	8003d7a <HAL_TIM_PWM_Start+0x9e>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d109      	bne.n	8003d1a <HAL_TIM_PWM_Start+0x3e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e02f      	b.n	8003d7a <HAL_TIM_PWM_Start+0x9e>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d109      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x58>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e022      	b.n	8003d7a <HAL_TIM_PWM_Start+0x9e>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	d109      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x72>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	bf14      	ite	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	2300      	moveq	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	e015      	b.n	8003d7a <HAL_TIM_PWM_Start+0x9e>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d109      	bne.n	8003d68 <HAL_TIM_PWM_Start+0x8c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e008      	b.n	8003d7a <HAL_TIM_PWM_Start+0x9e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e088      	b.n	8003e94 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_PWM_Start+0xb6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d90:	e023      	b.n	8003dda <HAL_TIM_PWM_Start+0xfe>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_PWM_Start+0xc6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da0:	e01b      	b.n	8003dda <HAL_TIM_PWM_Start+0xfe>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_PWM_Start+0xd6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db0:	e013      	b.n	8003dda <HAL_TIM_PWM_Start+0xfe>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0xe6>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dc0:	e00b      	b.n	8003dda <HAL_TIM_PWM_Start+0xfe>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d104      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0xf6>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dd0:	e003      	b.n	8003dda <HAL_TIM_PWM_Start+0xfe>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2201      	movs	r2, #1
 8003de0:	6839      	ldr	r1, [r7, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fc98 	bl	8004718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2b      	ldr	r2, [pc, #172]	; (8003e9c <HAL_TIM_PWM_Start+0x1c0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_TIM_PWM_Start+0x134>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2a      	ldr	r2, [pc, #168]	; (8003ea0 <HAL_TIM_PWM_Start+0x1c4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <HAL_TIM_PWM_Start+0x134>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a28      	ldr	r2, [pc, #160]	; (8003ea4 <HAL_TIM_PWM_Start+0x1c8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_TIM_PWM_Start+0x134>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a27      	ldr	r2, [pc, #156]	; (8003ea8 <HAL_TIM_PWM_Start+0x1cc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIM_PWM_Start+0x138>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_TIM_PWM_Start+0x13a>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_TIM_PWM_Start+0x1c0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00e      	beq.n	8003e52 <HAL_TIM_PWM_Start+0x176>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d009      	beq.n	8003e52 <HAL_TIM_PWM_Start+0x176>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1a      	ldr	r2, [pc, #104]	; (8003eac <HAL_TIM_PWM_Start+0x1d0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_TIM_PWM_Start+0x176>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <HAL_TIM_PWM_Start+0x1c4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d115      	bne.n	8003e7e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <HAL_TIM_PWM_Start+0x1d4>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b06      	cmp	r3, #6
 8003e62:	d015      	beq.n	8003e90 <HAL_TIM_PWM_Start+0x1b4>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6a:	d011      	beq.n	8003e90 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7c:	e008      	b.n	8003e90 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e000      	b.n	8003e92 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400
 8003ea8:	40014800 	.word	0x40014800
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	00010007 	.word	0x00010007

08003eb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e0ff      	b.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b14      	cmp	r3, #20
 8003ede:	f200 80f0 	bhi.w	80040c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ee2:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	080040c3 	.word	0x080040c3
 8003ef0:	080040c3 	.word	0x080040c3
 8003ef4:	080040c3 	.word	0x080040c3
 8003ef8:	08003f7d 	.word	0x08003f7d
 8003efc:	080040c3 	.word	0x080040c3
 8003f00:	080040c3 	.word	0x080040c3
 8003f04:	080040c3 	.word	0x080040c3
 8003f08:	08003fbf 	.word	0x08003fbf
 8003f0c:	080040c3 	.word	0x080040c3
 8003f10:	080040c3 	.word	0x080040c3
 8003f14:	080040c3 	.word	0x080040c3
 8003f18:	08003fff 	.word	0x08003fff
 8003f1c:	080040c3 	.word	0x080040c3
 8003f20:	080040c3 	.word	0x080040c3
 8003f24:	080040c3 	.word	0x080040c3
 8003f28:	08004041 	.word	0x08004041
 8003f2c:	080040c3 	.word	0x080040c3
 8003f30:	080040c3 	.word	0x080040c3
 8003f34:	080040c3 	.word	0x080040c3
 8003f38:	08004081 	.word	0x08004081
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f942 	bl	80041cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0208 	orr.w	r2, r2, #8
 8003f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0204 	bic.w	r2, r2, #4
 8003f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6999      	ldr	r1, [r3, #24]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	619a      	str	r2, [r3, #24]
      break;
 8003f7a:	e0a5      	b.n	80040c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f9a8 	bl	80042d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6999      	ldr	r1, [r3, #24]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	021a      	lsls	r2, r3, #8
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	619a      	str	r2, [r3, #24]
      break;
 8003fbc:	e084      	b.n	80040c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fa07 	bl	80043d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0208 	orr.w	r2, r2, #8
 8003fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0204 	bic.w	r2, r2, #4
 8003fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69d9      	ldr	r1, [r3, #28]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	61da      	str	r2, [r3, #28]
      break;
 8003ffc:	e064      	b.n	80040c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fa65 	bl	80044d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69d9      	ldr	r1, [r3, #28]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	021a      	lsls	r2, r3, #8
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	61da      	str	r2, [r3, #28]
      break;
 800403e:	e043      	b.n	80040c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 faa8 	bl	800459c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0208 	orr.w	r2, r2, #8
 800405a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0204 	bic.w	r2, r2, #4
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800407e:	e023      	b.n	80040c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fae6 	bl	8004658 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800409a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	021a      	lsls	r2, r3, #8
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040c0:	e002      	b.n	80040c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
      break;
 80040c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop

080040dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a32      	ldr	r2, [pc, #200]	; (80041b8 <TIM_Base_SetConfig+0xdc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_Base_SetConfig+0x28>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fa:	d003      	beq.n	8004104 <TIM_Base_SetConfig+0x28>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a2f      	ldr	r2, [pc, #188]	; (80041bc <TIM_Base_SetConfig+0xe0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d108      	bne.n	8004116 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a27      	ldr	r2, [pc, #156]	; (80041b8 <TIM_Base_SetConfig+0xdc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <TIM_Base_SetConfig+0x6a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004124:	d00f      	beq.n	8004146 <TIM_Base_SetConfig+0x6a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a24      	ldr	r2, [pc, #144]	; (80041bc <TIM_Base_SetConfig+0xe0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00b      	beq.n	8004146 <TIM_Base_SetConfig+0x6a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a23      	ldr	r2, [pc, #140]	; (80041c0 <TIM_Base_SetConfig+0xe4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <TIM_Base_SetConfig+0x6a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a22      	ldr	r2, [pc, #136]	; (80041c4 <TIM_Base_SetConfig+0xe8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_Base_SetConfig+0x6a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a21      	ldr	r2, [pc, #132]	; (80041c8 <TIM_Base_SetConfig+0xec>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d108      	bne.n	8004158 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a0e      	ldr	r2, [pc, #56]	; (80041b8 <TIM_Base_SetConfig+0xdc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00b      	beq.n	800419c <TIM_Base_SetConfig+0xc0>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <TIM_Base_SetConfig+0xe4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d007      	beq.n	800419c <TIM_Base_SetConfig+0xc0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a0d      	ldr	r2, [pc, #52]	; (80041c4 <TIM_Base_SetConfig+0xe8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d003      	beq.n	800419c <TIM_Base_SetConfig+0xc0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a0c      	ldr	r2, [pc, #48]	; (80041c8 <TIM_Base_SetConfig+0xec>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d103      	bne.n	80041a4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	615a      	str	r2, [r3, #20]
}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400
 80041c8:	40014800 	.word	0x40014800

080041cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f023 0201 	bic.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f023 0302 	bic.w	r3, r3, #2
 8004218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a28      	ldr	r2, [pc, #160]	; (80042c8 <TIM_OC1_SetConfig+0xfc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_OC1_SetConfig+0x78>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a27      	ldr	r2, [pc, #156]	; (80042cc <TIM_OC1_SetConfig+0x100>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_OC1_SetConfig+0x78>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <TIM_OC1_SetConfig+0x104>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_OC1_SetConfig+0x78>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <TIM_OC1_SetConfig+0x108>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d10c      	bne.n	800425e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0308 	bic.w	r3, r3, #8
 800424a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <TIM_OC1_SetConfig+0xfc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00b      	beq.n	800427e <TIM_OC1_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a18      	ldr	r2, [pc, #96]	; (80042cc <TIM_OC1_SetConfig+0x100>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d007      	beq.n	800427e <TIM_OC1_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a17      	ldr	r2, [pc, #92]	; (80042d0 <TIM_OC1_SetConfig+0x104>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d003      	beq.n	800427e <TIM_OC1_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a16      	ldr	r2, [pc, #88]	; (80042d4 <TIM_OC1_SetConfig+0x108>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d111      	bne.n	80042a2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800428c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	621a      	str	r2, [r3, #32]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40014000 	.word	0x40014000
 80042d0:	40014400 	.word	0x40014400
 80042d4:	40014800 	.word	0x40014800

080042d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f023 0210 	bic.w	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0320 	bic.w	r3, r3, #32
 8004326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a24      	ldr	r2, [pc, #144]	; (80043c8 <TIM_OC2_SetConfig+0xf0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d10d      	bne.n	8004358 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <TIM_OC2_SetConfig+0xf0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_OC2_SetConfig+0xa0>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <TIM_OC2_SetConfig+0xf4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_OC2_SetConfig+0xa0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <TIM_OC2_SetConfig+0xf8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_OC2_SetConfig+0xa0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <TIM_OC2_SetConfig+0xfc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d113      	bne.n	80043a0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800437e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004386:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40014400 	.word	0x40014400
 80043d4:	40014800 	.word	0x40014800

080043d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0303 	bic.w	r3, r3, #3
 8004412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a23      	ldr	r2, [pc, #140]	; (80044c4 <TIM_OC3_SetConfig+0xec>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10d      	bne.n	8004456 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004454:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <TIM_OC3_SetConfig+0xec>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00b      	beq.n	8004476 <TIM_OC3_SetConfig+0x9e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a19      	ldr	r2, [pc, #100]	; (80044c8 <TIM_OC3_SetConfig+0xf0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_OC3_SetConfig+0x9e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a18      	ldr	r2, [pc, #96]	; (80044cc <TIM_OC3_SetConfig+0xf4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_OC3_SetConfig+0x9e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a17      	ldr	r2, [pc, #92]	; (80044d0 <TIM_OC3_SetConfig+0xf8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d113      	bne.n	800449e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800447c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40014400 	.word	0x40014400
 80044d0:	40014800 	.word	0x40014800

080044d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a16      	ldr	r2, [pc, #88]	; (800458c <TIM_OC4_SetConfig+0xb8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00b      	beq.n	8004550 <TIM_OC4_SetConfig+0x7c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a15      	ldr	r2, [pc, #84]	; (8004590 <TIM_OC4_SetConfig+0xbc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <TIM_OC4_SetConfig+0x7c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a14      	ldr	r2, [pc, #80]	; (8004594 <TIM_OC4_SetConfig+0xc0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_OC4_SetConfig+0x7c>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a13      	ldr	r2, [pc, #76]	; (8004598 <TIM_OC4_SetConfig+0xc4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d109      	bne.n	8004564 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	019b      	lsls	r3, r3, #6
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40014000 	.word	0x40014000
 8004594:	40014400 	.word	0x40014400
 8004598:	40014800 	.word	0x40014800

0800459c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	041b      	lsls	r3, r3, #16
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a15      	ldr	r2, [pc, #84]	; (8004648 <TIM_OC5_SetConfig+0xac>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00b      	beq.n	800460e <TIM_OC5_SetConfig+0x72>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a14      	ldr	r2, [pc, #80]	; (800464c <TIM_OC5_SetConfig+0xb0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d007      	beq.n	800460e <TIM_OC5_SetConfig+0x72>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a13      	ldr	r2, [pc, #76]	; (8004650 <TIM_OC5_SetConfig+0xb4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d003      	beq.n	800460e <TIM_OC5_SetConfig+0x72>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a12      	ldr	r2, [pc, #72]	; (8004654 <TIM_OC5_SetConfig+0xb8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d109      	bne.n	8004622 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004614:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	621a      	str	r2, [r3, #32]
}
 800463c:	bf00      	nop
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	40012c00 	.word	0x40012c00
 800464c:	40014000 	.word	0x40014000
 8004650:	40014400 	.word	0x40014400
 8004654:	40014800 	.word	0x40014800

08004658 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800469e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	051b      	lsls	r3, r3, #20
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a16      	ldr	r2, [pc, #88]	; (8004708 <TIM_OC6_SetConfig+0xb0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00b      	beq.n	80046cc <TIM_OC6_SetConfig+0x74>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a15      	ldr	r2, [pc, #84]	; (800470c <TIM_OC6_SetConfig+0xb4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d007      	beq.n	80046cc <TIM_OC6_SetConfig+0x74>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a14      	ldr	r2, [pc, #80]	; (8004710 <TIM_OC6_SetConfig+0xb8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_OC6_SetConfig+0x74>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a13      	ldr	r2, [pc, #76]	; (8004714 <TIM_OC6_SetConfig+0xbc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d109      	bne.n	80046e0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	029b      	lsls	r3, r3, #10
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40014000 	.word	0x40014000
 8004710:	40014400 	.word	0x40014400
 8004714:	40014800 	.word	0x40014800

08004718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2201      	movs	r2, #1
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	43db      	mvns	r3, r3
 800473a:	401a      	ands	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	fa01 f303 	lsl.w	r3, r1, r3
 8004750:	431a      	orrs	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800477c:	2302      	movs	r3, #2
 800477e:	e060      	b.n	8004842 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a14      	ldr	r2, [pc, #80]	; (8004850 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d115      	bne.n	8004830 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	051b      	lsls	r3, r3, #20
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40012c00 	.word	0x40012c00

08004854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e040      	b.n	80048e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fcc8 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2224      	movs	r2, #36	; 0x24
 8004880:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0201 	bic.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fb7a 	bl	8004f8c <UART_SetConfig>
 8004898:	4603      	mov	r3, r0
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e022      	b.n	80048e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fca6 	bl	80051fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fd2d 	bl	8005340 <UART_CheckIdleState>
 80048e6:	4603      	mov	r3, r0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08a      	sub	sp, #40	; 0x28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004902:	2b20      	cmp	r3, #32
 8004904:	d13d      	bne.n	8004982 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_UART_Receive_IT+0x22>
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e036      	b.n	8004984 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_UART_Receive_IT+0x34>
 8004920:	2302      	movs	r3, #2
 8004922:	e02f      	b.n	8004984 <HAL_UART_Receive_IT+0x94>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d018      	beq.n	8004972 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	613b      	str	r3, [r7, #16]
   return(result);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	69f9      	ldr	r1, [r7, #28]
 8004964:	6a3a      	ldr	r2, [r7, #32]
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	61bb      	str	r3, [r7, #24]
   return(result);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e6      	bne.n	8004940 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	461a      	mov	r2, r3
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fdef 	bl	800555c <UART_Start_Receive_IT>
 800497e:	4603      	mov	r3, r0
 8004980:	e000      	b.n	8004984 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3728      	adds	r7, #40	; 0x28
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b0ba      	sub	sp, #232	; 0xe8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80049ba:	4013      	ands	r3, r2
 80049bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d115      	bne.n	80049f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00f      	beq.n	80049f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 82a4 	beq.w	8004f32 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
      }
      return;
 80049f2:	e29e      	b.n	8004f32 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8117 	beq.w	8004c2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a0e:	4b85      	ldr	r3, [pc, #532]	; (8004c24 <HAL_UART_IRQHandler+0x298>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 810a 	beq.w	8004c2c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d011      	beq.n	8004a48 <HAL_UART_IRQHandler+0xbc>
 8004a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00b      	beq.n	8004a48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2201      	movs	r2, #1
 8004a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a3e:	f043 0201 	orr.w	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d011      	beq.n	8004a78 <HAL_UART_IRQHandler+0xec>
 8004a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2202      	movs	r2, #2
 8004a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a6e:	f043 0204 	orr.w	r2, r3, #4
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d011      	beq.n	8004aa8 <HAL_UART_IRQHandler+0x11c>
 8004a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00b      	beq.n	8004aa8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2204      	movs	r2, #4
 8004a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9e:	f043 0202 	orr.w	r2, r3, #2
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d017      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ac4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00b      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ada:	f043 0208 	orr.w	r2, r3, #8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d012      	beq.n	8004b16 <HAL_UART_IRQHandler+0x18a>
 8004af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00c      	beq.n	8004b16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b0c:	f043 0220 	orr.w	r2, r3, #32
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 820a 	beq.w	8004f36 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b40      	cmp	r3, #64	; 0x40
 8004b60:	d005      	beq.n	8004b6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d04f      	beq.n	8004c0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fda0 	bl	80056b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d141      	bne.n	8004c06 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3308      	adds	r3, #8
 8004b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1d9      	bne.n	8004b82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d013      	beq.n	8004bfe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <HAL_UART_IRQHandler+0x29c>)
 8004bdc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fc fe1e 	bl	8001824 <HAL_DMA_Abort_IT>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d017      	beq.n	8004c1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	e00f      	b.n	8004c1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f9ae 	bl	8004f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	e00b      	b.n	8004c1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9aa 	bl	8004f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	e007      	b.n	8004c1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f9a6 	bl	8004f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c1c:	e18b      	b.n	8004f36 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1e:	bf00      	nop
    return;
 8004c20:	e189      	b.n	8004f36 <HAL_UART_IRQHandler+0x5aa>
 8004c22:	bf00      	nop
 8004c24:	04000120 	.word	0x04000120
 8004c28:	0800577b 	.word	0x0800577b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	f040 8143 	bne.w	8004ebc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 813c 	beq.w	8004ebc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8135 	beq.w	8004ebc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2210      	movs	r2, #16
 8004c58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	f040 80b1 	bne.w	8004dcc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 815d 	beq.w	8004f3a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	f080 8155 	bcs.w	8004f3a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	f000 8085 	beq.w	8004db0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cd4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1da      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e1      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e3      	bne.n	8004d2c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d80:	f023 0310 	bic.w	r3, r3, #16
 8004d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d92:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e4      	bne.n	8004d70 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fc fd01 	bl	80017b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f8d5 	bl	8004f74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dca:	e0b6      	b.n	8004f3a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80a8 	beq.w	8004f3e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004dee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 80a3 	beq.w	8004f3e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e4      	bne.n	8004df8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	f023 0301 	bic.w	r3, r3, #1
 8004e44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e52:	633a      	str	r2, [r7, #48]	; 0x30
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e3      	bne.n	8004e2e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f023 0310 	bic.w	r3, r3, #16
 8004e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	69b9      	ldr	r1, [r7, #24]
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e4      	bne.n	8004e78 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f85d 	bl	8004f74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004eba:	e040      	b.n	8004f3e <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x55a>
 8004ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004edc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fde7 	bl	8005ab2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ee4:	e02e      	b.n	8004f44 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00e      	beq.n	8004f10 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01d      	beq.n	8004f42 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
    }
    return;
 8004f0e:	e018      	b.n	8004f42 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d013      	beq.n	8004f44 <HAL_UART_IRQHandler+0x5b8>
 8004f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00d      	beq.n	8004f44 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fc3c 	bl	80057a6 <UART_EndTransmit_IT>
    return;
 8004f2e:	bf00      	nop
 8004f30:	e008      	b.n	8004f44 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004f32:	bf00      	nop
 8004f34:	e006      	b.n	8004f44 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004f36:	bf00      	nop
 8004f38:	e004      	b.n	8004f44 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004f3a:	bf00      	nop
 8004f3c:	e002      	b.n	8004f44 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004f3e:	bf00      	nop
 8004f40:	e000      	b.n	8004f44 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004f42:	bf00      	nop
  }

}
 8004f44:	37e8      	adds	r7, #232	; 0xe8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop

08004f4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b8b      	ldr	r3, [pc, #556]	; (80051e4 <UART_SetConfig+0x258>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a79      	ldr	r2, [pc, #484]	; (80051e8 <UART_SetConfig+0x25c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d121      	bne.n	800504c <UART_SetConfig+0xc0>
 8005008:	4b78      	ldr	r3, [pc, #480]	; (80051ec <UART_SetConfig+0x260>)
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	2b03      	cmp	r3, #3
 8005012:	d817      	bhi.n	8005044 <UART_SetConfig+0xb8>
 8005014:	a201      	add	r2, pc, #4	; (adr r2, 800501c <UART_SetConfig+0x90>)
 8005016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501a:	bf00      	nop
 800501c:	0800502d 	.word	0x0800502d
 8005020:	08005039 	.word	0x08005039
 8005024:	0800503f 	.word	0x0800503f
 8005028:	08005033 	.word	0x08005033
 800502c:	2300      	movs	r3, #0
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e01e      	b.n	8005070 <UART_SetConfig+0xe4>
 8005032:	2302      	movs	r3, #2
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e01b      	b.n	8005070 <UART_SetConfig+0xe4>
 8005038:	2304      	movs	r3, #4
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e018      	b.n	8005070 <UART_SetConfig+0xe4>
 800503e:	2308      	movs	r3, #8
 8005040:	77fb      	strb	r3, [r7, #31]
 8005042:	e015      	b.n	8005070 <UART_SetConfig+0xe4>
 8005044:	2310      	movs	r3, #16
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	bf00      	nop
 800504a:	e011      	b.n	8005070 <UART_SetConfig+0xe4>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a67      	ldr	r2, [pc, #412]	; (80051f0 <UART_SetConfig+0x264>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d102      	bne.n	800505c <UART_SetConfig+0xd0>
 8005056:	2300      	movs	r3, #0
 8005058:	77fb      	strb	r3, [r7, #31]
 800505a:	e009      	b.n	8005070 <UART_SetConfig+0xe4>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a64      	ldr	r2, [pc, #400]	; (80051f4 <UART_SetConfig+0x268>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d102      	bne.n	800506c <UART_SetConfig+0xe0>
 8005066:	2300      	movs	r3, #0
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e001      	b.n	8005070 <UART_SetConfig+0xe4>
 800506c:	2310      	movs	r3, #16
 800506e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005078:	d15c      	bne.n	8005134 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800507a:	7ffb      	ldrb	r3, [r7, #31]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d828      	bhi.n	80050d2 <UART_SetConfig+0x146>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <UART_SetConfig+0xfc>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050bd 	.word	0x080050bd
 8005094:	080050d3 	.word	0x080050d3
 8005098:	080050c3 	.word	0x080050c3
 800509c:	080050d3 	.word	0x080050d3
 80050a0:	080050d3 	.word	0x080050d3
 80050a4:	080050d3 	.word	0x080050d3
 80050a8:	080050cb 	.word	0x080050cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ac:	f7fe fb96 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 80050b0:	61b8      	str	r0, [r7, #24]
        break;
 80050b2:	e013      	b.n	80050dc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b4:	f7fe fbb4 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 80050b8:	61b8      	str	r0, [r7, #24]
        break;
 80050ba:	e00f      	b.n	80050dc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050bc:	4b4e      	ldr	r3, [pc, #312]	; (80051f8 <UART_SetConfig+0x26c>)
 80050be:	61bb      	str	r3, [r7, #24]
        break;
 80050c0:	e00c      	b.n	80050dc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c2:	f7fe fb15 	bl	80036f0 <HAL_RCC_GetSysClockFreq>
 80050c6:	61b8      	str	r0, [r7, #24]
        break;
 80050c8:	e008      	b.n	80050dc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ce:	61bb      	str	r3, [r7, #24]
        break;
 80050d0:	e004      	b.n	80050dc <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	77bb      	strb	r3, [r7, #30]
        break;
 80050da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d074      	beq.n	80051cc <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	005a      	lsls	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	441a      	add	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b0f      	cmp	r3, #15
 80050fe:	d916      	bls.n	800512e <UART_SetConfig+0x1a2>
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005106:	d212      	bcs.n	800512e <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f023 030f 	bic.w	r3, r3, #15
 8005110:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	085b      	lsrs	r3, r3, #1
 8005116:	b29b      	uxth	r3, r3
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	b29a      	uxth	r2, r3
 800511e:	89fb      	ldrh	r3, [r7, #14]
 8005120:	4313      	orrs	r3, r2
 8005122:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	89fa      	ldrh	r2, [r7, #14]
 800512a:	60da      	str	r2, [r3, #12]
 800512c:	e04e      	b.n	80051cc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	77bb      	strb	r3, [r7, #30]
 8005132:	e04b      	b.n	80051cc <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005134:	7ffb      	ldrb	r3, [r7, #31]
 8005136:	2b08      	cmp	r3, #8
 8005138:	d827      	bhi.n	800518a <UART_SetConfig+0x1fe>
 800513a:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <UART_SetConfig+0x1b4>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	08005165 	.word	0x08005165
 8005144:	0800516d 	.word	0x0800516d
 8005148:	08005175 	.word	0x08005175
 800514c:	0800518b 	.word	0x0800518b
 8005150:	0800517b 	.word	0x0800517b
 8005154:	0800518b 	.word	0x0800518b
 8005158:	0800518b 	.word	0x0800518b
 800515c:	0800518b 	.word	0x0800518b
 8005160:	08005183 	.word	0x08005183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005164:	f7fe fb3a 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 8005168:	61b8      	str	r0, [r7, #24]
        break;
 800516a:	e013      	b.n	8005194 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800516c:	f7fe fb58 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 8005170:	61b8      	str	r0, [r7, #24]
        break;
 8005172:	e00f      	b.n	8005194 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005174:	4b20      	ldr	r3, [pc, #128]	; (80051f8 <UART_SetConfig+0x26c>)
 8005176:	61bb      	str	r3, [r7, #24]
        break;
 8005178:	e00c      	b.n	8005194 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517a:	f7fe fab9 	bl	80036f0 <HAL_RCC_GetSysClockFreq>
 800517e:	61b8      	str	r0, [r7, #24]
        break;
 8005180:	e008      	b.n	8005194 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005186:	61bb      	str	r3, [r7, #24]
        break;
 8005188:	e004      	b.n	8005194 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	77bb      	strb	r3, [r7, #30]
        break;
 8005192:	bf00      	nop
    }

    if (pclk != 0U)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d018      	beq.n	80051cc <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	085a      	lsrs	r2, r3, #1
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	441a      	add	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b0f      	cmp	r3, #15
 80051b4:	d908      	bls.n	80051c8 <UART_SetConfig+0x23c>
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051bc:	d204      	bcs.n	80051c8 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	60da      	str	r2, [r3, #12]
 80051c6:	e001      	b.n	80051cc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	efff69f3 	.word	0xefff69f3
 80051e8:	40013800 	.word	0x40013800
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40004400 	.word	0x40004400
 80051f4:	40004800 	.word	0x40004800
 80051f8:	007a1200 	.word	0x007a1200

080051fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01a      	beq.n	8005312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fa:	d10a      	bne.n	8005312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	605a      	str	r2, [r3, #4]
  }
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af02      	add	r7, sp, #8
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005350:	f7fc f8c0 	bl	80014d4 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b08      	cmp	r3, #8
 8005362:	d10e      	bne.n	8005382 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f82d 	bl	80053d2 <UART_WaitOnFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e023      	b.n	80053ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b04      	cmp	r3, #4
 800538e:	d10e      	bne.n	80053ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f817 	bl	80053d2 <UART_WaitOnFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e00d      	b.n	80053ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b09c      	sub	sp, #112	; 0x70
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	4613      	mov	r3, r2
 80053e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e2:	e0a5      	b.n	8005530 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ea:	f000 80a1 	beq.w	8005530 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fc f871 	bl	80014d4 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <UART_WaitOnFlagUntilTimeout+0x32>
 80053fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005400:	2b00      	cmp	r3, #0
 8005402:	d13e      	bne.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005414:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005418:	667b      	str	r3, [r7, #100]	; 0x64
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005424:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005428:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e6      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	663b      	str	r3, [r7, #96]	; 0x60
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3308      	adds	r3, #8
 8005454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005456:	64ba      	str	r2, [r7, #72]	; 0x48
 8005458:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800545c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e5      	bne.n	8005436 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e067      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d04f      	beq.n	8005530 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549e:	d147      	bne.n	8005530 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e6      	bne.n	80054aa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3308      	adds	r3, #8
 80054e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	613b      	str	r3, [r7, #16]
   return(result);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3308      	adds	r3, #8
 80054fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054fc:	623a      	str	r2, [r7, #32]
 80054fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	69f9      	ldr	r1, [r7, #28]
 8005502:	6a3a      	ldr	r2, [r7, #32]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	61bb      	str	r3, [r7, #24]
   return(result);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e5      	bne.n	80054dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e010      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	429a      	cmp	r2, r3
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	429a      	cmp	r2, r3
 800554c:	f43f af4a 	beq.w	80053e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3770      	adds	r7, #112	; 0x70
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800555c:	b480      	push	{r7}
 800555e:	b091      	sub	sp, #68	; 0x44
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	4613      	mov	r3, r2
 8005568:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	88fa      	ldrh	r2, [r7, #6]
 8005574:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	88fa      	ldrh	r2, [r7, #6]
 800557c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558e:	d10e      	bne.n	80055ae <UART_Start_Receive_IT+0x52>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d105      	bne.n	80055a4 <UART_Start_Receive_IT+0x48>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800559e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055a2:	e02d      	b.n	8005600 <UART_Start_Receive_IT+0xa4>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	22ff      	movs	r2, #255	; 0xff
 80055a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055ac:	e028      	b.n	8005600 <UART_Start_Receive_IT+0xa4>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10d      	bne.n	80055d2 <UART_Start_Receive_IT+0x76>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <UART_Start_Receive_IT+0x6c>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	22ff      	movs	r2, #255	; 0xff
 80055c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055c6:	e01b      	b.n	8005600 <UART_Start_Receive_IT+0xa4>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	227f      	movs	r2, #127	; 0x7f
 80055cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055d0:	e016      	b.n	8005600 <UART_Start_Receive_IT+0xa4>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055da:	d10d      	bne.n	80055f8 <UART_Start_Receive_IT+0x9c>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d104      	bne.n	80055ee <UART_Start_Receive_IT+0x92>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	227f      	movs	r2, #127	; 0x7f
 80055e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055ec:	e008      	b.n	8005600 <UART_Start_Receive_IT+0xa4>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	223f      	movs	r2, #63	; 0x3f
 80055f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055f6:	e003      	b.n	8005600 <UART_Start_Receive_IT+0xa4>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2222      	movs	r2, #34	; 0x22
 800560c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3308      	adds	r3, #8
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3308      	adds	r3, #8
 800562c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800562e:	637a      	str	r2, [r7, #52]	; 0x34
 8005630:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e5      	bne.n	800560e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564a:	d107      	bne.n	800565c <UART_Start_Receive_IT+0x100>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d103      	bne.n	800565c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4a15      	ldr	r2, [pc, #84]	; (80056ac <UART_Start_Receive_IT+0x150>)
 8005658:	665a      	str	r2, [r3, #100]	; 0x64
 800565a:	e002      	b.n	8005662 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <UART_Start_Receive_IT+0x154>)
 8005660:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	613b      	str	r3, [r7, #16]
   return(result);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800567e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	623b      	str	r3, [r7, #32]
 800568a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	69f9      	ldr	r1, [r7, #28]
 800568e:	6a3a      	ldr	r2, [r7, #32]
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	61bb      	str	r3, [r7, #24]
   return(result);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e6      	bne.n	800566a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3744      	adds	r7, #68	; 0x44
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	08005957 	.word	0x08005957
 80056b0:	080057fb 	.word	0x080057fb

080056b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b095      	sub	sp, #84	; 0x54
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056da:	643b      	str	r3, [r7, #64]	; 0x40
 80056dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e6      	bne.n	80056bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3308      	adds	r3, #8
 80056f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	64bb      	str	r3, [r7, #72]	; 0x48
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800570e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005726:	2b01      	cmp	r3, #1
 8005728:	d118      	bne.n	800575c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	60bb      	str	r3, [r7, #8]
   return(result);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f023 0310 	bic.w	r3, r3, #16
 800573e:	647b      	str	r3, [r7, #68]	; 0x44
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6979      	ldr	r1, [r7, #20]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	613b      	str	r3, [r7, #16]
   return(result);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e6      	bne.n	800572a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800576e:	bf00      	nop
 8005770:	3754      	adds	r7, #84	; 0x54
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff fbe1 	bl	8004f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b088      	sub	sp, #32
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c2:	61fb      	str	r3, [r7, #28]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6979      	ldr	r1, [r7, #20]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	613b      	str	r3, [r7, #16]
   return(result);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e6      	bne.n	80057ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff fbad 	bl	8004f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057f2:	bf00      	nop
 80057f4:	3720      	adds	r7, #32
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b096      	sub	sp, #88	; 0x58
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005808:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005810:	2b22      	cmp	r3, #34	; 0x22
 8005812:	f040 8094 	bne.w	800593e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800581c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005820:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005824:	b2d9      	uxtb	r1, r3
 8005826:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800582a:	b2da      	uxtb	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	400a      	ands	r2, r1
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d177      	bne.n	800594e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800586c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005872:	653b      	str	r3, [r7, #80]	; 0x50
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800587c:	647b      	str	r3, [r7, #68]	; 0x44
 800587e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800588a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e6      	bne.n	800585e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3308      	adds	r3, #8
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	623b      	str	r3, [r7, #32]
   return(result);
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	f023 0301 	bic.w	r3, r3, #1
 80058a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3308      	adds	r3, #8
 80058ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058b0:	633a      	str	r2, [r7, #48]	; 0x30
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e5      	bne.n	8005890 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d12e      	bne.n	8005936 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0310 	bic.w	r3, r3, #16
 80058f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	461a      	mov	r2, r3
 80058fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	69b9      	ldr	r1, [r7, #24]
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	617b      	str	r3, [r7, #20]
   return(result);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e6      	bne.n	80058de <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b10      	cmp	r3, #16
 800591c:	d103      	bne.n	8005926 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2210      	movs	r2, #16
 8005924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800592c:	4619      	mov	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fb20 	bl	8004f74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005934:	e00b      	b.n	800594e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fb f984 	bl	8000c44 <HAL_UART_RxCpltCallback>
}
 800593c:	e007      	b.n	800594e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699a      	ldr	r2, [r3, #24]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0208 	orr.w	r2, r2, #8
 800594c:	619a      	str	r2, [r3, #24]
}
 800594e:	bf00      	nop
 8005950:	3758      	adds	r7, #88	; 0x58
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b096      	sub	sp, #88	; 0x58
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005964:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800596c:	2b22      	cmp	r3, #34	; 0x22
 800596e:	f040 8094 	bne.w	8005a9a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005978:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005980:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005982:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005986:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800598a:	4013      	ands	r3, r2
 800598c:	b29a      	uxth	r2, r3
 800598e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005990:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	1c9a      	adds	r2, r3, #2
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d177      	bne.n	8005aaa <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	e853 3f00 	ldrex	r3, [r3]
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d8:	643b      	str	r3, [r7, #64]	; 0x40
 80059da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e6      	bne.n	80059ba <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3308      	adds	r3, #8
 80059f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3308      	adds	r3, #8
 8005a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e5      	bne.n	80059ec <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d12e      	bne.n	8005a92 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f023 0310 	bic.w	r3, r3, #16
 8005a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6979      	ldr	r1, [r7, #20]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	613b      	str	r3, [r7, #16]
   return(result);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e6      	bne.n	8005a3a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d103      	bne.n	8005a82 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2210      	movs	r2, #16
 8005a80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fa72 	bl	8004f74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a90:	e00b      	b.n	8005aaa <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fb f8d6 	bl	8000c44 <HAL_UART_RxCpltCallback>
}
 8005a98:	e007      	b.n	8005aaa <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0208 	orr.w	r2, r2, #8
 8005aa8:	619a      	str	r2, [r3, #24]
}
 8005aaa:	bf00      	nop
 8005aac:	3758      	adds	r7, #88	; 0x58
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f001 fce5 	bl	80074a6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8005adc:	4603      	mov	r3, r0
 8005ade:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	218a      	movs	r1, #138	; 0x8a
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f004 fee8 	bl	800a8dc <VL53L0X_WrByte>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8005b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005b1c:	b5b0      	push	{r4, r5, r7, lr}
 8005b1e:	b096      	sub	sp, #88	; 0x58
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005b2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d107      	bne.n	8005b42 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005b32:	2200      	movs	r2, #0
 8005b34:	2188      	movs	r1, #136	; 0x88
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f004 fed0 	bl	800a8dc <VL53L0X_WrByte>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b50:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005b5a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a9e      	ldr	r2, [pc, #632]	; (8005ddc <VL53L0X_DataInit+0x2c0>)
 8005b62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a9d      	ldr	r2, [pc, #628]	; (8005de0 <VL53L0X_DataInit+0x2c4>)
 8005b6a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005b74:	f107 0310 	add.w	r3, r7, #16
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fac2 	bl	8006104 <VL53L0X_GetDeviceParameters>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8005b86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d112      	bne.n	8005bb4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005b92:	2300      	movs	r3, #0
 8005b94:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f103 0410 	add.w	r4, r3, #16
 8005b9c:	f107 0510 	add.w	r5, r7, #16
 8005ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2264      	movs	r2, #100	; 0x64
 8005bb8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005bc2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005bcc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005bd6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005be2:	2201      	movs	r2, #1
 8005be4:	2180      	movs	r1, #128	; 0x80
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f004 fe78 	bl	800a8dc <VL53L0X_WrByte>
 8005bec:	4603      	mov	r3, r0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	21ff      	movs	r1, #255	; 0xff
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f004 fe6c 	bl	800a8dc <VL53L0X_WrByte>
 8005c04:	4603      	mov	r3, r0
 8005c06:	461a      	mov	r2, r3
 8005c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005c12:	2200      	movs	r2, #0
 8005c14:	2100      	movs	r1, #0
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f004 fe60 	bl	800a8dc <VL53L0X_WrByte>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8005c2a:	f107 030f 	add.w	r3, r7, #15
 8005c2e:	461a      	mov	r2, r3
 8005c30:	2191      	movs	r1, #145	; 0x91
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f004 fed4 	bl	800a9e0 <VL53L0X_RdByte>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8005c46:	7bfa      	ldrb	r2, [r7, #15]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005c4e:	2201      	movs	r2, #1
 8005c50:	2100      	movs	r1, #0
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f004 fe42 	bl	800a8dc <VL53L0X_WrByte>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c66:	2200      	movs	r2, #0
 8005c68:	21ff      	movs	r1, #255	; 0xff
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f004 fe36 	bl	800a8dc <VL53L0X_WrByte>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461a      	mov	r2, r3
 8005c74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2180      	movs	r1, #128	; 0x80
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f004 fe2a 	bl	800a8dc <VL53L0X_WrByte>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005c96:	2300      	movs	r3, #0
 8005c98:	653b      	str	r3, [r7, #80]	; 0x50
 8005c9a:	e014      	b.n	8005cc6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005c9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d114      	bne.n	8005cce <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2201      	movs	r2, #1
 8005caa:	4619      	mov	r1, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fd51 	bl	8006754 <VL53L0X_SetLimitCheckEnable>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc8:	2b05      	cmp	r3, #5
 8005cca:	dde7      	ble.n	8005c9c <VL53L0X_DataInit+0x180>
 8005ccc:	e000      	b.n	8005cd0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005cce:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005cd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d107      	bne.n	8005ce8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2102      	movs	r1, #2
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fd39 	bl	8006754 <VL53L0X_SetLimitCheckEnable>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005ce8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d107      	bne.n	8005d00 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2103      	movs	r1, #3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fd2d 	bl	8006754 <VL53L0X_SetLimitCheckEnable>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005d00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d107      	bne.n	8005d18 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2104      	movs	r1, #4
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fd21 	bl	8006754 <VL53L0X_SetLimitCheckEnable>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005d18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d107      	bne.n	8005d30 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005d20:	2200      	movs	r2, #0
 8005d22:	2105      	movs	r1, #5
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fd15 	bl	8006754 <VL53L0X_SetLimitCheckEnable>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005d30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d108      	bne.n	8005d4a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005d38:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fdb8 	bl	80068b4 <VL53L0X_SetLimitCheckValue>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005d4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d108      	bne.n	8005d64 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d56:	2101      	movs	r1, #1
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fdab 	bl	80068b4 <VL53L0X_SetLimitCheckValue>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d108      	bne.n	8005d7e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005d6c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005d70:	2102      	movs	r1, #2
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fd9e 	bl	80068b4 <VL53L0X_SetLimitCheckValue>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d107      	bne.n	8005d96 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005d86:	2200      	movs	r2, #0
 8005d88:	2103      	movs	r1, #3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fd92 	bl	80068b4 <VL53L0X_SetLimitCheckValue>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10f      	bne.n	8005dbe <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	22ff      	movs	r2, #255	; 0xff
 8005da2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005da6:	22ff      	movs	r2, #255	; 0xff
 8005da8:	2101      	movs	r1, #1
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f004 fd96 	bl	800a8dc <VL53L0X_WrByte>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005dbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d103      	bne.n	8005dce <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005dce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3758      	adds	r7, #88	; 0x58
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	00016b85 	.word	0x00016b85
 8005de0:	000970a4 	.word	0x000970a4

08005de4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005de4:	b5b0      	push	{r4, r5, r7, lr}
 8005de6:	b09e      	sub	sp, #120	; 0x78
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005df2:	f107 031c 	add.w	r3, r7, #28
 8005df6:	2240      	movs	r2, #64	; 0x40
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f004 fed7 	bl	800abae <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005e20:	2101      	movs	r1, #1
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f002 fa95 	bl	8008352 <VL53L0X_get_info_from_device>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8005e34:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005e3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005e40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d80d      	bhi.n	8005e64 <VL53L0X_StaticInit+0x80>
 8005e48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d102      	bne.n	8005e56 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d806      	bhi.n	8005e64 <VL53L0X_StaticInit+0x80>
 8005e56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10e      	bne.n	8005e7c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8005e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e60:	2b0c      	cmp	r3, #12
 8005e62:	d90b      	bls.n	8005e7c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005e64:	f107 0218 	add.w	r2, r7, #24
 8005e68:	f107 0314 	add.w	r3, r7, #20
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 fd14 	bl	800789c <VL53L0X_perform_ref_spad_management>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005e7a:	e009      	b.n	8005e90 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005e7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e80:	461a      	mov	r2, r3
 8005e82:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f001 ff15 	bl	8007cb4 <VL53L0X_set_reference_spads>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005e90:	4b94      	ldr	r3, [pc, #592]	; (80060e4 <VL53L0X_StaticInit+0x300>)
 8005e92:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8005e94:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10f      	bne.n	8005ebc <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005ea2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8005ea6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eb6:	e001      	b.n	8005ebc <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005eb8:	4b8a      	ldr	r3, [pc, #552]	; (80060e4 <VL53L0X_StaticInit+0x300>)
 8005eba:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005ebc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005ec4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f003 fde8 	bl	8009a9c <VL53L0X_load_tuning_settings>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8005ed2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005eda:	2300      	movs	r3, #0
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	2304      	movs	r3, #4
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 f90d 	bl	8007104 <VL53L0X_SetGpioConfig>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ef0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d121      	bne.n	8005f3c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ef8:	2201      	movs	r2, #1
 8005efa:	21ff      	movs	r1, #255	; 0xff
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f004 fced 	bl	800a8dc <VL53L0X_WrByte>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005f08:	f107 031a 	add.w	r3, r7, #26
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	2184      	movs	r1, #132	; 0x84
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f004 fd8f 	bl	800aa34 <VL53L0X_RdWord>
 8005f16:	4603      	mov	r3, r0
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005f24:	2200      	movs	r2, #0
 8005f26:	21ff      	movs	r1, #255	; 0xff
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f004 fcd7 	bl	800a8dc <VL53L0X_WrByte>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	461a      	mov	r2, r3
 8005f32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f3c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d105      	bne.n	8005f50 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005f44:	8b7b      	ldrh	r3, [r7, #26]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	461a      	mov	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8005f50:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d108      	bne.n	8005f6a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005f58:	f107 031c 	add.w	r3, r7, #28
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8d0 	bl	8006104 <VL53L0X_GetDeviceParameters>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8005f6a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d110      	bne.n	8005f94 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005f72:	f107 0319 	add.w	r3, r7, #25
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f9ae 	bl	80062da <VL53L0X_GetFractionEnable>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8005f84:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d103      	bne.n	8005f94 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005f8c:	7e7a      	ldrb	r2, [r7, #25]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005f94:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10e      	bne.n	8005fba <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f103 0410 	add.w	r4, r3, #16
 8005fa2:	f107 051c 	add.w	r5, r7, #28
 8005fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8005fba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d111      	bne.n	8005fe6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8005fc2:	f107 0319 	add.w	r3, r7, #25
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	2101      	movs	r1, #1
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f004 fd08 	bl	800a9e0 <VL53L0X_RdByte>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8005fd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005fde:	7e7a      	ldrb	r2, [r7, #25]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8005fe6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d107      	bne.n	8005ffe <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f9e6 	bl	80063c4 <VL53L0X_SetSequenceStepEnable>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005ffe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006002:	2b00      	cmp	r3, #0
 8006004:	d107      	bne.n	8006016 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006006:	2200      	movs	r2, #0
 8006008:	2102      	movs	r1, #2
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f9da 	bl	80063c4 <VL53L0X_SetSequenceStepEnable>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006016:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800601a:	2b00      	cmp	r3, #0
 800601c:	d103      	bne.n	8006026 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2203      	movs	r2, #3
 8006022:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006026:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800602e:	f107 0313 	add.w	r3, r7, #19
 8006032:	461a      	mov	r2, r3
 8006034:	2100      	movs	r1, #0
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9ac 	bl	8006394 <VL53L0X_GetVcselPulsePeriod>
 800603c:	4603      	mov	r3, r0
 800603e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006042:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006046:	2b00      	cmp	r3, #0
 8006048:	d103      	bne.n	8006052 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800604a:	7cfa      	ldrb	r2, [r7, #19]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006052:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800605a:	f107 0313 	add.w	r3, r7, #19
 800605e:	461a      	mov	r2, r3
 8006060:	2101      	movs	r1, #1
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f996 	bl	8006394 <VL53L0X_GetVcselPulsePeriod>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800606e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006072:	2b00      	cmp	r3, #0
 8006074:	d103      	bne.n	800607e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006076:	7cfa      	ldrb	r2, [r7, #19]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800607e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006086:	f107 030c 	add.w	r3, r7, #12
 800608a:	461a      	mov	r2, r3
 800608c:	2103      	movs	r1, #3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f002 fee0 	bl	8008e54 <get_sequence_step_timeout>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800609a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d103      	bne.n	80060aa <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80060aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80060b2:	f107 030c 	add.w	r3, r7, #12
 80060b6:	461a      	mov	r2, r3
 80060b8:	2104      	movs	r1, #4
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f002 feca 	bl	8008e54 <get_sequence_step_timeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80060c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d103      	bne.n	80060d6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80060d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3770      	adds	r7, #112	; 0x70
 80060de:	46bd      	mov	sp, r7
 80060e0:	bdb0      	pop	{r4, r5, r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20000018 	.word	0x20000018

080060e8 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80060f0:	239d      	movs	r3, #157	; 0x9d
 80060f2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80060f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f8cc 	bl	80062b4 <VL53L0X_GetDeviceMode>
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d107      	bne.n	8006138 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	4619      	mov	r1, r3
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fa94 	bl	800665c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d102      	bne.n	8006146 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d107      	bne.n	800615e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	3310      	adds	r3, #16
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 faca 	bl	80066ee <VL53L0X_GetXTalkCompensationRateMegaCps>
 800615a:	4603      	mov	r3, r0
 800615c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800615e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d107      	bne.n	8006176 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	3314      	adds	r3, #20
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff fcaa 	bl	8005ac6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d134      	bne.n	80061e8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800617e:	2300      	movs	r3, #0
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	e02a      	b.n	80061da <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d12a      	bne.n	80061e2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	b299      	uxth	r1, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	3308      	adds	r3, #8
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	4413      	add	r3, r2
 800619a:	3304      	adds	r3, #4
 800619c:	461a      	mov	r2, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fbea 	bl	8006978 <VL53L0X_GetLimitCheckValue>
 80061a4:	4603      	mov	r3, r0
 80061a6:	461a      	mov	r2, r3
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80061ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d117      	bne.n	80061e6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	b299      	uxth	r1, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3318      	adds	r3, #24
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	4413      	add	r3, r2
 80061c2:	461a      	mov	r2, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fb51 	bl	800686c <VL53L0X_GetLimitCheckEnable>
 80061ca:	4603      	mov	r3, r0
 80061cc:	461a      	mov	r2, r3
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	3301      	adds	r3, #1
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b05      	cmp	r3, #5
 80061de:	ddd1      	ble.n	8006184 <VL53L0X_GetDeviceParameters+0x80>
 80061e0:	e002      	b.n	80061e8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80061e6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80061e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d107      	bne.n	8006200 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	333c      	adds	r3, #60	; 0x3c
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fc4c 	bl	8006a94 <VL53L0X_GetWrapAroundCheckEnable>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d107      	bne.n	8006218 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	3304      	adds	r3, #4
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f895 	bl	800633e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006218:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006230:	2300      	movs	r3, #0
 8006232:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	2b15      	cmp	r3, #21
 8006238:	d832      	bhi.n	80062a0 <VL53L0X_SetDeviceMode+0x7c>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <VL53L0X_SetDeviceMode+0x1c>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006299 	.word	0x08006299
 8006244:	08006299 	.word	0x08006299
 8006248:	080062a1 	.word	0x080062a1
 800624c:	08006299 	.word	0x08006299
 8006250:	080062a1 	.word	0x080062a1
 8006254:	080062a1 	.word	0x080062a1
 8006258:	080062a1 	.word	0x080062a1
 800625c:	080062a1 	.word	0x080062a1
 8006260:	080062a1 	.word	0x080062a1
 8006264:	080062a1 	.word	0x080062a1
 8006268:	080062a1 	.word	0x080062a1
 800626c:	080062a1 	.word	0x080062a1
 8006270:	080062a1 	.word	0x080062a1
 8006274:	080062a1 	.word	0x080062a1
 8006278:	080062a1 	.word	0x080062a1
 800627c:	080062a1 	.word	0x080062a1
 8006280:	080062a1 	.word	0x080062a1
 8006284:	080062a1 	.word	0x080062a1
 8006288:	080062a1 	.word	0x080062a1
 800628c:	080062a1 	.word	0x080062a1
 8006290:	08006299 	.word	0x08006299
 8006294:	08006299 	.word	0x08006299
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	78fa      	ldrb	r2, [r7, #3]
 800629c:	741a      	strb	r2, [r3, #16]
		break;
 800629e:	e001      	b.n	80062a4 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80062a0:	23f8      	movs	r3, #248	; 0xf8
 80062a2:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	7c1a      	ldrb	r2, [r3, #16]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80062ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062e4:	2300      	movs	r3, #0
 80062e6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	2109      	movs	r1, #9
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f004 fb77 	bl	800a9e0 <VL53L0X_RdByte>
 80062f2:	4603      	mov	r3, r0
 80062f4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80062f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800630c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f003 fa26 	bl	800977a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f003 faf3 	bl	800993a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006354:	4603      	mov	r3, r0
 8006356:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006358:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	70fb      	strb	r3, [r7, #3]
 8006370:	4613      	mov	r3, r2
 8006372:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006378:	78ba      	ldrb	r2, [r7, #2]
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f002 ff3b 	bl	80091fa <VL53L0X_set_vcsel_pulse_period>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006388:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	460b      	mov	r3, r1
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80063a6:	7afb      	ldrb	r3, [r7, #11]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	4619      	mov	r1, r3
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f003 f9ad 	bl	800970c <VL53L0X_get_vcsel_pulse_period>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80063b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
 80063d0:	4613      	mov	r3, r2
 80063d2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063d4:	2300      	movs	r3, #0
 80063d6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80063e0:	f107 030f 	add.w	r3, r7, #15
 80063e4:	461a      	mov	r2, r3
 80063e6:	2101      	movs	r1, #1
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f004 faf9 	bl	800a9e0 <VL53L0X_RdByte>
 80063ee:	4603      	mov	r3, r0
 80063f0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80063f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d15a      	bne.n	80064b4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80063fe:	78bb      	ldrb	r3, [r7, #2]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d12b      	bne.n	800645c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	2b04      	cmp	r3, #4
 8006408:	d825      	bhi.n	8006456 <VL53L0X_SetSequenceStepEnable+0x92>
 800640a:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006425 	.word	0x08006425
 8006414:	0800642f 	.word	0x0800642f
 8006418:	08006439 	.word	0x08006439
 800641c:	08006443 	.word	0x08006443
 8006420:	0800644d 	.word	0x0800644d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006424:	7dbb      	ldrb	r3, [r7, #22]
 8006426:	f043 0310 	orr.w	r3, r3, #16
 800642a:	75bb      	strb	r3, [r7, #22]
				break;
 800642c:	e043      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800642e:	7dbb      	ldrb	r3, [r7, #22]
 8006430:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006434:	75bb      	strb	r3, [r7, #22]
				break;
 8006436:	e03e      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006438:	7dbb      	ldrb	r3, [r7, #22]
 800643a:	f043 0304 	orr.w	r3, r3, #4
 800643e:	75bb      	strb	r3, [r7, #22]
				break;
 8006440:	e039      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006442:	7dbb      	ldrb	r3, [r7, #22]
 8006444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006448:	75bb      	strb	r3, [r7, #22]
				break;
 800644a:	e034      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800644c:	7dbb      	ldrb	r3, [r7, #22]
 800644e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006452:	75bb      	strb	r3, [r7, #22]
				break;
 8006454:	e02f      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006456:	23fc      	movs	r3, #252	; 0xfc
 8006458:	75fb      	strb	r3, [r7, #23]
 800645a:	e02c      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	2b04      	cmp	r3, #4
 8006460:	d825      	bhi.n	80064ae <VL53L0X_SetSequenceStepEnable+0xea>
 8006462:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	0800647d 	.word	0x0800647d
 800646c:	08006487 	.word	0x08006487
 8006470:	08006491 	.word	0x08006491
 8006474:	0800649b 	.word	0x0800649b
 8006478:	080064a5 	.word	0x080064a5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800647c:	7dbb      	ldrb	r3, [r7, #22]
 800647e:	f023 0310 	bic.w	r3, r3, #16
 8006482:	75bb      	strb	r3, [r7, #22]
				break;
 8006484:	e017      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006486:	7dbb      	ldrb	r3, [r7, #22]
 8006488:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800648c:	75bb      	strb	r3, [r7, #22]
				break;
 800648e:	e012      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006490:	7dbb      	ldrb	r3, [r7, #22]
 8006492:	f023 0304 	bic.w	r3, r3, #4
 8006496:	75bb      	strb	r3, [r7, #22]
				break;
 8006498:	e00d      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800649a:	7dbb      	ldrb	r3, [r7, #22]
 800649c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a0:	75bb      	strb	r3, [r7, #22]
				break;
 80064a2:	e008      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80064a4:	7dbb      	ldrb	r3, [r7, #22]
 80064a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064aa:	75bb      	strb	r3, [r7, #22]
				break;
 80064ac:	e003      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80064ae:	23fc      	movs	r3, #252	; 0xfc
 80064b0:	75fb      	strb	r3, [r7, #23]
 80064b2:	e000      	b.n	80064b6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80064b4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	7dba      	ldrb	r2, [r7, #22]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d01e      	beq.n	80064fc <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80064be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d107      	bne.n	80064d6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80064c6:	7dbb      	ldrb	r3, [r7, #22]
 80064c8:	461a      	mov	r2, r3
 80064ca:	2101      	movs	r1, #1
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f004 fa05 	bl	800a8dc <VL53L0X_WrByte>
 80064d2:	4603      	mov	r3, r0
 80064d4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80064d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d103      	bne.n	80064e6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	7dba      	ldrb	r2, [r7, #22]
 80064e2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80064e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80064f4:	6939      	ldr	r1, [r7, #16]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff ff0e 	bl	8006318 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80064fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	72fb      	strb	r3, [r7, #11]
 8006516:	4613      	mov	r3, r2
 8006518:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800651a:	2300      	movs	r3, #0
 800651c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006524:	7afb      	ldrb	r3, [r7, #11]
 8006526:	2b04      	cmp	r3, #4
 8006528:	d836      	bhi.n	8006598 <sequence_step_enabled+0x90>
 800652a:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <sequence_step_enabled+0x28>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006545 	.word	0x08006545
 8006534:	08006557 	.word	0x08006557
 8006538:	08006569 	.word	0x08006569
 800653c:	0800657b 	.word	0x0800657b
 8006540:	0800658d 	.word	0x0800658d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006544:	7abb      	ldrb	r3, [r7, #10]
 8006546:	111b      	asrs	r3, r3, #4
 8006548:	b2db      	uxtb	r3, r3
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	b2da      	uxtb	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	701a      	strb	r2, [r3, #0]
		break;
 8006554:	e022      	b.n	800659c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006556:	7abb      	ldrb	r3, [r7, #10]
 8006558:	10db      	asrs	r3, r3, #3
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	b2da      	uxtb	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	701a      	strb	r2, [r3, #0]
		break;
 8006566:	e019      	b.n	800659c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006568:	7abb      	ldrb	r3, [r7, #10]
 800656a:	109b      	asrs	r3, r3, #2
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	b2da      	uxtb	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	701a      	strb	r2, [r3, #0]
		break;
 8006578:	e010      	b.n	800659c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800657a:	7abb      	ldrb	r3, [r7, #10]
 800657c:	119b      	asrs	r3, r3, #6
 800657e:	b2db      	uxtb	r3, r3
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	b2da      	uxtb	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	701a      	strb	r2, [r3, #0]
		break;
 800658a:	e007      	b.n	800659c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800658c:	7abb      	ldrb	r3, [r7, #10]
 800658e:	09db      	lsrs	r3, r3, #7
 8006590:	b2da      	uxtb	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	701a      	strb	r2, [r3, #0]
		break;
 8006596:	e001      	b.n	800659c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006598:	23fc      	movs	r3, #252	; 0xfc
 800659a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800659c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80065be:	f107 030e 	add.w	r3, r7, #14
 80065c2:	461a      	mov	r2, r3
 80065c4:	2101      	movs	r1, #1
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f004 fa0a 	bl	800a9e0 <VL53L0X_RdByte>
 80065cc:	4603      	mov	r3, r0
 80065ce:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80065d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d107      	bne.n	80065e8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80065d8:	7bba      	ldrb	r2, [r7, #14]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2100      	movs	r1, #0
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff ff92 	bl	8006508 <sequence_step_enabled>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80065e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d108      	bne.n	8006602 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80065f0:	7bba      	ldrb	r2, [r7, #14]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	3302      	adds	r3, #2
 80065f6:	2101      	movs	r1, #1
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff ff85 	bl	8006508 <sequence_step_enabled>
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d108      	bne.n	800661c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800660a:	7bba      	ldrb	r2, [r7, #14]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	3301      	adds	r3, #1
 8006610:	2102      	movs	r1, #2
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff ff78 	bl	8006508 <sequence_step_enabled>
 8006618:	4603      	mov	r3, r0
 800661a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800661c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d108      	bne.n	8006636 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006624:	7bba      	ldrb	r2, [r7, #14]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	3303      	adds	r3, #3
 800662a:	2103      	movs	r1, #3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ff6b 	bl	8006508 <sequence_step_enabled>
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d108      	bne.n	8006650 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800663e:	7bba      	ldrb	r2, [r7, #14]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	3304      	adds	r3, #4
 8006644:	2104      	movs	r1, #4
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff ff5e 	bl	8006508 <sequence_step_enabled>
 800664c:	4603      	mov	r3, r0
 800664e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800666a:	f107 030c 	add.w	r3, r7, #12
 800666e:	461a      	mov	r2, r3
 8006670:	21f8      	movs	r1, #248	; 0xf8
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f004 f9de 	bl	800aa34 <VL53L0X_RdWord>
 8006678:	4603      	mov	r3, r0
 800667a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800667c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d108      	bne.n	8006696 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006684:	f107 0308 	add.w	r3, r7, #8
 8006688:	461a      	mov	r2, r3
 800668a:	2104      	movs	r1, #4
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f004 fa09 	bl	800aaa4 <VL53L0X_RdDWord>
 8006692:	4603      	mov	r3, r0
 8006694:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10c      	bne.n	80066b8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800669e:	89bb      	ldrh	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	89ba      	ldrh	r2, [r7, #12]
 80066a8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80066b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	7f1b      	ldrb	r3, [r3, #28]
 80066d6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	7bba      	ldrb	r2, [r7, #14]
 80066dc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80066de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b086      	sub	sp, #24
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80066fc:	f107 030e 	add.w	r3, r7, #14
 8006700:	461a      	mov	r2, r3
 8006702:	2120      	movs	r1, #32
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f004 f995 	bl	800aa34 <VL53L0X_RdWord>
 800670a:	4603      	mov	r3, r0
 800670c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800670e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d118      	bne.n	8006748 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006716:	89fb      	ldrh	r3, [r7, #14]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	771a      	strb	r2, [r3, #28]
 800672e:	e00b      	b.n	8006748 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006730:	89fb      	ldrh	r3, [r7, #14]
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006748:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	807b      	strh	r3, [r7, #2]
 8006760:	4613      	mov	r3, r2
 8006762:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006764:	2300      	movs	r3, #0
 8006766:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006774:	887b      	ldrh	r3, [r7, #2]
 8006776:	2b05      	cmp	r3, #5
 8006778:	d902      	bls.n	8006780 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800677a:	23fc      	movs	r3, #252	; 0xfc
 800677c:	75fb      	strb	r3, [r7, #23]
 800677e:	e05b      	b.n	8006838 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006780:	787b      	ldrb	r3, [r7, #1]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800678e:	2301      	movs	r3, #1
 8006790:	73bb      	strb	r3, [r7, #14]
 8006792:	e00a      	b.n	80067aa <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006794:	887b      	ldrh	r3, [r7, #2]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	330c      	adds	r3, #12
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80067a6:	2301      	movs	r3, #1
 80067a8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80067aa:	887b      	ldrh	r3, [r7, #2]
 80067ac:	2b05      	cmp	r3, #5
 80067ae:	d841      	bhi.n	8006834 <VL53L0X_SetLimitCheckEnable+0xe0>
 80067b0:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	080067d1 	.word	0x080067d1
 80067bc:	080067db 	.word	0x080067db
 80067c0:	080067f1 	.word	0x080067f1
 80067c4:	080067fb 	.word	0x080067fb
 80067c8:	08006805 	.word	0x08006805
 80067cc:	0800681d 	.word	0x0800681d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	7bfa      	ldrb	r2, [r7, #15]
 80067d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80067d8:	e02e      	b.n	8006838 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80067de:	b29b      	uxth	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	2144      	movs	r1, #68	; 0x44
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f004 f89d 	bl	800a924 <VL53L0X_WrWord>
 80067ea:	4603      	mov	r3, r0
 80067ec:	75fb      	strb	r3, [r7, #23]

			break;
 80067ee:	e023      	b.n	8006838 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	7bfa      	ldrb	r2, [r7, #15]
 80067f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80067f8:	e01e      	b.n	8006838 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	7bfa      	ldrb	r2, [r7, #15]
 80067fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006802:	e019      	b.n	8006838 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800680a:	7b7b      	ldrb	r3, [r7, #13]
 800680c:	22fe      	movs	r2, #254	; 0xfe
 800680e:	2160      	movs	r1, #96	; 0x60
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f004 f8b1 	bl	800a978 <VL53L0X_UpdateByte>
 8006816:	4603      	mov	r3, r0
 8006818:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800681a:	e00d      	b.n	8006838 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006822:	7b7b      	ldrb	r3, [r7, #13]
 8006824:	22ef      	movs	r2, #239	; 0xef
 8006826:	2160      	movs	r1, #96	; 0x60
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f004 f8a5 	bl	800a978 <VL53L0X_UpdateByte>
 800682e:	4603      	mov	r3, r0
 8006830:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006832:	e001      	b.n	8006838 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006834:	23fc      	movs	r3, #252	; 0xfc
 8006836:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006838:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10f      	bne.n	8006860 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006840:	787b      	ldrb	r3, [r7, #1]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006846:	887b      	ldrh	r3, [r7, #2]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	4413      	add	r3, r2
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006852:	e005      	b.n	8006860 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006854:	887b      	ldrh	r3, [r7, #2]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	4413      	add	r3, r2
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006860:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	460b      	mov	r3, r1
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800687a:	2300      	movs	r3, #0
 800687c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800687e:	897b      	ldrh	r3, [r7, #10]
 8006880:	2b05      	cmp	r3, #5
 8006882:	d905      	bls.n	8006890 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006884:	23fc      	movs	r3, #252	; 0xfc
 8006886:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	e008      	b.n	80068a2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006890:	897b      	ldrh	r3, [r7, #10]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800689a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	7dba      	ldrb	r2, [r7, #22]
 80068a0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	460b      	mov	r3, r1
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80068c6:	897b      	ldrh	r3, [r7, #10]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068d0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80068d2:	7dbb      	ldrb	r3, [r7, #22]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d107      	bne.n	80068e8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80068d8:	897b      	ldrh	r3, [r7, #10]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	330c      	adds	r3, #12
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	e040      	b.n	800696a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80068e8:	897b      	ldrh	r3, [r7, #10]
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d830      	bhi.n	8006950 <VL53L0X_SetLimitCheckValue+0x9c>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <VL53L0X_SetLimitCheckValue+0x40>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	0800690d 	.word	0x0800690d
 80068f8:	08006915 	.word	0x08006915
 80068fc:	0800692b 	.word	0x0800692b
 8006900:	08006933 	.word	0x08006933
 8006904:	0800693b 	.word	0x0800693b
 8006908:	0800693b 	.word	0x0800693b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006912:	e01f      	b.n	8006954 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006918:	b29b      	uxth	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	2144      	movs	r1, #68	; 0x44
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f004 f800 	bl	800a924 <VL53L0X_WrWord>
 8006924:	4603      	mov	r3, r0
 8006926:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006928:	e014      	b.n	8006954 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006930:	e010      	b.n	8006954 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006938:	e00c      	b.n	8006954 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800693e:	b29b      	uxth	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	2164      	movs	r1, #100	; 0x64
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f003 ffed 	bl	800a924 <VL53L0X_WrWord>
 800694a:	4603      	mov	r3, r0
 800694c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800694e:	e001      	b.n	8006954 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006950:	23fc      	movs	r3, #252	; 0xfc
 8006952:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d106      	bne.n	800696a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800695c:	897b      	ldrh	r3, [r7, #10]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	330c      	adds	r3, #12
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800696a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop

08006978 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	460b      	mov	r3, r1
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006986:	2300      	movs	r3, #0
 8006988:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800698e:	897b      	ldrh	r3, [r7, #10]
 8006990:	2b05      	cmp	r3, #5
 8006992:	d847      	bhi.n	8006a24 <VL53L0X_GetLimitCheckValue+0xac>
 8006994:	a201      	add	r2, pc, #4	; (adr r2, 800699c <VL53L0X_GetLimitCheckValue+0x24>)
 8006996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699a:	bf00      	nop
 800699c:	080069b5 	.word	0x080069b5
 80069a0:	080069c1 	.word	0x080069c1
 80069a4:	080069e7 	.word	0x080069e7
 80069a8:	080069f3 	.word	0x080069f3
 80069ac:	080069ff 	.word	0x080069ff
 80069b0:	080069ff 	.word	0x080069ff

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	77bb      	strb	r3, [r7, #30]
		break;
 80069be:	e033      	b.n	8006a28 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80069c0:	f107 0316 	add.w	r3, r7, #22
 80069c4:	461a      	mov	r2, r3
 80069c6:	2144      	movs	r1, #68	; 0x44
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f004 f833 	bl	800aa34 <VL53L0X_RdWord>
 80069ce:	4603      	mov	r3, r0
 80069d0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80069d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80069da:	8afb      	ldrh	r3, [r7, #22]
 80069dc:	025b      	lsls	r3, r3, #9
 80069de:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80069e0:	2301      	movs	r3, #1
 80069e2:	77bb      	strb	r3, [r7, #30]
		break;
 80069e4:	e020      	b.n	8006a28 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ea:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	77bb      	strb	r3, [r7, #30]
		break;
 80069f0:	e01a      	b.n	8006a28 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	77bb      	strb	r3, [r7, #30]
		break;
 80069fc:	e014      	b.n	8006a28 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80069fe:	f107 0316 	add.w	r3, r7, #22
 8006a02:	461a      	mov	r2, r3
 8006a04:	2164      	movs	r1, #100	; 0x64
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f004 f814 	bl	800aa34 <VL53L0X_RdWord>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006a10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006a18:	8afb      	ldrh	r3, [r7, #22]
 8006a1a:	025b      	lsls	r3, r3, #9
 8006a1c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	77bb      	strb	r3, [r7, #30]
		break;
 8006a22:	e001      	b.n	8006a28 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a24:	23fc      	movs	r3, #252	; 0xfc
 8006a26:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d12a      	bne.n	8006a86 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006a30:	7fbb      	ldrb	r3, [r7, #30]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d124      	bne.n	8006a80 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d110      	bne.n	8006a5e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006a3c:	897b      	ldrh	r3, [r7, #10]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	330c      	adds	r3, #12
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006a50:	897b      	ldrh	r3, [r7, #10]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006a5c:	e013      	b.n	8006a86 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006a64:	897b      	ldrh	r3, [r7, #10]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	330c      	adds	r3, #12
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006a72:	897b      	ldrh	r3, [r7, #10]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006a7e:	e002      	b.n	8006a86 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a86:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3720      	adds	r7, #32
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop

08006a94 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006aa2:	f107 030e 	add.w	r3, r7, #14
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f003 ff98 	bl	800a9e0 <VL53L0X_RdByte>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10e      	bne.n	8006ada <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006abc:	7bba      	ldrb	r2, [r7, #14]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006ac4:	7bbb      	ldrb	r3, [r7, #14]
 8006ac6:	b25b      	sxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	da03      	bge.n	8006ad4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	e002      	b.n	8006ada <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781a      	ldrb	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006b04:	f107 030e 	add.w	r3, r7, #14
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff fbd2 	bl	80062b4 <VL53L0X_GetDeviceMode>
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d107      	bne.n	8006b2c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f898 	bl	8006c58 <VL53L0X_StartMeasurement>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d104      	bne.n	8006b3e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fb3f 	bl	80081b8 <VL53L0X_measurement_poll_for_completion>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d103      	bne.n	8006b54 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2203      	movs	r2, #3
 8006b50:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006b70:	2301      	movs	r3, #1
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f001 fae1 	bl	800813e <VL53L0X_perform_ref_calibration>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006b80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006ba2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006ba4:	7dbb      	ldrb	r3, [r7, #22]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d005      	beq.n	8006bb6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006baa:	7dbb      	ldrb	r3, [r7, #22]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d002      	beq.n	8006bb6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006bb0:	7dbb      	ldrb	r3, [r7, #22]
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d147      	bne.n	8006c46 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006bb6:	f107 030c 	add.w	r3, r7, #12
 8006bba:	f107 0210 	add.w	r2, r7, #16
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fbc3 	bl	800734c <VL53L0X_GetInterruptThresholds>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006bd0:	d803      	bhi.n	8006bda <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8006bd2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006bd4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006bd8:	d935      	bls.n	8006c46 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d131      	bne.n	8006c46 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d006      	beq.n	8006bf6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006be8:	491a      	ldr	r1, [pc, #104]	; (8006c54 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f002 ff56 	bl	8009a9c <VL53L0X_load_tuning_settings>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75fb      	strb	r3, [r7, #23]
 8006bf4:	e027      	b.n	8006c46 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006bf6:	2204      	movs	r2, #4
 8006bf8:	21ff      	movs	r1, #255	; 0xff
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f003 fe6e 	bl	800a8dc <VL53L0X_WrByte>
 8006c00:	4603      	mov	r3, r0
 8006c02:	461a      	mov	r2, r3
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2170      	movs	r1, #112	; 0x70
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f003 fe64 	bl	800a8dc <VL53L0X_WrByte>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c1e:	2200      	movs	r2, #0
 8006c20:	21ff      	movs	r1, #255	; 0xff
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f003 fe5a 	bl	800a8dc <VL53L0X_WrByte>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006c32:	2200      	movs	r2, #0
 8006c34:	2180      	movs	r1, #128	; 0x80
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f003 fe50 	bl	800a8dc <VL53L0X_WrByte>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	461a      	mov	r2, r3
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006c46:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	2000010c 	.word	0x2000010c

08006c58 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006c64:	2301      	movs	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006c68:	f107 030e 	add.w	r3, r7, #14
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fb20 	bl	80062b4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006c74:	2201      	movs	r2, #1
 8006c76:	2180      	movs	r1, #128	; 0x80
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f003 fe2f 	bl	800a8dc <VL53L0X_WrByte>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c82:	2201      	movs	r2, #1
 8006c84:	21ff      	movs	r1, #255	; 0xff
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f003 fe28 	bl	800a8dc <VL53L0X_WrByte>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006c90:	2200      	movs	r2, #0
 8006c92:	2100      	movs	r1, #0
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f003 fe21 	bl	800a8dc <VL53L0X_WrByte>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2191      	movs	r1, #145	; 0x91
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f003 fe17 	bl	800a8dc <VL53L0X_WrByte>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f003 fe10 	bl	800a8dc <VL53L0X_WrByte>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	21ff      	movs	r1, #255	; 0xff
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f003 fe09 	bl	800a8dc <VL53L0X_WrByte>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2180      	movs	r1, #128	; 0x80
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f003 fe02 	bl	800a8dc <VL53L0X_WrByte>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d037      	beq.n	8006d52 <VL53L0X_StartMeasurement+0xfa>
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d04f      	beq.n	8006d86 <VL53L0X_StartMeasurement+0x12e>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d167      	bne.n	8006dba <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006cea:	2201      	movs	r2, #1
 8006cec:	2100      	movs	r1, #0
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f003 fdf4 	bl	800a8dc <VL53L0X_WrByte>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006cfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d15d      	bne.n	8006dc0 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d008      	beq.n	8006d20 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8006d0e:	f107 030d 	add.w	r3, r7, #13
 8006d12:	461a      	mov	r2, r3
 8006d14:	2100      	movs	r1, #0
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f003 fe62 	bl	800a9e0 <VL53L0X_RdByte>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	3301      	adds	r3, #1
 8006d24:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8006d26:	7b7a      	ldrb	r2, [r7, #13]
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006d2e:	7bfa      	ldrb	r2, [r7, #15]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d107      	bne.n	8006d44 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8006d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d103      	bne.n	8006d44 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006d42:	d3e1      	bcc.n	8006d08 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006d4a:	d339      	bcc.n	8006dc0 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006d4c:	23f9      	movs	r3, #249	; 0xf9
 8006d4e:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006d50:	e036      	b.n	8006dc0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d105      	bne.n	8006d66 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff ff15 	bl	8006b8c <VL53L0X_CheckAndLoadInterruptSettings>
 8006d62:	4603      	mov	r3, r0
 8006d64:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006d66:	2202      	movs	r2, #2
 8006d68:	2100      	movs	r1, #0
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f003 fdb6 	bl	800a8dc <VL53L0X_WrByte>
 8006d70:	4603      	mov	r3, r0
 8006d72:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d123      	bne.n	8006dc4 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2204      	movs	r2, #4
 8006d80:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006d84:	e01e      	b.n	8006dc4 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d105      	bne.n	8006d9a <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006d8e:	2101      	movs	r1, #1
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fefb 	bl	8006b8c <VL53L0X_CheckAndLoadInterruptSettings>
 8006d96:	4603      	mov	r3, r0
 8006d98:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f003 fd9c 	bl	800a8dc <VL53L0X_WrByte>
 8006da4:	4603      	mov	r3, r0
 8006da6:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006da8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10b      	bne.n	8006dc8 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2204      	movs	r2, #4
 8006db4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006db8:	e006      	b.n	8006dc8 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006dba:	23f8      	movs	r3, #248	; 0xf8
 8006dbc:	75fb      	strb	r3, [r7, #23]
 8006dbe:	e004      	b.n	8006dca <VL53L0X_StartMeasurement+0x172>
		break;
 8006dc0:	bf00      	nop
 8006dc2:	e002      	b.n	8006dca <VL53L0X_StartMeasurement+0x172>
		break;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <VL53L0X_StartMeasurement+0x172>
		break;
 8006dc8:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006dca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006dea:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d112      	bne.n	8006e18 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fb1d 	bl	8007438 <VL53L0X_GetInterruptMaskStatus>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d103      	bne.n	8006e10 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	e01c      	b.n	8006e4a <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	e018      	b.n	8006e4a <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006e18:	f107 030d 	add.w	r3, r7, #13
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	2114      	movs	r1, #20
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f003 fddd 	bl	800a9e0 <VL53L0X_RdByte>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8006e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10b      	bne.n	8006e4a <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006e32:	7b7b      	ldrb	r3, [r7, #13]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	e002      	b.n	8006e4a <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
	...

08006e58 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006e58:	b5b0      	push	{r4, r5, r7, lr}
 8006e5a:	b096      	sub	sp, #88	; 0x58
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8006e68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006e6c:	230c      	movs	r3, #12
 8006e6e:	2114      	movs	r1, #20
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f003 fd07 	bl	800a884 <VL53L0X_ReadMulti>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006e7c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f040 80d2 	bne.w	800702a <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8006e92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	021b      	lsls	r3, r3, #8
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006eae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	4413      	add	r3, r2
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	025b      	lsls	r3, r3, #9
 8006ec4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eca:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006ecc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	021b      	lsls	r3, r3, #8
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	4413      	add	r3, r2
 8006ede:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006ee2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ee6:	025b      	lsls	r3, r3, #9
 8006ee8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006eee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	4413      	add	r3, r2
 8006f00:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006f0a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006f0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8006f1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8006f26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f2c:	d047      	beq.n	8006fbe <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006f2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f30:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006f34:	fb02 f303 	mul.w	r3, r2, r3
 8006f38:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006f3c:	4a58      	ldr	r2, [pc, #352]	; (80070a0 <VL53L0X_GetRangingMeasurementData+0x248>)
 8006f3e:	fb82 1203 	smull	r1, r2, r2, r3
 8006f42:	1192      	asrs	r2, r2, #6
 8006f44:	17db      	asrs	r3, r3, #31
 8006f46:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8006f48:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7f1b      	ldrb	r3, [r3, #28]
 8006f56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8006f5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d02d      	beq.n	8006fbe <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006f62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f64:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006f68:	fb02 f303 	mul.w	r3, r2, r3
 8006f6c:	121b      	asrs	r3, r3, #8
 8006f6e:	461a      	mov	r2, r3
				if ((SignalRate
 8006f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d10d      	bne.n	8006f92 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8006f76:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d004      	beq.n	8006f88 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8006f7e:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006f82:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006f86:	e016      	b.n	8006fb6 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8006f88:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006f8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006f90:	e011      	b.n	8006fb6 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006f92:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f98:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006f9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f9e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006fa2:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8006fa6:	121b      	asrs	r3, r3, #8
 8006fa8:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8006faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fac:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006fae:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006fb2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8006fb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006fba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006fbe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00d      	beq.n	8006fe2 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8006fc6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006fca:	089b      	lsrs	r3, r3, #2
 8006fcc:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006fd2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	019b      	lsls	r3, r3, #6
 8006fda:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	75da      	strb	r2, [r3, #23]
 8006fe0:	e006      	b.n	8006ff0 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006fe8:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2200      	movs	r2, #0
 8006fee:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006ff0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006ff4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006ff8:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	4613      	mov	r3, r2
 8007004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f003 f9f0 	bl	800a3ec <VL53L0X_get_pal_range_status>
 800700c:	4603      	mov	r3, r0
 800700e:	461a      	mov	r2, r3
 8007010:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007014:	4313      	orrs	r3, r2
 8007016:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800701a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007022:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800702a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800702e:	2b00      	cmp	r3, #0
 8007030:	d12f      	bne.n	8007092 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f107 040c 	add.w	r4, r7, #12
 8007038:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800703c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800703e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007040:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007044:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800704c:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800705a:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007060:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007066:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800706c:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007072:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007078:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007082:	f107 050c 	add.w	r5, r7, #12
 8007086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800708a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800708e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007092:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007096:	4618      	mov	r0, r3
 8007098:	3750      	adds	r7, #80	; 0x50
 800709a:	46bd      	mov	sp, r7
 800709c:	bdb0      	pop	{r4, r5, r7, pc}
 800709e:	bf00      	nop
 80070a0:	10624dd3 	.word	0x10624dd3

080070a4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80070b2:	2100      	movs	r1, #0
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff f8b5 	bl	8006224 <VL53L0X_SetDeviceMode>
 80070ba:	4603      	mov	r3, r0
 80070bc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80070be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d104      	bne.n	80070d0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff fd16 	bl	8006af8 <VL53L0X_PerformSingleMeasurement>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80070d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d105      	bne.n	80070e4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff febc 	bl	8006e58 <VL53L0X_GetRangingMeasurementData>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80070e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d105      	bne.n	80070f8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80070ec:	2100      	movs	r1, #0
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f962 	bl	80073b8 <VL53L0X_ClearInterruptMask>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80070f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	4608      	mov	r0, r1
 800710e:	4611      	mov	r1, r2
 8007110:	461a      	mov	r2, r3
 8007112:	4603      	mov	r3, r0
 8007114:	70fb      	strb	r3, [r7, #3]
 8007116:	460b      	mov	r3, r1
 8007118:	70bb      	strb	r3, [r7, #2]
 800711a:	4613      	mov	r3, r2
 800711c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007128:	23f6      	movs	r3, #246	; 0xf6
 800712a:	73fb      	strb	r3, [r7, #15]
 800712c:	e107      	b.n	800733e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800712e:	78bb      	ldrb	r3, [r7, #2]
 8007130:	2b14      	cmp	r3, #20
 8007132:	d110      	bne.n	8007156 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007134:	7e3b      	ldrb	r3, [r7, #24]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d102      	bne.n	8007140 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800713a:	2310      	movs	r3, #16
 800713c:	73bb      	strb	r3, [r7, #14]
 800713e:	e001      	b.n	8007144 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007140:	2301      	movs	r3, #1
 8007142:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	461a      	mov	r2, r3
 8007148:	2184      	movs	r1, #132	; 0x84
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f003 fbc6 	bl	800a8dc <VL53L0X_WrByte>
 8007150:	4603      	mov	r3, r0
 8007152:	73fb      	strb	r3, [r7, #15]
 8007154:	e0f3      	b.n	800733e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007156:	78bb      	ldrb	r3, [r7, #2]
 8007158:	2b15      	cmp	r3, #21
 800715a:	f040 8097 	bne.w	800728c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800715e:	2201      	movs	r2, #1
 8007160:	21ff      	movs	r1, #255	; 0xff
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f003 fbba 	bl	800a8dc <VL53L0X_WrByte>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	4313      	orrs	r3, r2
 8007170:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007172:	2200      	movs	r2, #0
 8007174:	2100      	movs	r1, #0
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f003 fbb0 	bl	800a8dc <VL53L0X_WrByte>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	4313      	orrs	r3, r2
 8007184:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007186:	2200      	movs	r2, #0
 8007188:	21ff      	movs	r1, #255	; 0xff
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f003 fba6 	bl	800a8dc <VL53L0X_WrByte>
 8007190:	4603      	mov	r3, r0
 8007192:	461a      	mov	r2, r3
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	4313      	orrs	r3, r2
 8007198:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800719a:	2201      	movs	r2, #1
 800719c:	2180      	movs	r1, #128	; 0x80
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f003 fb9c 	bl	800a8dc <VL53L0X_WrByte>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80071ae:	2202      	movs	r2, #2
 80071b0:	2185      	movs	r1, #133	; 0x85
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f003 fb92 	bl	800a8dc <VL53L0X_WrByte>
 80071b8:	4603      	mov	r3, r0
 80071ba:	461a      	mov	r2, r3
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	4313      	orrs	r3, r2
 80071c0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80071c2:	2204      	movs	r2, #4
 80071c4:	21ff      	movs	r1, #255	; 0xff
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f003 fb88 	bl	800a8dc <VL53L0X_WrByte>
 80071cc:	4603      	mov	r3, r0
 80071ce:	461a      	mov	r2, r3
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80071d6:	2200      	movs	r2, #0
 80071d8:	21cd      	movs	r1, #205	; 0xcd
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f003 fb7e 	bl	800a8dc <VL53L0X_WrByte>
 80071e0:	4603      	mov	r3, r0
 80071e2:	461a      	mov	r2, r3
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80071ea:	2211      	movs	r2, #17
 80071ec:	21cc      	movs	r1, #204	; 0xcc
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f003 fb74 	bl	800a8dc <VL53L0X_WrByte>
 80071f4:	4603      	mov	r3, r0
 80071f6:	461a      	mov	r2, r3
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80071fe:	2207      	movs	r2, #7
 8007200:	21ff      	movs	r1, #255	; 0xff
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f003 fb6a 	bl	800a8dc <VL53L0X_WrByte>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	4313      	orrs	r3, r2
 8007210:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007212:	2200      	movs	r2, #0
 8007214:	21be      	movs	r1, #190	; 0xbe
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f003 fb60 	bl	800a8dc <VL53L0X_WrByte>
 800721c:	4603      	mov	r3, r0
 800721e:	461a      	mov	r2, r3
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	4313      	orrs	r3, r2
 8007224:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007226:	2206      	movs	r2, #6
 8007228:	21ff      	movs	r1, #255	; 0xff
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f003 fb56 	bl	800a8dc <VL53L0X_WrByte>
 8007230:	4603      	mov	r3, r0
 8007232:	461a      	mov	r2, r3
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	4313      	orrs	r3, r2
 8007238:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800723a:	2209      	movs	r2, #9
 800723c:	21cc      	movs	r1, #204	; 0xcc
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f003 fb4c 	bl	800a8dc <VL53L0X_WrByte>
 8007244:	4603      	mov	r3, r0
 8007246:	461a      	mov	r2, r3
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	4313      	orrs	r3, r2
 800724c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800724e:	2200      	movs	r2, #0
 8007250:	21ff      	movs	r1, #255	; 0xff
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f003 fb42 	bl	800a8dc <VL53L0X_WrByte>
 8007258:	4603      	mov	r3, r0
 800725a:	461a      	mov	r2, r3
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	4313      	orrs	r3, r2
 8007260:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007262:	2201      	movs	r2, #1
 8007264:	21ff      	movs	r1, #255	; 0xff
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f003 fb38 	bl	800a8dc <VL53L0X_WrByte>
 800726c:	4603      	mov	r3, r0
 800726e:	461a      	mov	r2, r3
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	4313      	orrs	r3, r2
 8007274:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007276:	2200      	movs	r2, #0
 8007278:	2100      	movs	r1, #0
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f003 fb2e 	bl	800a8dc <VL53L0X_WrByte>
 8007280:	4603      	mov	r3, r0
 8007282:	461a      	mov	r2, r3
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	4313      	orrs	r3, r2
 8007288:	73fb      	strb	r3, [r7, #15]
 800728a:	e058      	b.n	800733e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800728c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d121      	bne.n	80072d8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007294:	787b      	ldrb	r3, [r7, #1]
 8007296:	2b04      	cmp	r3, #4
 8007298:	d81b      	bhi.n	80072d2 <VL53L0X_SetGpioConfig+0x1ce>
 800729a:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <VL53L0X_SetGpioConfig+0x19c>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	080072b5 	.word	0x080072b5
 80072a4:	080072bb 	.word	0x080072bb
 80072a8:	080072c1 	.word	0x080072c1
 80072ac:	080072c7 	.word	0x080072c7
 80072b0:	080072cd 	.word	0x080072cd
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73bb      	strb	r3, [r7, #14]
				break;
 80072b8:	e00f      	b.n	80072da <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80072ba:	2301      	movs	r3, #1
 80072bc:	73bb      	strb	r3, [r7, #14]
				break;
 80072be:	e00c      	b.n	80072da <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80072c0:	2302      	movs	r3, #2
 80072c2:	73bb      	strb	r3, [r7, #14]
				break;
 80072c4:	e009      	b.n	80072da <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80072c6:	2303      	movs	r3, #3
 80072c8:	73bb      	strb	r3, [r7, #14]
				break;
 80072ca:	e006      	b.n	80072da <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80072cc:	2304      	movs	r3, #4
 80072ce:	73bb      	strb	r3, [r7, #14]
				break;
 80072d0:	e003      	b.n	80072da <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80072d2:	23f5      	movs	r3, #245	; 0xf5
 80072d4:	73fb      	strb	r3, [r7, #15]
 80072d6:	e000      	b.n	80072da <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80072d8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80072da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d107      	bne.n	80072f2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	461a      	mov	r2, r3
 80072e6:	210a      	movs	r1, #10
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f003 faf7 	bl	800a8dc <VL53L0X_WrByte>
 80072ee:	4603      	mov	r3, r0
 80072f0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80072f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10f      	bne.n	800731a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80072fa:	7e3b      	ldrb	r3, [r7, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	73bb      	strb	r3, [r7, #14]
 8007304:	e001      	b.n	800730a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007306:	2310      	movs	r3, #16
 8007308:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	22ef      	movs	r2, #239	; 0xef
 800730e:	2184      	movs	r1, #132	; 0x84
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f003 fb31 	bl	800a978 <VL53L0X_UpdateByte>
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800731a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	787a      	ldrb	r2, [r7, #1]
 8007326:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800732a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d105      	bne.n	800733e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007332:	2100      	movs	r1, #0
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f83f 	bl	80073b8 <VL53L0X_ClearInterruptMask>
 800733a:	4603      	mov	r3, r0
 800733c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800733e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop

0800734c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	607a      	str	r2, [r7, #4]
 8007356:	603b      	str	r3, [r7, #0]
 8007358:	460b      	mov	r3, r1
 800735a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800735c:	2300      	movs	r3, #0
 800735e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007360:	f107 0314 	add.w	r3, r7, #20
 8007364:	461a      	mov	r2, r3
 8007366:	210e      	movs	r1, #14
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f003 fb63 	bl	800aa34 <VL53L0X_RdWord>
 800736e:	4603      	mov	r3, r0
 8007370:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007372:	8abb      	ldrh	r3, [r7, #20]
 8007374:	045b      	lsls	r3, r3, #17
 8007376:	461a      	mov	r2, r3
 8007378:	4b0e      	ldr	r3, [pc, #56]	; (80073b4 <VL53L0X_GetInterruptThresholds+0x68>)
 800737a:	4013      	ands	r3, r2
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10f      	bne.n	80073a8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007388:	f107 0314 	add.w	r3, r7, #20
 800738c:	461a      	mov	r2, r3
 800738e:	210c      	movs	r1, #12
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f003 fb4f 	bl	800aa34 <VL53L0X_RdWord>
 8007396:	4603      	mov	r3, r0
 8007398:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800739a:	8abb      	ldrh	r3, [r7, #20]
 800739c:	045b      	lsls	r3, r3, #17
 800739e:	461a      	mov	r2, r3
 80073a0:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <VL53L0X_GetInterruptThresholds+0x68>)
 80073a2:	4013      	ands	r3, r2
		*pThresholdHigh =
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80073a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	1ffe0000 	.word	0x1ffe0000

080073b8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80073ca:	2201      	movs	r2, #1
 80073cc:	210b      	movs	r1, #11
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f003 fa84 	bl	800a8dc <VL53L0X_WrByte>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80073d8:	2200      	movs	r2, #0
 80073da:	210b      	movs	r1, #11
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f003 fa7d 	bl	800a8dc <VL53L0X_WrByte>
 80073e2:	4603      	mov	r3, r0
 80073e4:	461a      	mov	r2, r3
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80073ec:	f107 030d 	add.w	r3, r7, #13
 80073f0:	461a      	mov	r2, r3
 80073f2:	2113      	movs	r1, #19
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f003 faf3 	bl	800a9e0 <VL53L0X_RdByte>
 80073fa:	4603      	mov	r3, r0
 80073fc:	461a      	mov	r2, r3
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	4313      	orrs	r3, r2
 8007402:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	3301      	adds	r3, #1
 8007408:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800740a:	7b7b      	ldrb	r3, [r7, #13]
 800740c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007410:	2b00      	cmp	r3, #0
 8007412:	d006      	beq.n	8007422 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d803      	bhi.n	8007422 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800741a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0d3      	beq.n	80073ca <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007428:	23f4      	movs	r3, #244	; 0xf4
 800742a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800742c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007446:	f107 030e 	add.w	r3, r7, #14
 800744a:	461a      	mov	r2, r3
 800744c:	2113      	movs	r1, #19
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f003 fac6 	bl	800a9e0 <VL53L0X_RdByte>
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	f003 0207 	and.w	r2, r3, #7
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	f003 0318 	and.w	r3, r3, #24
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800746c:	23fa      	movs	r3, #250	; 0xfa
 800746e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007488:	2300      	movs	r3, #0
 800748a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 fa03 	bl	800789c <VL53L0X_perform_ref_spad_management>
 8007496:	4603      	mov	r3, r0
 8007498:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800749a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80074b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80074b8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80074ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074be:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80074c0:	f107 0308 	add.w	r3, r7, #8
 80074c4:	461a      	mov	r2, r3
 80074c6:	2128      	movs	r1, #40	; 0x28
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f003 fab3 	bl	800aa34 <VL53L0X_RdWord>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80074d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d11e      	bne.n	8007518 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80074da:	893b      	ldrh	r3, [r7, #8]
 80074dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80074e4:	893b      	ldrh	r3, [r7, #8]
 80074e6:	461a      	mov	r2, r3
 80074e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	dd0b      	ble.n	8007508 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80074f0:	893a      	ldrh	r2, [r7, #8]
 80074f2:	897b      	ldrh	r3, [r7, #10]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	b21b      	sxth	r3, r3
 80074fa:	461a      	mov	r2, r3
					* 250;
 80074fc:	23fa      	movs	r3, #250	; 0xfa
 80074fe:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	e007      	b.n	8007518 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007508:	893b      	ldrh	r3, [r7, #8]
 800750a:	b21b      	sxth	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	23fa      	movs	r3, #250	; 0xfa
 8007510:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007524:	b480      	push	{r7}
 8007526:	b08b      	sub	sp, #44	; 0x2c
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007532:	2308      	movs	r3, #8
 8007534:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007540:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	fbb2 f3f3 	udiv	r3, r2, r3
 800754a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	fbb3 f2f2 	udiv	r2, r3, r2
 8007554:	69b9      	ldr	r1, [r7, #24]
 8007556:	fb01 f202 	mul.w	r2, r1, r2
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
 8007562:	e030      	b.n	80075c6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	4413      	add	r3, r2
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	429a      	cmp	r2, r3
 8007578:	d11e      	bne.n	80075b8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800757a:	7ffa      	ldrb	r2, [r7, #31]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	fa42 f303 	asr.w	r3, r2, r3
 8007582:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007588:	e016      	b.n	80075b8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800758a:	7ffb      	ldrb	r3, [r7, #31]
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00b      	beq.n	80075ac <get_next_good_spad+0x88>
				success = 1;
 8007594:	2301      	movs	r3, #1
 8007596:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	fb02 f203 	mul.w	r2, r2, r3
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	4413      	add	r3, r2
 80075a4:	461a      	mov	r2, r3
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	601a      	str	r2, [r3, #0]
				break;
 80075aa:	e009      	b.n	80075c0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80075ac:	7ffb      	ldrb	r3, [r7, #31]
 80075ae:	085b      	lsrs	r3, r3, #1
 80075b0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	3301      	adds	r3, #1
 80075b6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80075b8:	6a3a      	ldr	r2, [r7, #32]
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d3e4      	bcc.n	800758a <get_next_good_spad+0x66>
				coarseIndex++) {
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	3301      	adds	r3, #1
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80075c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d202      	bcs.n	80075d4 <get_next_good_spad+0xb0>
 80075ce:	7fbb      	ldrb	r3, [r7, #30]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0c7      	beq.n	8007564 <get_next_good_spad+0x40>
		}
	}
}
 80075d4:	bf00      	nop
 80075d6:	372c      	adds	r7, #44	; 0x2c
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	099b      	lsrs	r3, r3, #6
 80075f0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80075f2:	4a07      	ldr	r2, [pc, #28]	; (8007610 <is_aperture+0x30>)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <is_aperture+0x22>
		isAperture = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007602:	7bfb      	ldrb	r3, [r7, #15]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	200002c4 	.word	0x200002c4

08007614 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007614:	b480      	push	{r7}
 8007616:	b089      	sub	sp, #36	; 0x24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007620:	2300      	movs	r3, #0
 8007622:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007624:	2308      	movs	r3, #8
 8007626:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007630:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	fbb3 f2f2 	udiv	r2, r3, r2
 800763a:	69b9      	ldr	r1, [r7, #24]
 800763c:	fb01 f202 	mul.w	r2, r1, r2
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	429a      	cmp	r2, r3
 800764a:	d302      	bcc.n	8007652 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800764c:	23ce      	movs	r3, #206	; 0xce
 800764e:	77fb      	strb	r3, [r7, #31]
 8007650:	e010      	b.n	8007674 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	4413      	add	r3, r2
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b25a      	sxtb	r2, r3
 800765c:	2101      	movs	r1, #1
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	fa01 f303 	lsl.w	r3, r1, r3
 8007664:	b25b      	sxtb	r3, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	b259      	sxtb	r1, r3
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	4413      	add	r3, r2
 8007670:	b2ca      	uxtb	r2, r1
 8007672:	701a      	strb	r2, [r3, #0]

	return status;
 8007674:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3724      	adds	r7, #36	; 0x24
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800768e:	2306      	movs	r3, #6
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	21b0      	movs	r1, #176	; 0xb0
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f003 f8c5 	bl	800a824 <VL53L0X_WriteMulti>
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800769e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80076b4:	2306      	movs	r3, #6
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	21b0      	movs	r1, #176	; 0xb0
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f003 f8e2 	bl	800a884 <VL53L0X_ReadMulti>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80076c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08c      	sub	sp, #48	; 0x30
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	607a      	str	r2, [r7, #4]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	460b      	mov	r3, r1
 80076de:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80076e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80076ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ec:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80076ee:	2300      	movs	r3, #0
 80076f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f2:	e02b      	b.n	800774c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80076f4:	f107 031c 	add.w	r3, r7, #28
 80076f8:	6a3a      	ldr	r2, [r7, #32]
 80076fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff ff11 	bl	8007524 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007708:	d103      	bne.n	8007712 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800770a:	23ce      	movs	r3, #206	; 0xce
 800770c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007710:	e020      	b.n	8007754 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	461a      	mov	r2, r3
 8007716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007718:	4413      	add	r3, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff ff60 	bl	80075e0 <is_aperture>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	7afb      	ldrb	r3, [r7, #11]
 8007726:	4293      	cmp	r3, r2
 8007728:	d003      	beq.n	8007732 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800772a:	23ce      	movs	r3, #206	; 0xce
 800772c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007730:	e010      	b.n	8007754 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007736:	6a3a      	ldr	r2, [r7, #32]
 8007738:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800773a:	6838      	ldr	r0, [r7, #0]
 800773c:	f7ff ff6a 	bl	8007614 <enable_spad_bit>
		currentSpad++;
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	3301      	adds	r3, #1
 8007744:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	3301      	adds	r3, #1
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28
 800774c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800774e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007750:	429a      	cmp	r2, r3
 8007752:	d3cf      	bcc.n	80076f4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007756:	6a3a      	ldr	r2, [r7, #32]
 8007758:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800775a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f7ff ff8d 	bl	8007684 <set_ref_spad_map>
 800776a:	4603      	mov	r3, r0
 800776c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007770:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007774:	2b00      	cmp	r3, #0
 8007776:	d121      	bne.n	80077bc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007778:	f107 0314 	add.w	r3, r7, #20
 800777c:	4619      	mov	r1, r3
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff ff93 	bl	80076aa <get_ref_spad_map>
 8007784:	4603      	mov	r3, r0
 8007786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800778e:	e011      	b.n	80077b4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	4413      	add	r3, r2
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	f107 0114 	add.w	r1, r7, #20
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	440b      	add	r3, r1
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d003      	beq.n	80077ae <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80077a6:	23ce      	movs	r3, #206	; 0xce
 80077a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80077ac:	e006      	b.n	80077bc <enable_ref_spads+0xec>
			}
			i++;
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	3301      	adds	r3, #1
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80077b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d3e9      	bcc.n	8007790 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80077bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3730      	adds	r7, #48	; 0x30
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80077d8:	2300      	movs	r3, #0
 80077da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80077e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80077e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d107      	bne.n	8007800 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80077f0:	22c0      	movs	r2, #192	; 0xc0
 80077f2:	2101      	movs	r1, #1
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f003 f871 	bl	800a8dc <VL53L0X_WrByte>
 80077fa:	4603      	mov	r3, r0
 80077fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007800:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007804:	2b00      	cmp	r3, #0
 8007806:	d108      	bne.n	800781a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007808:	f107 0308 	add.w	r3, r7, #8
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff fc48 	bl	80070a4 <VL53L0X_PerformSingleRangingMeasurement>
 8007814:	4603      	mov	r3, r0
 8007816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800781a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800781e:	2b00      	cmp	r3, #0
 8007820:	d107      	bne.n	8007832 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007822:	2201      	movs	r2, #1
 8007824:	21ff      	movs	r1, #255	; 0xff
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f003 f858 	bl	800a8dc <VL53L0X_WrByte>
 800782c:	4603      	mov	r3, r0
 800782e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007832:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007836:	2b00      	cmp	r3, #0
 8007838:	d107      	bne.n	800784a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	21b6      	movs	r1, #182	; 0xb6
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f003 f8f8 	bl	800aa34 <VL53L0X_RdWord>
 8007844:	4603      	mov	r3, r0
 8007846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800784a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800784e:	2b00      	cmp	r3, #0
 8007850:	d107      	bne.n	8007862 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007852:	2200      	movs	r2, #0
 8007854:	21ff      	movs	r1, #255	; 0xff
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f003 f840 	bl	800a8dc <VL53L0X_WrByte>
 800785c:	4603      	mov	r3, r0
 800785e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007862:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007866:	2b00      	cmp	r3, #0
 8007868:	d112      	bne.n	8007890 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800786a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800786e:	461a      	mov	r2, r3
 8007870:	2101      	movs	r1, #1
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f003 f832 	bl	800a8dc <VL53L0X_WrByte>
 8007878:	4603      	mov	r3, r0
 800787a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800787e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800788c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007890:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007894:	4618      	mov	r0, r3
 8007896:	3728      	adds	r7, #40	; 0x28
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800789c:	b590      	push	{r4, r7, lr}
 800789e:	b09d      	sub	sp, #116	; 0x74
 80078a0:	af06      	add	r7, sp, #24
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80078ae:	23b4      	movs	r3, #180	; 0xb4
 80078b0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80078b4:	2303      	movs	r3, #3
 80078b6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80078b8:	232c      	movs	r3, #44	; 0x2c
 80078ba:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80078c8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80078cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80078d6:	2306      	movs	r3, #6
 80078d8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80078de:	2300      	movs	r3, #0
 80078e0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80078f0:	2300      	movs	r3, #0
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8007900:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007902:	2300      	movs	r3, #0
 8007904:	64bb      	str	r3, [r7, #72]	; 0x48
 8007906:	e009      	b.n	800791c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800790c:	4413      	add	r3, r2
 800790e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007912:	2200      	movs	r2, #0
 8007914:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007918:	3301      	adds	r3, #1
 800791a:	64bb      	str	r3, [r7, #72]	; 0x48
 800791c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	429a      	cmp	r2, r3
 8007922:	d3f1      	bcc.n	8007908 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007924:	2201      	movs	r2, #1
 8007926:	21ff      	movs	r1, #255	; 0xff
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f002 ffd7 	bl	800a8dc <VL53L0X_WrByte>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007934:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007938:	2b00      	cmp	r3, #0
 800793a:	d107      	bne.n	800794c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800793c:	2200      	movs	r2, #0
 800793e:	214f      	movs	r1, #79	; 0x4f
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f002 ffcb 	bl	800a8dc <VL53L0X_WrByte>
 8007946:	4603      	mov	r3, r0
 8007948:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800794c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007950:	2b00      	cmp	r3, #0
 8007952:	d107      	bne.n	8007964 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007954:	222c      	movs	r2, #44	; 0x2c
 8007956:	214e      	movs	r1, #78	; 0x4e
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f002 ffbf 	bl	800a8dc <VL53L0X_WrByte>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007964:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007968:	2b00      	cmp	r3, #0
 800796a:	d107      	bne.n	800797c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800796c:	2200      	movs	r2, #0
 800796e:	21ff      	movs	r1, #255	; 0xff
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f002 ffb3 	bl	800a8dc <VL53L0X_WrByte>
 8007976:	4603      	mov	r3, r0
 8007978:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800797c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007980:	2b00      	cmp	r3, #0
 8007982:	d109      	bne.n	8007998 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007984:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007988:	461a      	mov	r2, r3
 800798a:	21b6      	movs	r1, #182	; 0xb6
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f002 ffa5 	bl	800a8dc <VL53L0X_WrByte>
 8007992:	4603      	mov	r3, r0
 8007994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007998:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800799c:	2b00      	cmp	r3, #0
 800799e:	d107      	bne.n	80079b0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80079a0:	2200      	movs	r2, #0
 80079a2:	2180      	movs	r1, #128	; 0x80
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f002 ff99 	bl	800a8dc <VL53L0X_WrByte>
 80079aa:	4603      	mov	r3, r0
 80079ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80079b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80079b8:	f107 0210 	add.w	r2, r7, #16
 80079bc:	f107 0111 	add.w	r1, r7, #17
 80079c0:	2300      	movs	r3, #0
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 fbbb 	bl	800813e <VL53L0X_perform_ref_calibration>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80079ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d121      	bne.n	8007a1a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80079da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079dc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80079e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80079f2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80079f6:	f107 0218 	add.w	r2, r7, #24
 80079fa:	9204      	str	r2, [sp, #16]
 80079fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079fe:	9203      	str	r2, [sp, #12]
 8007a00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a02:	9202      	str	r2, [sp, #8]
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	4623      	mov	r3, r4
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f7ff fe5e 	bl	80076d0 <enable_ref_spads>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d174      	bne.n	8007b0c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007a26:	f107 0312 	add.w	r3, r7, #18
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f7ff fecb 	bl	80077c8 <perform_ref_signal_measurement>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007a38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d161      	bne.n	8007b04 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007a40:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007a42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d25d      	bcs.n	8007b04 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a4c:	e009      	b.n	8007a62 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a5e:	3301      	adds	r3, #1
 8007a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d3f1      	bcc.n	8007a4e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007a6a:	e002      	b.n	8007a72 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a6e:	3301      	adds	r3, #1
 8007a70:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007a72:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a78:	4413      	add	r3, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fdb0 	bl	80075e0 <is_aperture>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d103      	bne.n	8007a8e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d3ee      	bcc.n	8007a6c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a94:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007aa2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007aa6:	f107 0218 	add.w	r2, r7, #24
 8007aaa:	9204      	str	r2, [sp, #16]
 8007aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aae:	9203      	str	r2, [sp, #12]
 8007ab0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ab2:	9202      	str	r2, [sp, #8]
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	4623      	mov	r3, r4
 8007abc:	4602      	mov	r2, r0
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7ff fe06 	bl	80076d0 <enable_ref_spads>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007aca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d11b      	bne.n	8007b0a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007ad6:	f107 0312 	add.w	r3, r7, #18
 8007ada:	4619      	mov	r1, r3
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f7ff fe73 	bl	80077c8 <perform_ref_signal_measurement>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007ae8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10c      	bne.n	8007b0a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007af0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007af2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d208      	bcs.n	8007b0a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007af8:	2301      	movs	r3, #1
 8007afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007b02:	e002      	b.n	8007b0a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b08:	e000      	b.n	8007b0c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007b0a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007b0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f040 80af 	bne.w	8007c74 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007b16:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007b18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	f240 80aa 	bls.w	8007c74 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007b30:	f107 031c 	add.w	r3, r7, #28
 8007b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b36:	4618      	mov	r0, r3
 8007b38:	f003 f82e 	bl	800ab98 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007b3c:	8a7b      	ldrh	r3, [r7, #18]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bfb8      	it	lt
 8007b48:	425b      	neglt	r3, r3
 8007b4a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8007b52:	e086      	b.n	8007c62 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007b5a:	f107 0314 	add.w	r3, r7, #20
 8007b5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b62:	f7ff fcdf 	bl	8007524 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b6c:	d103      	bne.n	8007b76 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007b6e:	23ce      	movs	r3, #206	; 0xce
 8007b70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007b74:	e07e      	b.n	8007c74 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007b76:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff fd2e 	bl	80075e0 <is_aperture>
 8007b84:	4603      	mov	r3, r0
 8007b86:	461a      	mov	r2, r3
 8007b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d003      	beq.n	8007b96 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8007b94:	e06e      	b.n	8007c74 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8007b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b98:	3301      	adds	r3, #1
 8007b9a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007ba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff fd32 	bl	8007614 <enable_spad_bit>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007bb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10c      	bne.n	8007bd8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8007bca:	4619      	mov	r1, r3
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7ff fd59 	bl	8007684 <set_ref_spad_map>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007bd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d146      	bne.n	8007c6e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007be0:	f107 0312 	add.w	r3, r7, #18
 8007be4:	4619      	mov	r1, r3
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f7ff fdee 	bl	80077c8 <perform_ref_signal_measurement>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007bf2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d13b      	bne.n	8007c72 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007bfa:	8a7b      	ldrh	r3, [r7, #18]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bfb8      	it	lt
 8007c06:	425b      	neglt	r3, r3
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007c0a:	8a7b      	ldrh	r3, [r7, #18]
 8007c0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d21c      	bcs.n	8007c4c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d914      	bls.n	8007c44 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007c1a:	f107 031c 	add.w	r3, r7, #28
 8007c1e:	4619      	mov	r1, r3
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f7ff fd2f 	bl	8007684 <set_ref_spad_map>
 8007c26:	4603      	mov	r3, r0
 8007c28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007c32:	f107 011c 	add.w	r1, r7, #28
 8007c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f002 ffad 	bl	800ab98 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c40:	3b01      	subs	r3, #1
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4a:	e00a      	b.n	8007c62 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007c56:	f107 031c 	add.w	r3, r7, #28
 8007c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f002 ff9b 	bl	800ab98 <memcpy>
		while (!complete) {
 8007c62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f43f af74 	beq.w	8007b54 <VL53L0X_perform_ref_spad_management+0x2b8>
 8007c6c:	e002      	b.n	8007c74 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007c6e:	bf00      	nop
 8007c70:	e000      	b.n	8007c74 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007c72:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d115      	bne.n	8007ca8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c80:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007c88:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	781a      	ldrb	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007ca8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	375c      	adds	r7, #92	; 0x5c
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd90      	pop	{r4, r7, pc}

08007cb4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b093      	sub	sp, #76	; 0x4c
 8007cb8:	af06      	add	r7, sp, #24
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007ccc:	23b4      	movs	r3, #180	; 0xb4
 8007cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007cd2:	2306      	movs	r3, #6
 8007cd4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007cd6:	232c      	movs	r3, #44	; 0x2c
 8007cd8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007cda:	2201      	movs	r2, #1
 8007cdc:	21ff      	movs	r1, #255	; 0xff
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f002 fdfc 	bl	800a8dc <VL53L0X_WrByte>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007cea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d107      	bne.n	8007d02 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	214f      	movs	r1, #79	; 0x4f
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f002 fdf0 	bl	800a8dc <VL53L0X_WrByte>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007d02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d107      	bne.n	8007d1a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007d0a:	222c      	movs	r2, #44	; 0x2c
 8007d0c:	214e      	movs	r1, #78	; 0x4e
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f002 fde4 	bl	800a8dc <VL53L0X_WrByte>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007d1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d107      	bne.n	8007d32 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007d22:	2200      	movs	r2, #0
 8007d24:	21ff      	movs	r1, #255	; 0xff
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f002 fdd8 	bl	800a8dc <VL53L0X_WrByte>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007d32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d109      	bne.n	8007d4e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8007d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d3e:	461a      	mov	r2, r3
 8007d40:	21b6      	movs	r1, #182	; 0xb6
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f002 fdca 	bl	800a8dc <VL53L0X_WrByte>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8007d4e:	2300      	movs	r3, #0
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
 8007d52:	e009      	b.n	8007d68 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007d5e:	2200      	movs	r2, #0
 8007d60:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	3301      	adds	r3, #1
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24
 8007d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d3f1      	bcc.n	8007d54 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d011      	beq.n	8007d9a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007d76:	e002      	b.n	8007d7e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007d7e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	4413      	add	r3, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fc2a 	bl	80075e0 <is_aperture>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d103      	bne.n	8007d9a <VL53L0X_set_reference_spads+0xe6>
 8007d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d3ee      	bcc.n	8007d78 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007da6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007daa:	79f9      	ldrb	r1, [r7, #7]
 8007dac:	f107 0214 	add.w	r2, r7, #20
 8007db0:	9204      	str	r2, [sp, #16]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	9203      	str	r2, [sp, #12]
 8007db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db8:	9202      	str	r2, [sp, #8]
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff fc83 	bl	80076d0 <enable_ref_spads>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007dd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10c      	bne.n	8007df2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	79fa      	ldrb	r2, [r7, #7]
 8007dee:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007df2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3734      	adds	r7, #52	; 0x34
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd90      	pop	{r4, r7, pc}

08007dfe <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007e16:	78fb      	ldrb	r3, [r7, #3]
 8007e18:	f043 0301 	orr.w	r3, r3, #1
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	461a      	mov	r2, r3
 8007e20:	2100      	movs	r1, #0
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f002 fd5a 	bl	800a8dc <VL53L0X_WrByte>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8007e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f9bf 	bl	80081b8 <VL53L0X_measurement_poll_for_completion>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d105      	bne.n	8007e52 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007e46:	2100      	movs	r1, #0
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff fab5 	bl	80073b8 <VL53L0X_ClearInterruptMask>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f002 fd3c 	bl	800a8dc <VL53L0X_WrByte>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	4611      	mov	r1, r2
 8007e80:	461a      	mov	r2, r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	70fb      	strb	r3, [r7, #3]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70bb      	strb	r3, [r7, #2]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007e96:	2201      	movs	r2, #1
 8007e98:	21ff      	movs	r1, #255	; 0xff
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f002 fd1e 	bl	800a8dc <VL53L0X_WrByte>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2100      	movs	r1, #0
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f002 fd14 	bl	800a8dc <VL53L0X_WrByte>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	21ff      	movs	r1, #255	; 0xff
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f002 fd0a 	bl	800a8dc <VL53L0X_WrByte>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	461a      	mov	r2, r3
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01e      	beq.n	8007f16 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007ed8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d009      	beq.n	8007ef4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	21cb      	movs	r1, #203	; 0xcb
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f002 fd7b 	bl	800a9e0 <VL53L0X_RdByte>
 8007eea:	4603      	mov	r3, r0
 8007eec:	461a      	mov	r2, r3
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007ef4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d02a      	beq.n	8007f52 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007efc:	f107 030e 	add.w	r3, r7, #14
 8007f00:	461a      	mov	r2, r3
 8007f02:	21ee      	movs	r1, #238	; 0xee
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f002 fd6b 	bl	800a9e0 <VL53L0X_RdByte>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	73fb      	strb	r3, [r7, #15]
 8007f14:	e01d      	b.n	8007f52 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007f16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8007f1e:	78bb      	ldrb	r3, [r7, #2]
 8007f20:	461a      	mov	r2, r3
 8007f22:	21cb      	movs	r1, #203	; 0xcb
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f002 fcd9 	bl	800a8dc <VL53L0X_WrByte>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007f34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007f3c:	787b      	ldrb	r3, [r7, #1]
 8007f3e:	2280      	movs	r2, #128	; 0x80
 8007f40:	21ee      	movs	r1, #238	; 0xee
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f002 fd18 	bl	800a978 <VL53L0X_UpdateByte>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f52:	2201      	movs	r2, #1
 8007f54:	21ff      	movs	r1, #255	; 0xff
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f002 fcc0 	bl	800a8dc <VL53L0X_WrByte>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007f66:	2201      	movs	r2, #1
 8007f68:	2100      	movs	r1, #0
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f002 fcb6 	bl	800a8dc <VL53L0X_WrByte>
 8007f70:	4603      	mov	r3, r0
 8007f72:	461a      	mov	r2, r3
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	21ff      	movs	r1, #255	; 0xff
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f002 fcac 	bl	800a8dc <VL53L0X_WrByte>
 8007f84:	4603      	mov	r3, r0
 8007f86:	461a      	mov	r2, r3
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	f023 0310 	bic.w	r3, r3, #16
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	701a      	strb	r2, [r3, #0]

	return Status;
 8007f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b08a      	sub	sp, #40	; 0x28
 8007faa:	af04      	add	r7, sp, #16
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	71fb      	strb	r3, [r7, #7]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007fd0:	79bb      	ldrb	r3, [r7, #6]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007fdc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8007fde:	2201      	movs	r2, #1
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f002 fc7a 	bl	800a8dc <VL53L0X_WrByte>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d105      	bne.n	8008000 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007ff4:	2140      	movs	r1, #64	; 0x40
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f7ff ff01 	bl	8007dfe <VL53L0X_perform_single_ref_calibration>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008000:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d115      	bne.n	8008034 <VL53L0X_perform_vhv_calibration+0x8e>
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d112      	bne.n	8008034 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800800e:	7d39      	ldrb	r1, [r7, #20]
 8008010:	7d7a      	ldrb	r2, [r7, #21]
 8008012:	2300      	movs	r3, #0
 8008014:	9303      	str	r3, [sp, #12]
 8008016:	2301      	movs	r3, #1
 8008018:	9302      	str	r3, [sp, #8]
 800801a:	f107 0313 	add.w	r3, r7, #19
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	460b      	mov	r3, r1
 8008026:	2101      	movs	r1, #1
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f7ff ff23 	bl	8007e74 <VL53L0X_ref_calibration_io>
 800802e:	4603      	mov	r3, r0
 8008030:	75fb      	strb	r3, [r7, #23]
 8008032:	e002      	b.n	800803a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800803a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d112      	bne.n	8008068 <VL53L0X_perform_vhv_calibration+0xc2>
 8008042:	79bb      	ldrb	r3, [r7, #6]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00f      	beq.n	8008068 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008048:	7dbb      	ldrb	r3, [r7, #22]
 800804a:	461a      	mov	r2, r3
 800804c:	2101      	movs	r1, #1
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f002 fc44 	bl	800a8dc <VL53L0X_WrByte>
 8008054:	4603      	mov	r3, r0
 8008056:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008058:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d103      	bne.n	8008068 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	7dba      	ldrb	r2, [r7, #22]
 8008064:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008068:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b08a      	sub	sp, #40	; 0x28
 8008078:	af04      	add	r7, sp, #16
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4611      	mov	r1, r2
 8008080:	461a      	mov	r2, r3
 8008082:	460b      	mov	r3, r1
 8008084:	71fb      	strb	r3, [r7, #7]
 8008086:	4613      	mov	r3, r2
 8008088:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800808a:	2300      	movs	r3, #0
 800808c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800809a:	79bb      	ldrb	r3, [r7, #6]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80080a6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80080a8:	2202      	movs	r2, #2
 80080aa:	2101      	movs	r1, #1
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f002 fc15 	bl	800a8dc <VL53L0X_WrByte>
 80080b2:	4603      	mov	r3, r0
 80080b4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80080b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d105      	bne.n	80080ca <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80080be:	2100      	movs	r1, #0
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f7ff fe9c 	bl	8007dfe <VL53L0X_perform_single_ref_calibration>
 80080c6:	4603      	mov	r3, r0
 80080c8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80080ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d115      	bne.n	80080fe <VL53L0X_perform_phase_calibration+0x8a>
 80080d2:	79fb      	ldrb	r3, [r7, #7]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d112      	bne.n	80080fe <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80080d8:	7d39      	ldrb	r1, [r7, #20]
 80080da:	7d7a      	ldrb	r2, [r7, #21]
 80080dc:	2301      	movs	r3, #1
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	2300      	movs	r3, #0
 80080e2:	9302      	str	r3, [sp, #8]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	9301      	str	r3, [sp, #4]
 80080e8:	f107 0313 	add.w	r3, r7, #19
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	460b      	mov	r3, r1
 80080f0:	2101      	movs	r1, #1
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f7ff febe 	bl	8007e74 <VL53L0X_ref_calibration_io>
 80080f8:	4603      	mov	r3, r0
 80080fa:	75fb      	strb	r3, [r7, #23]
 80080fc:	e002      	b.n	8008104 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2200      	movs	r2, #0
 8008102:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008104:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d112      	bne.n	8008132 <VL53L0X_perform_phase_calibration+0xbe>
 800810c:	79bb      	ldrb	r3, [r7, #6]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00f      	beq.n	8008132 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008112:	7dbb      	ldrb	r3, [r7, #22]
 8008114:	461a      	mov	r2, r3
 8008116:	2101      	movs	r1, #1
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f002 fbdf 	bl	800a8dc <VL53L0X_WrByte>
 800811e:	4603      	mov	r3, r0
 8008120:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008122:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	7dba      	ldrb	r2, [r7, #22]
 800812e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008132:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b086      	sub	sp, #24
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	607a      	str	r2, [r7, #4]
 800814a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800814c:	2300      	movs	r3, #0
 800814e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800815a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800815c:	78fa      	ldrb	r2, [r7, #3]
 800815e:	2300      	movs	r3, #0
 8008160:	68b9      	ldr	r1, [r7, #8]
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff ff1f 	bl	8007fa6 <VL53L0X_perform_vhv_calibration>
 8008168:	4603      	mov	r3, r0
 800816a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800816c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d107      	bne.n	8008184 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008174:	78fa      	ldrb	r2, [r7, #3]
 8008176:	2300      	movs	r3, #0
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7ff ff7a 	bl	8008074 <VL53L0X_perform_phase_calibration>
 8008180:	4603      	mov	r3, r0
 8008182:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10f      	bne.n	80081ac <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800818c:	7dbb      	ldrb	r3, [r7, #22]
 800818e:	461a      	mov	r2, r3
 8008190:	2101      	movs	r1, #1
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f002 fba2 	bl	800a8dc <VL53L0X_WrByte>
 8008198:	4603      	mov	r3, r0
 800819a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800819c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d103      	bne.n	80081ac <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	7dba      	ldrb	r2, [r7, #22]
 80081a8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80081ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081c0:	2300      	movs	r3, #0
 80081c2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80081cc:	f107 030f 	add.w	r3, r7, #15
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fe fdff 	bl	8006dd6 <VL53L0X_GetMeasurementDataReady>
 80081d8:	4603      	mov	r3, r0
 80081da:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80081dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d110      	bne.n	8008206 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d00f      	beq.n	800820a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3301      	adds	r3, #1
 80081ee:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80081f6:	d302      	bcc.n	80081fe <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80081f8:	23f9      	movs	r3, #249	; 0xf9
 80081fa:	75fb      	strb	r3, [r7, #23]
			break;
 80081fc:	e006      	b.n	800820c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f002 fc8c 	bl	800ab1c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008204:	e7e2      	b.n	80081cc <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008206:	bf00      	nop
 8008208:	e000      	b.n	800820c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800820a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800820c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	3301      	adds	r3, #1
 800822a:	b2db      	uxtb	r3, r3
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800823e:	b480      	push	{r7}
 8008240:	b085      	sub	sp, #20
 8008242:	af00      	add	r7, sp, #0
 8008244:	4603      	mov	r3, r0
 8008246:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	085b      	lsrs	r3, r3, #1
 8008250:	b2db      	uxtb	r3, r3
 8008252:	3b01      	subs	r3, #1
 8008254:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008274:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008276:	e002      	b.n	800827e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	089b      	lsrs	r3, r3, #2
 800827c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	429a      	cmp	r2, r3
 8008284:	d8f8      	bhi.n	8008278 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008286:	e017      	b.n	80082b8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	429a      	cmp	r2, r3
 8008292:	d30b      	bcc.n	80082ac <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	4413      	add	r3, r2
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	4413      	add	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	e002      	b.n	80082b2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	085b      	lsrs	r3, r3, #1
 80082b0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	089b      	lsrs	r3, r3, #2
 80082b6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e4      	bne.n	8008288 <VL53L0X_isqrt+0x24>
	}

	return res;
 80082be:	68fb      	ldr	r3, [r7, #12]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082d4:	2300      	movs	r3, #0
 80082d6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80082d8:	2200      	movs	r2, #0
 80082da:	2183      	movs	r1, #131	; 0x83
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f002 fafd 	bl	800a8dc <VL53L0X_WrByte>
 80082e2:	4603      	mov	r3, r0
 80082e4:	461a      	mov	r2, r3
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80082ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d11e      	bne.n	8008332 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80082f8:	f107 030f 	add.w	r3, r7, #15
 80082fc:	461a      	mov	r2, r3
 80082fe:	2183      	movs	r1, #131	; 0x83
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f002 fb6d 	bl	800a9e0 <VL53L0X_RdByte>
 8008306:	4603      	mov	r3, r0
 8008308:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10a      	bne.n	8008326 <VL53L0X_device_read_strobe+0x5a>
 8008310:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	3301      	adds	r3, #1
 800831c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008324:	d3e8      	bcc.n	80082f8 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800832c:	d301      	bcc.n	8008332 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800832e:	23f9      	movs	r3, #249	; 0xf9
 8008330:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008332:	2201      	movs	r2, #1
 8008334:	2183      	movs	r1, #131	; 0x83
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f002 fad0 	bl	800a8dc <VL53L0X_WrByte>
 800833c:	4603      	mov	r3, r0
 800833e:	461a      	mov	r2, r3
 8008340:	7dfb      	ldrb	r3, [r7, #23]
 8008342:	4313      	orrs	r3, r2
 8008344:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008346:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b098      	sub	sp, #96	; 0x60
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800835e:	2300      	movs	r3, #0
 8008360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008382:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008386:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800839a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800839e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80083a2:	2b07      	cmp	r3, #7
 80083a4:	f000 8408 	beq.w	8008bb8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80083a8:	2201      	movs	r2, #1
 80083aa:	2180      	movs	r1, #128	; 0x80
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f002 fa95 	bl	800a8dc <VL53L0X_WrByte>
 80083b2:	4603      	mov	r3, r0
 80083b4:	461a      	mov	r2, r3
 80083b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80083c0:	2201      	movs	r2, #1
 80083c2:	21ff      	movs	r1, #255	; 0xff
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f002 fa89 	bl	800a8dc <VL53L0X_WrByte>
 80083ca:	4603      	mov	r3, r0
 80083cc:	461a      	mov	r2, r3
 80083ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083d2:	4313      	orrs	r3, r2
 80083d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80083d8:	2200      	movs	r2, #0
 80083da:	2100      	movs	r1, #0
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f002 fa7d 	bl	800a8dc <VL53L0X_WrByte>
 80083e2:	4603      	mov	r3, r0
 80083e4:	461a      	mov	r2, r3
 80083e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80083f0:	2206      	movs	r2, #6
 80083f2:	21ff      	movs	r1, #255	; 0xff
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f002 fa71 	bl	800a8dc <VL53L0X_WrByte>
 80083fa:	4603      	mov	r3, r0
 80083fc:	461a      	mov	r2, r3
 80083fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008402:	4313      	orrs	r3, r2
 8008404:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008408:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800840c:	461a      	mov	r2, r3
 800840e:	2183      	movs	r1, #131	; 0x83
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f002 fae5 	bl	800a9e0 <VL53L0X_RdByte>
 8008416:	4603      	mov	r3, r0
 8008418:	461a      	mov	r2, r3
 800841a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800841e:	4313      	orrs	r3, r2
 8008420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008428:	f043 0304 	orr.w	r3, r3, #4
 800842c:	b2db      	uxtb	r3, r3
 800842e:	461a      	mov	r2, r3
 8008430:	2183      	movs	r1, #131	; 0x83
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f002 fa52 	bl	800a8dc <VL53L0X_WrByte>
 8008438:	4603      	mov	r3, r0
 800843a:	461a      	mov	r2, r3
 800843c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008440:	4313      	orrs	r3, r2
 8008442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008446:	2207      	movs	r2, #7
 8008448:	21ff      	movs	r1, #255	; 0xff
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f002 fa46 	bl	800a8dc <VL53L0X_WrByte>
 8008450:	4603      	mov	r3, r0
 8008452:	461a      	mov	r2, r3
 8008454:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008458:	4313      	orrs	r3, r2
 800845a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800845e:	2201      	movs	r2, #1
 8008460:	2181      	movs	r1, #129	; 0x81
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f002 fa3a 	bl	800a8dc <VL53L0X_WrByte>
 8008468:	4603      	mov	r3, r0
 800846a:	461a      	mov	r2, r3
 800846c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008470:	4313      	orrs	r3, r2
 8008472:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f002 fb50 	bl	800ab1c <VL53L0X_PollingDelay>
 800847c:	4603      	mov	r3, r0
 800847e:	461a      	mov	r2, r3
 8008480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008484:	4313      	orrs	r3, r2
 8008486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800848a:	2201      	movs	r2, #1
 800848c:	2180      	movs	r1, #128	; 0x80
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f002 fa24 	bl	800a8dc <VL53L0X_WrByte>
 8008494:	4603      	mov	r3, r0
 8008496:	461a      	mov	r2, r3
 8008498:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800849c:	4313      	orrs	r3, r2
 800849e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80084a2:	78fb      	ldrb	r3, [r7, #3]
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 8098 	beq.w	80085de <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80084ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80084b2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f040 8091 	bne.w	80085de <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80084bc:	226b      	movs	r2, #107	; 0x6b
 80084be:	2194      	movs	r1, #148	; 0x94
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f002 fa0b 	bl	800a8dc <VL53L0X_WrByte>
 80084c6:	4603      	mov	r3, r0
 80084c8:	461a      	mov	r2, r3
 80084ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084ce:	4313      	orrs	r3, r2
 80084d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff fef9 	bl	80082cc <VL53L0X_device_read_strobe>
 80084da:	4603      	mov	r3, r0
 80084dc:	461a      	mov	r2, r3
 80084de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084e2:	4313      	orrs	r3, r2
 80084e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80084e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084ec:	461a      	mov	r2, r3
 80084ee:	2190      	movs	r1, #144	; 0x90
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f002 fad7 	bl	800aaa4 <VL53L0X_RdDWord>
 80084f6:	4603      	mov	r3, r0
 80084f8:	461a      	mov	r2, r3
 80084fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084fe:	4313      	orrs	r3, r2
 8008500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008506:	0a1b      	lsrs	r3, r3, #8
 8008508:	b2db      	uxtb	r3, r3
 800850a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800850e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	0bdb      	lsrs	r3, r3, #15
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008520:	2224      	movs	r2, #36	; 0x24
 8008522:	2194      	movs	r1, #148	; 0x94
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f002 f9d9 	bl	800a8dc <VL53L0X_WrByte>
 800852a:	4603      	mov	r3, r0
 800852c:	461a      	mov	r2, r3
 800852e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008532:	4313      	orrs	r3, r2
 8008534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7ff fec7 	bl	80082cc <VL53L0X_device_read_strobe>
 800853e:	4603      	mov	r3, r0
 8008540:	461a      	mov	r2, r3
 8008542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008546:	4313      	orrs	r3, r2
 8008548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800854c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008550:	461a      	mov	r2, r3
 8008552:	2190      	movs	r1, #144	; 0x90
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f002 faa5 	bl	800aaa4 <VL53L0X_RdDWord>
 800855a:	4603      	mov	r3, r0
 800855c:	461a      	mov	r2, r3
 800855e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008562:	4313      	orrs	r3, r2
 8008564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	0e1b      	lsrs	r3, r3, #24
 800856c:	b2db      	uxtb	r3, r3
 800856e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	0c1b      	lsrs	r3, r3, #16
 8008574:	b2db      	uxtb	r3, r3
 8008576:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	0a1b      	lsrs	r3, r3, #8
 800857c:	b2db      	uxtb	r3, r3
 800857e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	b2db      	uxtb	r3, r3
 8008584:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008586:	2225      	movs	r2, #37	; 0x25
 8008588:	2194      	movs	r1, #148	; 0x94
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f002 f9a6 	bl	800a8dc <VL53L0X_WrByte>
 8008590:	4603      	mov	r3, r0
 8008592:	461a      	mov	r2, r3
 8008594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008598:	4313      	orrs	r3, r2
 800859a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff fe94 	bl	80082cc <VL53L0X_device_read_strobe>
 80085a4:	4603      	mov	r3, r0
 80085a6:	461a      	mov	r2, r3
 80085a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085ac:	4313      	orrs	r3, r2
 80085ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80085b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085b6:	461a      	mov	r2, r3
 80085b8:	2190      	movs	r1, #144	; 0x90
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f002 fa72 	bl	800aaa4 <VL53L0X_RdDWord>
 80085c0:	4603      	mov	r3, r0
 80085c2:	461a      	mov	r2, r3
 80085c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	0e1b      	lsrs	r3, r3, #24
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	0c1b      	lsrs	r3, r3, #16
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 8189 	beq.w	80088fc <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80085ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085ee:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f040 8182 	bne.w	80088fc <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80085f8:	2202      	movs	r2, #2
 80085fa:	2194      	movs	r1, #148	; 0x94
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f002 f96d 	bl	800a8dc <VL53L0X_WrByte>
 8008602:	4603      	mov	r3, r0
 8008604:	461a      	mov	r2, r3
 8008606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800860a:	4313      	orrs	r3, r2
 800860c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff fe5b 	bl	80082cc <VL53L0X_device_read_strobe>
 8008616:	4603      	mov	r3, r0
 8008618:	461a      	mov	r2, r3
 800861a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800861e:	4313      	orrs	r3, r2
 8008620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008624:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008628:	461a      	mov	r2, r3
 800862a:	2190      	movs	r1, #144	; 0x90
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f002 f9d7 	bl	800a9e0 <VL53L0X_RdByte>
 8008632:	4603      	mov	r3, r0
 8008634:	461a      	mov	r2, r3
 8008636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800863a:	4313      	orrs	r3, r2
 800863c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008640:	227b      	movs	r2, #123	; 0x7b
 8008642:	2194      	movs	r1, #148	; 0x94
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f002 f949 	bl	800a8dc <VL53L0X_WrByte>
 800864a:	4603      	mov	r3, r0
 800864c:	461a      	mov	r2, r3
 800864e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008652:	4313      	orrs	r3, r2
 8008654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff fe37 	bl	80082cc <VL53L0X_device_read_strobe>
 800865e:	4603      	mov	r3, r0
 8008660:	461a      	mov	r2, r3
 8008662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008666:	4313      	orrs	r3, r2
 8008668:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800866c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008670:	461a      	mov	r2, r3
 8008672:	2190      	movs	r1, #144	; 0x90
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f002 f9b3 	bl	800a9e0 <VL53L0X_RdByte>
 800867a:	4603      	mov	r3, r0
 800867c:	461a      	mov	r2, r3
 800867e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008682:	4313      	orrs	r3, r2
 8008684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008688:	2277      	movs	r2, #119	; 0x77
 800868a:	2194      	movs	r1, #148	; 0x94
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f002 f925 	bl	800a8dc <VL53L0X_WrByte>
 8008692:	4603      	mov	r3, r0
 8008694:	461a      	mov	r2, r3
 8008696:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800869a:	4313      	orrs	r3, r2
 800869c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fe13 	bl	80082cc <VL53L0X_device_read_strobe>
 80086a6:	4603      	mov	r3, r0
 80086a8:	461a      	mov	r2, r3
 80086aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ae:	4313      	orrs	r3, r2
 80086b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80086b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086b8:	461a      	mov	r2, r3
 80086ba:	2190      	movs	r1, #144	; 0x90
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f002 f9f1 	bl	800aaa4 <VL53L0X_RdDWord>
 80086c2:	4603      	mov	r3, r0
 80086c4:	461a      	mov	r2, r3
 80086c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ca:	4313      	orrs	r3, r2
 80086cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	0e5b      	lsrs	r3, r3, #25
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	0c9b      	lsrs	r3, r3, #18
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	0adb      	lsrs	r3, r3, #11
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	091b      	lsrs	r3, r3, #4
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008704:	b2db      	uxtb	r3, r3
 8008706:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	b2db      	uxtb	r3, r3
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008714:	b2db      	uxtb	r3, r3
 8008716:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800871a:	2278      	movs	r2, #120	; 0x78
 800871c:	2194      	movs	r1, #148	; 0x94
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f002 f8dc 	bl	800a8dc <VL53L0X_WrByte>
 8008724:	4603      	mov	r3, r0
 8008726:	461a      	mov	r2, r3
 8008728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800872c:	4313      	orrs	r3, r2
 800872e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff fdca 	bl	80082cc <VL53L0X_device_read_strobe>
 8008738:	4603      	mov	r3, r0
 800873a:	461a      	mov	r2, r3
 800873c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008740:	4313      	orrs	r3, r2
 8008742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800874a:	461a      	mov	r2, r3
 800874c:	2190      	movs	r1, #144	; 0x90
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f002 f9a8 	bl	800aaa4 <VL53L0X_RdDWord>
 8008754:	4603      	mov	r3, r0
 8008756:	461a      	mov	r2, r3
 8008758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800875c:	4313      	orrs	r3, r2
 800875e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	0f5b      	lsrs	r3, r3, #29
 8008766:	b2db      	uxtb	r3, r3
 8008768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800876e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008772:	4413      	add	r3, r2
 8008774:	b2db      	uxtb	r3, r3
 8008776:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	0d9b      	lsrs	r3, r3, #22
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008782:	b2db      	uxtb	r3, r3
 8008784:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	0bdb      	lsrs	r3, r3, #15
 800878a:	b2db      	uxtb	r3, r3
 800878c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008790:	b2db      	uxtb	r3, r3
 8008792:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	0a1b      	lsrs	r3, r3, #8
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	085b      	lsrs	r3, r3, #1
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80087b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	019b      	lsls	r3, r3, #6
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80087c2:	2279      	movs	r2, #121	; 0x79
 80087c4:	2194      	movs	r1, #148	; 0x94
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f002 f888 	bl	800a8dc <VL53L0X_WrByte>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087d4:	4313      	orrs	r3, r2
 80087d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fd76 	bl	80082cc <VL53L0X_device_read_strobe>
 80087e0:	4603      	mov	r3, r0
 80087e2:	461a      	mov	r2, r3
 80087e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087e8:	4313      	orrs	r3, r2
 80087ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80087ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087f2:	461a      	mov	r2, r3
 80087f4:	2190      	movs	r1, #144	; 0x90
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f002 f954 	bl	800aaa4 <VL53L0X_RdDWord>
 80087fc:	4603      	mov	r3, r0
 80087fe:	461a      	mov	r2, r3
 8008800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008804:	4313      	orrs	r3, r2
 8008806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	0e9b      	lsrs	r3, r3, #26
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008814:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008816:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800881a:	4413      	add	r3, r2
 800881c:	b2db      	uxtb	r3, r3
 800881e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	0cdb      	lsrs	r3, r3, #19
 8008824:	b2db      	uxtb	r3, r3
 8008826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800882a:	b2db      	uxtb	r3, r3
 800882c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	0b1b      	lsrs	r3, r3, #12
 8008832:	b2db      	uxtb	r3, r3
 8008834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008838:	b2db      	uxtb	r3, r3
 800883a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	095b      	lsrs	r3, r3, #5
 8008840:	b2db      	uxtb	r3, r3
 8008842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008846:	b2db      	uxtb	r3, r3
 8008848:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884c:	b2db      	uxtb	r3, r3
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	b2db      	uxtb	r3, r3
 8008852:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008856:	b2db      	uxtb	r3, r3
 8008858:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800885c:	227a      	movs	r2, #122	; 0x7a
 800885e:	2194      	movs	r1, #148	; 0x94
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f002 f83b 	bl	800a8dc <VL53L0X_WrByte>
 8008866:	4603      	mov	r3, r0
 8008868:	461a      	mov	r2, r3
 800886a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800886e:	4313      	orrs	r3, r2
 8008870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff fd29 	bl	80082cc <VL53L0X_device_read_strobe>
 800887a:	4603      	mov	r3, r0
 800887c:	461a      	mov	r2, r3
 800887e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008882:	4313      	orrs	r3, r2
 8008884:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008888:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800888c:	461a      	mov	r2, r3
 800888e:	2190      	movs	r1, #144	; 0x90
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f002 f907 	bl	800aaa4 <VL53L0X_RdDWord>
 8008896:	4603      	mov	r3, r0
 8008898:	461a      	mov	r2, r3
 800889a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800889e:	4313      	orrs	r3, r2
 80088a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	0f9b      	lsrs	r3, r3, #30
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ae:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80088b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088b4:	4413      	add	r3, r2
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	0ddb      	lsrs	r3, r3, #23
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	0c1b      	lsrs	r3, r3, #16
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	0a5b      	lsrs	r3, r3, #9
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	089b      	lsrs	r3, r3, #2
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80088f6:	2300      	movs	r3, #0
 80088f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	f003 0304 	and.w	r3, r3, #4
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 80f1 	beq.w	8008aea <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008908:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800890c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008910:	2b00      	cmp	r3, #0
 8008912:	f040 80ea 	bne.w	8008aea <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008916:	227b      	movs	r2, #123	; 0x7b
 8008918:	2194      	movs	r1, #148	; 0x94
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 ffde 	bl	800a8dc <VL53L0X_WrByte>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008928:	4313      	orrs	r3, r2
 800892a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7ff fccc 	bl	80082cc <VL53L0X_device_read_strobe>
 8008934:	4603      	mov	r3, r0
 8008936:	461a      	mov	r2, r3
 8008938:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800893c:	4313      	orrs	r3, r2
 800893e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008946:	461a      	mov	r2, r3
 8008948:	2190      	movs	r1, #144	; 0x90
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f002 f8aa 	bl	800aaa4 <VL53L0X_RdDWord>
 8008950:	4603      	mov	r3, r0
 8008952:	461a      	mov	r2, r3
 8008954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008958:	4313      	orrs	r3, r2
 800895a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800895e:	227c      	movs	r2, #124	; 0x7c
 8008960:	2194      	movs	r1, #148	; 0x94
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 ffba 	bl	800a8dc <VL53L0X_WrByte>
 8008968:	4603      	mov	r3, r0
 800896a:	461a      	mov	r2, r3
 800896c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008970:	4313      	orrs	r3, r2
 8008972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7ff fca8 	bl	80082cc <VL53L0X_device_read_strobe>
 800897c:	4603      	mov	r3, r0
 800897e:	461a      	mov	r2, r3
 8008980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008984:	4313      	orrs	r3, r2
 8008986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800898a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800898e:	461a      	mov	r2, r3
 8008990:	2190      	movs	r1, #144	; 0x90
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f002 f886 	bl	800aaa4 <VL53L0X_RdDWord>
 8008998:	4603      	mov	r3, r0
 800899a:	461a      	mov	r2, r3
 800899c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089a0:	4313      	orrs	r3, r2
 80089a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80089a6:	2273      	movs	r2, #115	; 0x73
 80089a8:	2194      	movs	r1, #148	; 0x94
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 ff96 	bl	800a8dc <VL53L0X_WrByte>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b8:	4313      	orrs	r3, r2
 80089ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff fc84 	bl	80082cc <VL53L0X_device_read_strobe>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089cc:	4313      	orrs	r3, r2
 80089ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80089d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089d6:	461a      	mov	r2, r3
 80089d8:	2190      	movs	r1, #144	; 0x90
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f002 f862 	bl	800aaa4 <VL53L0X_RdDWord>
 80089e0:	4603      	mov	r3, r0
 80089e2:	461a      	mov	r2, r3
 80089e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089e8:	4313      	orrs	r3, r2
 80089ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80089f6:	2274      	movs	r2, #116	; 0x74
 80089f8:	2194      	movs	r1, #148	; 0x94
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 ff6e 	bl	800a8dc <VL53L0X_WrByte>
 8008a00:	4603      	mov	r3, r0
 8008a02:	461a      	mov	r2, r3
 8008a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff fc5c 	bl	80082cc <VL53L0X_device_read_strobe>
 8008a14:	4603      	mov	r3, r0
 8008a16:	461a      	mov	r2, r3
 8008a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a26:	461a      	mov	r2, r3
 8008a28:	2190      	movs	r1, #144	; 0x90
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f002 f83a 	bl	800aaa4 <VL53L0X_RdDWord>
 8008a30:	4603      	mov	r3, r0
 8008a32:	461a      	mov	r2, r3
 8008a34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008a42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a44:	4313      	orrs	r3, r2
 8008a46:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008a48:	2275      	movs	r2, #117	; 0x75
 8008a4a:	2194      	movs	r1, #148	; 0x94
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 ff45 	bl	800a8dc <VL53L0X_WrByte>
 8008a52:	4603      	mov	r3, r0
 8008a54:	461a      	mov	r2, r3
 8008a56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7ff fc33 	bl	80082cc <VL53L0X_device_read_strobe>
 8008a66:	4603      	mov	r3, r0
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a78:	461a      	mov	r2, r3
 8008a7a:	2190      	movs	r1, #144	; 0x90
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f002 f811 	bl	800aaa4 <VL53L0X_RdDWord>
 8008a82:	4603      	mov	r3, r0
 8008a84:	461a      	mov	r2, r3
 8008a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8008a98:	2276      	movs	r2, #118	; 0x76
 8008a9a:	2194      	movs	r1, #148	; 0x94
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f001 ff1d 	bl	800a8dc <VL53L0X_WrByte>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff fc0b 	bl	80082cc <VL53L0X_device_read_strobe>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	461a      	mov	r2, r3
 8008aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ac4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ac8:	461a      	mov	r2, r3
 8008aca:	2190      	movs	r1, #144	; 0x90
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 ffe9 	bl	800aaa4 <VL53L0X_RdDWord>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ada:	4313      	orrs	r3, r2
 8008adc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008ae4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008aea:	2200      	movs	r2, #0
 8008aec:	2181      	movs	r1, #129	; 0x81
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 fef4 	bl	800a8dc <VL53L0X_WrByte>
 8008af4:	4603      	mov	r3, r0
 8008af6:	461a      	mov	r2, r3
 8008af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008afc:	4313      	orrs	r3, r2
 8008afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008b02:	2206      	movs	r2, #6
 8008b04:	21ff      	movs	r1, #255	; 0xff
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f001 fee8 	bl	800a8dc <VL53L0X_WrByte>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b14:	4313      	orrs	r3, r2
 8008b16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008b1a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008b1e:	461a      	mov	r2, r3
 8008b20:	2183      	movs	r1, #131	; 0x83
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 ff5c 	bl	800a9e0 <VL53L0X_RdByte>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b30:	4313      	orrs	r3, r2
 8008b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008b36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b3a:	f023 0304 	bic.w	r3, r3, #4
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	461a      	mov	r2, r3
 8008b42:	2183      	movs	r1, #131	; 0x83
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 fec9 	bl	800a8dc <VL53L0X_WrByte>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b52:	4313      	orrs	r3, r2
 8008b54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008b58:	2201      	movs	r2, #1
 8008b5a:	21ff      	movs	r1, #255	; 0xff
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 febd 	bl	800a8dc <VL53L0X_WrByte>
 8008b62:	4603      	mov	r3, r0
 8008b64:	461a      	mov	r2, r3
 8008b66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008b70:	2201      	movs	r2, #1
 8008b72:	2100      	movs	r1, #0
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 feb1 	bl	800a8dc <VL53L0X_WrByte>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b82:	4313      	orrs	r3, r2
 8008b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008b88:	2200      	movs	r2, #0
 8008b8a:	21ff      	movs	r1, #255	; 0xff
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f001 fea5 	bl	800a8dc <VL53L0X_WrByte>
 8008b92:	4603      	mov	r3, r0
 8008b94:	461a      	mov	r2, r3
 8008b96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2180      	movs	r1, #128	; 0x80
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f001 fe99 	bl	800a8dc <VL53L0X_WrByte>
 8008baa:	4603      	mov	r3, r0
 8008bac:	461a      	mov	r2, r3
 8008bae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008bb8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f040 808f 	bne.w	8008ce0 <VL53L0X_get_info_from_device+0x98e>
 8008bc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bc6:	2b07      	cmp	r3, #7
 8008bc8:	f000 808a 	beq.w	8008ce0 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d024      	beq.n	8008c20 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008bd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bda:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d11e      	bne.n	8008c20 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008be8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008bf2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bfa:	e00e      	b.n	8008c1a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008bfc:	f107 0208 	add.w	r2, r7, #8
 8008c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c02:	4413      	add	r3, r2
 8008c04:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008c10:	460a      	mov	r2, r1
 8008c12:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c16:	3301      	adds	r3, #1
 8008c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c1c:	2b05      	cmp	r3, #5
 8008c1e:	dded      	ble.n	8008bfc <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d018      	beq.n	8008c5c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008c2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c2e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d112      	bne.n	8008c5c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c36:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c40:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	33f3      	adds	r3, #243	; 0xf3
 8008c4e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008c50:	f107 0310 	add.w	r3, r7, #16
 8008c54:	4619      	mov	r1, r3
 8008c56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c58:	f001 ffd2 	bl	800ac00 <strcpy>

		}

		if (((option & 4) == 4) &&
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	f003 0304 	and.w	r3, r3, #4
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d030      	beq.n	8008cc8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008c66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c6a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d12a      	bne.n	8008cc8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c84:	025b      	lsls	r3, r3, #9
 8008c86:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c8c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d011      	beq.n	8008cc0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008c9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008caa:	fb02 f303 	mul.w	r3, r2, r3
 8008cae:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008cb0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008cb4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008cb8:	425b      	negs	r3, r3
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008cc0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008cc8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008cd6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ce0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3760      	adds	r7, #96	; 0x60
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008cec:	b490      	push	{r4, r7}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008cf8:	f240 6377 	movw	r3, #1655	; 0x677
 8008cfc:	f04f 0400 	mov.w	r4, #0
 8008d00:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8008d04:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008d08:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	fb02 f303 	mul.w	r3, r2, r3
 8008d18:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bc90      	pop	{r4, r7}
 8008d24:	4770      	bx	lr

08008d26 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b087      	sub	sp, #28
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d017      	beq.n	8008d70 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008d46:	e005      	b.n	8008d54 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	085b      	lsrs	r3, r3, #1
 8008d4c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008d4e:	89fb      	ldrh	r3, [r7, #14]
 8008d50:	3301      	adds	r3, #1
 8008d52:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1f4      	bne.n	8008d48 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008d5e:	89fb      	ldrh	r3, [r7, #14]
 8008d60:	021b      	lsls	r3, r3, #8
 8008d62:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008d6c:	4413      	add	r3, r2
 8008d6e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008d70:	8afb      	ldrh	r3, [r7, #22]

}
 8008d72:	4618      	mov	r0, r3
 8008d74:	371c      	adds	r7, #28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	4603      	mov	r3, r0
 8008d86:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008d8c:	88fb      	ldrh	r3, [r7, #6]
 8008d8e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008d90:	88fa      	ldrh	r2, [r7, #6]
 8008d92:	0a12      	lsrs	r2, r2, #8
 8008d94:	b292      	uxth	r2, r2
 8008d96:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008d98:	3301      	adds	r3, #1
 8008d9a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
	...

08008dac <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f7ff ff92 	bl	8008cec <VL53L0X_calc_macro_period_ps>
 8008dc8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008dd0:	4a0a      	ldr	r2, [pc, #40]	; (8008dfc <VL53L0X_calc_timeout_mclks+0x50>)
 8008dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd6:	099b      	lsrs	r3, r3, #6
 8008dd8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008de0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	441a      	add	r2, r3
	timeout_period_mclks =
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008df2:	69fb      	ldr	r3, [r7, #28]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3720      	adds	r7, #32
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	10624dd3 	.word	0x10624dd3

08008e00 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	807b      	strh	r3, [r7, #2]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008e14:	787b      	ldrb	r3, [r7, #1]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff ff67 	bl	8008cec <VL53L0X_calc_macro_period_ps>
 8008e1e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e26:	4a0a      	ldr	r2, [pc, #40]	; (8008e50 <VL53L0X_calc_timeout_us+0x50>)
 8008e28:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2c:	099b      	lsrs	r3, r3, #6
 8008e2e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008e30:	887b      	ldrh	r3, [r7, #2]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	fb02 f303 	mul.w	r3, r2, r3
 8008e38:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8008e3c:	4a04      	ldr	r2, [pc, #16]	; (8008e50 <VL53L0X_calc_timeout_us+0x50>)
 8008e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e42:	099b      	lsrs	r3, r3, #6
 8008e44:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8008e46:	697b      	ldr	r3, [r7, #20]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3718      	adds	r7, #24
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	10624dd3 	.word	0x10624dd3

08008e54 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08c      	sub	sp, #48	; 0x30
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008e7a:	7afb      	ldrb	r3, [r7, #11]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <get_sequence_step_timeout+0x38>
 8008e80:	7afb      	ldrb	r3, [r7, #11]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d002      	beq.n	8008e8c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008e86:	7afb      	ldrb	r3, [r7, #11]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d128      	bne.n	8008ede <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008e8c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008e90:	461a      	mov	r2, r3
 8008e92:	2100      	movs	r1, #0
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f7fd fa7d 	bl	8006394 <VL53L0X_GetVcselPulsePeriod>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008ea0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008ea8:	f107 0320 	add.w	r3, r7, #32
 8008eac:	461a      	mov	r2, r3
 8008eae:	2146      	movs	r1, #70	; 0x46
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f001 fd95 	bl	800a9e0 <VL53L0X_RdByte>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8008ebc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff ff5b 	bl	8008d7e <VL53L0X_decode_timeout>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008ecc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008ed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff ff93 	bl	8008e00 <VL53L0X_calc_timeout_us>
 8008eda:	62b8      	str	r0, [r7, #40]	; 0x28
 8008edc:	e092      	b.n	8009004 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008ede:	7afb      	ldrb	r3, [r7, #11]
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d135      	bne.n	8008f50 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008ee4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008ee8:	461a      	mov	r2, r3
 8008eea:	2100      	movs	r1, #0
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7fd fa51 	bl	8006394 <VL53L0X_GetVcselPulsePeriod>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008ef8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f040 8081 	bne.w	8009004 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008f02:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008f06:	461a      	mov	r2, r3
 8008f08:	2100      	movs	r1, #0
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f7fd fa42 	bl	8006394 <VL53L0X_GetVcselPulsePeriod>
 8008f10:	4603      	mov	r3, r0
 8008f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008f16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d109      	bne.n	8008f32 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8008f1e:	f107 031e 	add.w	r3, r7, #30
 8008f22:	461a      	mov	r2, r3
 8008f24:	2151      	movs	r1, #81	; 0x51
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f001 fd84 	bl	800aa34 <VL53L0X_RdWord>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008f32:	8bfb      	ldrh	r3, [r7, #30]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff ff22 	bl	8008d7e <VL53L0X_decode_timeout>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008f3e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008f42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f44:	4619      	mov	r1, r3
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7ff ff5a 	bl	8008e00 <VL53L0X_calc_timeout_us>
 8008f4c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f4e:	e059      	b.n	8009004 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	2b04      	cmp	r3, #4
 8008f54:	d156      	bne.n	8009004 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008f56:	f107 0314 	add.w	r3, r7, #20
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f7fd fb25 	bl	80065ac <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01d      	beq.n	8008fa8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008f6c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008f70:	461a      	mov	r2, r3
 8008f72:	2100      	movs	r1, #0
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7fd fa0d 	bl	8006394 <VL53L0X_GetVcselPulsePeriod>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8008f80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10f      	bne.n	8008fa8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8008f88:	f107 031e 	add.w	r3, r7, #30
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	2151      	movs	r1, #81	; 0x51
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f001 fd4f 	bl	800aa34 <VL53L0X_RdWord>
 8008f96:	4603      	mov	r3, r0
 8008f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008f9c:	8bfb      	ldrh	r3, [r7, #30]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff feed 	bl	8008d7e <VL53L0X_decode_timeout>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008fa8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d109      	bne.n	8008fc4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008fb0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f7fd f9eb 	bl	8006394 <VL53L0X_GetVcselPulsePeriod>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008fc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10f      	bne.n	8008fec <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8008fcc:	f107 031c 	add.w	r3, r7, #28
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	2171      	movs	r1, #113	; 0x71
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f001 fd2d 	bl	800aa34 <VL53L0X_RdWord>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008fe0:	8bbb      	ldrh	r3, [r7, #28]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7ff fecb 	bl	8008d7e <VL53L0X_decode_timeout>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8008fec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008fee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008ff4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff feff 	bl	8008e00 <VL53L0X_calc_timeout_us>
 8009002:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009008:	601a      	str	r2, [r3, #0]

	return Status;
 800900a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800900e:	4618      	mov	r0, r3
 8009010:	3730      	adds	r7, #48	; 0x30
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b08a      	sub	sp, #40	; 0x28
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	460b      	mov	r3, r1
 8009020:	607a      	str	r2, [r7, #4]
 8009022:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009024:	2300      	movs	r3, #0
 8009026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800902a:	7afb      	ldrb	r3, [r7, #11]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <set_sequence_step_timeout+0x26>
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d002      	beq.n	800903c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	2b02      	cmp	r3, #2
 800903a:	d138      	bne.n	80090ae <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800903c:	f107 031b 	add.w	r3, r7, #27
 8009040:	461a      	mov	r2, r3
 8009042:	2100      	movs	r1, #0
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f7fd f9a5 	bl	8006394 <VL53L0X_GetVcselPulsePeriod>
 800904a:	4603      	mov	r3, r0
 800904c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009050:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009054:	2b00      	cmp	r3, #0
 8009056:	d11a      	bne.n	800908e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009058:	7efb      	ldrb	r3, [r7, #27]
 800905a:	461a      	mov	r2, r3
 800905c:	6879      	ldr	r1, [r7, #4]
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff fea4 	bl	8008dac <VL53L0X_calc_timeout_mclks>
 8009064:	4603      	mov	r3, r0
 8009066:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009068:	8bbb      	ldrh	r3, [r7, #28]
 800906a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800906e:	d903      	bls.n	8009078 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009070:	23ff      	movs	r3, #255	; 0xff
 8009072:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009076:	e004      	b.n	8009082 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009078:	8bbb      	ldrh	r3, [r7, #28]
 800907a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800907c:	3b01      	subs	r3, #1
 800907e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009082:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009086:	b29a      	uxth	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800908e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009092:	2b00      	cmp	r3, #0
 8009094:	f040 80ab 	bne.w	80091ee <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800909c:	461a      	mov	r2, r3
 800909e:	2146      	movs	r1, #70	; 0x46
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f001 fc1b 	bl	800a8dc <VL53L0X_WrByte>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80090ac:	e09f      	b.n	80091ee <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d135      	bne.n	8009120 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80090b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d11b      	bne.n	80090f4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80090bc:	f107 031b 	add.w	r3, r7, #27
 80090c0:	461a      	mov	r2, r3
 80090c2:	2100      	movs	r1, #0
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f7fd f965 	bl	8006394 <VL53L0X_GetVcselPulsePeriod>
 80090ca:	4603      	mov	r3, r0
 80090cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80090d0:	7efb      	ldrb	r3, [r7, #27]
 80090d2:	461a      	mov	r2, r3
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f7ff fe68 	bl	8008dac <VL53L0X_calc_timeout_mclks>
 80090dc:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80090de:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80090e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff fe1f 	bl	8008d26 <VL53L0X_encode_timeout>
 80090e8:	4603      	mov	r3, r0
 80090ea:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80090ec:	8b3a      	ldrh	r2, [r7, #24]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80090f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d108      	bne.n	800910e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80090fc:	8b3b      	ldrh	r3, [r7, #24]
 80090fe:	461a      	mov	r2, r3
 8009100:	2151      	movs	r1, #81	; 0x51
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f001 fc0e 	bl	800a924 <VL53L0X_WrWord>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800910e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009112:	2b00      	cmp	r3, #0
 8009114:	d16b      	bne.n	80091ee <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800911e:	e066      	b.n	80091ee <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009120:	7afb      	ldrb	r3, [r7, #11]
 8009122:	2b04      	cmp	r3, #4
 8009124:	d160      	bne.n	80091e8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009126:	f107 0310 	add.w	r3, r7, #16
 800912a:	4619      	mov	r1, r3
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f7fd fa3d 	bl	80065ac <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009136:	7cfb      	ldrb	r3, [r7, #19]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d01d      	beq.n	8009178 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800913c:	f107 031b 	add.w	r3, r7, #27
 8009140:	461a      	mov	r2, r3
 8009142:	2100      	movs	r1, #0
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7fd f925 	bl	8006394 <VL53L0X_GetVcselPulsePeriod>
 800914a:	4603      	mov	r3, r0
 800914c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009150:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10f      	bne.n	8009178 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009158:	f107 0318 	add.w	r3, r7, #24
 800915c:	461a      	mov	r2, r3
 800915e:	2151      	movs	r1, #81	; 0x51
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f001 fc67 	bl	800aa34 <VL53L0X_RdWord>
 8009166:	4603      	mov	r3, r0
 8009168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800916c:	8b3b      	ldrh	r3, [r7, #24]
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff fe05 	bl	8008d7e <VL53L0X_decode_timeout>
 8009174:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009176:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009178:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800917c:	2b00      	cmp	r3, #0
 800917e:	d109      	bne.n	8009194 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009180:	f107 031b 	add.w	r3, r7, #27
 8009184:	461a      	mov	r2, r3
 8009186:	2101      	movs	r1, #1
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f7fd f903 	bl	8006394 <VL53L0X_GetVcselPulsePeriod>
 800918e:	4603      	mov	r3, r0
 8009190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009194:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009198:	2b00      	cmp	r3, #0
 800919a:	d128      	bne.n	80091ee <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800919c:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800919e:	461a      	mov	r2, r3
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7ff fe02 	bl	8008dac <VL53L0X_calc_timeout_mclks>
 80091a8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80091aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091ac:	6a3a      	ldr	r2, [r7, #32]
 80091ae:	4413      	add	r3, r2
 80091b0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 80091b2:	6a38      	ldr	r0, [r7, #32]
 80091b4:	f7ff fdb7 	bl	8008d26 <VL53L0X_encode_timeout>
 80091b8:	4603      	mov	r3, r0
 80091ba:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 80091bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d108      	bne.n	80091d6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80091c4:	8bfb      	ldrh	r3, [r7, #30]
 80091c6:	461a      	mov	r2, r3
 80091c8:	2171      	movs	r1, #113	; 0x71
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f001 fbaa 	bl	800a924 <VL53L0X_WrWord>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80091d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d107      	bne.n	80091ee <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80091e6:	e002      	b.n	80091ee <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80091e8:	23fc      	movs	r3, #252	; 0xfc
 80091ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80091ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3728      	adds	r7, #40	; 0x28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b08a      	sub	sp, #40	; 0x28
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	460b      	mov	r3, r1
 8009204:	70fb      	strb	r3, [r7, #3]
 8009206:	4613      	mov	r3, r2
 8009208:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800920a:	2300      	movs	r3, #0
 800920c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009210:	230c      	movs	r3, #12
 8009212:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009216:	2312      	movs	r3, #18
 8009218:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800921c:	2308      	movs	r3, #8
 800921e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009222:	230e      	movs	r3, #14
 8009224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800922c:	78bb      	ldrb	r3, [r7, #2]
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d003      	beq.n	8009240 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009238:	23fc      	movs	r3, #252	; 0xfc
 800923a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800923e:	e020      	b.n	8009282 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10d      	bne.n	8009262 <VL53L0X_set_vcsel_pulse_period+0x68>
 8009246:	78ba      	ldrb	r2, [r7, #2]
 8009248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800924c:	429a      	cmp	r2, r3
 800924e:	d304      	bcc.n	800925a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009250:	78ba      	ldrb	r2, [r7, #2]
 8009252:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009256:	429a      	cmp	r2, r3
 8009258:	d903      	bls.n	8009262 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800925a:	23fc      	movs	r3, #252	; 0xfc
 800925c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009260:	e00f      	b.n	8009282 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8009262:	78fb      	ldrb	r3, [r7, #3]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d10c      	bne.n	8009282 <VL53L0X_set_vcsel_pulse_period+0x88>
 8009268:	78ba      	ldrb	r2, [r7, #2]
 800926a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800926e:	429a      	cmp	r2, r3
 8009270:	d304      	bcc.n	800927c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8009272:	78ba      	ldrb	r2, [r7, #2]
 8009274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009278:	429a      	cmp	r2, r3
 800927a:	d902      	bls.n	8009282 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800927c:	23fc      	movs	r3, #252	; 0xfc
 800927e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8009282:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800928a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800928e:	e239      	b.n	8009704 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d150      	bne.n	8009338 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009296:	78bb      	ldrb	r3, [r7, #2]
 8009298:	2b0c      	cmp	r3, #12
 800929a:	d110      	bne.n	80092be <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800929c:	2218      	movs	r2, #24
 800929e:	2157      	movs	r1, #87	; 0x57
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 fb1b 	bl	800a8dc <VL53L0X_WrByte>
 80092a6:	4603      	mov	r3, r0
 80092a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80092ac:	2208      	movs	r2, #8
 80092ae:	2156      	movs	r1, #86	; 0x56
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 fb13 	bl	800a8dc <VL53L0X_WrByte>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80092bc:	e17f      	b.n	80095be <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80092be:	78bb      	ldrb	r3, [r7, #2]
 80092c0:	2b0e      	cmp	r3, #14
 80092c2:	d110      	bne.n	80092e6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80092c4:	2230      	movs	r2, #48	; 0x30
 80092c6:	2157      	movs	r1, #87	; 0x57
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fb07 	bl	800a8dc <VL53L0X_WrByte>
 80092ce:	4603      	mov	r3, r0
 80092d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80092d4:	2208      	movs	r2, #8
 80092d6:	2156      	movs	r1, #86	; 0x56
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 faff 	bl	800a8dc <VL53L0X_WrByte>
 80092de:	4603      	mov	r3, r0
 80092e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80092e4:	e16b      	b.n	80095be <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80092e6:	78bb      	ldrb	r3, [r7, #2]
 80092e8:	2b10      	cmp	r3, #16
 80092ea:	d110      	bne.n	800930e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80092ec:	2240      	movs	r2, #64	; 0x40
 80092ee:	2157      	movs	r1, #87	; 0x57
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f001 faf3 	bl	800a8dc <VL53L0X_WrByte>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80092fc:	2208      	movs	r2, #8
 80092fe:	2156      	movs	r1, #86	; 0x56
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 faeb 	bl	800a8dc <VL53L0X_WrByte>
 8009306:	4603      	mov	r3, r0
 8009308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800930c:	e157      	b.n	80095be <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800930e:	78bb      	ldrb	r3, [r7, #2]
 8009310:	2b12      	cmp	r3, #18
 8009312:	f040 8154 	bne.w	80095be <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009316:	2250      	movs	r2, #80	; 0x50
 8009318:	2157      	movs	r1, #87	; 0x57
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 fade 	bl	800a8dc <VL53L0X_WrByte>
 8009320:	4603      	mov	r3, r0
 8009322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009326:	2208      	movs	r2, #8
 8009328:	2156      	movs	r1, #86	; 0x56
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 fad6 	bl	800a8dc <VL53L0X_WrByte>
 8009330:	4603      	mov	r3, r0
 8009332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009336:	e142      	b.n	80095be <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	2b01      	cmp	r3, #1
 800933c:	f040 813f 	bne.w	80095be <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009340:	78bb      	ldrb	r3, [r7, #2]
 8009342:	2b08      	cmp	r3, #8
 8009344:	d14c      	bne.n	80093e0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009346:	2210      	movs	r2, #16
 8009348:	2148      	movs	r1, #72	; 0x48
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f001 fac6 	bl	800a8dc <VL53L0X_WrByte>
 8009350:	4603      	mov	r3, r0
 8009352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009356:	2208      	movs	r2, #8
 8009358:	2147      	movs	r1, #71	; 0x47
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f001 fabe 	bl	800a8dc <VL53L0X_WrByte>
 8009360:	4603      	mov	r3, r0
 8009362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009366:	2202      	movs	r2, #2
 8009368:	2132      	movs	r1, #50	; 0x32
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 fab6 	bl	800a8dc <VL53L0X_WrByte>
 8009370:	4603      	mov	r3, r0
 8009372:	461a      	mov	r2, r3
 8009374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009378:	4313      	orrs	r3, r2
 800937a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800937e:	220c      	movs	r2, #12
 8009380:	2130      	movs	r1, #48	; 0x30
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 faaa 	bl	800a8dc <VL53L0X_WrByte>
 8009388:	4603      	mov	r3, r0
 800938a:	461a      	mov	r2, r3
 800938c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009390:	4313      	orrs	r3, r2
 8009392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009396:	2201      	movs	r2, #1
 8009398:	21ff      	movs	r1, #255	; 0xff
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f001 fa9e 	bl	800a8dc <VL53L0X_WrByte>
 80093a0:	4603      	mov	r3, r0
 80093a2:	461a      	mov	r2, r3
 80093a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093a8:	4313      	orrs	r3, r2
 80093aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80093ae:	2230      	movs	r2, #48	; 0x30
 80093b0:	2130      	movs	r1, #48	; 0x30
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 fa92 	bl	800a8dc <VL53L0X_WrByte>
 80093b8:	4603      	mov	r3, r0
 80093ba:	461a      	mov	r2, r3
 80093bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80093c6:	2200      	movs	r2, #0
 80093c8:	21ff      	movs	r1, #255	; 0xff
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f001 fa86 	bl	800a8dc <VL53L0X_WrByte>
 80093d0:	4603      	mov	r3, r0
 80093d2:	461a      	mov	r2, r3
 80093d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093d8:	4313      	orrs	r3, r2
 80093da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093de:	e0ee      	b.n	80095be <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80093e0:	78bb      	ldrb	r3, [r7, #2]
 80093e2:	2b0a      	cmp	r3, #10
 80093e4:	d14c      	bne.n	8009480 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80093e6:	2228      	movs	r2, #40	; 0x28
 80093e8:	2148      	movs	r1, #72	; 0x48
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f001 fa76 	bl	800a8dc <VL53L0X_WrByte>
 80093f0:	4603      	mov	r3, r0
 80093f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80093f6:	2208      	movs	r2, #8
 80093f8:	2147      	movs	r1, #71	; 0x47
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 fa6e 	bl	800a8dc <VL53L0X_WrByte>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009406:	2203      	movs	r2, #3
 8009408:	2132      	movs	r1, #50	; 0x32
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f001 fa66 	bl	800a8dc <VL53L0X_WrByte>
 8009410:	4603      	mov	r3, r0
 8009412:	461a      	mov	r2, r3
 8009414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009418:	4313      	orrs	r3, r2
 800941a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800941e:	2209      	movs	r2, #9
 8009420:	2130      	movs	r1, #48	; 0x30
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f001 fa5a 	bl	800a8dc <VL53L0X_WrByte>
 8009428:	4603      	mov	r3, r0
 800942a:	461a      	mov	r2, r3
 800942c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009430:	4313      	orrs	r3, r2
 8009432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009436:	2201      	movs	r2, #1
 8009438:	21ff      	movs	r1, #255	; 0xff
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 fa4e 	bl	800a8dc <VL53L0X_WrByte>
 8009440:	4603      	mov	r3, r0
 8009442:	461a      	mov	r2, r3
 8009444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009448:	4313      	orrs	r3, r2
 800944a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800944e:	2220      	movs	r2, #32
 8009450:	2130      	movs	r1, #48	; 0x30
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f001 fa42 	bl	800a8dc <VL53L0X_WrByte>
 8009458:	4603      	mov	r3, r0
 800945a:	461a      	mov	r2, r3
 800945c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009460:	4313      	orrs	r3, r2
 8009462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009466:	2200      	movs	r2, #0
 8009468:	21ff      	movs	r1, #255	; 0xff
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 fa36 	bl	800a8dc <VL53L0X_WrByte>
 8009470:	4603      	mov	r3, r0
 8009472:	461a      	mov	r2, r3
 8009474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009478:	4313      	orrs	r3, r2
 800947a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800947e:	e09e      	b.n	80095be <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009480:	78bb      	ldrb	r3, [r7, #2]
 8009482:	2b0c      	cmp	r3, #12
 8009484:	d14c      	bne.n	8009520 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009486:	2238      	movs	r2, #56	; 0x38
 8009488:	2148      	movs	r1, #72	; 0x48
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 fa26 	bl	800a8dc <VL53L0X_WrByte>
 8009490:	4603      	mov	r3, r0
 8009492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009496:	2208      	movs	r2, #8
 8009498:	2147      	movs	r1, #71	; 0x47
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f001 fa1e 	bl	800a8dc <VL53L0X_WrByte>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80094a6:	2203      	movs	r2, #3
 80094a8:	2132      	movs	r1, #50	; 0x32
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f001 fa16 	bl	800a8dc <VL53L0X_WrByte>
 80094b0:	4603      	mov	r3, r0
 80094b2:	461a      	mov	r2, r3
 80094b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094b8:	4313      	orrs	r3, r2
 80094ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80094be:	2208      	movs	r2, #8
 80094c0:	2130      	movs	r1, #48	; 0x30
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 fa0a 	bl	800a8dc <VL53L0X_WrByte>
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80094d6:	2201      	movs	r2, #1
 80094d8:	21ff      	movs	r1, #255	; 0xff
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 f9fe 	bl	800a8dc <VL53L0X_WrByte>
 80094e0:	4603      	mov	r3, r0
 80094e2:	461a      	mov	r2, r3
 80094e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094e8:	4313      	orrs	r3, r2
 80094ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80094ee:	2220      	movs	r2, #32
 80094f0:	2130      	movs	r1, #48	; 0x30
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 f9f2 	bl	800a8dc <VL53L0X_WrByte>
 80094f8:	4603      	mov	r3, r0
 80094fa:	461a      	mov	r2, r3
 80094fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009500:	4313      	orrs	r3, r2
 8009502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009506:	2200      	movs	r2, #0
 8009508:	21ff      	movs	r1, #255	; 0xff
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 f9e6 	bl	800a8dc <VL53L0X_WrByte>
 8009510:	4603      	mov	r3, r0
 8009512:	461a      	mov	r2, r3
 8009514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009518:	4313      	orrs	r3, r2
 800951a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800951e:	e04e      	b.n	80095be <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009520:	78bb      	ldrb	r3, [r7, #2]
 8009522:	2b0e      	cmp	r3, #14
 8009524:	d14b      	bne.n	80095be <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009526:	2248      	movs	r2, #72	; 0x48
 8009528:	2148      	movs	r1, #72	; 0x48
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 f9d6 	bl	800a8dc <VL53L0X_WrByte>
 8009530:	4603      	mov	r3, r0
 8009532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009536:	2208      	movs	r2, #8
 8009538:	2147      	movs	r1, #71	; 0x47
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 f9ce 	bl	800a8dc <VL53L0X_WrByte>
 8009540:	4603      	mov	r3, r0
 8009542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009546:	2203      	movs	r2, #3
 8009548:	2132      	movs	r1, #50	; 0x32
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 f9c6 	bl	800a8dc <VL53L0X_WrByte>
 8009550:	4603      	mov	r3, r0
 8009552:	461a      	mov	r2, r3
 8009554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009558:	4313      	orrs	r3, r2
 800955a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800955e:	2207      	movs	r2, #7
 8009560:	2130      	movs	r1, #48	; 0x30
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 f9ba 	bl	800a8dc <VL53L0X_WrByte>
 8009568:	4603      	mov	r3, r0
 800956a:	461a      	mov	r2, r3
 800956c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009570:	4313      	orrs	r3, r2
 8009572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009576:	2201      	movs	r2, #1
 8009578:	21ff      	movs	r1, #255	; 0xff
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 f9ae 	bl	800a8dc <VL53L0X_WrByte>
 8009580:	4603      	mov	r3, r0
 8009582:	461a      	mov	r2, r3
 8009584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009588:	4313      	orrs	r3, r2
 800958a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800958e:	2220      	movs	r2, #32
 8009590:	2130      	movs	r1, #48	; 0x30
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 f9a2 	bl	800a8dc <VL53L0X_WrByte>
 8009598:	4603      	mov	r3, r0
 800959a:	461a      	mov	r2, r3
 800959c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095a0:	4313      	orrs	r3, r2
 80095a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80095a6:	2200      	movs	r2, #0
 80095a8:	21ff      	movs	r1, #255	; 0xff
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 f996 	bl	800a8dc <VL53L0X_WrByte>
 80095b0:	4603      	mov	r3, r0
 80095b2:	461a      	mov	r2, r3
 80095b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b8:	4313      	orrs	r3, r2
 80095ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80095be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d17f      	bne.n	80096c6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80095c6:	78bb      	ldrb	r3, [r7, #2]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe fe38 	bl	800823e <VL53L0X_encode_vcsel_period>
 80095ce:	4603      	mov	r3, r0
 80095d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d045      	beq.n	800966a <VL53L0X_set_vcsel_pulse_period+0x470>
 80095de:	e06e      	b.n	80096be <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80095e0:	f107 0314 	add.w	r3, r7, #20
 80095e4:	461a      	mov	r2, r3
 80095e6:	2103      	movs	r1, #3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7ff fc33 	bl	8008e54 <get_sequence_step_timeout>
 80095ee:	4603      	mov	r3, r0
 80095f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80095f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d109      	bne.n	8009610 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80095fc:	f107 0310 	add.w	r3, r7, #16
 8009600:	461a      	mov	r2, r3
 8009602:	2102      	movs	r1, #2
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7ff fc25 	bl	8008e54 <get_sequence_step_timeout>
 800960a:	4603      	mov	r3, r0
 800960c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009610:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009614:	2b00      	cmp	r3, #0
 8009616:	d109      	bne.n	800962c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009618:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800961c:	461a      	mov	r2, r3
 800961e:	2150      	movs	r1, #80	; 0x50
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f001 f95b 	bl	800a8dc <VL53L0X_WrByte>
 8009626:	4603      	mov	r3, r0
 8009628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800962c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009630:	2b00      	cmp	r3, #0
 8009632:	d108      	bne.n	8009646 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	461a      	mov	r2, r3
 8009638:	2103      	movs	r1, #3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7ff fceb 	bl	8009016 <set_sequence_step_timeout>
 8009640:	4603      	mov	r3, r0
 8009642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009646:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800964a:	2b00      	cmp	r3, #0
 800964c:	d108      	bne.n	8009660 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	461a      	mov	r2, r3
 8009652:	2102      	movs	r1, #2
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7ff fcde 	bl	8009016 <set_sequence_step_timeout>
 800965a:	4603      	mov	r3, r0
 800965c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	78ba      	ldrb	r2, [r7, #2]
 8009664:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009668:	e02e      	b.n	80096c8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800966a:	f107 0318 	add.w	r3, r7, #24
 800966e:	461a      	mov	r2, r3
 8009670:	2104      	movs	r1, #4
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff fbee 	bl	8008e54 <get_sequence_step_timeout>
 8009678:	4603      	mov	r3, r0
 800967a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800967e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009682:	2b00      	cmp	r3, #0
 8009684:	d109      	bne.n	800969a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009686:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800968a:	461a      	mov	r2, r3
 800968c:	2170      	movs	r1, #112	; 0x70
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 f924 	bl	800a8dc <VL53L0X_WrByte>
 8009694:	4603      	mov	r3, r0
 8009696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800969a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d108      	bne.n	80096b4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	461a      	mov	r2, r3
 80096a6:	2104      	movs	r1, #4
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff fcb4 	bl	8009016 <set_sequence_step_timeout>
 80096ae:	4603      	mov	r3, r0
 80096b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	78ba      	ldrb	r2, [r7, #2]
 80096b8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80096bc:	e004      	b.n	80096c8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096be:	23fc      	movs	r3, #252	; 0xfc
 80096c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096c4:	e000      	b.n	80096c8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80096c6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80096c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d109      	bne.n	80096e4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80096d6:	69f9      	ldr	r1, [r7, #28]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7fc fe1d 	bl	8006318 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80096de:	4603      	mov	r3, r0
 80096e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80096e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d109      	bne.n	8009700 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80096ec:	f107 010f 	add.w	r1, r7, #15
 80096f0:	2301      	movs	r3, #1
 80096f2:	2200      	movs	r2, #0
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7fe fcbd 	bl	8008074 <VL53L0X_perform_phase_calibration>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009700:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009704:	4618      	mov	r0, r3
 8009706:	3728      	adds	r7, #40	; 0x28
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	460b      	mov	r3, r1
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800971a:	2300      	movs	r3, #0
 800971c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800971e:	7afb      	ldrb	r3, [r7, #11]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009724:	2b01      	cmp	r3, #1
 8009726:	d00a      	beq.n	800973e <VL53L0X_get_vcsel_pulse_period+0x32>
 8009728:	e013      	b.n	8009752 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800972a:	f107 0316 	add.w	r3, r7, #22
 800972e:	461a      	mov	r2, r3
 8009730:	2150      	movs	r1, #80	; 0x50
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f001 f954 	bl	800a9e0 <VL53L0X_RdByte>
 8009738:	4603      	mov	r3, r0
 800973a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800973c:	e00b      	b.n	8009756 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800973e:	f107 0316 	add.w	r3, r7, #22
 8009742:	461a      	mov	r2, r3
 8009744:	2170      	movs	r1, #112	; 0x70
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f001 f94a 	bl	800a9e0 <VL53L0X_RdByte>
 800974c:	4603      	mov	r3, r0
 800974e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009750:	e001      	b.n	8009756 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009752:	23fc      	movs	r3, #252	; 0xfc
 8009754:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009756:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d107      	bne.n	800976e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800975e:	7dbb      	ldrb	r3, [r7, #22]
 8009760:	4618      	mov	r0, r3
 8009762:	f7fe fd59 	bl	8008218 <VL53L0X_decode_vcsel_period>
 8009766:	4603      	mov	r3, r0
 8009768:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	701a      	strb	r2, [r3, #0]

	return Status;
 800976e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b092      	sub	sp, #72	; 0x48
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009784:	2300      	movs	r3, #0
 8009786:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800978a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800978e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009790:	f240 7376 	movw	r3, #1910	; 0x776
 8009794:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009796:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800979a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800979c:	f44f 7325 	mov.w	r3, #660	; 0x294
 80097a0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80097a2:	f240 234e 	movw	r3, #590	; 0x24e
 80097a6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80097a8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80097ae:	f44f 7325 	mov.w	r3, #660	; 0x294
 80097b2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80097b4:	f240 2326 	movw	r3, #550	; 0x226
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80097be:	f644 6320 	movw	r3, #20000	; 0x4e20
 80097c2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d205      	bcs.n	80097dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80097d0:	23fc      	movs	r3, #252	; 0xfc
 80097d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80097d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80097da:	e0aa      	b.n	8009932 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80097dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80097e8:	f107 0314 	add.w	r3, r7, #20
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7fc fedc 	bl	80065ac <VL53L0X_GetSequenceStepEnables>
 80097f4:	4603      	mov	r3, r0
 80097f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80097fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d15b      	bne.n	80098ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009802:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009804:	2b00      	cmp	r3, #0
 8009806:	d105      	bne.n	8009814 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009808:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800980e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009810:	2b00      	cmp	r3, #0
 8009812:	d052      	beq.n	80098ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009814:	f107 0310 	add.w	r3, r7, #16
 8009818:	461a      	mov	r2, r3
 800981a:	2102      	movs	r1, #2
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff fb19 	bl	8008e54 <get_sequence_step_timeout>
 8009822:	4603      	mov	r3, r0
 8009824:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009828:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009830:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009834:	e07d      	b.n	8009932 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009836:	7d3b      	ldrb	r3, [r7, #20]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00f      	beq.n	800985c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800983c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800983e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009840:	4413      	add	r3, r2
 8009842:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009844:	69fa      	ldr	r2, [r7, #28]
 8009846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009848:	429a      	cmp	r2, r3
 800984a:	d204      	bcs.n	8009856 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800984c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	643b      	str	r3, [r7, #64]	; 0x40
 8009854:	e002      	b.n	800985c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009856:	23fc      	movs	r3, #252	; 0xfc
 8009858:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800985c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009864:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009868:	e063      	b.n	8009932 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800986a:	7dbb      	ldrb	r3, [r7, #22]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d011      	beq.n	8009894 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009874:	4413      	add	r3, r2
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800987a:	69fa      	ldr	r2, [r7, #28]
 800987c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800987e:	429a      	cmp	r2, r3
 8009880:	d204      	bcs.n	800988c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	643b      	str	r3, [r7, #64]	; 0x40
 800988a:	e016      	b.n	80098ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800988c:	23fc      	movs	r3, #252	; 0xfc
 800988e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009892:	e012      	b.n	80098ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009894:	7d7b      	ldrb	r3, [r7, #21]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00f      	beq.n	80098ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800989e:	4413      	add	r3, r2
 80098a0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80098a2:	69fa      	ldr	r2, [r7, #28]
 80098a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d204      	bcs.n	80098b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80098aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	643b      	str	r3, [r7, #64]	; 0x40
 80098b2:	e002      	b.n	80098ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80098b4:	23fc      	movs	r3, #252	; 0xfc
 80098b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80098ba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d002      	beq.n	80098c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80098c2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80098c6:	e034      	b.n	8009932 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d019      	beq.n	8009902 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80098ce:	f107 030c 	add.w	r3, r7, #12
 80098d2:	461a      	mov	r2, r3
 80098d4:	2103      	movs	r1, #3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7ff fabc 	bl	8008e54 <get_sequence_step_timeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098e6:	4413      	add	r3, r2
 80098e8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80098ea:	69fa      	ldr	r2, [r7, #28]
 80098ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d204      	bcs.n	80098fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80098f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	643b      	str	r3, [r7, #64]	; 0x40
 80098fa:	e002      	b.n	8009902 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80098fc:	23fc      	movs	r3, #252	; 0xfc
 80098fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009902:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009906:	2b00      	cmp	r3, #0
 8009908:	d111      	bne.n	800992e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800990a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00e      	beq.n	800992e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8009918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800991a:	2104      	movs	r1, #4
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7ff fb7a 	bl	8009016 <set_sequence_step_timeout>
 8009922:	4603      	mov	r3, r0
 8009924:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800992e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009932:	4618      	mov	r0, r3
 8009934:	3748      	adds	r7, #72	; 0x48
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b090      	sub	sp, #64	; 0x40
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009944:	2300      	movs	r3, #0
 8009946:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800994a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800994e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009950:	f240 7376 	movw	r3, #1910	; 0x776
 8009954:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009956:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800995a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800995c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009960:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009962:	f240 234e 	movw	r3, #590	; 0x24e
 8009966:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009968:	f240 23b2 	movw	r3, #690	; 0x2b2
 800996c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800996e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009972:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009974:	f240 2326 	movw	r3, #550	; 0x226
 8009978:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800997a:	2300      	movs	r3, #0
 800997c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800997e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009982:	441a      	add	r2, r3
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009988:	f107 0318 	add.w	r3, r7, #24
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7fc fe0c 	bl	80065ac <VL53L0X_GetSequenceStepEnables>
 8009994:	4603      	mov	r3, r0
 8009996:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800999a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80099a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80099a6:	e075      	b.n	8009a94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80099a8:	7e3b      	ldrb	r3, [r7, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d105      	bne.n	80099ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80099ae:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80099b4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d030      	beq.n	8009a1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80099ba:	f107 0310 	add.w	r3, r7, #16
 80099be:	461a      	mov	r2, r3
 80099c0:	2102      	movs	r1, #2
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff fa46 	bl	8008e54 <get_sequence_step_timeout>
 80099c8:	4603      	mov	r3, r0
 80099ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80099ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d122      	bne.n	8009a1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80099d6:	7e3b      	ldrb	r3, [r7, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d007      	beq.n	80099ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80099e0:	6939      	ldr	r1, [r7, #16]
 80099e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80099e6:	441a      	add	r2, r3
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80099ec:	7ebb      	ldrb	r3, [r7, #26]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d009      	beq.n	8009a06 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80099f6:	6939      	ldr	r1, [r7, #16]
 80099f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fa:	440b      	add	r3, r1
 80099fc:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80099fe:	441a      	add	r2, r3
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	e00a      	b.n	8009a1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009a06:	7e7b      	ldrb	r3, [r7, #25]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d007      	beq.n	8009a1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009a10:	6939      	ldr	r1, [r7, #16]
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009a16:	441a      	add	r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009a1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d114      	bne.n	8009a4e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009a24:	7efb      	ldrb	r3, [r7, #27]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d011      	beq.n	8009a4e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009a2a:	f107 030c 	add.w	r3, r7, #12
 8009a2e:	461a      	mov	r2, r3
 8009a30:	2103      	movs	r1, #3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff fa0e 	bl	8008e54 <get_sequence_step_timeout>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8009a42:	68f9      	ldr	r1, [r7, #12]
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009a48:	441a      	add	r2, r3
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009a4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d114      	bne.n	8009a80 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009a56:	7f3b      	ldrb	r3, [r7, #28]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d011      	beq.n	8009a80 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009a5c:	f107 0314 	add.w	r3, r7, #20
 8009a60:	461a      	mov	r2, r3
 8009a62:	2104      	movs	r1, #4
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff f9f5 	bl	8008e54 <get_sequence_step_timeout>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009a74:	6979      	ldr	r1, [r7, #20]
 8009a76:	6a3b      	ldr	r3, [r7, #32]
 8009a78:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009a7a:	441a      	add	r2, r3
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009a80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d103      	bne.n	8009a90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3740      	adds	r7, #64	; 0x40
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b088      	sub	sp, #32
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009aae:	e0c6      	b.n	8009c3e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	74fb      	strb	r3, [r7, #19]
		Index++;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	3301      	adds	r3, #1
 8009abe:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8009ac0:	7cfb      	ldrb	r3, [r7, #19]
 8009ac2:	2bff      	cmp	r3, #255	; 0xff
 8009ac4:	f040 808d 	bne.w	8009be2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	4413      	add	r3, r2
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	747b      	strb	r3, [r7, #17]
			Index++;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009ad8:	7c7b      	ldrb	r3, [r7, #17]
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d87e      	bhi.n	8009bdc <VL53L0X_load_tuning_settings+0x140>
 8009ade:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <VL53L0X_load_tuning_settings+0x48>)
 8009ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae4:	08009af5 	.word	0x08009af5
 8009ae8:	08009b2f 	.word	0x08009b2f
 8009aec:	08009b69 	.word	0x08009b69
 8009af0:	08009ba3 	.word	0x08009ba3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	4413      	add	r3, r2
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	743b      	strb	r3, [r7, #16]
				Index++;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	3301      	adds	r3, #1
 8009b02:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	4413      	add	r3, r2
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	3301      	adds	r3, #1
 8009b12:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009b14:	7c3b      	ldrb	r3, [r7, #16]
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	4413      	add	r3, r2
 8009b22:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	89ba      	ldrh	r2, [r7, #12]
 8009b28:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009b2c:	e087      	b.n	8009c3e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	4413      	add	r3, r2
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	743b      	strb	r3, [r7, #16]
				Index++;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	4413      	add	r3, r2
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009b4e:	7c3b      	ldrb	r3, [r7, #16]
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	021b      	lsls	r3, r3, #8
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	4413      	add	r3, r2
 8009b5c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	89ba      	ldrh	r2, [r7, #12]
 8009b62:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009b66:	e06a      	b.n	8009c3e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	743b      	strb	r3, [r7, #16]
				Index++;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	3301      	adds	r3, #1
 8009b76:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	3301      	adds	r3, #1
 8009b86:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009b88:	7c3b      	ldrb	r3, [r7, #16]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	021b      	lsls	r3, r3, #8
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	4413      	add	r3, r2
 8009b96:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	89ba      	ldrh	r2, [r7, #12]
 8009b9c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8009ba0:	e04d      	b.n	8009c3e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	683a      	ldr	r2, [r7, #0]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	743b      	strb	r3, [r7, #16]
				Index++;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009bc2:	7c3b      	ldrb	r3, [r7, #16]
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	021b      	lsls	r3, r3, #8
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	4413      	add	r3, r2
 8009bd0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	89ba      	ldrh	r2, [r7, #12]
 8009bd6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8009bda:	e030      	b.n	8009c3e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009bdc:	23fc      	movs	r3, #252	; 0xfc
 8009bde:	77fb      	strb	r3, [r7, #31]
 8009be0:	e02d      	b.n	8009c3e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8009be2:	7cfb      	ldrb	r3, [r7, #19]
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d828      	bhi.n	8009c3a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	4413      	add	r3, r2
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	61bb      	str	r3, [r7, #24]
 8009bfc:	e00f      	b.n	8009c1e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	4413      	add	r3, r2
 8009c04:	7819      	ldrb	r1, [r3, #0]
 8009c06:	f107 0208 	add.w	r2, r7, #8
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	460a      	mov	r2, r1
 8009c10:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	3301      	adds	r3, #1
 8009c16:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	61bb      	str	r3, [r7, #24]
 8009c1e:	7cfb      	ldrb	r3, [r7, #19]
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	dbeb      	blt.n	8009bfe <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009c26:	7cfb      	ldrb	r3, [r7, #19]
 8009c28:	f107 0208 	add.w	r2, r7, #8
 8009c2c:	7cb9      	ldrb	r1, [r7, #18]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fdf8 	bl	800a824 <VL53L0X_WriteMulti>
 8009c34:	4603      	mov	r3, r0
 8009c36:	77fb      	strb	r3, [r7, #31]
 8009c38:	e001      	b.n	8009c3e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009c3a:	23fc      	movs	r3, #252	; 0xfc
 8009c3c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	683a      	ldr	r2, [r7, #0]
 8009c42:	4413      	add	r3, r2
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d004      	beq.n	8009c54 <VL53L0X_load_tuning_settings+0x1b8>
 8009c4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f43f af2e 	beq.w	8009ab0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3720      	adds	r7, #32
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009c76:	f107 0313 	add.w	r3, r7, #19
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f7fc fd21 	bl	80066c4 <VL53L0X_GetXTalkCompensationEnable>
 8009c82:	4603      	mov	r3, r0
 8009c84:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009c86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d111      	bne.n	8009cb2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8009c8e:	7cfb      	ldrb	r3, [r7, #19]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00e      	beq.n	8009cb2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	8a9b      	ldrh	r3, [r3, #20]
 8009c9e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	fb02 f303 	mul.w	r3, r2, r3
 8009ca6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	3380      	adds	r3, #128	; 0x80
 8009cac:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8009cb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3720      	adds	r7, #32
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b086      	sub	sp, #24
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	60b9      	str	r1, [r7, #8]
 8009cc8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009cd6:	f107 0310 	add.w	r3, r7, #16
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68b9      	ldr	r1, [r7, #8]
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f7ff ffbe 	bl	8009c60 <VL53L0X_get_total_xtalk_rate>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d105      	bne.n	8009cfc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	441a      	add	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	601a      	str	r2, [r3, #0]

	return Status;
 8009cfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3718      	adds	r7, #24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b09a      	sub	sp, #104	; 0x68
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009d16:	2312      	movs	r3, #18
 8009d18:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8009d1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d1e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009d20:	2342      	movs	r3, #66	; 0x42
 8009d22:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009d24:	2306      	movs	r3, #6
 8009d26:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009d28:	2307      	movs	r3, #7
 8009d2a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8009d38:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009d40:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8009d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d46:	fb02 f303 	mul.w	r3, r2, r3
 8009d4a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d4e:	3380      	adds	r3, #128	; 0x80
 8009d50:	0a1b      	lsrs	r3, r3, #8
 8009d52:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d58:	fb02 f303 	mul.w	r3, r2, r3
 8009d5c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01b      	beq.n	8009da0 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	029b      	lsls	r3, r3, #10
 8009d6c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8009d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d74:	4413      	add	r3, r2
 8009d76:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8009d78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d80:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8009d82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009d84:	4613      	mov	r3, r2
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	4413      	add	r3, r2
 8009d8a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8009d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009d90:	fb02 f303 	mul.w	r3, r2, r3
 8009d94:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8009d96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009d9c:	0c1b      	lsrs	r3, r3, #16
 8009d9e:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009da4:	fb02 f303 	mul.w	r3, r2, r3
 8009da8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8009daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009db0:	0c1b      	lsrs	r3, r3, #16
 8009db2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8009db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009db8:	fb02 f303 	mul.w	r3, r2, r3
 8009dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8009dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dc0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009dc4:	0c1b      	lsrs	r3, r3, #16
 8009dc6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dca:	085a      	lsrs	r2, r3, #1
 8009dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dce:	441a      	add	r2, r3
 8009dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ddc:	fb02 f303 	mul.w	r3, r2, r3
 8009de0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8009de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009de8:	d302      	bcc.n	8009df0 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8009dea:	4b55      	ldr	r3, [pc, #340]	; (8009f40 <VL53L0X_calc_dmax+0x238>)
 8009dec:	663b      	str	r3, [r7, #96]	; 0x60
 8009dee:	e016      	b.n	8009e1e <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8009df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009df2:	085a      	lsrs	r2, r3, #1
 8009df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009df6:	441a      	add	r2, r3
 8009df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dfe:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8009e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e04:	fb02 f303 	mul.w	r3, r2, r3
 8009e08:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8009e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009e10:	0c1b      	lsrs	r3, r3, #16
 8009e12:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8009e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e18:	fb02 f303 	mul.w	r3, r2, r3
 8009e1c:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e20:	039b      	lsls	r3, r3, #14
 8009e22:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009e26:	4a47      	ldr	r2, [pc, #284]	; (8009f44 <VL53L0X_calc_dmax+0x23c>)
 8009e28:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2c:	099b      	lsrs	r3, r3, #6
 8009e2e:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e34:	fb02 f303 	mul.w	r3, r2, r3
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8009e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e3e:	fb02 f303 	mul.w	r3, r2, r3
 8009e42:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	3308      	adds	r3, #8
 8009e48:	091b      	lsrs	r3, r3, #4
 8009e4a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8009e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8009e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e56:	4613      	mov	r3, r2
 8009e58:	005b      	lsls	r3, r3, #1
 8009e5a:	4413      	add	r3, r2
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009e66:	0b9b      	lsrs	r3, r3, #14
 8009e68:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8009e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e6e:	4413      	add	r3, r2
 8009e70:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8009e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e74:	085b      	lsrs	r3, r3, #1
 8009e76:	69ba      	ldr	r2, [r7, #24]
 8009e78:	4413      	add	r3, r2
 8009e7a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e84:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	039b      	lsls	r3, r3, #14
 8009e8a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	085b      	lsrs	r3, r3, #1
 8009e90:	69ba      	ldr	r2, [r7, #24]
 8009e92:	4413      	add	r3, r2
 8009e94:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9e:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ea4:	fb02 f303 	mul.w	r3, r2, r3
 8009ea8:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009eb0:	4a24      	ldr	r2, [pc, #144]	; (8009f44 <VL53L0X_calc_dmax+0x23c>)
 8009eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb6:	099b      	lsrs	r3, r3, #6
 8009eb8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	011b      	lsls	r3, r3, #4
 8009ebe:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ec6:	4a1f      	ldr	r2, [pc, #124]	; (8009f44 <VL53L0X_calc_dmax+0x23c>)
 8009ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ecc:	099b      	lsrs	r3, r3, #6
 8009ece:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8009ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ed2:	3380      	adds	r3, #128	; 0x80
 8009ed4:	0a1b      	lsrs	r3, r3, #8
 8009ed6:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d008      	beq.n	8009ef0 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	085a      	lsrs	r2, r3, #1
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee4:	441a      	add	r2, r3
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eec:	65bb      	str	r3, [r7, #88]	; 0x58
 8009eee:	e001      	b.n	8009ef4 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8009ef4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009ef6:	f7fe f9b5 	bl	8008264 <VL53L0X_isqrt>
 8009efa:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d008      	beq.n	8009f14 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	085a      	lsrs	r2, r3, #1
 8009f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f08:	441a      	add	r2, r3
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f12:	e001      	b.n	8009f18 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8009f18:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009f1a:	f7fe f9a3 	bl	8008264 <VL53L0X_isqrt>
 8009f1e:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d902      	bls.n	8009f34 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8009f2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f32:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8009f34:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3768      	adds	r7, #104	; 0x68
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	fff00000 	.word	0xfff00000
 8009f44:	10624dd3 	.word	0x10624dd3

08009f48 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b0b4      	sub	sp, #208	; 0xd0
 8009f4c:	af04      	add	r7, sp, #16
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]
 8009f54:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8009f56:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009f5e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8009f66:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8009f6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009f6e:	f241 235c 	movw	r3, #4700	; 0x125c
 8009f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8009f76:	4b9e      	ldr	r3, [pc, #632]	; (800a1f0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8009f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8009f7c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009f80:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8009f82:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8009f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8009f90:	4b98      	ldr	r3, [pc, #608]	; (800a1f4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8009f92:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8009f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f98:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8009f9a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8009f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8009fa0:	f240 6377 	movw	r3, #1655	; 0x677
 8009fa4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6a1b      	ldr	r3, [r3, #32]
 8009fb0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009fba:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8009fbe:	0c1b      	lsrs	r3, r3, #16
 8009fc0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8009fc8:	f107 0310 	add.w	r3, r7, #16
 8009fcc:	461a      	mov	r2, r3
 8009fce:	68b9      	ldr	r1, [r7, #8]
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff fe74 	bl	8009cbe <VL53L0X_get_total_signal_rate>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8009fdc:	f107 0314 	add.w	r3, r7, #20
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f7ff fe3b 	bl	8009c60 <VL53L0X_get_total_xtalk_rate>
 8009fea:	4603      	mov	r3, r0
 8009fec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ff6:	fb02 f303 	mul.w	r3, r2, r3
 8009ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ffe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a002:	0c1b      	lsrs	r3, r3, #16
 800a004:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a00c:	fb02 f303 	mul.w	r3, r2, r3
 800a010:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a014:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d902      	bls.n	800a024 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a01e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a020:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a024:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d168      	bne.n	800a0fe <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a032:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a03c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a040:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a044:	461a      	mov	r2, r3
 800a046:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f7fe feae 	bl	8008dac <VL53L0X_calc_timeout_mclks>
 800a050:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a062:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a066:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a06a:	461a      	mov	r2, r3
 800a06c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7fe fe9b 	bl	8008dac <VL53L0X_calc_timeout_mclks>
 800a076:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a078:	2303      	movs	r3, #3
 800a07a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800a07e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a082:	2b08      	cmp	r3, #8
 800a084:	d102      	bne.n	800a08c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800a086:	2302      	movs	r3, #2
 800a088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a08c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a08e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a090:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a092:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a096:	fb02 f303 	mul.w	r3, r2, r3
 800a09a:	02db      	lsls	r3, r3, #11
 800a09c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a0a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a0a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a0a8:	4a53      	ldr	r2, [pc, #332]	; (800a1f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ae:	099b      	lsrs	r3, r3, #6
 800a0b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800a0b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a0b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0ba:	fb02 f303 	mul.w	r3, r2, r3
 800a0be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a0c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a0c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a0ca:	4a4b      	ldr	r2, [pc, #300]	; (800a1f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a0cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d0:	099b      	lsrs	r3, r3, #6
 800a0d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	3380      	adds	r3, #128	; 0x80
 800a0da:	0a1b      	lsrs	r3, r3, #8
 800a0dc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a0e4:	fb02 f303 	mul.w	r3, r2, r3
 800a0e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a0ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a0f0:	3380      	adds	r3, #128	; 0x80
 800a0f2:	0a1b      	lsrs	r3, r3, #8
 800a0f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	021b      	lsls	r3, r3, #8
 800a0fc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a0fe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800a106:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a10a:	e165      	b.n	800a3d8 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800a10c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10c      	bne.n	800a12c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a118:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a120:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2200      	movs	r2, #0
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	e153      	b.n	800a3d4 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800a12c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a130:	2b00      	cmp	r3, #0
 800a132:	d102      	bne.n	800a13a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800a134:	2301      	movs	r3, #1
 800a136:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a13a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a13e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a142:	041a      	lsls	r2, r3, #16
 800a144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a146:	fbb2 f3f3 	udiv	r3, r2, r3
 800a14a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a14e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a154:	429a      	cmp	r2, r3
 800a156:	d902      	bls.n	800a15e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a15a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a15e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a162:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a166:	fb02 f303 	mul.w	r3, r2, r3
 800a16a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a16e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a172:	4613      	mov	r3, r2
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	4413      	add	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe f872 	bl	8008264 <VL53L0X_isqrt>
 800a180:	4603      	mov	r3, r0
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	891b      	ldrh	r3, [r3, #8]
 800a18a:	461a      	mov	r2, r3
 800a18c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a18e:	fb02 f303 	mul.w	r3, r2, r3
 800a192:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a196:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a198:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a19c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a19e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a1a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a1a4:	4a14      	ldr	r2, [pc, #80]	; (800a1f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1aa:	099b      	lsrs	r3, r3, #6
 800a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800a1ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b0:	041b      	lsls	r3, r3, #16
 800a1b2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a1b6:	4a10      	ldr	r2, [pc, #64]	; (800a1f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1bc:	099b      	lsrs	r3, r3, #6
 800a1be:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a1c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	bfb8      	it	lt
 800a1d2:	425b      	neglt	r3, r3
 800a1d4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d8:	021b      	lsls	r3, r3, #8
 800a1da:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	7e1b      	ldrb	r3, [r3, #24]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00b      	beq.n	800a1fc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a1e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a1ec:	e035      	b.n	800a25a <VL53L0X_calc_sigma_estimate+0x312>
 800a1ee:	bf00      	nop
 800a1f0:	028f87ae 	.word	0x028f87ae
 800a1f4:	0006999a 	.word	0x0006999a
 800a1f8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a1fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a202:	fbb2 f3f3 	udiv	r3, r2, r3
 800a206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a20c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a214:	fb02 f303 	mul.w	r3, r2, r3
 800a218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a21c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a222:	4413      	add	r3, r2
 800a224:	0c1b      	lsrs	r3, r3, #16
 800a226:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a22a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a22e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800a236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a23a:	085b      	lsrs	r3, r3, #1
 800a23c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a244:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a248:	fb02 f303 	mul.w	r3, r2, r3
 800a24c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a254:	0b9b      	lsrs	r3, r3, #14
 800a256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a25a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a25e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a260:	fb02 f303 	mul.w	r3, r2, r3
 800a264:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a26c:	0c1b      	lsrs	r3, r3, #16
 800a26e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a274:	fb02 f303 	mul.w	r3, r2, r3
 800a278:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800a27a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a27e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a286:	0c1b      	lsrs	r3, r3, #16
 800a288:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a28e:	fb02 f303 	mul.w	r3, r2, r3
 800a292:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a298:	4413      	add	r3, r2
 800a29a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a29c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a29e:	f7fd ffe1 	bl	8008264 <VL53L0X_isqrt>
 800a2a2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	041b      	lsls	r3, r3, #16
 800a2a8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	3332      	adds	r3, #50	; 0x32
 800a2ae:	4a4c      	ldr	r2, [pc, #304]	; (800a3e0 <VL53L0X_calc_sigma_estimate+0x498>)
 800a2b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b4:	095a      	lsrs	r2, r3, #5
 800a2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a2c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2c4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a2c8:	fb02 f303 	mul.w	r3, r2, r3
 800a2cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a2d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2d4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a2d8:	3308      	adds	r3, #8
 800a2da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800a2de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2e2:	4a40      	ldr	r2, [pc, #256]	; (800a3e4 <VL53L0X_calc_sigma_estimate+0x49c>)
 800a2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e8:	0b5b      	lsrs	r3, r3, #13
 800a2ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a2ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a2f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d902      	bls.n	800a2fe <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a2f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a2fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800a2fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a306:	4413      	add	r3, r2
 800a308:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a30c:	4a36      	ldr	r2, [pc, #216]	; (800a3e8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800a30e:	fba2 2303 	umull	r2, r3, r2, r3
 800a312:	099b      	lsrs	r3, r3, #6
 800a314:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800a31a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a31e:	441a      	add	r2, r3
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800a326:	4618      	mov	r0, r3
 800a328:	f7fd ff9c 	bl	8008264 <VL53L0X_isqrt>
 800a32c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	021b      	lsls	r3, r3, #8
 800a332:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a33a:	4a2b      	ldr	r2, [pc, #172]	; (800a3e8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800a33c:	fba2 2303 	umull	r2, r3, r2, r3
 800a340:	099b      	lsrs	r3, r3, #6
 800a342:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a348:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a34c:	fb02 f303 	mul.w	r3, r2, r3
 800a350:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	69fa      	ldr	r2, [r7, #28]
 800a356:	fb02 f303 	mul.w	r3, r2, r3
 800a35a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a360:	4413      	add	r3, r2
 800a362:	4618      	mov	r0, r3
 800a364:	f7fd ff7e 	bl	8008264 <VL53L0X_isqrt>
 800a368:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a370:	fb02 f303 	mul.w	r3, r2, r3
 800a374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d009      	beq.n	800a392 <VL53L0X_calc_sigma_estimate+0x44a>
 800a37e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a382:	2b00      	cmp	r3, #0
 800a384:	d005      	beq.n	800a392 <VL53L0X_calc_sigma_estimate+0x44a>
 800a386:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a38a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a38e:	429a      	cmp	r2, r3
 800a390:	d903      	bls.n	800a39a <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a392:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a3a0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800a3ac:	6939      	ldr	r1, [r7, #16]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	9303      	str	r3, [sp, #12]
 800a3b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3b6:	9302      	str	r3, [sp, #8]
 800a3b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7ff fc9d 	bl	8009d08 <VL53L0X_calc_dmax>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a3d4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	37c0      	adds	r7, #192	; 0xc0
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	51eb851f 	.word	0x51eb851f
 800a3e4:	d1b71759 	.word	0xd1b71759
 800a3e8:	10624dd3 	.word	0x10624dd3

0800a3ec <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b090      	sub	sp, #64	; 0x40
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	607a      	str	r2, [r7, #4]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	72fb      	strb	r3, [r7, #11]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a400:	2300      	movs	r3, #0
 800a402:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a412:	2300      	movs	r3, #0
 800a414:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a430:	2300      	movs	r3, #0
 800a432:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a436:	2300      	movs	r3, #0
 800a438:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a43e:	7afb      	ldrb	r3, [r7, #11]
 800a440:	10db      	asrs	r3, r3, #3
 800a442:	b2db      	uxtb	r3, r3
 800a444:	f003 030f 	and.w	r3, r3, #15
 800a448:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a44c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a450:	2b00      	cmp	r3, #0
 800a452:	d017      	beq.n	800a484 <VL53L0X_get_pal_range_status+0x98>
 800a454:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a458:	2b05      	cmp	r3, #5
 800a45a:	d013      	beq.n	800a484 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a45c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a460:	2b07      	cmp	r3, #7
 800a462:	d00f      	beq.n	800a484 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a464:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a468:	2b0c      	cmp	r3, #12
 800a46a:	d00b      	beq.n	800a484 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a46c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a470:	2b0d      	cmp	r3, #13
 800a472:	d007      	beq.n	800a484 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a474:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a478:	2b0e      	cmp	r3, #14
 800a47a:	d003      	beq.n	800a484 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a47c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a480:	2b0f      	cmp	r3, #15
 800a482:	d103      	bne.n	800a48c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a484:	2301      	movs	r3, #1
 800a486:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a48a:	e002      	b.n	800a492 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a492:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a496:	2b00      	cmp	r3, #0
 800a498:	d109      	bne.n	800a4ae <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a49a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a49e:	461a      	mov	r2, r3
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f7fc f9e2 	bl	800686c <VL53L0X_GetLimitCheckEnable>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a4ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d02e      	beq.n	800a514 <VL53L0X_get_pal_range_status+0x128>
 800a4b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d12a      	bne.n	800a514 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a4be:	f107 0310 	add.w	r3, r7, #16
 800a4c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a4c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f7ff fd3d 	bl	8009f48 <VL53L0X_calc_sigma_estimate>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a4d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d103      	bne.n	800a4e4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4e2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a4e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d113      	bne.n	800a514 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a4ec:	f107 0320 	add.w	r3, r7, #32
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f7fc fa3f 	bl	8006978 <VL53L0X_GetLimitCheckValue>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d006      	beq.n	800a514 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800a506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a508:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d902      	bls.n	800a514 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a50e:	2301      	movs	r3, #1
 800a510:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a514:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d109      	bne.n	800a530 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a51c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a520:	461a      	mov	r2, r3
 800a522:	2102      	movs	r1, #2
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7fc f9a1 	bl	800686c <VL53L0X_GetLimitCheckEnable>
 800a52a:	4603      	mov	r3, r0
 800a52c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a530:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a534:	2b00      	cmp	r3, #0
 800a536:	d044      	beq.n	800a5c2 <VL53L0X_get_pal_range_status+0x1d6>
 800a538:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d140      	bne.n	800a5c2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a540:	f107 031c 	add.w	r3, r7, #28
 800a544:	461a      	mov	r2, r3
 800a546:	2102      	movs	r1, #2
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f7fc fa15 	bl	8006978 <VL53L0X_GetLimitCheckValue>
 800a54e:	4603      	mov	r3, r0
 800a550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a554:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d107      	bne.n	800a56c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a55c:	2201      	movs	r2, #1
 800a55e:	21ff      	movs	r1, #255	; 0xff
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f000 f9bb 	bl	800a8dc <VL53L0X_WrByte>
 800a566:	4603      	mov	r3, r0
 800a568:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800a56c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a570:	2b00      	cmp	r3, #0
 800a572:	d109      	bne.n	800a588 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800a574:	f107 0316 	add.w	r3, r7, #22
 800a578:	461a      	mov	r2, r3
 800a57a:	21b6      	movs	r1, #182	; 0xb6
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f000 fa59 	bl	800aa34 <VL53L0X_RdWord>
 800a582:	4603      	mov	r3, r0
 800a584:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800a588:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d107      	bne.n	800a5a0 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a590:	2200      	movs	r2, #0
 800a592:	21ff      	movs	r1, #255	; 0xff
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 f9a1 	bl	800a8dc <VL53L0X_WrByte>
 800a59a:	4603      	mov	r3, r0
 800a59c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a5a0:	8afb      	ldrh	r3, [r7, #22]
 800a5a2:	025b      	lsls	r3, r3, #9
 800a5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5aa:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d006      	beq.n	800a5c2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a5b4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a5b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d902      	bls.n	800a5c2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a5c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d109      	bne.n	800a5de <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a5ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	2103      	movs	r1, #3
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f7fc f94a 	bl	800686c <VL53L0X_GetLimitCheckEnable>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a5de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d023      	beq.n	800a62e <VL53L0X_get_pal_range_status+0x242>
 800a5e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d11f      	bne.n	800a62e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a5ee:	893b      	ldrh	r3, [r7, #8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d102      	bne.n	800a5fa <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5f8:	e005      	b.n	800a606 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	021a      	lsls	r2, r3, #8
 800a5fe:	893b      	ldrh	r3, [r7, #8]
 800a600:	fbb2 f3f3 	udiv	r3, r2, r3
 800a604:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a606:	f107 0318 	add.w	r3, r7, #24
 800a60a:	461a      	mov	r2, r3
 800a60c:	2103      	movs	r1, #3
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f7fc f9b2 	bl	8006978 <VL53L0X_GetLimitCheckValue>
 800a614:	4603      	mov	r3, r0
 800a616:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d006      	beq.n	800a62e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a620:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a624:	429a      	cmp	r2, r3
 800a626:	d202      	bcs.n	800a62e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a628:	2301      	movs	r3, #1
 800a62a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a62e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a632:	2b00      	cmp	r3, #0
 800a634:	d14a      	bne.n	800a6cc <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800a636:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d103      	bne.n	800a646 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800a63e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a640:	22ff      	movs	r2, #255	; 0xff
 800a642:	701a      	strb	r2, [r3, #0]
 800a644:	e042      	b.n	800a6cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a646:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d007      	beq.n	800a65e <VL53L0X_get_pal_range_status+0x272>
 800a64e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a652:	2b02      	cmp	r3, #2
 800a654:	d003      	beq.n	800a65e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800a656:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d103      	bne.n	800a666 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a660:	2205      	movs	r2, #5
 800a662:	701a      	strb	r2, [r3, #0]
 800a664:	e032      	b.n	800a6cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a666:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a66a:	2b06      	cmp	r3, #6
 800a66c:	d003      	beq.n	800a676 <VL53L0X_get_pal_range_status+0x28a>
 800a66e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a672:	2b09      	cmp	r3, #9
 800a674:	d103      	bne.n	800a67e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a678:	2204      	movs	r2, #4
 800a67a:	701a      	strb	r2, [r3, #0]
 800a67c:	e026      	b.n	800a6cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a67e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a682:	2b08      	cmp	r3, #8
 800a684:	d007      	beq.n	800a696 <VL53L0X_get_pal_range_status+0x2aa>
 800a686:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a68a:	2b0a      	cmp	r3, #10
 800a68c:	d003      	beq.n	800a696 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800a68e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a692:	2b01      	cmp	r3, #1
 800a694:	d103      	bne.n	800a69e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a698:	2203      	movs	r2, #3
 800a69a:	701a      	strb	r2, [r3, #0]
 800a69c:	e016      	b.n	800a6cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a69e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	d003      	beq.n	800a6ae <VL53L0X_get_pal_range_status+0x2c2>
 800a6a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d103      	bne.n	800a6b6 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a6ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	701a      	strb	r2, [r3, #0]
 800a6b4:	e00a      	b.n	800a6cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800a6b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d103      	bne.n	800a6c6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a6be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	701a      	strb	r2, [r3, #0]
 800a6c4:	e002      	b.n	800a6cc <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800a6cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d102      	bne.n	800a6da <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800a6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a6da:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a6de:	461a      	mov	r2, r3
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f7fc f8c2 	bl	800686c <VL53L0X_GetLimitCheckEnable>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a6ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d14f      	bne.n	800a796 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a6f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d003      	beq.n	800a706 <VL53L0X_get_pal_range_status+0x31a>
 800a6fe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a702:	2b01      	cmp	r3, #1
 800a704:	d103      	bne.n	800a70e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a706:	2301      	movs	r3, #1
 800a708:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a70c:	e002      	b.n	800a714 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a71a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a71e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a722:	2b04      	cmp	r3, #4
 800a724:	d003      	beq.n	800a72e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a726:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d103      	bne.n	800a736 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800a72e:	2301      	movs	r3, #1
 800a730:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a734:	e002      	b.n	800a73c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a742:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a746:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <VL53L0X_get_pal_range_status+0x36a>
 800a74e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a752:	2b01      	cmp	r3, #1
 800a754:	d103      	bne.n	800a75e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a756:	2301      	movs	r3, #1
 800a758:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a75c:	e002      	b.n	800a764 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800a75e:	2300      	movs	r3, #0
 800a760:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a76a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a76e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <VL53L0X_get_pal_range_status+0x392>
 800a776:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d103      	bne.n	800a786 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a77e:	2301      	movs	r3, #1
 800a780:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a784:	e002      	b.n	800a78c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a792:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a796:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3740      	adds	r7, #64	; 0x40
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b088      	sub	sp, #32
 800a7a6:	af02      	add	r7, sp, #8
 800a7a8:	60f8      	str	r0, [r7, #12]
 800a7aa:	60b9      	str	r1, [r7, #8]
 800a7ac:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	330a      	adds	r3, #10
 800a7b2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a7c0:	b299      	uxth	r1, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	f7f7 fa99 	bl	8001d04 <HAL_I2C_Master_Transmit>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800a7d6:	693b      	ldr	r3, [r7, #16]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3718      	adds	r7, #24
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af02      	add	r7, sp, #8
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	330a      	adds	r3, #10
 800a7f0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a7fe:	f043 0301 	orr.w	r3, r3, #1
 800a802:	b2db      	uxtb	r3, r3
 800a804:	b299      	uxth	r1, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	b29a      	uxth	r2, r3
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	4613      	mov	r3, r2
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	f7f7 fb6b 	bl	8001eec <HAL_I2C_Master_Receive>
 800a816:	4603      	mov	r3, r0
 800a818:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800a81a:	693b      	ldr	r3, [r7, #16]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	607a      	str	r2, [r7, #4]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	460b      	mov	r3, r1
 800a832:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a834:	2300      	movs	r3, #0
 800a836:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b3f      	cmp	r3, #63	; 0x3f
 800a83c:	d902      	bls.n	800a844 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800a83e:	f06f 0303 	mvn.w	r3, #3
 800a842:	e016      	b.n	800a872 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800a844:	4a0d      	ldr	r2, [pc, #52]	; (800a87c <VL53L0X_WriteMulti+0x58>)
 800a846:	7afb      	ldrb	r3, [r7, #11]
 800a848:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	6879      	ldr	r1, [r7, #4]
 800a84e:	480c      	ldr	r0, [pc, #48]	; (800a880 <VL53L0X_WriteMulti+0x5c>)
 800a850:	f000 f9a2 	bl	800ab98 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	3301      	adds	r3, #1
 800a858:	461a      	mov	r2, r3
 800a85a:	4908      	ldr	r1, [pc, #32]	; (800a87c <VL53L0X_WriteMulti+0x58>)
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f7ff ffa0 	bl	800a7a2 <_I2CWrite>
 800a862:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a86a:	23ec      	movs	r3, #236	; 0xec
 800a86c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800a86e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20000b80 	.word	0x20000b80
 800a880:	20000b81 	.word	0x20000b81

0800a884 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	607a      	str	r2, [r7, #4]
 800a88e:	603b      	str	r3, [r7, #0]
 800a890:	460b      	mov	r3, r1
 800a892:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a894:	2300      	movs	r3, #0
 800a896:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a898:	f107 030b 	add.w	r3, r7, #11
 800a89c:	2201      	movs	r2, #1
 800a89e:	4619      	mov	r1, r3
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7ff ff7e 	bl	800a7a2 <_I2CWrite>
 800a8a6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d002      	beq.n	800a8b4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a8ae:	23ec      	movs	r3, #236	; 0xec
 800a8b0:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a8b2:	e00c      	b.n	800a8ce <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	6879      	ldr	r1, [r7, #4]
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f7ff ff91 	bl	800a7e0 <_I2CRead>
 800a8be:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a8c6:	23ec      	movs	r3, #236	; 0xec
 800a8c8:	75fb      	strb	r3, [r7, #23]
 800a8ca:	e000      	b.n	800a8ce <VL53L0X_ReadMulti+0x4a>
    }
done:
 800a8cc:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800a8ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3718      	adds	r7, #24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800a8f0:	4a0b      	ldr	r2, [pc, #44]	; (800a920 <VL53L0X_WrByte+0x44>)
 800a8f2:	78fb      	ldrb	r3, [r7, #3]
 800a8f4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800a8f6:	4a0a      	ldr	r2, [pc, #40]	; (800a920 <VL53L0X_WrByte+0x44>)
 800a8f8:	78bb      	ldrb	r3, [r7, #2]
 800a8fa:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	4908      	ldr	r1, [pc, #32]	; (800a920 <VL53L0X_WrByte+0x44>)
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7ff ff4e 	bl	800a7a2 <_I2CWrite>
 800a906:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a90e:	23ec      	movs	r3, #236	; 0xec
 800a910:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800a912:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20000b80 	.word	0x20000b80

0800a924 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70fb      	strb	r3, [r7, #3]
 800a930:	4613      	mov	r3, r2
 800a932:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800a938:	4a0e      	ldr	r2, [pc, #56]	; (800a974 <VL53L0X_WrWord+0x50>)
 800a93a:	78fb      	ldrb	r3, [r7, #3]
 800a93c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800a93e:	883b      	ldrh	r3, [r7, #0]
 800a940:	0a1b      	lsrs	r3, r3, #8
 800a942:	b29b      	uxth	r3, r3
 800a944:	b2da      	uxtb	r2, r3
 800a946:	4b0b      	ldr	r3, [pc, #44]	; (800a974 <VL53L0X_WrWord+0x50>)
 800a948:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800a94a:	883b      	ldrh	r3, [r7, #0]
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	4b09      	ldr	r3, [pc, #36]	; (800a974 <VL53L0X_WrWord+0x50>)
 800a950:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800a952:	2203      	movs	r2, #3
 800a954:	4907      	ldr	r1, [pc, #28]	; (800a974 <VL53L0X_WrWord+0x50>)
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff ff23 	bl	800a7a2 <_I2CWrite>
 800a95c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a964:	23ec      	movs	r3, #236	; 0xec
 800a966:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800a968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20000b80 	.word	0x20000b80

0800a978 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	4608      	mov	r0, r1
 800a982:	4611      	mov	r1, r2
 800a984:	461a      	mov	r2, r3
 800a986:	4603      	mov	r3, r0
 800a988:	70fb      	strb	r3, [r7, #3]
 800a98a:	460b      	mov	r3, r1
 800a98c:	70bb      	strb	r3, [r7, #2]
 800a98e:	4613      	mov	r3, r2
 800a990:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800a996:	f107 020e 	add.w	r2, r7, #14
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f81e 	bl	800a9e0 <VL53L0X_RdByte>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800a9a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d110      	bne.n	800a9d2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800a9b0:	7bba      	ldrb	r2, [r7, #14]
 800a9b2:	78bb      	ldrb	r3, [r7, #2]
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	787b      	ldrb	r3, [r7, #1]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800a9c0:	7bba      	ldrb	r2, [r7, #14]
 800a9c2:	78fb      	ldrb	r3, [r7, #3]
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7ff ff88 	bl	800a8dc <VL53L0X_WrByte>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	73fb      	strb	r3, [r7, #15]
 800a9d0:	e000      	b.n	800a9d4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800a9d2:	bf00      	nop
done:
    return Status;
 800a9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a9f2:	f107 030b 	add.w	r3, r7, #11
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f7ff fed1 	bl	800a7a2 <_I2CWrite>
 800aa00:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aa08:	23ec      	movs	r3, #236	; 0xec
 800aa0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aa0c:	e00c      	b.n	800aa28 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800aa0e:	2201      	movs	r2, #1
 800aa10:	6879      	ldr	r1, [r7, #4]
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7ff fee4 	bl	800a7e0 <_I2CRead>
 800aa18:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aa20:	23ec      	movs	r3, #236	; 0xec
 800aa22:	75fb      	strb	r3, [r7, #23]
 800aa24:	e000      	b.n	800aa28 <VL53L0X_RdByte+0x48>
    }
done:
 800aa26:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800aa28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3718      	adds	r7, #24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa42:	2300      	movs	r3, #0
 800aa44:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800aa46:	f107 030b 	add.w	r3, r7, #11
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f7ff fea7 	bl	800a7a2 <_I2CWrite>
 800aa54:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d002      	beq.n	800aa62 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aa5c:	23ec      	movs	r3, #236	; 0xec
 800aa5e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aa60:	e017      	b.n	800aa92 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800aa62:	2202      	movs	r2, #2
 800aa64:	490e      	ldr	r1, [pc, #56]	; (800aaa0 <VL53L0X_RdWord+0x6c>)
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f7ff feba 	bl	800a7e0 <_I2CRead>
 800aa6c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aa74:	23ec      	movs	r3, #236	; 0xec
 800aa76:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aa78:	e00b      	b.n	800aa92 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800aa7a:	4b09      	ldr	r3, [pc, #36]	; (800aaa0 <VL53L0X_RdWord+0x6c>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	021b      	lsls	r3, r3, #8
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	4b06      	ldr	r3, [pc, #24]	; (800aaa0 <VL53L0X_RdWord+0x6c>)
 800aa86:	785b      	ldrb	r3, [r3, #1]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	4413      	add	r3, r2
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800aa92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20000b80 	.word	0x20000b80

0800aaa4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	460b      	mov	r3, r1
 800aaae:	607a      	str	r2, [r7, #4]
 800aab0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aab2:	2300      	movs	r3, #0
 800aab4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800aab6:	f107 030b 	add.w	r3, r7, #11
 800aaba:	2201      	movs	r2, #1
 800aabc:	4619      	mov	r1, r3
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f7ff fe6f 	bl	800a7a2 <_I2CWrite>
 800aac4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aacc:	23ec      	movs	r3, #236	; 0xec
 800aace:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aad0:	e01b      	b.n	800ab0a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800aad2:	2204      	movs	r2, #4
 800aad4:	4910      	ldr	r1, [pc, #64]	; (800ab18 <VL53L0X_RdDWord+0x74>)
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f7ff fe82 	bl	800a7e0 <_I2CRead>
 800aadc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aae4:	23ec      	movs	r3, #236	; 0xec
 800aae6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aae8:	e00f      	b.n	800ab0a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800aaea:	4b0b      	ldr	r3, [pc, #44]	; (800ab18 <VL53L0X_RdDWord+0x74>)
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	061a      	lsls	r2, r3, #24
 800aaf0:	4b09      	ldr	r3, [pc, #36]	; (800ab18 <VL53L0X_RdDWord+0x74>)
 800aaf2:	785b      	ldrb	r3, [r3, #1]
 800aaf4:	041b      	lsls	r3, r3, #16
 800aaf6:	441a      	add	r2, r3
 800aaf8:	4b07      	ldr	r3, [pc, #28]	; (800ab18 <VL53L0X_RdDWord+0x74>)
 800aafa:	789b      	ldrb	r3, [r3, #2]
 800aafc:	021b      	lsls	r3, r3, #8
 800aafe:	4413      	add	r3, r2
 800ab00:	4a05      	ldr	r2, [pc, #20]	; (800ab18 <VL53L0X_RdDWord+0x74>)
 800ab02:	78d2      	ldrb	r2, [r2, #3]
 800ab04:	441a      	add	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800ab0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20000b80 	.word	0x20000b80

0800ab1c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ab24:	2300      	movs	r3, #0
 800ab26:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ab28:	2002      	movs	r0, #2
 800ab2a:	f7f6 fcdf 	bl	80014ec <HAL_Delay>
    return status;
 800ab2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <atoi>:
 800ab3a:	220a      	movs	r2, #10
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	f000 b8f5 	b.w	800ad2c <strtol>
	...

0800ab44 <__errno>:
 800ab44:	4b01      	ldr	r3, [pc, #4]	; (800ab4c <__errno+0x8>)
 800ab46:	6818      	ldr	r0, [r3, #0]
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	200002d4 	.word	0x200002d4

0800ab50 <__libc_init_array>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	4e0d      	ldr	r6, [pc, #52]	; (800ab88 <__libc_init_array+0x38>)
 800ab54:	4c0d      	ldr	r4, [pc, #52]	; (800ab8c <__libc_init_array+0x3c>)
 800ab56:	1ba4      	subs	r4, r4, r6
 800ab58:	10a4      	asrs	r4, r4, #2
 800ab5a:	2500      	movs	r5, #0
 800ab5c:	42a5      	cmp	r5, r4
 800ab5e:	d109      	bne.n	800ab74 <__libc_init_array+0x24>
 800ab60:	4e0b      	ldr	r6, [pc, #44]	; (800ab90 <__libc_init_array+0x40>)
 800ab62:	4c0c      	ldr	r4, [pc, #48]	; (800ab94 <__libc_init_array+0x44>)
 800ab64:	f000 fcf6 	bl	800b554 <_init>
 800ab68:	1ba4      	subs	r4, r4, r6
 800ab6a:	10a4      	asrs	r4, r4, #2
 800ab6c:	2500      	movs	r5, #0
 800ab6e:	42a5      	cmp	r5, r4
 800ab70:	d105      	bne.n	800ab7e <__libc_init_array+0x2e>
 800ab72:	bd70      	pop	{r4, r5, r6, pc}
 800ab74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab78:	4798      	blx	r3
 800ab7a:	3501      	adds	r5, #1
 800ab7c:	e7ee      	b.n	800ab5c <__libc_init_array+0xc>
 800ab7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab82:	4798      	blx	r3
 800ab84:	3501      	adds	r5, #1
 800ab86:	e7f2      	b.n	800ab6e <__libc_init_array+0x1e>
 800ab88:	0800b734 	.word	0x0800b734
 800ab8c:	0800b734 	.word	0x0800b734
 800ab90:	0800b734 	.word	0x0800b734
 800ab94:	0800b738 	.word	0x0800b738

0800ab98 <memcpy>:
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	1e43      	subs	r3, r0, #1
 800ab9c:	440a      	add	r2, r1
 800ab9e:	4291      	cmp	r1, r2
 800aba0:	d100      	bne.n	800aba4 <memcpy+0xc>
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abac:	e7f7      	b.n	800ab9e <memcpy+0x6>

0800abae <memset>:
 800abae:	4402      	add	r2, r0
 800abb0:	4603      	mov	r3, r0
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d100      	bne.n	800abb8 <memset+0xa>
 800abb6:	4770      	bx	lr
 800abb8:	f803 1b01 	strb.w	r1, [r3], #1
 800abbc:	e7f9      	b.n	800abb2 <memset+0x4>
	...

0800abc0 <siprintf>:
 800abc0:	b40e      	push	{r1, r2, r3}
 800abc2:	b500      	push	{lr}
 800abc4:	b09c      	sub	sp, #112	; 0x70
 800abc6:	ab1d      	add	r3, sp, #116	; 0x74
 800abc8:	9002      	str	r0, [sp, #8]
 800abca:	9006      	str	r0, [sp, #24]
 800abcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abd0:	4809      	ldr	r0, [pc, #36]	; (800abf8 <siprintf+0x38>)
 800abd2:	9107      	str	r1, [sp, #28]
 800abd4:	9104      	str	r1, [sp, #16]
 800abd6:	4909      	ldr	r1, [pc, #36]	; (800abfc <siprintf+0x3c>)
 800abd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abdc:	9105      	str	r1, [sp, #20]
 800abde:	6800      	ldr	r0, [r0, #0]
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	a902      	add	r1, sp, #8
 800abe4:	f000 f928 	bl	800ae38 <_svfiprintf_r>
 800abe8:	9b02      	ldr	r3, [sp, #8]
 800abea:	2200      	movs	r2, #0
 800abec:	701a      	strb	r2, [r3, #0]
 800abee:	b01c      	add	sp, #112	; 0x70
 800abf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abf4:	b003      	add	sp, #12
 800abf6:	4770      	bx	lr
 800abf8:	200002d4 	.word	0x200002d4
 800abfc:	ffff0208 	.word	0xffff0208

0800ac00 <strcpy>:
 800ac00:	4603      	mov	r3, r0
 800ac02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac06:	f803 2b01 	strb.w	r2, [r3], #1
 800ac0a:	2a00      	cmp	r2, #0
 800ac0c:	d1f9      	bne.n	800ac02 <strcpy+0x2>
 800ac0e:	4770      	bx	lr

0800ac10 <strncmp>:
 800ac10:	b510      	push	{r4, lr}
 800ac12:	b16a      	cbz	r2, 800ac30 <strncmp+0x20>
 800ac14:	3901      	subs	r1, #1
 800ac16:	1884      	adds	r4, r0, r2
 800ac18:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ac1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d103      	bne.n	800ac2c <strncmp+0x1c>
 800ac24:	42a0      	cmp	r0, r4
 800ac26:	d001      	beq.n	800ac2c <strncmp+0x1c>
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1f5      	bne.n	800ac18 <strncmp+0x8>
 800ac2c:	1a98      	subs	r0, r3, r2
 800ac2e:	bd10      	pop	{r4, pc}
 800ac30:	4610      	mov	r0, r2
 800ac32:	e7fc      	b.n	800ac2e <strncmp+0x1e>

0800ac34 <_strtol_l.isra.0>:
 800ac34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac38:	4680      	mov	r8, r0
 800ac3a:	4689      	mov	r9, r1
 800ac3c:	4692      	mov	sl, r2
 800ac3e:	461e      	mov	r6, r3
 800ac40:	460f      	mov	r7, r1
 800ac42:	463d      	mov	r5, r7
 800ac44:	9808      	ldr	r0, [sp, #32]
 800ac46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac4a:	f000 f885 	bl	800ad58 <__locale_ctype_ptr_l>
 800ac4e:	4420      	add	r0, r4
 800ac50:	7843      	ldrb	r3, [r0, #1]
 800ac52:	f013 0308 	ands.w	r3, r3, #8
 800ac56:	d132      	bne.n	800acbe <_strtol_l.isra.0+0x8a>
 800ac58:	2c2d      	cmp	r4, #45	; 0x2d
 800ac5a:	d132      	bne.n	800acc2 <_strtol_l.isra.0+0x8e>
 800ac5c:	787c      	ldrb	r4, [r7, #1]
 800ac5e:	1cbd      	adds	r5, r7, #2
 800ac60:	2201      	movs	r2, #1
 800ac62:	2e00      	cmp	r6, #0
 800ac64:	d05d      	beq.n	800ad22 <_strtol_l.isra.0+0xee>
 800ac66:	2e10      	cmp	r6, #16
 800ac68:	d109      	bne.n	800ac7e <_strtol_l.isra.0+0x4a>
 800ac6a:	2c30      	cmp	r4, #48	; 0x30
 800ac6c:	d107      	bne.n	800ac7e <_strtol_l.isra.0+0x4a>
 800ac6e:	782b      	ldrb	r3, [r5, #0]
 800ac70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac74:	2b58      	cmp	r3, #88	; 0x58
 800ac76:	d14f      	bne.n	800ad18 <_strtol_l.isra.0+0xe4>
 800ac78:	786c      	ldrb	r4, [r5, #1]
 800ac7a:	2610      	movs	r6, #16
 800ac7c:	3502      	adds	r5, #2
 800ac7e:	2a00      	cmp	r2, #0
 800ac80:	bf14      	ite	ne
 800ac82:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ac86:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ac8a:	2700      	movs	r7, #0
 800ac8c:	fbb1 fcf6 	udiv	ip, r1, r6
 800ac90:	4638      	mov	r0, r7
 800ac92:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ac96:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ac9a:	2b09      	cmp	r3, #9
 800ac9c:	d817      	bhi.n	800acce <_strtol_l.isra.0+0x9a>
 800ac9e:	461c      	mov	r4, r3
 800aca0:	42a6      	cmp	r6, r4
 800aca2:	dd23      	ble.n	800acec <_strtol_l.isra.0+0xb8>
 800aca4:	1c7b      	adds	r3, r7, #1
 800aca6:	d007      	beq.n	800acb8 <_strtol_l.isra.0+0x84>
 800aca8:	4584      	cmp	ip, r0
 800acaa:	d31c      	bcc.n	800ace6 <_strtol_l.isra.0+0xb2>
 800acac:	d101      	bne.n	800acb2 <_strtol_l.isra.0+0x7e>
 800acae:	45a6      	cmp	lr, r4
 800acb0:	db19      	blt.n	800ace6 <_strtol_l.isra.0+0xb2>
 800acb2:	fb00 4006 	mla	r0, r0, r6, r4
 800acb6:	2701      	movs	r7, #1
 800acb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acbc:	e7eb      	b.n	800ac96 <_strtol_l.isra.0+0x62>
 800acbe:	462f      	mov	r7, r5
 800acc0:	e7bf      	b.n	800ac42 <_strtol_l.isra.0+0xe>
 800acc2:	2c2b      	cmp	r4, #43	; 0x2b
 800acc4:	bf04      	itt	eq
 800acc6:	1cbd      	addeq	r5, r7, #2
 800acc8:	787c      	ldrbeq	r4, [r7, #1]
 800acca:	461a      	mov	r2, r3
 800accc:	e7c9      	b.n	800ac62 <_strtol_l.isra.0+0x2e>
 800acce:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800acd2:	2b19      	cmp	r3, #25
 800acd4:	d801      	bhi.n	800acda <_strtol_l.isra.0+0xa6>
 800acd6:	3c37      	subs	r4, #55	; 0x37
 800acd8:	e7e2      	b.n	800aca0 <_strtol_l.isra.0+0x6c>
 800acda:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800acde:	2b19      	cmp	r3, #25
 800ace0:	d804      	bhi.n	800acec <_strtol_l.isra.0+0xb8>
 800ace2:	3c57      	subs	r4, #87	; 0x57
 800ace4:	e7dc      	b.n	800aca0 <_strtol_l.isra.0+0x6c>
 800ace6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800acea:	e7e5      	b.n	800acb8 <_strtol_l.isra.0+0x84>
 800acec:	1c7b      	adds	r3, r7, #1
 800acee:	d108      	bne.n	800ad02 <_strtol_l.isra.0+0xce>
 800acf0:	2322      	movs	r3, #34	; 0x22
 800acf2:	f8c8 3000 	str.w	r3, [r8]
 800acf6:	4608      	mov	r0, r1
 800acf8:	f1ba 0f00 	cmp.w	sl, #0
 800acfc:	d107      	bne.n	800ad0e <_strtol_l.isra.0+0xda>
 800acfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad02:	b102      	cbz	r2, 800ad06 <_strtol_l.isra.0+0xd2>
 800ad04:	4240      	negs	r0, r0
 800ad06:	f1ba 0f00 	cmp.w	sl, #0
 800ad0a:	d0f8      	beq.n	800acfe <_strtol_l.isra.0+0xca>
 800ad0c:	b10f      	cbz	r7, 800ad12 <_strtol_l.isra.0+0xde>
 800ad0e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800ad12:	f8ca 9000 	str.w	r9, [sl]
 800ad16:	e7f2      	b.n	800acfe <_strtol_l.isra.0+0xca>
 800ad18:	2430      	movs	r4, #48	; 0x30
 800ad1a:	2e00      	cmp	r6, #0
 800ad1c:	d1af      	bne.n	800ac7e <_strtol_l.isra.0+0x4a>
 800ad1e:	2608      	movs	r6, #8
 800ad20:	e7ad      	b.n	800ac7e <_strtol_l.isra.0+0x4a>
 800ad22:	2c30      	cmp	r4, #48	; 0x30
 800ad24:	d0a3      	beq.n	800ac6e <_strtol_l.isra.0+0x3a>
 800ad26:	260a      	movs	r6, #10
 800ad28:	e7a9      	b.n	800ac7e <_strtol_l.isra.0+0x4a>
	...

0800ad2c <strtol>:
 800ad2c:	4b08      	ldr	r3, [pc, #32]	; (800ad50 <strtol+0x24>)
 800ad2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad30:	681c      	ldr	r4, [r3, #0]
 800ad32:	4d08      	ldr	r5, [pc, #32]	; (800ad54 <strtol+0x28>)
 800ad34:	6a23      	ldr	r3, [r4, #32]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	bf08      	it	eq
 800ad3a:	462b      	moveq	r3, r5
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	460a      	mov	r2, r1
 800ad42:	4601      	mov	r1, r0
 800ad44:	4620      	mov	r0, r4
 800ad46:	f7ff ff75 	bl	800ac34 <_strtol_l.isra.0>
 800ad4a:	b003      	add	sp, #12
 800ad4c:	bd30      	pop	{r4, r5, pc}
 800ad4e:	bf00      	nop
 800ad50:	200002d4 	.word	0x200002d4
 800ad54:	20000338 	.word	0x20000338

0800ad58 <__locale_ctype_ptr_l>:
 800ad58:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ad5c:	4770      	bx	lr

0800ad5e <__ascii_mbtowc>:
 800ad5e:	b082      	sub	sp, #8
 800ad60:	b901      	cbnz	r1, 800ad64 <__ascii_mbtowc+0x6>
 800ad62:	a901      	add	r1, sp, #4
 800ad64:	b142      	cbz	r2, 800ad78 <__ascii_mbtowc+0x1a>
 800ad66:	b14b      	cbz	r3, 800ad7c <__ascii_mbtowc+0x1e>
 800ad68:	7813      	ldrb	r3, [r2, #0]
 800ad6a:	600b      	str	r3, [r1, #0]
 800ad6c:	7812      	ldrb	r2, [r2, #0]
 800ad6e:	1c10      	adds	r0, r2, #0
 800ad70:	bf18      	it	ne
 800ad72:	2001      	movne	r0, #1
 800ad74:	b002      	add	sp, #8
 800ad76:	4770      	bx	lr
 800ad78:	4610      	mov	r0, r2
 800ad7a:	e7fb      	b.n	800ad74 <__ascii_mbtowc+0x16>
 800ad7c:	f06f 0001 	mvn.w	r0, #1
 800ad80:	e7f8      	b.n	800ad74 <__ascii_mbtowc+0x16>

0800ad82 <__ssputs_r>:
 800ad82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad86:	688e      	ldr	r6, [r1, #8]
 800ad88:	429e      	cmp	r6, r3
 800ad8a:	4682      	mov	sl, r0
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	4690      	mov	r8, r2
 800ad90:	4699      	mov	r9, r3
 800ad92:	d837      	bhi.n	800ae04 <__ssputs_r+0x82>
 800ad94:	898a      	ldrh	r2, [r1, #12]
 800ad96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad9a:	d031      	beq.n	800ae00 <__ssputs_r+0x7e>
 800ad9c:	6825      	ldr	r5, [r4, #0]
 800ad9e:	6909      	ldr	r1, [r1, #16]
 800ada0:	1a6f      	subs	r7, r5, r1
 800ada2:	6965      	ldr	r5, [r4, #20]
 800ada4:	2302      	movs	r3, #2
 800ada6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adaa:	fb95 f5f3 	sdiv	r5, r5, r3
 800adae:	f109 0301 	add.w	r3, r9, #1
 800adb2:	443b      	add	r3, r7
 800adb4:	429d      	cmp	r5, r3
 800adb6:	bf38      	it	cc
 800adb8:	461d      	movcc	r5, r3
 800adba:	0553      	lsls	r3, r2, #21
 800adbc:	d530      	bpl.n	800ae20 <__ssputs_r+0x9e>
 800adbe:	4629      	mov	r1, r5
 800adc0:	f000 fb2e 	bl	800b420 <_malloc_r>
 800adc4:	4606      	mov	r6, r0
 800adc6:	b950      	cbnz	r0, 800adde <__ssputs_r+0x5c>
 800adc8:	230c      	movs	r3, #12
 800adca:	f8ca 3000 	str.w	r3, [sl]
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add4:	81a3      	strh	r3, [r4, #12]
 800add6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adde:	463a      	mov	r2, r7
 800ade0:	6921      	ldr	r1, [r4, #16]
 800ade2:	f7ff fed9 	bl	800ab98 <memcpy>
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	6126      	str	r6, [r4, #16]
 800adf4:	6165      	str	r5, [r4, #20]
 800adf6:	443e      	add	r6, r7
 800adf8:	1bed      	subs	r5, r5, r7
 800adfa:	6026      	str	r6, [r4, #0]
 800adfc:	60a5      	str	r5, [r4, #8]
 800adfe:	464e      	mov	r6, r9
 800ae00:	454e      	cmp	r6, r9
 800ae02:	d900      	bls.n	800ae06 <__ssputs_r+0x84>
 800ae04:	464e      	mov	r6, r9
 800ae06:	4632      	mov	r2, r6
 800ae08:	4641      	mov	r1, r8
 800ae0a:	6820      	ldr	r0, [r4, #0]
 800ae0c:	f000 faa1 	bl	800b352 <memmove>
 800ae10:	68a3      	ldr	r3, [r4, #8]
 800ae12:	1b9b      	subs	r3, r3, r6
 800ae14:	60a3      	str	r3, [r4, #8]
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	441e      	add	r6, r3
 800ae1a:	6026      	str	r6, [r4, #0]
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e7dc      	b.n	800adda <__ssputs_r+0x58>
 800ae20:	462a      	mov	r2, r5
 800ae22:	f000 fb57 	bl	800b4d4 <_realloc_r>
 800ae26:	4606      	mov	r6, r0
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d1e2      	bne.n	800adf2 <__ssputs_r+0x70>
 800ae2c:	6921      	ldr	r1, [r4, #16]
 800ae2e:	4650      	mov	r0, sl
 800ae30:	f000 faa8 	bl	800b384 <_free_r>
 800ae34:	e7c8      	b.n	800adc8 <__ssputs_r+0x46>
	...

0800ae38 <_svfiprintf_r>:
 800ae38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3c:	461d      	mov	r5, r3
 800ae3e:	898b      	ldrh	r3, [r1, #12]
 800ae40:	061f      	lsls	r7, r3, #24
 800ae42:	b09d      	sub	sp, #116	; 0x74
 800ae44:	4680      	mov	r8, r0
 800ae46:	460c      	mov	r4, r1
 800ae48:	4616      	mov	r6, r2
 800ae4a:	d50f      	bpl.n	800ae6c <_svfiprintf_r+0x34>
 800ae4c:	690b      	ldr	r3, [r1, #16]
 800ae4e:	b96b      	cbnz	r3, 800ae6c <_svfiprintf_r+0x34>
 800ae50:	2140      	movs	r1, #64	; 0x40
 800ae52:	f000 fae5 	bl	800b420 <_malloc_r>
 800ae56:	6020      	str	r0, [r4, #0]
 800ae58:	6120      	str	r0, [r4, #16]
 800ae5a:	b928      	cbnz	r0, 800ae68 <_svfiprintf_r+0x30>
 800ae5c:	230c      	movs	r3, #12
 800ae5e:	f8c8 3000 	str.w	r3, [r8]
 800ae62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae66:	e0c8      	b.n	800affa <_svfiprintf_r+0x1c2>
 800ae68:	2340      	movs	r3, #64	; 0x40
 800ae6a:	6163      	str	r3, [r4, #20]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae70:	2320      	movs	r3, #32
 800ae72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae76:	2330      	movs	r3, #48	; 0x30
 800ae78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae7c:	9503      	str	r5, [sp, #12]
 800ae7e:	f04f 0b01 	mov.w	fp, #1
 800ae82:	4637      	mov	r7, r6
 800ae84:	463d      	mov	r5, r7
 800ae86:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ae8a:	b10b      	cbz	r3, 800ae90 <_svfiprintf_r+0x58>
 800ae8c:	2b25      	cmp	r3, #37	; 0x25
 800ae8e:	d13e      	bne.n	800af0e <_svfiprintf_r+0xd6>
 800ae90:	ebb7 0a06 	subs.w	sl, r7, r6
 800ae94:	d00b      	beq.n	800aeae <_svfiprintf_r+0x76>
 800ae96:	4653      	mov	r3, sl
 800ae98:	4632      	mov	r2, r6
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4640      	mov	r0, r8
 800ae9e:	f7ff ff70 	bl	800ad82 <__ssputs_r>
 800aea2:	3001      	adds	r0, #1
 800aea4:	f000 80a4 	beq.w	800aff0 <_svfiprintf_r+0x1b8>
 800aea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeaa:	4453      	add	r3, sl
 800aeac:	9309      	str	r3, [sp, #36]	; 0x24
 800aeae:	783b      	ldrb	r3, [r7, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 809d 	beq.w	800aff0 <_svfiprintf_r+0x1b8>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aec0:	9304      	str	r3, [sp, #16]
 800aec2:	9307      	str	r3, [sp, #28]
 800aec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aec8:	931a      	str	r3, [sp, #104]	; 0x68
 800aeca:	462f      	mov	r7, r5
 800aecc:	2205      	movs	r2, #5
 800aece:	f817 1b01 	ldrb.w	r1, [r7], #1
 800aed2:	4850      	ldr	r0, [pc, #320]	; (800b014 <_svfiprintf_r+0x1dc>)
 800aed4:	f7f5 f97c 	bl	80001d0 <memchr>
 800aed8:	9b04      	ldr	r3, [sp, #16]
 800aeda:	b9d0      	cbnz	r0, 800af12 <_svfiprintf_r+0xda>
 800aedc:	06d9      	lsls	r1, r3, #27
 800aede:	bf44      	itt	mi
 800aee0:	2220      	movmi	r2, #32
 800aee2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aee6:	071a      	lsls	r2, r3, #28
 800aee8:	bf44      	itt	mi
 800aeea:	222b      	movmi	r2, #43	; 0x2b
 800aeec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aef0:	782a      	ldrb	r2, [r5, #0]
 800aef2:	2a2a      	cmp	r2, #42	; 0x2a
 800aef4:	d015      	beq.n	800af22 <_svfiprintf_r+0xea>
 800aef6:	9a07      	ldr	r2, [sp, #28]
 800aef8:	462f      	mov	r7, r5
 800aefa:	2000      	movs	r0, #0
 800aefc:	250a      	movs	r5, #10
 800aefe:	4639      	mov	r1, r7
 800af00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af04:	3b30      	subs	r3, #48	; 0x30
 800af06:	2b09      	cmp	r3, #9
 800af08:	d94d      	bls.n	800afa6 <_svfiprintf_r+0x16e>
 800af0a:	b1b8      	cbz	r0, 800af3c <_svfiprintf_r+0x104>
 800af0c:	e00f      	b.n	800af2e <_svfiprintf_r+0xf6>
 800af0e:	462f      	mov	r7, r5
 800af10:	e7b8      	b.n	800ae84 <_svfiprintf_r+0x4c>
 800af12:	4a40      	ldr	r2, [pc, #256]	; (800b014 <_svfiprintf_r+0x1dc>)
 800af14:	1a80      	subs	r0, r0, r2
 800af16:	fa0b f000 	lsl.w	r0, fp, r0
 800af1a:	4318      	orrs	r0, r3
 800af1c:	9004      	str	r0, [sp, #16]
 800af1e:	463d      	mov	r5, r7
 800af20:	e7d3      	b.n	800aeca <_svfiprintf_r+0x92>
 800af22:	9a03      	ldr	r2, [sp, #12]
 800af24:	1d11      	adds	r1, r2, #4
 800af26:	6812      	ldr	r2, [r2, #0]
 800af28:	9103      	str	r1, [sp, #12]
 800af2a:	2a00      	cmp	r2, #0
 800af2c:	db01      	blt.n	800af32 <_svfiprintf_r+0xfa>
 800af2e:	9207      	str	r2, [sp, #28]
 800af30:	e004      	b.n	800af3c <_svfiprintf_r+0x104>
 800af32:	4252      	negs	r2, r2
 800af34:	f043 0302 	orr.w	r3, r3, #2
 800af38:	9207      	str	r2, [sp, #28]
 800af3a:	9304      	str	r3, [sp, #16]
 800af3c:	783b      	ldrb	r3, [r7, #0]
 800af3e:	2b2e      	cmp	r3, #46	; 0x2e
 800af40:	d10c      	bne.n	800af5c <_svfiprintf_r+0x124>
 800af42:	787b      	ldrb	r3, [r7, #1]
 800af44:	2b2a      	cmp	r3, #42	; 0x2a
 800af46:	d133      	bne.n	800afb0 <_svfiprintf_r+0x178>
 800af48:	9b03      	ldr	r3, [sp, #12]
 800af4a:	1d1a      	adds	r2, r3, #4
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	9203      	str	r2, [sp, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	bfb8      	it	lt
 800af54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800af58:	3702      	adds	r7, #2
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	4d2e      	ldr	r5, [pc, #184]	; (800b018 <_svfiprintf_r+0x1e0>)
 800af5e:	7839      	ldrb	r1, [r7, #0]
 800af60:	2203      	movs	r2, #3
 800af62:	4628      	mov	r0, r5
 800af64:	f7f5 f934 	bl	80001d0 <memchr>
 800af68:	b138      	cbz	r0, 800af7a <_svfiprintf_r+0x142>
 800af6a:	2340      	movs	r3, #64	; 0x40
 800af6c:	1b40      	subs	r0, r0, r5
 800af6e:	fa03 f000 	lsl.w	r0, r3, r0
 800af72:	9b04      	ldr	r3, [sp, #16]
 800af74:	4303      	orrs	r3, r0
 800af76:	3701      	adds	r7, #1
 800af78:	9304      	str	r3, [sp, #16]
 800af7a:	7839      	ldrb	r1, [r7, #0]
 800af7c:	4827      	ldr	r0, [pc, #156]	; (800b01c <_svfiprintf_r+0x1e4>)
 800af7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af82:	2206      	movs	r2, #6
 800af84:	1c7e      	adds	r6, r7, #1
 800af86:	f7f5 f923 	bl	80001d0 <memchr>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d038      	beq.n	800b000 <_svfiprintf_r+0x1c8>
 800af8e:	4b24      	ldr	r3, [pc, #144]	; (800b020 <_svfiprintf_r+0x1e8>)
 800af90:	bb13      	cbnz	r3, 800afd8 <_svfiprintf_r+0x1a0>
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	3307      	adds	r3, #7
 800af96:	f023 0307 	bic.w	r3, r3, #7
 800af9a:	3308      	adds	r3, #8
 800af9c:	9303      	str	r3, [sp, #12]
 800af9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa0:	444b      	add	r3, r9
 800afa2:	9309      	str	r3, [sp, #36]	; 0x24
 800afa4:	e76d      	b.n	800ae82 <_svfiprintf_r+0x4a>
 800afa6:	fb05 3202 	mla	r2, r5, r2, r3
 800afaa:	2001      	movs	r0, #1
 800afac:	460f      	mov	r7, r1
 800afae:	e7a6      	b.n	800aefe <_svfiprintf_r+0xc6>
 800afb0:	2300      	movs	r3, #0
 800afb2:	3701      	adds	r7, #1
 800afb4:	9305      	str	r3, [sp, #20]
 800afb6:	4619      	mov	r1, r3
 800afb8:	250a      	movs	r5, #10
 800afba:	4638      	mov	r0, r7
 800afbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afc0:	3a30      	subs	r2, #48	; 0x30
 800afc2:	2a09      	cmp	r2, #9
 800afc4:	d903      	bls.n	800afce <_svfiprintf_r+0x196>
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d0c8      	beq.n	800af5c <_svfiprintf_r+0x124>
 800afca:	9105      	str	r1, [sp, #20]
 800afcc:	e7c6      	b.n	800af5c <_svfiprintf_r+0x124>
 800afce:	fb05 2101 	mla	r1, r5, r1, r2
 800afd2:	2301      	movs	r3, #1
 800afd4:	4607      	mov	r7, r0
 800afd6:	e7f0      	b.n	800afba <_svfiprintf_r+0x182>
 800afd8:	ab03      	add	r3, sp, #12
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	4622      	mov	r2, r4
 800afde:	4b11      	ldr	r3, [pc, #68]	; (800b024 <_svfiprintf_r+0x1ec>)
 800afe0:	a904      	add	r1, sp, #16
 800afe2:	4640      	mov	r0, r8
 800afe4:	f3af 8000 	nop.w
 800afe8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800afec:	4681      	mov	r9, r0
 800afee:	d1d6      	bne.n	800af9e <_svfiprintf_r+0x166>
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	065b      	lsls	r3, r3, #25
 800aff4:	f53f af35 	bmi.w	800ae62 <_svfiprintf_r+0x2a>
 800aff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800affa:	b01d      	add	sp, #116	; 0x74
 800affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b000:	ab03      	add	r3, sp, #12
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	4622      	mov	r2, r4
 800b006:	4b07      	ldr	r3, [pc, #28]	; (800b024 <_svfiprintf_r+0x1ec>)
 800b008:	a904      	add	r1, sp, #16
 800b00a:	4640      	mov	r0, r8
 800b00c:	f000 f882 	bl	800b114 <_printf_i>
 800b010:	e7ea      	b.n	800afe8 <_svfiprintf_r+0x1b0>
 800b012:	bf00      	nop
 800b014:	0800b5fe 	.word	0x0800b5fe
 800b018:	0800b604 	.word	0x0800b604
 800b01c:	0800b608 	.word	0x0800b608
 800b020:	00000000 	.word	0x00000000
 800b024:	0800ad83 	.word	0x0800ad83

0800b028 <_printf_common>:
 800b028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b02c:	4691      	mov	r9, r2
 800b02e:	461f      	mov	r7, r3
 800b030:	688a      	ldr	r2, [r1, #8]
 800b032:	690b      	ldr	r3, [r1, #16]
 800b034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b038:	4293      	cmp	r3, r2
 800b03a:	bfb8      	it	lt
 800b03c:	4613      	movlt	r3, r2
 800b03e:	f8c9 3000 	str.w	r3, [r9]
 800b042:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b046:	4606      	mov	r6, r0
 800b048:	460c      	mov	r4, r1
 800b04a:	b112      	cbz	r2, 800b052 <_printf_common+0x2a>
 800b04c:	3301      	adds	r3, #1
 800b04e:	f8c9 3000 	str.w	r3, [r9]
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	0699      	lsls	r1, r3, #26
 800b056:	bf42      	ittt	mi
 800b058:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b05c:	3302      	addmi	r3, #2
 800b05e:	f8c9 3000 	strmi.w	r3, [r9]
 800b062:	6825      	ldr	r5, [r4, #0]
 800b064:	f015 0506 	ands.w	r5, r5, #6
 800b068:	d107      	bne.n	800b07a <_printf_common+0x52>
 800b06a:	f104 0a19 	add.w	sl, r4, #25
 800b06e:	68e3      	ldr	r3, [r4, #12]
 800b070:	f8d9 2000 	ldr.w	r2, [r9]
 800b074:	1a9b      	subs	r3, r3, r2
 800b076:	42ab      	cmp	r3, r5
 800b078:	dc28      	bgt.n	800b0cc <_printf_common+0xa4>
 800b07a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b07e:	6822      	ldr	r2, [r4, #0]
 800b080:	3300      	adds	r3, #0
 800b082:	bf18      	it	ne
 800b084:	2301      	movne	r3, #1
 800b086:	0692      	lsls	r2, r2, #26
 800b088:	d42d      	bmi.n	800b0e6 <_printf_common+0xbe>
 800b08a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b08e:	4639      	mov	r1, r7
 800b090:	4630      	mov	r0, r6
 800b092:	47c0      	blx	r8
 800b094:	3001      	adds	r0, #1
 800b096:	d020      	beq.n	800b0da <_printf_common+0xb2>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	68e5      	ldr	r5, [r4, #12]
 800b09c:	f8d9 2000 	ldr.w	r2, [r9]
 800b0a0:	f003 0306 	and.w	r3, r3, #6
 800b0a4:	2b04      	cmp	r3, #4
 800b0a6:	bf08      	it	eq
 800b0a8:	1aad      	subeq	r5, r5, r2
 800b0aa:	68a3      	ldr	r3, [r4, #8]
 800b0ac:	6922      	ldr	r2, [r4, #16]
 800b0ae:	bf0c      	ite	eq
 800b0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0b4:	2500      	movne	r5, #0
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	bfc4      	itt	gt
 800b0ba:	1a9b      	subgt	r3, r3, r2
 800b0bc:	18ed      	addgt	r5, r5, r3
 800b0be:	f04f 0900 	mov.w	r9, #0
 800b0c2:	341a      	adds	r4, #26
 800b0c4:	454d      	cmp	r5, r9
 800b0c6:	d11a      	bne.n	800b0fe <_printf_common+0xd6>
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	e008      	b.n	800b0de <_printf_common+0xb6>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	4652      	mov	r2, sl
 800b0d0:	4639      	mov	r1, r7
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	47c0      	blx	r8
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	d103      	bne.n	800b0e2 <_printf_common+0xba>
 800b0da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e2:	3501      	adds	r5, #1
 800b0e4:	e7c3      	b.n	800b06e <_printf_common+0x46>
 800b0e6:	18e1      	adds	r1, r4, r3
 800b0e8:	1c5a      	adds	r2, r3, #1
 800b0ea:	2030      	movs	r0, #48	; 0x30
 800b0ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0f0:	4422      	add	r2, r4
 800b0f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0fa:	3302      	adds	r3, #2
 800b0fc:	e7c5      	b.n	800b08a <_printf_common+0x62>
 800b0fe:	2301      	movs	r3, #1
 800b100:	4622      	mov	r2, r4
 800b102:	4639      	mov	r1, r7
 800b104:	4630      	mov	r0, r6
 800b106:	47c0      	blx	r8
 800b108:	3001      	adds	r0, #1
 800b10a:	d0e6      	beq.n	800b0da <_printf_common+0xb2>
 800b10c:	f109 0901 	add.w	r9, r9, #1
 800b110:	e7d8      	b.n	800b0c4 <_printf_common+0x9c>
	...

0800b114 <_printf_i>:
 800b114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b118:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b11c:	460c      	mov	r4, r1
 800b11e:	7e09      	ldrb	r1, [r1, #24]
 800b120:	b085      	sub	sp, #20
 800b122:	296e      	cmp	r1, #110	; 0x6e
 800b124:	4617      	mov	r7, r2
 800b126:	4606      	mov	r6, r0
 800b128:	4698      	mov	r8, r3
 800b12a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b12c:	f000 80b3 	beq.w	800b296 <_printf_i+0x182>
 800b130:	d822      	bhi.n	800b178 <_printf_i+0x64>
 800b132:	2963      	cmp	r1, #99	; 0x63
 800b134:	d036      	beq.n	800b1a4 <_printf_i+0x90>
 800b136:	d80a      	bhi.n	800b14e <_printf_i+0x3a>
 800b138:	2900      	cmp	r1, #0
 800b13a:	f000 80b9 	beq.w	800b2b0 <_printf_i+0x19c>
 800b13e:	2958      	cmp	r1, #88	; 0x58
 800b140:	f000 8083 	beq.w	800b24a <_printf_i+0x136>
 800b144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b148:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b14c:	e032      	b.n	800b1b4 <_printf_i+0xa0>
 800b14e:	2964      	cmp	r1, #100	; 0x64
 800b150:	d001      	beq.n	800b156 <_printf_i+0x42>
 800b152:	2969      	cmp	r1, #105	; 0x69
 800b154:	d1f6      	bne.n	800b144 <_printf_i+0x30>
 800b156:	6820      	ldr	r0, [r4, #0]
 800b158:	6813      	ldr	r3, [r2, #0]
 800b15a:	0605      	lsls	r5, r0, #24
 800b15c:	f103 0104 	add.w	r1, r3, #4
 800b160:	d52a      	bpl.n	800b1b8 <_printf_i+0xa4>
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6011      	str	r1, [r2, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	da03      	bge.n	800b172 <_printf_i+0x5e>
 800b16a:	222d      	movs	r2, #45	; 0x2d
 800b16c:	425b      	negs	r3, r3
 800b16e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b172:	486f      	ldr	r0, [pc, #444]	; (800b330 <_printf_i+0x21c>)
 800b174:	220a      	movs	r2, #10
 800b176:	e039      	b.n	800b1ec <_printf_i+0xd8>
 800b178:	2973      	cmp	r1, #115	; 0x73
 800b17a:	f000 809d 	beq.w	800b2b8 <_printf_i+0x1a4>
 800b17e:	d808      	bhi.n	800b192 <_printf_i+0x7e>
 800b180:	296f      	cmp	r1, #111	; 0x6f
 800b182:	d020      	beq.n	800b1c6 <_printf_i+0xb2>
 800b184:	2970      	cmp	r1, #112	; 0x70
 800b186:	d1dd      	bne.n	800b144 <_printf_i+0x30>
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	f043 0320 	orr.w	r3, r3, #32
 800b18e:	6023      	str	r3, [r4, #0]
 800b190:	e003      	b.n	800b19a <_printf_i+0x86>
 800b192:	2975      	cmp	r1, #117	; 0x75
 800b194:	d017      	beq.n	800b1c6 <_printf_i+0xb2>
 800b196:	2978      	cmp	r1, #120	; 0x78
 800b198:	d1d4      	bne.n	800b144 <_printf_i+0x30>
 800b19a:	2378      	movs	r3, #120	; 0x78
 800b19c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1a0:	4864      	ldr	r0, [pc, #400]	; (800b334 <_printf_i+0x220>)
 800b1a2:	e055      	b.n	800b250 <_printf_i+0x13c>
 800b1a4:	6813      	ldr	r3, [r2, #0]
 800b1a6:	1d19      	adds	r1, r3, #4
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	6011      	str	r1, [r2, #0]
 800b1ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e08c      	b.n	800b2d2 <_printf_i+0x1be>
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6011      	str	r1, [r2, #0]
 800b1bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1c0:	bf18      	it	ne
 800b1c2:	b21b      	sxthne	r3, r3
 800b1c4:	e7cf      	b.n	800b166 <_printf_i+0x52>
 800b1c6:	6813      	ldr	r3, [r2, #0]
 800b1c8:	6825      	ldr	r5, [r4, #0]
 800b1ca:	1d18      	adds	r0, r3, #4
 800b1cc:	6010      	str	r0, [r2, #0]
 800b1ce:	0628      	lsls	r0, r5, #24
 800b1d0:	d501      	bpl.n	800b1d6 <_printf_i+0xc2>
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	e002      	b.n	800b1dc <_printf_i+0xc8>
 800b1d6:	0668      	lsls	r0, r5, #25
 800b1d8:	d5fb      	bpl.n	800b1d2 <_printf_i+0xbe>
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	4854      	ldr	r0, [pc, #336]	; (800b330 <_printf_i+0x21c>)
 800b1de:	296f      	cmp	r1, #111	; 0x6f
 800b1e0:	bf14      	ite	ne
 800b1e2:	220a      	movne	r2, #10
 800b1e4:	2208      	moveq	r2, #8
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1ec:	6865      	ldr	r5, [r4, #4]
 800b1ee:	60a5      	str	r5, [r4, #8]
 800b1f0:	2d00      	cmp	r5, #0
 800b1f2:	f2c0 8095 	blt.w	800b320 <_printf_i+0x20c>
 800b1f6:	6821      	ldr	r1, [r4, #0]
 800b1f8:	f021 0104 	bic.w	r1, r1, #4
 800b1fc:	6021      	str	r1, [r4, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d13d      	bne.n	800b27e <_printf_i+0x16a>
 800b202:	2d00      	cmp	r5, #0
 800b204:	f040 808e 	bne.w	800b324 <_printf_i+0x210>
 800b208:	4665      	mov	r5, ip
 800b20a:	2a08      	cmp	r2, #8
 800b20c:	d10b      	bne.n	800b226 <_printf_i+0x112>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	07db      	lsls	r3, r3, #31
 800b212:	d508      	bpl.n	800b226 <_printf_i+0x112>
 800b214:	6923      	ldr	r3, [r4, #16]
 800b216:	6862      	ldr	r2, [r4, #4]
 800b218:	429a      	cmp	r2, r3
 800b21a:	bfde      	ittt	le
 800b21c:	2330      	movle	r3, #48	; 0x30
 800b21e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b222:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b226:	ebac 0305 	sub.w	r3, ip, r5
 800b22a:	6123      	str	r3, [r4, #16]
 800b22c:	f8cd 8000 	str.w	r8, [sp]
 800b230:	463b      	mov	r3, r7
 800b232:	aa03      	add	r2, sp, #12
 800b234:	4621      	mov	r1, r4
 800b236:	4630      	mov	r0, r6
 800b238:	f7ff fef6 	bl	800b028 <_printf_common>
 800b23c:	3001      	adds	r0, #1
 800b23e:	d14d      	bne.n	800b2dc <_printf_i+0x1c8>
 800b240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b244:	b005      	add	sp, #20
 800b246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b24a:	4839      	ldr	r0, [pc, #228]	; (800b330 <_printf_i+0x21c>)
 800b24c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b250:	6813      	ldr	r3, [r2, #0]
 800b252:	6821      	ldr	r1, [r4, #0]
 800b254:	1d1d      	adds	r5, r3, #4
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6015      	str	r5, [r2, #0]
 800b25a:	060a      	lsls	r2, r1, #24
 800b25c:	d50b      	bpl.n	800b276 <_printf_i+0x162>
 800b25e:	07ca      	lsls	r2, r1, #31
 800b260:	bf44      	itt	mi
 800b262:	f041 0120 	orrmi.w	r1, r1, #32
 800b266:	6021      	strmi	r1, [r4, #0]
 800b268:	b91b      	cbnz	r3, 800b272 <_printf_i+0x15e>
 800b26a:	6822      	ldr	r2, [r4, #0]
 800b26c:	f022 0220 	bic.w	r2, r2, #32
 800b270:	6022      	str	r2, [r4, #0]
 800b272:	2210      	movs	r2, #16
 800b274:	e7b7      	b.n	800b1e6 <_printf_i+0xd2>
 800b276:	064d      	lsls	r5, r1, #25
 800b278:	bf48      	it	mi
 800b27a:	b29b      	uxthmi	r3, r3
 800b27c:	e7ef      	b.n	800b25e <_printf_i+0x14a>
 800b27e:	4665      	mov	r5, ip
 800b280:	fbb3 f1f2 	udiv	r1, r3, r2
 800b284:	fb02 3311 	mls	r3, r2, r1, r3
 800b288:	5cc3      	ldrb	r3, [r0, r3]
 800b28a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b28e:	460b      	mov	r3, r1
 800b290:	2900      	cmp	r1, #0
 800b292:	d1f5      	bne.n	800b280 <_printf_i+0x16c>
 800b294:	e7b9      	b.n	800b20a <_printf_i+0xf6>
 800b296:	6813      	ldr	r3, [r2, #0]
 800b298:	6825      	ldr	r5, [r4, #0]
 800b29a:	6961      	ldr	r1, [r4, #20]
 800b29c:	1d18      	adds	r0, r3, #4
 800b29e:	6010      	str	r0, [r2, #0]
 800b2a0:	0628      	lsls	r0, r5, #24
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	d501      	bpl.n	800b2aa <_printf_i+0x196>
 800b2a6:	6019      	str	r1, [r3, #0]
 800b2a8:	e002      	b.n	800b2b0 <_printf_i+0x19c>
 800b2aa:	066a      	lsls	r2, r5, #25
 800b2ac:	d5fb      	bpl.n	800b2a6 <_printf_i+0x192>
 800b2ae:	8019      	strh	r1, [r3, #0]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	6123      	str	r3, [r4, #16]
 800b2b4:	4665      	mov	r5, ip
 800b2b6:	e7b9      	b.n	800b22c <_printf_i+0x118>
 800b2b8:	6813      	ldr	r3, [r2, #0]
 800b2ba:	1d19      	adds	r1, r3, #4
 800b2bc:	6011      	str	r1, [r2, #0]
 800b2be:	681d      	ldr	r5, [r3, #0]
 800b2c0:	6862      	ldr	r2, [r4, #4]
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f7f4 ff83 	bl	80001d0 <memchr>
 800b2ca:	b108      	cbz	r0, 800b2d0 <_printf_i+0x1bc>
 800b2cc:	1b40      	subs	r0, r0, r5
 800b2ce:	6060      	str	r0, [r4, #4]
 800b2d0:	6863      	ldr	r3, [r4, #4]
 800b2d2:	6123      	str	r3, [r4, #16]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2da:	e7a7      	b.n	800b22c <_printf_i+0x118>
 800b2dc:	6923      	ldr	r3, [r4, #16]
 800b2de:	462a      	mov	r2, r5
 800b2e0:	4639      	mov	r1, r7
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	47c0      	blx	r8
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	d0aa      	beq.n	800b240 <_printf_i+0x12c>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	079b      	lsls	r3, r3, #30
 800b2ee:	d413      	bmi.n	800b318 <_printf_i+0x204>
 800b2f0:	68e0      	ldr	r0, [r4, #12]
 800b2f2:	9b03      	ldr	r3, [sp, #12]
 800b2f4:	4298      	cmp	r0, r3
 800b2f6:	bfb8      	it	lt
 800b2f8:	4618      	movlt	r0, r3
 800b2fa:	e7a3      	b.n	800b244 <_printf_i+0x130>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	464a      	mov	r2, r9
 800b300:	4639      	mov	r1, r7
 800b302:	4630      	mov	r0, r6
 800b304:	47c0      	blx	r8
 800b306:	3001      	adds	r0, #1
 800b308:	d09a      	beq.n	800b240 <_printf_i+0x12c>
 800b30a:	3501      	adds	r5, #1
 800b30c:	68e3      	ldr	r3, [r4, #12]
 800b30e:	9a03      	ldr	r2, [sp, #12]
 800b310:	1a9b      	subs	r3, r3, r2
 800b312:	42ab      	cmp	r3, r5
 800b314:	dcf2      	bgt.n	800b2fc <_printf_i+0x1e8>
 800b316:	e7eb      	b.n	800b2f0 <_printf_i+0x1dc>
 800b318:	2500      	movs	r5, #0
 800b31a:	f104 0919 	add.w	r9, r4, #25
 800b31e:	e7f5      	b.n	800b30c <_printf_i+0x1f8>
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1ac      	bne.n	800b27e <_printf_i+0x16a>
 800b324:	7803      	ldrb	r3, [r0, #0]
 800b326:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b32a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b32e:	e76c      	b.n	800b20a <_printf_i+0xf6>
 800b330:	0800b60f 	.word	0x0800b60f
 800b334:	0800b620 	.word	0x0800b620

0800b338 <__ascii_wctomb>:
 800b338:	b149      	cbz	r1, 800b34e <__ascii_wctomb+0x16>
 800b33a:	2aff      	cmp	r2, #255	; 0xff
 800b33c:	bf85      	ittet	hi
 800b33e:	238a      	movhi	r3, #138	; 0x8a
 800b340:	6003      	strhi	r3, [r0, #0]
 800b342:	700a      	strbls	r2, [r1, #0]
 800b344:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b348:	bf98      	it	ls
 800b34a:	2001      	movls	r0, #1
 800b34c:	4770      	bx	lr
 800b34e:	4608      	mov	r0, r1
 800b350:	4770      	bx	lr

0800b352 <memmove>:
 800b352:	4288      	cmp	r0, r1
 800b354:	b510      	push	{r4, lr}
 800b356:	eb01 0302 	add.w	r3, r1, r2
 800b35a:	d807      	bhi.n	800b36c <memmove+0x1a>
 800b35c:	1e42      	subs	r2, r0, #1
 800b35e:	4299      	cmp	r1, r3
 800b360:	d00a      	beq.n	800b378 <memmove+0x26>
 800b362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b366:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b36a:	e7f8      	b.n	800b35e <memmove+0xc>
 800b36c:	4283      	cmp	r3, r0
 800b36e:	d9f5      	bls.n	800b35c <memmove+0xa>
 800b370:	1881      	adds	r1, r0, r2
 800b372:	1ad2      	subs	r2, r2, r3
 800b374:	42d3      	cmn	r3, r2
 800b376:	d100      	bne.n	800b37a <memmove+0x28>
 800b378:	bd10      	pop	{r4, pc}
 800b37a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b37e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b382:	e7f7      	b.n	800b374 <memmove+0x22>

0800b384 <_free_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4605      	mov	r5, r0
 800b388:	2900      	cmp	r1, #0
 800b38a:	d045      	beq.n	800b418 <_free_r+0x94>
 800b38c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b390:	1f0c      	subs	r4, r1, #4
 800b392:	2b00      	cmp	r3, #0
 800b394:	bfb8      	it	lt
 800b396:	18e4      	addlt	r4, r4, r3
 800b398:	f000 f8d2 	bl	800b540 <__malloc_lock>
 800b39c:	4a1f      	ldr	r2, [pc, #124]	; (800b41c <_free_r+0x98>)
 800b39e:	6813      	ldr	r3, [r2, #0]
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	b933      	cbnz	r3, 800b3b2 <_free_r+0x2e>
 800b3a4:	6063      	str	r3, [r4, #4]
 800b3a6:	6014      	str	r4, [r2, #0]
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3ae:	f000 b8c8 	b.w	800b542 <__malloc_unlock>
 800b3b2:	42a3      	cmp	r3, r4
 800b3b4:	d90c      	bls.n	800b3d0 <_free_r+0x4c>
 800b3b6:	6821      	ldr	r1, [r4, #0]
 800b3b8:	1862      	adds	r2, r4, r1
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	bf04      	itt	eq
 800b3be:	681a      	ldreq	r2, [r3, #0]
 800b3c0:	685b      	ldreq	r3, [r3, #4]
 800b3c2:	6063      	str	r3, [r4, #4]
 800b3c4:	bf04      	itt	eq
 800b3c6:	1852      	addeq	r2, r2, r1
 800b3c8:	6022      	streq	r2, [r4, #0]
 800b3ca:	6004      	str	r4, [r0, #0]
 800b3cc:	e7ec      	b.n	800b3a8 <_free_r+0x24>
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	b10a      	cbz	r2, 800b3d8 <_free_r+0x54>
 800b3d4:	42a2      	cmp	r2, r4
 800b3d6:	d9fa      	bls.n	800b3ce <_free_r+0x4a>
 800b3d8:	6819      	ldr	r1, [r3, #0]
 800b3da:	1858      	adds	r0, r3, r1
 800b3dc:	42a0      	cmp	r0, r4
 800b3de:	d10b      	bne.n	800b3f8 <_free_r+0x74>
 800b3e0:	6820      	ldr	r0, [r4, #0]
 800b3e2:	4401      	add	r1, r0
 800b3e4:	1858      	adds	r0, r3, r1
 800b3e6:	4282      	cmp	r2, r0
 800b3e8:	6019      	str	r1, [r3, #0]
 800b3ea:	d1dd      	bne.n	800b3a8 <_free_r+0x24>
 800b3ec:	6810      	ldr	r0, [r2, #0]
 800b3ee:	6852      	ldr	r2, [r2, #4]
 800b3f0:	605a      	str	r2, [r3, #4]
 800b3f2:	4401      	add	r1, r0
 800b3f4:	6019      	str	r1, [r3, #0]
 800b3f6:	e7d7      	b.n	800b3a8 <_free_r+0x24>
 800b3f8:	d902      	bls.n	800b400 <_free_r+0x7c>
 800b3fa:	230c      	movs	r3, #12
 800b3fc:	602b      	str	r3, [r5, #0]
 800b3fe:	e7d3      	b.n	800b3a8 <_free_r+0x24>
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	1821      	adds	r1, r4, r0
 800b404:	428a      	cmp	r2, r1
 800b406:	bf04      	itt	eq
 800b408:	6811      	ldreq	r1, [r2, #0]
 800b40a:	6852      	ldreq	r2, [r2, #4]
 800b40c:	6062      	str	r2, [r4, #4]
 800b40e:	bf04      	itt	eq
 800b410:	1809      	addeq	r1, r1, r0
 800b412:	6021      	streq	r1, [r4, #0]
 800b414:	605c      	str	r4, [r3, #4]
 800b416:	e7c7      	b.n	800b3a8 <_free_r+0x24>
 800b418:	bd38      	pop	{r3, r4, r5, pc}
 800b41a:	bf00      	nop
 800b41c:	200004c4 	.word	0x200004c4

0800b420 <_malloc_r>:
 800b420:	b570      	push	{r4, r5, r6, lr}
 800b422:	1ccd      	adds	r5, r1, #3
 800b424:	f025 0503 	bic.w	r5, r5, #3
 800b428:	3508      	adds	r5, #8
 800b42a:	2d0c      	cmp	r5, #12
 800b42c:	bf38      	it	cc
 800b42e:	250c      	movcc	r5, #12
 800b430:	2d00      	cmp	r5, #0
 800b432:	4606      	mov	r6, r0
 800b434:	db01      	blt.n	800b43a <_malloc_r+0x1a>
 800b436:	42a9      	cmp	r1, r5
 800b438:	d903      	bls.n	800b442 <_malloc_r+0x22>
 800b43a:	230c      	movs	r3, #12
 800b43c:	6033      	str	r3, [r6, #0]
 800b43e:	2000      	movs	r0, #0
 800b440:	bd70      	pop	{r4, r5, r6, pc}
 800b442:	f000 f87d 	bl	800b540 <__malloc_lock>
 800b446:	4a21      	ldr	r2, [pc, #132]	; (800b4cc <_malloc_r+0xac>)
 800b448:	6814      	ldr	r4, [r2, #0]
 800b44a:	4621      	mov	r1, r4
 800b44c:	b991      	cbnz	r1, 800b474 <_malloc_r+0x54>
 800b44e:	4c20      	ldr	r4, [pc, #128]	; (800b4d0 <_malloc_r+0xb0>)
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	b91b      	cbnz	r3, 800b45c <_malloc_r+0x3c>
 800b454:	4630      	mov	r0, r6
 800b456:	f000 f863 	bl	800b520 <_sbrk_r>
 800b45a:	6020      	str	r0, [r4, #0]
 800b45c:	4629      	mov	r1, r5
 800b45e:	4630      	mov	r0, r6
 800b460:	f000 f85e 	bl	800b520 <_sbrk_r>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d124      	bne.n	800b4b2 <_malloc_r+0x92>
 800b468:	230c      	movs	r3, #12
 800b46a:	6033      	str	r3, [r6, #0]
 800b46c:	4630      	mov	r0, r6
 800b46e:	f000 f868 	bl	800b542 <__malloc_unlock>
 800b472:	e7e4      	b.n	800b43e <_malloc_r+0x1e>
 800b474:	680b      	ldr	r3, [r1, #0]
 800b476:	1b5b      	subs	r3, r3, r5
 800b478:	d418      	bmi.n	800b4ac <_malloc_r+0x8c>
 800b47a:	2b0b      	cmp	r3, #11
 800b47c:	d90f      	bls.n	800b49e <_malloc_r+0x7e>
 800b47e:	600b      	str	r3, [r1, #0]
 800b480:	50cd      	str	r5, [r1, r3]
 800b482:	18cc      	adds	r4, r1, r3
 800b484:	4630      	mov	r0, r6
 800b486:	f000 f85c 	bl	800b542 <__malloc_unlock>
 800b48a:	f104 000b 	add.w	r0, r4, #11
 800b48e:	1d23      	adds	r3, r4, #4
 800b490:	f020 0007 	bic.w	r0, r0, #7
 800b494:	1ac3      	subs	r3, r0, r3
 800b496:	d0d3      	beq.n	800b440 <_malloc_r+0x20>
 800b498:	425a      	negs	r2, r3
 800b49a:	50e2      	str	r2, [r4, r3]
 800b49c:	e7d0      	b.n	800b440 <_malloc_r+0x20>
 800b49e:	428c      	cmp	r4, r1
 800b4a0:	684b      	ldr	r3, [r1, #4]
 800b4a2:	bf16      	itet	ne
 800b4a4:	6063      	strne	r3, [r4, #4]
 800b4a6:	6013      	streq	r3, [r2, #0]
 800b4a8:	460c      	movne	r4, r1
 800b4aa:	e7eb      	b.n	800b484 <_malloc_r+0x64>
 800b4ac:	460c      	mov	r4, r1
 800b4ae:	6849      	ldr	r1, [r1, #4]
 800b4b0:	e7cc      	b.n	800b44c <_malloc_r+0x2c>
 800b4b2:	1cc4      	adds	r4, r0, #3
 800b4b4:	f024 0403 	bic.w	r4, r4, #3
 800b4b8:	42a0      	cmp	r0, r4
 800b4ba:	d005      	beq.n	800b4c8 <_malloc_r+0xa8>
 800b4bc:	1a21      	subs	r1, r4, r0
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f000 f82e 	bl	800b520 <_sbrk_r>
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	d0cf      	beq.n	800b468 <_malloc_r+0x48>
 800b4c8:	6025      	str	r5, [r4, #0]
 800b4ca:	e7db      	b.n	800b484 <_malloc_r+0x64>
 800b4cc:	200004c4 	.word	0x200004c4
 800b4d0:	200004c8 	.word	0x200004c8

0800b4d4 <_realloc_r>:
 800b4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d6:	4607      	mov	r7, r0
 800b4d8:	4614      	mov	r4, r2
 800b4da:	460e      	mov	r6, r1
 800b4dc:	b921      	cbnz	r1, 800b4e8 <_realloc_r+0x14>
 800b4de:	4611      	mov	r1, r2
 800b4e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4e4:	f7ff bf9c 	b.w	800b420 <_malloc_r>
 800b4e8:	b922      	cbnz	r2, 800b4f4 <_realloc_r+0x20>
 800b4ea:	f7ff ff4b 	bl	800b384 <_free_r>
 800b4ee:	4625      	mov	r5, r4
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f4:	f000 f826 	bl	800b544 <_malloc_usable_size_r>
 800b4f8:	42a0      	cmp	r0, r4
 800b4fa:	d20f      	bcs.n	800b51c <_realloc_r+0x48>
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	4638      	mov	r0, r7
 800b500:	f7ff ff8e 	bl	800b420 <_malloc_r>
 800b504:	4605      	mov	r5, r0
 800b506:	2800      	cmp	r0, #0
 800b508:	d0f2      	beq.n	800b4f0 <_realloc_r+0x1c>
 800b50a:	4631      	mov	r1, r6
 800b50c:	4622      	mov	r2, r4
 800b50e:	f7ff fb43 	bl	800ab98 <memcpy>
 800b512:	4631      	mov	r1, r6
 800b514:	4638      	mov	r0, r7
 800b516:	f7ff ff35 	bl	800b384 <_free_r>
 800b51a:	e7e9      	b.n	800b4f0 <_realloc_r+0x1c>
 800b51c:	4635      	mov	r5, r6
 800b51e:	e7e7      	b.n	800b4f0 <_realloc_r+0x1c>

0800b520 <_sbrk_r>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	4c06      	ldr	r4, [pc, #24]	; (800b53c <_sbrk_r+0x1c>)
 800b524:	2300      	movs	r3, #0
 800b526:	4605      	mov	r5, r0
 800b528:	4608      	mov	r0, r1
 800b52a:	6023      	str	r3, [r4, #0]
 800b52c:	f7f5 ff06 	bl	800133c <_sbrk>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_sbrk_r+0x1a>
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	b103      	cbz	r3, 800b53a <_sbrk_r+0x1a>
 800b538:	602b      	str	r3, [r5, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	20000bc0 	.word	0x20000bc0

0800b540 <__malloc_lock>:
 800b540:	4770      	bx	lr

0800b542 <__malloc_unlock>:
 800b542:	4770      	bx	lr

0800b544 <_malloc_usable_size_r>:
 800b544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b548:	1f18      	subs	r0, r3, #4
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	bfbc      	itt	lt
 800b54e:	580b      	ldrlt	r3, [r1, r0]
 800b550:	18c0      	addlt	r0, r0, r3
 800b552:	4770      	bx	lr

0800b554 <_init>:
 800b554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b556:	bf00      	nop
 800b558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b55a:	bc08      	pop	{r3}
 800b55c:	469e      	mov	lr, r3
 800b55e:	4770      	bx	lr

0800b560 <_fini>:
 800b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b562:	bf00      	nop
 800b564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b566:	bc08      	pop	{r3}
 800b568:	469e      	mov	lr, r3
 800b56a:	4770      	bx	lr
