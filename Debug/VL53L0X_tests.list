
VL53L0X_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800b74c  0800b74c  0001b74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b914  0800b914  000204a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b914  0800b914  000204a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b914  0800b914  000204a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b914  0800b914  0001b914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b918  0800b918  0001b918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a4  20000000  0800b91c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  200004a4  0800bdc0  000204a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  0800bdc0  00020bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002126a  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000345b  00000000  00000000  0004173e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001608  00000000  00000000  00044ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  000461a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003f90  00000000  00000000  00047658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014248  00000000  00000000  0004b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad1d9  00000000  00000000  0005f830  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ca09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062ac  00000000  00000000  0010ca84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004a4 	.word	0x200004a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b734 	.word	0x0800b734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004a8 	.word	0x200004a8
 80001cc:	0800b734 	.word	0x0800b734

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <distance_sensors_init>:

const uint8_t addresses[3] = {ADDR_SENSOR_0, ADDR_SENSOR_1, ADDR_SENSOR_2};
GPIO_TypeDef *port[3] = {TOF_XSHUT_0_GPIO_Port, TOF_XSHUT_1_GPIO_Port, TOF_XSHUT_2_GPIO_Port};
const uint16_t pin[3] = {TOF_XSHUT_0_Pin, TOF_XSHUT_1_Pin, TOF_XSHUT_2_Pin} ;

void distance_sensors_init(distance_sensors_t *distance_sensors, I2C_HandleTypeDef *hi2c){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i < 3; ++i){
 800027a:	2300      	movs	r3, #0
 800027c:	73fb      	strb	r3, [r7, #15]
 800027e:	e018      	b.n	80002b2 <distance_sensors_init+0x42>
		distance_sensors->sensors[i] = &distance_sensors->vl53l0x[i];
 8000280:	7bfa      	ldrb	r2, [r7, #15]
 8000282:	7bfb      	ldrb	r3, [r7, #15]
 8000284:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000288:	fb01 f202 	mul.w	r2, r1, r2
 800028c:	3250      	adds	r2, #80	; 0x50
 800028e:	6879      	ldr	r1, [r7, #4]
 8000290:	440a      	add	r2, r1
 8000292:	3204      	adds	r2, #4
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	440b      	add	r3, r1
 800029e:	605a      	str	r2, [r3, #4]
		distance_sensors->data_ready[i] = 0;
 80002a0:	7bfb      	ldrb	r3, [r7, #15]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	2200      	movs	r2, #0
 80002a8:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(uint8_t i = 0; i < 3; ++i){
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
 80002ae:	3301      	adds	r3, #1
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d9e3      	bls.n	8000280 <distance_sensors_init+0x10>

	}

	for(uint8_t i = 0; i < 3; ++i){
 80002b8:	2300      	movs	r3, #0
 80002ba:	73bb      	strb	r3, [r7, #14]
 80002bc:	e016      	b.n	80002ec <distance_sensors_init+0x7c>
		distance_sensors->sensors[i]->I2cHandle = hi2c;
 80002be:	7bbb      	ldrb	r3, [r7, #14]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	4413      	add	r3, r2
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	683a      	ldr	r2, [r7, #0]
 80002ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		distance_sensors->sensors[i]->I2cDevAddr = 0x52;
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	4413      	add	r3, r2
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	2252      	movs	r2, #82	; 0x52
 80002e2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	for(uint8_t i = 0; i < 3; ++i){
 80002e6:	7bbb      	ldrb	r3, [r7, #14]
 80002e8:	3301      	adds	r3, #1
 80002ea:	73bb      	strb	r3, [r7, #14]
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d9e5      	bls.n	80002be <distance_sensors_init+0x4e>
	}

	for(uint8_t i = 0; i < 3; ++i){
 80002f2:	2300      	movs	r3, #0
 80002f4:	737b      	strb	r3, [r7, #13]
 80002f6:	e011      	b.n	800031c <distance_sensors_init+0xac>
		HAL_GPIO_WritePin(port[i], pin[i], GPIO_PIN_RESET);
 80002f8:	7b7b      	ldrb	r3, [r7, #13]
 80002fa:	4a87      	ldr	r2, [pc, #540]	; (8000518 <distance_sensors_init+0x2a8>)
 80002fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000300:	7b7b      	ldrb	r3, [r7, #13]
 8000302:	4a86      	ldr	r2, [pc, #536]	; (800051c <distance_sensors_init+0x2ac>)
 8000304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000308:	2200      	movs	r2, #0
 800030a:	4619      	mov	r1, r3
 800030c:	f001 fc96 	bl	8001c3c <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8000310:	2014      	movs	r0, #20
 8000312:	f001 f947 	bl	80015a4 <HAL_Delay>
	for(uint8_t i = 0; i < 3; ++i){
 8000316:	7b7b      	ldrb	r3, [r7, #13]
 8000318:	3301      	adds	r3, #1
 800031a:	737b      	strb	r3, [r7, #13]
 800031c:	7b7b      	ldrb	r3, [r7, #13]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d9ea      	bls.n	80002f8 <distance_sensors_init+0x88>
	}

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000322:	2006      	movs	r0, #6
 8000324:	f001 fa87 	bl	8001836 <HAL_NVIC_DisableIRQ>
 	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000328:	2028      	movs	r0, #40	; 0x28
 800032a:	f001 fa84 	bl	8001836 <HAL_NVIC_DisableIRQ>
 	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800032e:	2007      	movs	r0, #7
 8000330:	f001 fa81 	bl	8001836 <HAL_NVIC_DisableIRQ>

 	for(uint8_t i = 0; i < 3; ++i){
 8000334:	2300      	movs	r3, #0
 8000336:	733b      	strb	r3, [r7, #12]
 8000338:	e0dd      	b.n	80004f6 <distance_sensors_init+0x286>
 		HAL_GPIO_WritePin(port[i], pin[i], GPIO_PIN_SET);
 800033a:	7b3b      	ldrb	r3, [r7, #12]
 800033c:	4a76      	ldr	r2, [pc, #472]	; (8000518 <distance_sensors_init+0x2a8>)
 800033e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000342:	7b3b      	ldrb	r3, [r7, #12]
 8000344:	4a75      	ldr	r2, [pc, #468]	; (800051c <distance_sensors_init+0x2ac>)
 8000346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800034a:	2201      	movs	r2, #1
 800034c:	4619      	mov	r1, r3
 800034e:	f001 fc75 	bl	8001c3c <HAL_GPIO_WritePin>
 		HAL_Delay(20);
 8000352:	2014      	movs	r0, #20
 8000354:	f001 f926 	bl	80015a4 <HAL_Delay>
 		VL53L0X_WaitDeviceBooted(distance_sensors->sensors[i]);
 8000358:	7b3b      	ldrb	r3, [r7, #12]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	4413      	add	r3, r2
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	4618      	mov	r0, r3
 8000368:	f005 ffae 	bl	80062c8 <VL53L0X_WaitDeviceBooted>
 		VL53L0X_DataInit(distance_sensors->sensors[i]);
 800036c:	7b3b      	ldrb	r3, [r7, #12]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	4413      	add	r3, r2
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	4618      	mov	r0, r3
 800037c:	f005 fcbe 	bl	8005cfc <VL53L0X_DataInit>
 		VL53L0X_SetDeviceAddress(distance_sensors->sensors[i],addresses[i]);
 8000380:	7b3b      	ldrb	r3, [r7, #12]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	4413      	add	r3, r2
 800038c:	6858      	ldr	r0, [r3, #4]
 800038e:	7b3b      	ldrb	r3, [r7, #12]
 8000390:	4a63      	ldr	r2, [pc, #396]	; (8000520 <distance_sensors_init+0x2b0>)
 8000392:	5cd3      	ldrb	r3, [r2, r3]
 8000394:	4619      	mov	r1, r3
 8000396:	f005 fc99 	bl	8005ccc <VL53L0X_SetDeviceAddress>
 		distance_sensors->sensors[i]->I2cDevAddr = addresses[i];
 800039a:	7b3a      	ldrb	r2, [r7, #12]
 800039c:	7b3b      	ldrb	r3, [r7, #12]
 800039e:	6879      	ldr	r1, [r7, #4]
 80003a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	440b      	add	r3, r1
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	495d      	ldr	r1, [pc, #372]	; (8000520 <distance_sensors_init+0x2b0>)
 80003ac:	5c8a      	ldrb	r2, [r1, r2]
 80003ae:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 		VL53L0X_WaitDeviceBooted(distance_sensors->sensors[i]);
 80003b2:	7b3b      	ldrb	r3, [r7, #12]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f005 ff81 	bl	80062c8 <VL53L0X_WaitDeviceBooted>
 		VL53L0X_StaticInit(distance_sensors->sensors[i]);
 80003c6:	7b3b      	ldrb	r3, [r7, #12]
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	4413      	add	r3, r2
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f005 fdf5 	bl	8005fc4 <VL53L0X_StaticInit>
		VL53L0X_PerformRefCalibration(distance_sensors->sensors[i], &distance_sensors->VhvSettings, &distance_sensors->PhaseCal);
 80003da:	7b3b      	ldrb	r3, [r7, #12]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	4413      	add	r3, r2
 80003e6:	6858      	ldr	r0, [r3, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f203 5119 	addw	r1, r3, #1305	; 0x519
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f203 531a 	addw	r3, r3, #1306	; 0x51a
 80003f4:	461a      	mov	r2, r3
 80003f6:	f006 fca3 	bl	8006d40 <VL53L0X_PerformRefCalibration>
		VL53L0X_PerformRefSpadManagement(distance_sensors->sensors[i], &distance_sensors->refSpadCount, &distance_sensors->isApertureSpads);
 80003fa:	7b3b      	ldrb	r3, [r7, #12]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4413      	add	r3, r2
 8000406:	6858      	ldr	r0, [r3, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f203 5114 	addw	r1, r3, #1300	; 0x514
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8000414:	461a      	mov	r2, r3
 8000416:	f007 f921 	bl	800765c <VL53L0X_PerformRefSpadManagement>
		VL53L0X_SetDeviceMode(distance_sensors->sensors[i], VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800041a:	7b3b      	ldrb	r3, [r7, #12]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	4413      	add	r3, r2
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	2101      	movs	r1, #1
 800042a:	4618      	mov	r0, r3
 800042c:	f005 ffea 	bl	8006404 <VL53L0X_SetDeviceMode>

		VL53L0X_SetLimitCheckEnable(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000430:	7b3b      	ldrb	r3, [r7, #12]
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	4413      	add	r3, r2
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	2201      	movs	r2, #1
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f006 fa76 	bl	8006934 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckEnable(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000448:	7b3b      	ldrb	r3, [r7, #12]
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4413      	add	r3, r2
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	2201      	movs	r2, #1
 8000458:	2101      	movs	r1, #1
 800045a:	4618      	mov	r0, r3
 800045c:	f006 fa6a 	bl	8006934 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckValue(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000460:	7b3b      	ldrb	r3, [r7, #12]
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4413      	add	r3, r2
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	f641 1299 	movw	r2, #6553	; 0x1999
 8000472:	2101      	movs	r1, #1
 8000474:	4618      	mov	r0, r3
 8000476:	f006 fb0d 	bl	8006a94 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetLimitCheckValue(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800047a:	7b3b      	ldrb	r3, [r7, #12]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4413      	add	r3, r2
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f006 fb00 	bl	8006a94 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(distance_sensors->sensors[i], 33000);
 8000494:	7b3b      	ldrb	r3, [r7, #12]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80004a6:	4618      	mov	r0, r3
 80004a8:	f006 f826 	bl	80064f8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		VL53L0X_SetVcselPulsePeriod(distance_sensors->sensors[i], VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80004ac:	7b3b      	ldrb	r3, [r7, #12]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4413      	add	r3, r2
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	2212      	movs	r2, #18
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f006 f840 	bl	8006544 <VL53L0X_SetVcselPulsePeriod>
		VL53L0X_SetVcselPulsePeriod(distance_sensors->sensors[i], VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80004c4:	7b3b      	ldrb	r3, [r7, #12]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4413      	add	r3, r2
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	220e      	movs	r2, #14
 80004d4:	2101      	movs	r1, #1
 80004d6:	4618      	mov	r0, r3
 80004d8:	f006 f834 	bl	8006544 <VL53L0X_SetVcselPulsePeriod>

		VL53L0X_StartMeasurement(distance_sensors->sensors[i]);
 80004dc:	7b3b      	ldrb	r3, [r7, #12]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f006 fca4 	bl	8006e38 <VL53L0X_StartMeasurement>
 	for(uint8_t i = 0; i < 3; ++i){
 80004f0:	7b3b      	ldrb	r3, [r7, #12]
 80004f2:	3301      	adds	r3, #1
 80004f4:	733b      	strb	r3, [r7, #12]
 80004f6:	7b3b      	ldrb	r3, [r7, #12]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	f67f af1e 	bls.w	800033a <distance_sensors_init+0xca>
 	}



	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004fe:	2006      	movs	r0, #6
 8000500:	f001 f98b 	bl	800181a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000504:	2028      	movs	r0, #40	; 0x28
 8000506:	f001 f988 	bl	800181a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800050a:	2007      	movs	r0, #7
 800050c:	f001 f985 	bl	800181a <HAL_NVIC_EnableIRQ>

}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000000 	.word	0x20000000
 800051c:	0800b794 	.word	0x0800b794
 8000520:	0800b790 	.word	0x0800b790

08000524 <distance_sensors_is_data_ready>:

uint8_t distance_sensors_is_data_ready(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]
	return distance_sensors->data_ready[num_of_sensor];
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 800053a:	b2db      	uxtb	r3, r3
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <distance_sensors_cleer_interrupt>:

void distance_sensors_cleer_interrupt(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
	distance_sensors->data_ready[num_of_sensor] = 0;
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	2200      	movs	r2, #0
 800055c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <distance_sensors_set_interrupt>:

void distance_sensors_set_interrupt(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]
	distance_sensors->data_ready[num_of_sensor] = 1;
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	2201      	movs	r2, #1
 8000580:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <distance_sensors_get_distance>:

uint16_t distance_sensors_get_distance(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_GetRangingMeasurementData(distance_sensors->sensors[num_of_sensor], &distance_sensors->ranging_data[num_of_sensor]);
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	6858      	ldr	r0, [r3, #4]
 80005aa:	78fa      	ldrb	r2, [r7, #3]
 80005ac:	4613      	mov	r3, r2
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	4619      	mov	r1, r3
 80005ba:	f006 fd3d 	bl	8007038 <VL53L0X_GetRangingMeasurementData>
	VL53L0X_ClearInterruptMask(distance_sensors->sensors[num_of_sensor], VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 80005be:	78fb      	ldrb	r3, [r7, #3]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 ffe2 	bl	8007598 <VL53L0X_ClearInterruptMask>
	return distance_sensors->ranging_data[num_of_sensor].RangeMilliMeter;
 80005d4:	78fa      	ldrb	r2, [r7, #3]
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	4613      	mov	r3, r2
 80005da:	00db      	lsls	r3, r3, #3
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	3308      	adds	r3, #8
 80005e4:	881b      	ldrh	r3, [r3, #0]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 ff6f 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f8b7 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fa6f 	bl	8000ae0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 fa39 	bl	8000a78 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000606:	f000 f909 	bl	800081c <MX_I2C1_Init>
  MX_TIM16_Init();
 800060a:	f000 f945 	bl	8000898 <MX_TIM16_Init>
  MX_TIM17_Init();
 800060e:	f000 f9bb 	bl	8000988 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   distance_sensors_init(&distance_sensors, &hi2c1);
 8000612:	494c      	ldr	r1, [pc, #304]	; (8000744 <main+0x154>)
 8000614:	484c      	ldr	r0, [pc, #304]	; (8000748 <main+0x158>)
 8000616:	f7ff fe2b 	bl	8000270 <distance_sensors_init>
   remote_controller_init(&remote_controller, &huart2);
 800061a:	494c      	ldr	r1, [pc, #304]	; (800074c <main+0x15c>)
 800061c:	484c      	ldr	r0, [pc, #304]	; (8000750 <main+0x160>)
 800061e:	f000 fc03 	bl	8000e28 <remote_controller_init>
   motors_init(&htim16, &htim17);
 8000622:	494c      	ldr	r1, [pc, #304]	; (8000754 <main+0x164>)
 8000624:	484c      	ldr	r0, [pc, #304]	; (8000758 <main+0x168>)
 8000626:	f000 fb4d 	bl	8000cc4 <motors_init>
  // motors_set_speed(RIGHT_MOTOR, 50);
   //motors_set_speed(LEFT_MOTOR, 50);
   motors_set_direction(RIGHT_MOTOR, GO_FORWARD);
 800062a:	2102      	movs	r1, #2
 800062c:	2001      	movs	r0, #1
 800062e:	f000 fba5 	bl	8000d7c <motors_set_direction>
   motors_set_direction(LEFT_MOTOR, GO_FORWARD);
 8000632:	2102      	movs	r1, #2
 8000634:	2000      	movs	r0, #0
 8000636:	f000 fba1 	bl	8000d7c <motors_set_direction>
   HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 800063a:	4b45      	ldr	r3, [pc, #276]	; (8000750 <main+0x160>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2201      	movs	r2, #1
 8000640:	4946      	ldr	r1, [pc, #280]	; (800075c <main+0x16c>)
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fa44 	bl	8004ad0 <HAL_UART_Receive_IT>
   uint16_t x;

  while (1)
  {

	  if(distance_sensors_is_data_ready(&distance_sensors, 0))
 8000648:	2100      	movs	r1, #0
 800064a:	483f      	ldr	r0, [pc, #252]	; (8000748 <main+0x158>)
 800064c:	f7ff ff6a 	bl	8000524 <distance_sensors_is_data_ready>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d011      	beq.n	800067a <main+0x8a>
	  {

		x = sprintf((char*)tab, "L 1: %i\n",distance_sensors_get_distance(&distance_sensors, 0));
 8000656:	2100      	movs	r1, #0
 8000658:	483b      	ldr	r0, [pc, #236]	; (8000748 <main+0x158>)
 800065a:	f7ff ff99 	bl	8000590 <distance_sensors_get_distance>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	493e      	ldr	r1, [pc, #248]	; (8000760 <main+0x170>)
 8000668:	4618      	mov	r0, r3
 800066a:	f00a fb99 	bl	800ada0 <siprintf>
 800066e:	4603      	mov	r3, r0
 8000670:	84fb      	strh	r3, [r7, #38]	; 0x26
		//HAL_UART_Transmit(&huart2, tab, x, 100);
		distance_sensors_cleer_interrupt(&distance_sensors, 0);
 8000672:	2100      	movs	r1, #0
 8000674:	4834      	ldr	r0, [pc, #208]	; (8000748 <main+0x158>)
 8000676:	f7ff ff67 	bl	8000548 <distance_sensors_cleer_interrupt>

	  }

	  if(distance_sensors_is_data_ready(&distance_sensors, 1))
 800067a:	2101      	movs	r1, #1
 800067c:	4832      	ldr	r0, [pc, #200]	; (8000748 <main+0x158>)
 800067e:	f7ff ff51 	bl	8000524 <distance_sensors_is_data_ready>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d011      	beq.n	80006ac <main+0xbc>
	 	  {

		  	  x = sprintf((char*)tab, "L 2: %i\n",distance_sensors_get_distance(&distance_sensors, 1));
 8000688:	2101      	movs	r1, #1
 800068a:	482f      	ldr	r0, [pc, #188]	; (8000748 <main+0x158>)
 800068c:	f7ff ff80 	bl	8000590 <distance_sensors_get_distance>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	4932      	ldr	r1, [pc, #200]	; (8000764 <main+0x174>)
 800069a:	4618      	mov	r0, r3
 800069c:	f00a fb80 	bl	800ada0 <siprintf>
 80006a0:	4603      	mov	r3, r0
 80006a2:	84fb      	strh	r3, [r7, #38]	; 0x26
		  		//HAL_UART_Transmit(&huart2, tab, x, 100);
	 		distance_sensors_cleer_interrupt(&distance_sensors, 1);
 80006a4:	2101      	movs	r1, #1
 80006a6:	4828      	ldr	r0, [pc, #160]	; (8000748 <main+0x158>)
 80006a8:	f7ff ff4e 	bl	8000548 <distance_sensors_cleer_interrupt>

	 	  }

	  if(distance_sensors_is_data_ready(&distance_sensors, 2))
 80006ac:	2102      	movs	r1, #2
 80006ae:	4826      	ldr	r0, [pc, #152]	; (8000748 <main+0x158>)
 80006b0:	f7ff ff38 	bl	8000524 <distance_sensors_is_data_ready>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d018      	beq.n	80006ec <main+0xfc>
	  	 	  {

	  		  	  x = sprintf((char*)tab, "L 3: %i\n",distance_sensors_get_distance(&distance_sensors, 2));
 80006ba:	2102      	movs	r1, #2
 80006bc:	4822      	ldr	r0, [pc, #136]	; (8000748 <main+0x158>)
 80006be:	f7ff ff67 	bl	8000590 <distance_sensors_get_distance>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	4927      	ldr	r1, [pc, #156]	; (8000768 <main+0x178>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f00a fb67 	bl	800ada0 <siprintf>
 80006d2:	4603      	mov	r3, r0
 80006d4:	84fb      	strh	r3, [r7, #38]	; 0x26
	  		  	HAL_UART_Transmit(&huart2, tab, x, 100);
 80006d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006d8:	f107 0108 	add.w	r1, r7, #8
 80006dc:	2364      	movs	r3, #100	; 0x64
 80006de:	481b      	ldr	r0, [pc, #108]	; (800074c <main+0x15c>)
 80006e0:	f004 f962 	bl	80049a8 <HAL_UART_Transmit>
	  	 		distance_sensors_cleer_interrupt(&distance_sensors, 2);
 80006e4:	2102      	movs	r1, #2
 80006e6:	4818      	ldr	r0, [pc, #96]	; (8000748 <main+0x158>)
 80006e8:	f7ff ff2e 	bl	8000548 <distance_sensors_cleer_interrupt>

	  	 	  }
	  if(remote_controller_is_data_ready(&remote_controller)){
 80006ec:	4818      	ldr	r0, [pc, #96]	; (8000750 <main+0x160>)
 80006ee:	f000 fbdf 	bl	8000eb0 <remote_controller_is_data_ready>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0a7      	beq.n	8000648 <main+0x58>
		  remote_controller_parser(&remote_controller);
 80006f8:	4815      	ldr	r0, [pc, #84]	; (8000750 <main+0x160>)
 80006fa:	f000 fc25 	bl	8000f48 <remote_controller_parser>
		  motors_set_speed(RIGHT_MOTOR, (int)(remote_controller.ki));
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <main+0x160>)
 8000700:	edd3 7a05 	vldr	s15, [r3, #20]
 8000704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000708:	edc7 7a01 	vstr	s15, [r7, #4]
 800070c:	793b      	ldrb	r3, [r7, #4]
 800070e:	4619      	mov	r1, r3
 8000710:	2001      	movs	r0, #1
 8000712:	f000 fb0b 	bl	8000d2c <motors_set_speed>
		  motors_set_speed(LEFT_MOTOR, (int)(remote_controller.ki));
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <main+0x160>)
 8000718:	edd3 7a05 	vldr	s15, [r3, #20]
 800071c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000720:	edc7 7a01 	vstr	s15, [r7, #4]
 8000724:	793b      	ldrb	r3, [r7, #4]
 8000726:	4619      	mov	r1, r3
 8000728:	2000      	movs	r0, #0
 800072a:	f000 faff 	bl	8000d2c <motors_set_speed>
		  remote_controller_celar_interrupt(&remote_controller);
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <main+0x160>)
 8000730:	f000 fbcb 	bl	8000eca <remote_controller_celar_interrupt>
		  HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <main+0x160>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2201      	movs	r2, #1
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <main+0x16c>)
 800073c:	4618      	mov	r0, r3
 800073e:	f004 f9c7 	bl	8004ad0 <HAL_UART_Receive_IT>
	  if(distance_sensors_is_data_ready(&distance_sensors, 0))
 8000742:	e781      	b.n	8000648 <main+0x58>
 8000744:	200004cc 	.word	0x200004cc
 8000748:	20000588 	.word	0x20000588
 800074c:	20000aa4 	.word	0x20000aa4
 8000750:	20000564 	.word	0x20000564
 8000754:	20000518 	.word	0x20000518
 8000758:	20000b28 	.word	0x20000b28
 800075c:	20000568 	.word	0x20000568
 8000760:	0800b74c 	.word	0x0800b74c
 8000764:	0800b758 	.word	0x0800b758
 8000768:	0800b764 	.word	0x0800b764

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b096      	sub	sp, #88	; 0x58
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000776:	2228      	movs	r2, #40	; 0x28
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f00a fb07 	bl	800ad8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 ff6e 	bl	80026a0 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007ca:	f000 fa73 	bl	8000cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fe60 	bl	80034b0 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007f6:	f000 fa5d 	bl	8000cb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007fa:	2320      	movs	r3, #32
 80007fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4618      	mov	r0, r3
 8000806:	f003 f889 	bl	800391c <HAL_RCCEx_PeriphCLKConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000810:	f000 fa50 	bl	8000cb4 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3758      	adds	r7, #88	; 0x58
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_I2C1_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_I2C1_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_I2C1_Init+0x74>)
 8000828:	f240 220b 	movw	r2, #523	; 0x20b
 800082c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_I2C1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_I2C1_Init+0x74>)
 8000836:	2201      	movs	r2, #1
 8000838:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_I2C1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_I2C1_Init+0x74>)
 800085a:	f001 fa1f 	bl	8001c9c <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 fa26 	bl	8000cb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <MX_I2C1_Init+0x74>)
 800086c:	f001 fe80 	bl	8002570 <HAL_I2CEx_ConfigAnalogFilter>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000876:	f000 fa1d 	bl	8000cb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_I2C1_Init+0x74>)
 800087e:	f001 fec2 	bl	8002606 <HAL_I2CEx_ConfigDigitalFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000888:	f000 fa14 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200004cc 	.word	0x200004cc
 8000894:	40005400 	.word	0x40005400

08000898 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b092      	sub	sp, #72	; 0x48
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800089e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	222c      	movs	r2, #44	; 0x2c
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00a fa68 	bl	800ad8e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008be:	4b30      	ldr	r3, [pc, #192]	; (8000980 <MX_TIM16_Init+0xe8>)
 80008c0:	4a30      	ldr	r2, [pc, #192]	; (8000984 <MX_TIM16_Init+0xec>)
 80008c2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9;
 80008c4:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <MX_TIM16_Init+0xe8>)
 80008c6:	2209      	movs	r2, #9
 80008c8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <MX_TIM16_Init+0xe8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 80008d0:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <MX_TIM16_Init+0xe8>)
 80008d2:	2263      	movs	r2, #99	; 0x63
 80008d4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <MX_TIM16_Init+0xe8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <MX_TIM16_Init+0xe8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <MX_TIM16_Init+0xe8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008e8:	4825      	ldr	r0, [pc, #148]	; (8000980 <MX_TIM16_Init+0xe8>)
 80008ea:	f003 f93d 	bl	8003b68 <HAL_TIM_Base_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80008f4:	f000 f9de 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80008f8:	4821      	ldr	r0, [pc, #132]	; (8000980 <MX_TIM16_Init+0xe8>)
 80008fa:	f003 f9e9 	bl	8003cd0 <HAL_TIM_PWM_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000904:	f000 f9d6 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000908:	2360      	movs	r3, #96	; 0x60
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000910:	2300      	movs	r3, #0
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <MX_TIM16_Init+0xe8>)
 800092e:	f003 fb1d 	bl	8003f6c <HAL_TIM_PWM_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8000938:	f000 f9bc 	bl	8000cb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	4619      	mov	r1, r3
 8000962:	4807      	ldr	r0, [pc, #28]	; (8000980 <MX_TIM16_Init+0xe8>)
 8000964:	f003 ff5a 	bl	800481c <HAL_TIMEx_ConfigBreakDeadTime>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800096e:	f000 f9a1 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <MX_TIM16_Init+0xe8>)
 8000974:	f000 fc4a 	bl	800120c <HAL_TIM_MspPostInit>

}
 8000978:	bf00      	nop
 800097a:	3748      	adds	r7, #72	; 0x48
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000b28 	.word	0x20000b28
 8000984:	40014400 	.word	0x40014400

08000988 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b092      	sub	sp, #72	; 0x48
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	222c      	movs	r2, #44	; 0x2c
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00a f9f0 	bl	800ad8e <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009ae:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <MX_TIM17_Init+0xe8>)
 80009b0:	4a30      	ldr	r2, [pc, #192]	; (8000a74 <MX_TIM17_Init+0xec>)
 80009b2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 9;
 80009b4:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <MX_TIM17_Init+0xe8>)
 80009b6:	2209      	movs	r2, #9
 80009b8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <MX_TIM17_Init+0xe8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 80009c0:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <MX_TIM17_Init+0xe8>)
 80009c2:	2263      	movs	r2, #99	; 0x63
 80009c4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <MX_TIM17_Init+0xe8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_TIM17_Init+0xe8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <MX_TIM17_Init+0xe8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80009d8:	4825      	ldr	r0, [pc, #148]	; (8000a70 <MX_TIM17_Init+0xe8>)
 80009da:	f003 f8c5 	bl	8003b68 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80009e4:	f000 f966 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80009e8:	4821      	ldr	r0, [pc, #132]	; (8000a70 <MX_TIM17_Init+0xe8>)
 80009ea:	f003 f971 	bl	8003cd0 <HAL_TIM_PWM_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80009f4:	f000 f95e 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f8:	2360      	movs	r3, #96	; 0x60
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a00:	2300      	movs	r3, #0
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a04:	2300      	movs	r3, #0
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4814      	ldr	r0, [pc, #80]	; (8000a70 <MX_TIM17_Init+0xe8>)
 8000a1e:	f003 faa5 	bl	8003f6c <HAL_TIM_PWM_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000a28:	f000 f944 	bl	8000cb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4619      	mov	r1, r3
 8000a52:	4807      	ldr	r0, [pc, #28]	; (8000a70 <MX_TIM17_Init+0xe8>)
 8000a54:	f003 fee2 	bl	800481c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000a5e:	f000 f929 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <MX_TIM17_Init+0xe8>)
 8000a64:	f000 fbd2 	bl	800120c <HAL_TIM_MspPostInit>

}
 8000a68:	bf00      	nop
 8000a6a:	3748      	adds	r7, #72	; 0x48
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000518 	.word	0x20000518
 8000a74:	40014800 	.word	0x40014800

08000a78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_USART2_UART_Init+0x64>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000a84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000abc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ac0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USART2_UART_Init+0x60>)
 8000ac4:	f003 ff22 	bl	800490c <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000ace:	f000 f8f1 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000aa4 	.word	0x20000aa4
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af6:	4b43      	ldr	r3, [pc, #268]	; (8000c04 <MX_GPIO_Init+0x124>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	4a42      	ldr	r2, [pc, #264]	; (8000c04 <MX_GPIO_Init+0x124>)
 8000afc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b00:	6153      	str	r3, [r2, #20]
 8000b02:	4b40      	ldr	r3, [pc, #256]	; (8000c04 <MX_GPIO_Init+0x124>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b3d      	ldr	r3, [pc, #244]	; (8000c04 <MX_GPIO_Init+0x124>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	4a3c      	ldr	r2, [pc, #240]	; (8000c04 <MX_GPIO_Init+0x124>)
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	6153      	str	r3, [r2, #20]
 8000b1a:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <MX_GPIO_Init+0x124>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b37      	ldr	r3, [pc, #220]	; (8000c04 <MX_GPIO_Init+0x124>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a36      	ldr	r2, [pc, #216]	; (8000c04 <MX_GPIO_Init+0x124>)
 8000b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b30:	6153      	str	r3, [r2, #20]
 8000b32:	4b34      	ldr	r3, [pc, #208]	; (8000c04 <MX_GPIO_Init+0x124>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SILNIK_P_2_Pin|TOF_XSHUT_2_Pin|SILNIK_L_2_Pin|SILNIK_L_1_Pin
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f241 7190 	movw	r1, #6032	; 0x1790
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f001 f878 	bl	8001c3c <HAL_GPIO_WritePin>
                          |TOF_XSHUT_1_Pin|TOF_XSHUT_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SILNIK_P_1_GPIO_Port, SILNIK_P_1_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2108      	movs	r1, #8
 8000b50:	482d      	ldr	r0, [pc, #180]	; (8000c08 <MX_GPIO_Init+0x128>)
 8000b52:	f001 f873 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SILNIK_P_2_Pin TOF_XSHUT_2_Pin SILNIK_L_2_Pin SILNIK_L_1_Pin
                           TOF_XSHUT_1_Pin TOF_XSHUT_0_Pin */
  GPIO_InitStruct.Pin = SILNIK_P_2_Pin|TOF_XSHUT_2_Pin|SILNIK_L_2_Pin|SILNIK_L_1_Pin
 8000b56:	f241 7390 	movw	r3, #6032	; 0x1790
 8000b5a:	60fb      	str	r3, [r7, #12]
                          |TOF_XSHUT_1_Pin|TOF_XSHUT_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f000 fef1 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_INT_0_Pin TOF_INT_2_Pin */
  GPIO_InitStruct.Pin = TOF_INT_0_Pin|TOF_INT_2_Pin;
 8000b76:	2303      	movs	r3, #3
 8000b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4619      	mov	r1, r3
 8000b8a:	481f      	ldr	r0, [pc, #124]	; (8000c08 <MX_GPIO_Init+0x128>)
 8000b8c:	f000 fee4 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_1_Pin */
  GPIO_InitStruct.Pin = TOF_INT_1_Pin;
 8000b90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_1_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000baa:	f000 fed5 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : SILNIK_P_1_Pin */
  GPIO_InitStruct.Pin = SILNIK_P_1_Pin;
 8000bae:	2308      	movs	r3, #8
 8000bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SILNIK_P_1_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4810      	ldr	r0, [pc, #64]	; (8000c08 <MX_GPIO_Init+0x128>)
 8000bc6:	f000 fec7 	bl	8001958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2006      	movs	r0, #6
 8000bd0:	f000 fe07 	bl	80017e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bd4:	2006      	movs	r0, #6
 8000bd6:	f000 fe20 	bl	800181a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2007      	movs	r0, #7
 8000be0:	f000 fdff 	bl	80017e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000be4:	2007      	movs	r0, #7
 8000be6:	f000 fe18 	bl	800181a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2028      	movs	r0, #40	; 0x28
 8000bf0:	f000 fdf7 	bl	80017e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bf4:	2028      	movs	r0, #40	; 0x28
 8000bf6:	f000 fe10 	bl	800181a <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000
 8000c08:	48000400 	.word	0x48000400

08000c0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOF_INT_0_Pin)
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d103      	bne.n	8000c24 <HAL_GPIO_EXTI_Callback+0x18>
	{
//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
		distance_sensors_set_interrupt(&distance_sensors, 0);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x40>)
 8000c20:	f7ff fca4 	bl	800056c <distance_sensors_set_interrupt>

	}

	if(GPIO_Pin == TOF_INT_1_Pin)
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c2a:	d103      	bne.n	8000c34 <HAL_GPIO_EXTI_Callback+0x28>
		{
	//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
	//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
		distance_sensors_set_interrupt(&distance_sensors, 1);
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x40>)
 8000c30:	f7ff fc9c 	bl	800056c <distance_sensors_set_interrupt>

		}
	if(GPIO_Pin == TOF_INT_2_Pin)
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d103      	bne.n	8000c42 <HAL_GPIO_EXTI_Callback+0x36>
			{
		//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
		//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
			distance_sensors_set_interrupt(&distance_sensors, 2);
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x40>)
 8000c3e:	f7ff fc95 	bl	800056c <distance_sensors_set_interrupt>

			}
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000588 	.word	0x20000588

08000c50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

	if(huart->Instance == remote_controller.uart->Instance){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_UART_RxCpltCallback+0x5c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d11d      	bne.n	8000ca2 <HAL_UART_RxCpltCallback+0x52>
		remote_controller.data[remote_controller.buf_counter++] = remote_controller.one_byte;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_RxCpltCallback+0x5c>)
 8000c68:	795b      	ldrb	r3, [r3, #5]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	b2d1      	uxtb	r1, r2
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <HAL_UART_RxCpltCallback+0x5c>)
 8000c70:	7151      	strb	r1, [r2, #5]
 8000c72:	4619      	mov	r1, r3
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_UART_RxCpltCallback+0x5c>)
 8000c76:	791a      	ldrb	r2, [r3, #4]
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_UART_RxCpltCallback+0x5c>)
 8000c7a:	440b      	add	r3, r1
 8000c7c:	719a      	strb	r2, [r3, #6]
		if(remote_controller.one_byte != '\n'){
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_UART_RxCpltCallback+0x5c>)
 8000c80:	791b      	ldrb	r3, [r3, #4]
 8000c82:	2b0a      	cmp	r3, #10
 8000c84:	d007      	beq.n	8000c96 <HAL_UART_RxCpltCallback+0x46>
			HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_UART_RxCpltCallback+0x5c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <HAL_UART_RxCpltCallback+0x60>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 ff1e 	bl	8004ad0 <HAL_UART_Receive_IT>
			remote_controller.buf_counter = 0;
		}
	}


}
 8000c94:	e005      	b.n	8000ca2 <HAL_UART_RxCpltCallback+0x52>
			remote_controller_set_interrupt(&remote_controller);
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_UART_RxCpltCallback+0x5c>)
 8000c98:	f000 f8fc 	bl	8000e94 <remote_controller_set_interrupt>
			remote_controller.buf_counter = 0;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_UART_RxCpltCallback+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	715a      	strb	r2, [r3, #5]
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000564 	.word	0x20000564
 8000cb0:	20000568 	.word	0x20000568

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <motors_init>:

TIM_HandleTypeDef *timer_left_motor;
TIM_HandleTypeDef *timer_right_motor;


void motors_init(TIM_HandleTypeDef *timer_1, TIM_HandleTypeDef *timer_2){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	timer_left_motor = timer_1;
 8000cce:	4a15      	ldr	r2, [pc, #84]	; (8000d24 <motors_init+0x60>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]
	timer_right_motor = timer_2;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <motors_init+0x64>)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(timer_left_motor);
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <motors_init+0x60>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 ff9a 	bl	8003c18 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(timer_right_motor);
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <motors_init+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 ff95 	bl	8003c18 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(timer_left_motor, TIM_CHANNEL_1);
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <motors_init+0x60>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f003 f84d 	bl	8003d94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer_right_motor, TIM_CHANNEL_1);
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <motors_init+0x64>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 f847 	bl	8003d94 <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(timer_left_motor, TIM_CHANNEL_1, 0);
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <motors_init+0x60>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, 0);
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <motors_init+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000b78 	.word	0x20000b78
 8000d28:	20000b74 	.word	0x20000b74

08000d2c <motors_set_speed>:


void motors_set_speed(motors_t motor, uint8_t speed){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
	if(speed < 0){
		speed = 0;
	}else if(speed > 100){
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	2b64      	cmp	r3, #100	; 0x64
 8000d40:	d901      	bls.n	8000d46 <motors_set_speed+0x1a>
		speed = 100;
 8000d42:	2364      	movs	r3, #100	; 0x64
 8000d44:	71bb      	strb	r3, [r7, #6]
	}

	if(motor == LEFT_MOTOR){
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <motors_set_speed+0x2c>
		__HAL_TIM_SetCompare(timer_left_motor, TIM_CHANNEL_1, speed);
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <motors_set_speed+0x48>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	79ba      	ldrb	r2, [r7, #6]
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
	}else if(motor == RIGHT_MOTOR){
		__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, speed);
	}
}
 8000d56:	e007      	b.n	8000d68 <motors_set_speed+0x3c>
	}else if(motor == RIGHT_MOTOR){
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d104      	bne.n	8000d68 <motors_set_speed+0x3c>
		__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, speed);
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <motors_set_speed+0x4c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	79ba      	ldrb	r2, [r7, #6]
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	20000b78 	.word	0x20000b78
 8000d78:	20000b74 	.word	0x20000b74

08000d7c <motors_set_direction>:

void motors_set_direction(motors_t motor, motors_t direction){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	460a      	mov	r2, r1
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	71bb      	strb	r3, [r7, #6]
	if(motor == LEFT_MOTOR){
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d123      	bne.n	8000dda <motors_set_direction+0x5e>
		if(direction == GO_FORWARD){
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d10e      	bne.n	8000db6 <motors_set_direction+0x3a>
			HAL_GPIO_WritePin(SILNIK_L_1_GPIO_Port, SILNIK_L_1_Pin, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f000 ff4b 	bl	8001c3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SILNIK_L_2_GPIO_Port, SILNIK_L_2_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f000 ff44 	bl	8001c3c <HAL_GPIO_WritePin>
		}else if(direction == GO_BACKWARDS){
			HAL_GPIO_WritePin(SILNIK_P_1_GPIO_Port, SILNIK_P_1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(SILNIK_P_2_GPIO_Port, SILNIK_P_2_Pin, GPIO_PIN_SET);
		}
	}
}
 8000db4:	e031      	b.n	8000e1a <motors_set_direction+0x9e>
		}else if(direction == GO_BACKWARDS){
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d12e      	bne.n	8000e1a <motors_set_direction+0x9e>
			HAL_GPIO_WritePin(SILNIK_L_1_GPIO_Port, SILNIK_L_1_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f000 ff39 	bl	8001c3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SILNIK_L_2_GPIO_Port, SILNIK_L_2_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f000 ff32 	bl	8001c3c <HAL_GPIO_WritePin>
}
 8000dd8:	e01f      	b.n	8000e1a <motors_set_direction+0x9e>
	}else if(motor == RIGHT_MOTOR){
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d11c      	bne.n	8000e1a <motors_set_direction+0x9e>
		if(direction == GO_FORWARD){
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d10b      	bne.n	8000dfe <motors_set_direction+0x82>
			HAL_GPIO_WritePin(SILNIK_P_1_GPIO_Port, SILNIK_P_1_Pin, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2108      	movs	r1, #8
 8000dea:	480e      	ldr	r0, [pc, #56]	; (8000e24 <motors_set_direction+0xa8>)
 8000dec:	f000 ff26 	bl	8001c3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SILNIK_P_2_GPIO_Port, SILNIK_P_2_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2110      	movs	r1, #16
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f000 ff20 	bl	8001c3c <HAL_GPIO_WritePin>
}
 8000dfc:	e00d      	b.n	8000e1a <motors_set_direction+0x9e>
		}else if(direction == GO_BACKWARDS){
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d10a      	bne.n	8000e1a <motors_set_direction+0x9e>
			HAL_GPIO_WritePin(SILNIK_P_1_GPIO_Port, SILNIK_P_1_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2108      	movs	r1, #8
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <motors_set_direction+0xa8>)
 8000e0a:	f000 ff17 	bl	8001c3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SILNIK_P_2_GPIO_Port, SILNIK_P_2_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2110      	movs	r1, #16
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f000 ff11 	bl	8001c3c <HAL_GPIO_WritePin>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	48000400 	.word	0x48000400

08000e28 <remote_controller_init>:
#include "remote_controller.h"

void remote_controller_init(remote_controller_t *controller, UART_HandleTypeDef *uart){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	controller->uart = uart;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	601a      	str	r2, [r3, #0]
	controller->one_byte = 0;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	711a      	strb	r2, [r3, #4]
	controller->buf_counter = 0;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	715a      	strb	r2, [r3, #5]
    memset(controller->data,0,BUF_SIZE);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3306      	adds	r3, #6
 8000e48:	220a      	movs	r2, #10
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f009 ff9e 	bl	800ad8e <memset>
	controller->kp = 0.0f;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
	controller->ki = 0.0f;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
	controller->kd = 0.0f;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
	controller->dist_from_wall = 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	839a      	strh	r2, [r3, #28]
	controller->free_drive = 0;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	779a      	strb	r2, [r3, #30]
	controller->robot_state = 0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	77da      	strb	r2, [r3, #31]
	controller->pwm_l = 0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2020 	strb.w	r2, [r3, #32]
	controller->pwm_r = 0;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <remote_controller_set_interrupt>:
void remote_controller_set_interrupt(remote_controller_t *controller){
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	controller->interrupt = 1;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <remote_controller_is_data_ready>:
uint8_t remote_controller_is_data_ready(remote_controller_t *controller){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	return controller->interrupt;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <remote_controller_celar_interrupt>:
void remote_controller_celar_interrupt(remote_controller_t *controller){
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	controller->interrupt = 0;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <str_to_num>:

uint16_t str_to_num(uint8_t *data){
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
	uint8_t str_to_num[10];
	uint8_t j = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i = 3; i != '\n'; ++i,++j ){
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	75bb      	strb	r3, [r7, #22]
 8000ef6:	e00f      	b.n	8000f18 <str_to_num+0x32>
		str_to_num[j] = data[i];
 8000ef8:	7dbb      	ldrb	r3, [r7, #22]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	441a      	add	r2, r3
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	f107 0118 	add.w	r1, r7, #24
 8000f06:	440b      	add	r3, r1
 8000f08:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 3; i != '\n'; ++i,++j ){
 8000f0c:	7dbb      	ldrb	r3, [r7, #22]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	75bb      	strb	r3, [r7, #22]
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
 8000f14:	3301      	adds	r3, #1
 8000f16:	75fb      	strb	r3, [r7, #23]
 8000f18:	7dbb      	ldrb	r3, [r7, #22]
 8000f1a:	2b0a      	cmp	r3, #10
 8000f1c:	d1ec      	bne.n	8000ef8 <str_to_num+0x12>
	}
	str_to_num[++j] = '\0';
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
 8000f20:	3301      	adds	r3, #1
 8000f22:	75fb      	strb	r3, [r7, #23]
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	f107 0218 	add.w	r2, r7, #24
 8000f2a:	4413      	add	r3, r2
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f803 2c0c 	strb.w	r2, [r3, #-12]


	return (atoi((char *)str_to_num));
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4618      	mov	r0, r3
 8000f38:	f009 feef 	bl	800ad1a <atoi>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b29b      	uxth	r3, r3
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <remote_controller_parser>:

void remote_controller_parser(remote_controller_t *controller){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	if(!strncmp((char *) controller->data,"kp",2)){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3306      	adds	r3, #6
 8000f54:	2202      	movs	r2, #2
 8000f56:	4957      	ldr	r1, [pc, #348]	; (80010b4 <remote_controller_parser+0x16c>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f009 ff49 	bl	800adf0 <strncmp>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10d      	bne.n	8000f80 <remote_controller_parser+0x38>
		controller->kp = str_to_num(controller->data);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3306      	adds	r3, #6
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ffbc 	bl	8000ee6 <str_to_num>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	edc3 7a04 	vstr	s15, [r3, #16]
		controller->pwm_l = str_to_num(controller->data);
	}else if(!strncmp((char *) controller->data,"pr",2)){ //pwm r
		controller->pwm_r = str_to_num(controller->data);
	}

}
 8000f7e:	e094      	b.n	80010aa <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"ki",2)){
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3306      	adds	r3, #6
 8000f84:	2202      	movs	r2, #2
 8000f86:	494c      	ldr	r1, [pc, #304]	; (80010b8 <remote_controller_parser+0x170>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f009 ff31 	bl	800adf0 <strncmp>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10d      	bne.n	8000fb0 <remote_controller_parser+0x68>
		controller->ki = str_to_num(controller->data);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3306      	adds	r3, #6
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ffa4 	bl	8000ee6 <str_to_num>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000fae:	e07c      	b.n	80010aa <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"kd",2)){
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3306      	adds	r3, #6
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4941      	ldr	r1, [pc, #260]	; (80010bc <remote_controller_parser+0x174>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f009 ff19 	bl	800adf0 <strncmp>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10d      	bne.n	8000fe0 <remote_controller_parser+0x98>
		controller->kd = str_to_num(controller->data);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3306      	adds	r3, #6
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff8c 	bl	8000ee6 <str_to_num>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8000fde:	e064      	b.n	80010aa <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"dw",2)){ //dist from wall
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3306      	adds	r3, #6
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	4936      	ldr	r1, [pc, #216]	; (80010c0 <remote_controller_parser+0x178>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f009 ff01 	bl	800adf0 <strncmp>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d109      	bne.n	8001008 <remote_controller_parser+0xc0>
		controller->dist_from_wall = str_to_num(controller->data);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3306      	adds	r3, #6
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff74 	bl	8000ee6 <str_to_num>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	839a      	strh	r2, [r3, #28]
}
 8001006:	e050      	b.n	80010aa <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"fd",2)){ //free drive
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3306      	adds	r3, #6
 800100c:	2202      	movs	r2, #2
 800100e:	492d      	ldr	r1, [pc, #180]	; (80010c4 <remote_controller_parser+0x17c>)
 8001010:	4618      	mov	r0, r3
 8001012:	f009 feed 	bl	800adf0 <strncmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d109      	bne.n	8001030 <remote_controller_parser+0xe8>
		controller->free_drive = str_to_num(controller->data);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3306      	adds	r3, #6
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff60 	bl	8000ee6 <str_to_num>
 8001026:	4603      	mov	r3, r0
 8001028:	b2da      	uxtb	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	779a      	strb	r2, [r3, #30]
}
 800102e:	e03c      	b.n	80010aa <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"rs",2)){ //robot state
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3306      	adds	r3, #6
 8001034:	2202      	movs	r2, #2
 8001036:	4924      	ldr	r1, [pc, #144]	; (80010c8 <remote_controller_parser+0x180>)
 8001038:	4618      	mov	r0, r3
 800103a:	f009 fed9 	bl	800adf0 <strncmp>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d109      	bne.n	8001058 <remote_controller_parser+0x110>
		controller->robot_state = str_to_num(controller->data);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3306      	adds	r3, #6
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff4c 	bl	8000ee6 <str_to_num>
 800104e:	4603      	mov	r3, r0
 8001050:	b2da      	uxtb	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	77da      	strb	r2, [r3, #31]
}
 8001056:	e028      	b.n	80010aa <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"pl",2)){ //pwm l
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3306      	adds	r3, #6
 800105c:	2202      	movs	r2, #2
 800105e:	491b      	ldr	r1, [pc, #108]	; (80010cc <remote_controller_parser+0x184>)
 8001060:	4618      	mov	r0, r3
 8001062:	f009 fec5 	bl	800adf0 <strncmp>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10a      	bne.n	8001082 <remote_controller_parser+0x13a>
		controller->pwm_l = str_to_num(controller->data);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3306      	adds	r3, #6
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff38 	bl	8000ee6 <str_to_num>
 8001076:	4603      	mov	r3, r0
 8001078:	b2da      	uxtb	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001080:	e013      	b.n	80010aa <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"pr",2)){ //pwm r
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3306      	adds	r3, #6
 8001086:	2202      	movs	r2, #2
 8001088:	4911      	ldr	r1, [pc, #68]	; (80010d0 <remote_controller_parser+0x188>)
 800108a:	4618      	mov	r0, r3
 800108c:	f009 feb0 	bl	800adf0 <strncmp>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <remote_controller_parser+0x162>
		controller->pwm_r = str_to_num(controller->data);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3306      	adds	r3, #6
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff23 	bl	8000ee6 <str_to_num>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	0800b770 	.word	0x0800b770
 80010b8:	0800b774 	.word	0x0800b774
 80010bc:	0800b778 	.word	0x0800b778
 80010c0:	0800b77c 	.word	0x0800b77c
 80010c4:	0800b780 	.word	0x0800b780
 80010c8:	0800b784 	.word	0x0800b784
 80010cc:	0800b788 	.word	0x0800b788
 80010d0:	0800b78c 	.word	0x0800b78c

080010d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_MspInit+0x44>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_MspInit+0x44>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6193      	str	r3, [r2, #24]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_MspInit+0x44>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x44>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x44>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x44>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_I2C_MspInit+0x7c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d127      	bne.n	800118e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_I2C_MspInit+0x80>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_I2C_MspInit+0x80>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_I2C_MspInit+0x80>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001156:	23c0      	movs	r3, #192	; 0xc0
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115a:	2312      	movs	r3, #18
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115e:	2301      	movs	r3, #1
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001166:	2304      	movs	r3, #4
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <HAL_I2C_MspInit+0x84>)
 8001172:	f000 fbf1 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_I2C_MspInit+0x80>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_I2C_MspInit+0x80>)
 800117c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001180:	61d3      	str	r3, [r2, #28]
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_I2C_MspInit+0x80>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40005400 	.word	0x40005400
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000400 	.word	0x48000400

080011a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <HAL_TIM_Base_MspInit+0x5c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d10c      	bne.n	80011d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_TIM_Base_MspInit+0x60>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <HAL_TIM_Base_MspInit+0x60>)
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_TIM_Base_MspInit+0x60>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80011ce:	e010      	b.n	80011f2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <HAL_TIM_Base_MspInit+0x64>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d10b      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_TIM_Base_MspInit+0x60>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <HAL_TIM_Base_MspInit+0x60>)
 80011e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e4:	6193      	str	r3, [r2, #24]
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_TIM_Base_MspInit+0x60>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40014400 	.word	0x40014400
 8001204:	40021000 	.word	0x40021000
 8001208:	40014800 	.word	0x40014800

0800120c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <HAL_TIM_MspPostInit+0xa8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d11c      	bne.n	8001268 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_TIM_MspPostInit+0xac>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <HAL_TIM_MspPostInit+0xac>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_TIM_MspPostInit+0xac>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8001246:	2310      	movs	r3, #16
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001256:	2301      	movs	r3, #1
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4816      	ldr	r0, [pc, #88]	; (80012bc <HAL_TIM_MspPostInit+0xb0>)
 8001262:	f000 fb79 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001266:	e020      	b.n	80012aa <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM17)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <HAL_TIM_MspPostInit+0xb4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d11b      	bne.n	80012aa <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_TIM_MspPostInit+0xac>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <HAL_TIM_MspPostInit+0xac>)
 8001278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127c:	6153      	str	r3, [r2, #20]
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_TIM_MspPostInit+0xac>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_P_Pin;
 800128a:	2320      	movs	r3, #32
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800129a:	230a      	movs	r3, #10
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_P_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <HAL_TIM_MspPostInit+0xb0>)
 80012a6:	f000 fb57 	bl	8001958 <HAL_GPIO_Init>
}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40014400 	.word	0x40014400
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400
 80012c0:	40014800 	.word	0x40014800

080012c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <HAL_UART_MspInit+0x8c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d130      	bne.n	8001348 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_UART_MspInit+0x90>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a1a      	ldr	r2, [pc, #104]	; (8001354 <HAL_UART_MspInit+0x90>)
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_UART_MspInit+0x90>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_UART_MspInit+0x90>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <HAL_UART_MspInit+0x90>)
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	6153      	str	r3, [r2, #20]
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_UART_MspInit+0x90>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001316:	230c      	movs	r3, #12
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001326:	2307      	movs	r3, #7
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f000 fb10 	bl	8001958 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	2026      	movs	r0, #38	; 0x26
 800133e:	f000 fa50 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001342:	2026      	movs	r0, #38	; 0x26
 8001344:	f000 fa69 	bl	800181a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001348:	bf00      	nop
 800134a:	3728      	adds	r7, #40	; 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40004400 	.word	0x40004400
 8001354:	40021000 	.word	0x40021000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f8da 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f000 fc57 	bl	8001c6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80013c6:	2002      	movs	r0, #2
 80013c8:	f000 fc50 	bl	8001c6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <USART2_IRQHandler+0x10>)
 80013d6:	f003 fbc9 	bl	8004b6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000aa4 	.word	0x20000aa4

080013e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80013e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013ec:	f000 fc3e 	bl	8001c6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <_sbrk+0x5c>)
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <_sbrk+0x60>)
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <_sbrk+0x64>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <_sbrk+0x68>)
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	429a      	cmp	r2, r3
 8001422:	d207      	bcs.n	8001434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001424:	f009 fc7e 	bl	800ad24 <__errno>
 8001428:	4602      	mov	r2, r0
 800142a:	230c      	movs	r3, #12
 800142c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001432:	e009      	b.n	8001448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <_sbrk+0x64>)
 8001444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20003000 	.word	0x20003000
 8001454:	00000400 	.word	0x00000400
 8001458:	200004c0 	.word	0x200004c0
 800145c:	20000bc8 	.word	0x20000bc8

08001460 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <SystemInit+0x20>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <SystemInit+0x20>)
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480d      	ldr	r0, [pc, #52]	; (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148a:	490e      	ldr	r1, [pc, #56]	; (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800148c:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <LoopForever+0xe>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a0:	4c0b      	ldr	r4, [pc, #44]	; (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ae:	f7ff ffd7 	bl	8001460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f009 fc3d 	bl	800ad30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b6:	f7ff f89b 	bl	80005f0 <main>

080014ba <LoopForever>:

LoopForever:
    b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014bc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	200004a4 	.word	0x200004a4
  ldr r2, =_sidata
 80014c8:	0800b91c 	.word	0x0800b91c
  ldr r2, =_sbss
 80014cc:	200004a4 	.word	0x200004a4
  ldr r4, =_ebss
 80014d0:	20000bc4 	.word	0x20000bc4

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_Init+0x28>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_Init+0x28>)
 80014e2:	f043 0310 	orr.w	r3, r3, #16
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 f96f 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 f808 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f4:	f7ff fdee 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40022000 	.word	0x40022000

08001504 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x54>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x58>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f995 	bl	8001852 <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001540:	f000 f94f 	bl	80017e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x5c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2000000c 	.word	0x2000000c
 800155c:	20000014 	.word	0x20000014
 8001560:	20000010 	.word	0x20000010

08001564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000014 	.word	0x20000014
 8001588:	20000b7c 	.word	0x20000b7c

0800158c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000b7c 	.word	0x20000b7c

080015a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff ffee 	bl	800158c <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015bc:	d005      	beq.n	80015ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_Delay+0x40>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015ca:	bf00      	nop
 80015cc:	f7ff ffde 	bl	800158c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f7      	bhi.n	80015cc <HAL_Delay+0x28>
  {
  }
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000014 	.word	0x20000014

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4907      	ldr	r1, [pc, #28]	; (8001684 <__NVIC_EnableIRQ+0x38>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db10      	blt.n	80016bc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4909      	ldr	r1, [pc, #36]	; (80016c8 <__NVIC_DisableIRQ+0x40>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	3320      	adds	r3, #32
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016b8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	; (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	; 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001798:	d301      	bcc.n	800179e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2301      	movs	r3, #1
 800179c:	e00f      	b.n	80017be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <SysTick_Config+0x40>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a6:	210f      	movs	r1, #15
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ac:	f7ff ff8e 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <SysTick_Config+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <SysTick_Config+0x40>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff07 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff1c 	bl	8001630 <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff8e 	bl	8001720 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5d 	bl	80016cc <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff0f 	bl	800164c <__NVIC_EnableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff1f 	bl	8001688 <__NVIC_DisableIRQ>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ff94 	bl	8001788 <SysTick_Config>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001878:	2b02      	cmp	r3, #2
 800187a:	d008      	beq.n	800188e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2204      	movs	r2, #4
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e020      	b.n	80018d0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 020e 	bic.w	r2, r2, #14
 800189c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0201 	bic.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b6:	2101      	movs	r1, #1
 80018b8:	fa01 f202 	lsl.w	r2, r1, r2
 80018bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d005      	beq.n	80018fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2204      	movs	r2, #4
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e027      	b.n	800194e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 020e 	bic.w	r2, r2, #14
 800190c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0201 	bic.w	r2, r2, #1
 800191c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	4798      	blx	r3
    } 
  }
  return status;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	e14e      	b.n	8001c06 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8140 	beq.w	8001c00 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d005      	beq.n	8001998 <HAL_GPIO_Init+0x40>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d130      	bne.n	80019fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 0201 	and.w	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d017      	beq.n	8001a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d123      	bne.n	8001a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	6939      	ldr	r1, [r7, #16]
 8001a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0203 	and.w	r2, r3, #3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 809a 	beq.w	8001c00 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001acc:	4b55      	ldr	r3, [pc, #340]	; (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a54      	ldr	r2, [pc, #336]	; (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b52      	ldr	r3, [pc, #328]	; (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ae4:	4a50      	ldr	r2, [pc, #320]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b0e:	d013      	beq.n	8001b38 <HAL_GPIO_Init+0x1e0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a46      	ldr	r2, [pc, #280]	; (8001c2c <HAL_GPIO_Init+0x2d4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00d      	beq.n	8001b34 <HAL_GPIO_Init+0x1dc>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a45      	ldr	r2, [pc, #276]	; (8001c30 <HAL_GPIO_Init+0x2d8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d007      	beq.n	8001b30 <HAL_GPIO_Init+0x1d8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a44      	ldr	r2, [pc, #272]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_GPIO_Init+0x1d4>
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e006      	b.n	8001b3a <HAL_GPIO_Init+0x1e2>
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	e004      	b.n	8001b3a <HAL_GPIO_Init+0x1e2>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e002      	b.n	8001b3a <HAL_GPIO_Init+0x1e2>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_GPIO_Init+0x1e2>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	f002 0203 	and.w	r2, r2, #3
 8001b40:	0092      	lsls	r2, r2, #2
 8001b42:	4093      	lsls	r3, r2
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b4a:	4937      	ldr	r1, [pc, #220]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b58:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b7c:	4a2e      	ldr	r2, [pc, #184]	; (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ba6:	4a24      	ldr	r2, [pc, #144]	; (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f47f aea9 	bne.w	8001968 <HAL_GPIO_Init+0x10>
  }
}
 8001c16:	bf00      	nop
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	48000400 	.word	0x48000400
 8001c30:	48000800 	.word	0x48000800
 8001c34:	48000c00 	.word	0x48000c00
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe ffbe 	bl	8000c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40010400 	.word	0x40010400

08001c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e081      	b.n	8001db2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fa2a 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2224      	movs	r2, #36	; 0x24
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d107      	bne.n	8001d16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	e006      	b.n	8001d24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d104      	bne.n	8001d36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69d9      	ldr	r1, [r3, #28]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1a      	ldr	r2, [r3, #32]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	817b      	strh	r3, [r7, #10]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	f040 80da 	bne.w	8001f92 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_I2C_Master_Transmit+0x30>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0d3      	b.n	8001f94 <HAL_I2C_Master_Transmit+0x1d8>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001df4:	f7ff fbca 	bl	800158c <HAL_GetTick>
 8001df8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2319      	movs	r3, #25
 8001e00:	2201      	movs	r2, #1
 8001e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f9e6 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e0be      	b.n	8001f94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2221      	movs	r2, #33	; 0x21
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2210      	movs	r2, #16
 8001e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	893a      	ldrh	r2, [r7, #8]
 8001e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2bff      	cmp	r3, #255	; 0xff
 8001e46:	d90e      	bls.n	8001e66 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	22ff      	movs	r2, #255	; 0xff
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	8979      	ldrh	r1, [r7, #10]
 8001e56:	4b51      	ldr	r3, [pc, #324]	; (8001f9c <HAL_I2C_Master_Transmit+0x1e0>)
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fb58 	bl	8002514 <I2C_TransferConfig>
 8001e64:	e06c      	b.n	8001f40 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	8979      	ldrh	r1, [r7, #10]
 8001e78:	4b48      	ldr	r3, [pc, #288]	; (8001f9c <HAL_I2C_Master_Transmit+0x1e0>)
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fb47 	bl	8002514 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e86:	e05b      	b.n	8001f40 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	6a39      	ldr	r1, [r7, #32]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f9e3 	bl	8002258 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e07b      	b.n	8001f94 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d034      	beq.n	8001f40 <HAL_I2C_Master_Transmit+0x184>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d130      	bne.n	8001f40 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f975 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e04d      	b.n	8001f94 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	d90e      	bls.n	8001f20 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	22ff      	movs	r2, #255	; 0xff
 8001f06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	8979      	ldrh	r1, [r7, #10]
 8001f10:	2300      	movs	r3, #0
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 fafb 	bl	8002514 <I2C_TransferConfig>
 8001f1e:	e00f      	b.n	8001f40 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	8979      	ldrh	r1, [r7, #10]
 8001f32:	2300      	movs	r3, #0
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 faea 	bl	8002514 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d19e      	bne.n	8001e88 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	6a39      	ldr	r1, [r7, #32]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f9c2 	bl	80022d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e01a      	b.n	8001f94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2220      	movs	r2, #32
 8001f64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001f72:	400b      	ands	r3, r1
 8001f74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
  }
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	80002000 	.word	0x80002000
 8001fa0:	fe00e800 	.word	0xfe00e800

08001fa4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	817b      	strh	r3, [r7, #10]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	f040 80db 	bne.w	800217c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_I2C_Master_Receive+0x30>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e0d4      	b.n	800217e <HAL_I2C_Master_Receive+0x1da>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fdc:	f7ff fad6 	bl	800158c <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2319      	movs	r3, #25
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f8f2 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0bf      	b.n	800217e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2222      	movs	r2, #34	; 0x22
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2210      	movs	r2, #16
 800200a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	893a      	ldrh	r2, [r7, #8]
 800201e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	2bff      	cmp	r3, #255	; 0xff
 800202e:	d90e      	bls.n	800204e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	22ff      	movs	r2, #255	; 0xff
 8002034:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	b2da      	uxtb	r2, r3
 800203c:	8979      	ldrh	r1, [r7, #10]
 800203e:	4b52      	ldr	r3, [pc, #328]	; (8002188 <HAL_I2C_Master_Receive+0x1e4>)
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fa64 	bl	8002514 <I2C_TransferConfig>
 800204c:	e06d      	b.n	800212a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205c:	b2da      	uxtb	r2, r3
 800205e:	8979      	ldrh	r1, [r7, #10]
 8002060:	4b49      	ldr	r3, [pc, #292]	; (8002188 <HAL_I2C_Master_Receive+0x1e4>)
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fa53 	bl	8002514 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800206e:	e05c      	b.n	800212a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	6a39      	ldr	r1, [r7, #32]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f96b 	bl	8002350 <I2C_WaitOnRXNEFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e07c      	b.n	800217e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d034      	beq.n	800212a <HAL_I2C_Master_Receive+0x186>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d130      	bne.n	800212a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	2200      	movs	r2, #0
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f880 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e04d      	b.n	800217e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2bff      	cmp	r3, #255	; 0xff
 80020ea:	d90e      	bls.n	800210a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	22ff      	movs	r2, #255	; 0xff
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	2300      	movs	r3, #0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fa06 	bl	8002514 <I2C_TransferConfig>
 8002108:	e00f      	b.n	800212a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	b2da      	uxtb	r2, r3
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	2300      	movs	r3, #0
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f9f5 	bl	8002514 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d19d      	bne.n	8002070 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	6a39      	ldr	r1, [r7, #32]
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f8cd 	bl	80022d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e01a      	b.n	800217e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2220      	movs	r2, #32
 800214e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_I2C_Master_Receive+0x1e8>)
 800215c:	400b      	ands	r3, r1
 800215e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
  }
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	80002400 	.word	0x80002400
 800218c:	fe00e800 	.word	0xfe00e800

08002190 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d103      	bne.n	80021ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d007      	beq.n	80021cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	619a      	str	r2, [r3, #24]
  }
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e8:	e022      	b.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f0:	d01e      	beq.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f2:	f7ff f9cb 	bl	800158c <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d302      	bcc.n	8002208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d113      	bne.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	f043 0220 	orr.w	r2, r3, #32
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e00f      	b.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4013      	ands	r3, r2
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	429a      	cmp	r2, r3
 800224c:	d0cd      	beq.n	80021ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002264:	e02c      	b.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f8dc 	bl	8002428 <I2C_IsAcknowledgeFailed>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e02a      	b.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002280:	d01e      	beq.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002282:	f7ff f983 	bl	800158c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	d302      	bcc.n	8002298 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d113      	bne.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e007      	b.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d1cb      	bne.n	8002266 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e4:	e028      	b.n	8002338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f89c 	bl	8002428 <I2C_IsAcknowledgeFailed>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e026      	b.n	8002348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fa:	f7ff f947 	bl	800158c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	429a      	cmp	r2, r3
 8002308:	d302      	bcc.n	8002310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d113      	bne.n	8002338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e007      	b.n	8002348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b20      	cmp	r3, #32
 8002344:	d1cf      	bne.n	80022e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800235c:	e055      	b.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f860 	bl	8002428 <I2C_IsAcknowledgeFailed>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e053      	b.n	800241a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b20      	cmp	r3, #32
 800237e:	d129      	bne.n	80023d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b04      	cmp	r3, #4
 800238c:	d105      	bne.n	800239a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e03f      	b.n	800241a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2220      	movs	r2, #32
 80023a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80023ae:	400b      	ands	r3, r1
 80023b0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e022      	b.n	800241a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d4:	f7ff f8da 	bl	800158c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d302      	bcc.n	80023ea <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10f      	bne.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	f043 0220 	orr.w	r2, r3, #32
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e007      	b.n	800241a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b04      	cmp	r3, #4
 8002416:	d1a2      	bne.n	800235e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	fe00e800 	.word	0xfe00e800

08002428 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b10      	cmp	r3, #16
 8002440:	d161      	bne.n	8002506 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002450:	d02b      	beq.n	80024aa <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002460:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002462:	e022      	b.n	80024aa <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800246a:	d01e      	beq.n	80024aa <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246c:	f7ff f88e 	bl	800158c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	429a      	cmp	r2, r3
 800247a:	d302      	bcc.n	8002482 <I2C_IsAcknowledgeFailed+0x5a>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d113      	bne.n	80024aa <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f043 0220 	orr.w	r2, r3, #32
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e02e      	b.n	8002508 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d1d5      	bne.n	8002464 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2210      	movs	r2, #16
 80024be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2220      	movs	r2, #32
 80024c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff fe61 	bl	8002190 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <I2C_IsAcknowledgeFailed+0xe8>)
 80024da:	400b      	ands	r3, r1
 80024dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f043 0204 	orr.w	r2, r3, #4
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	fe00e800 	.word	0xfe00e800

08002514 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	817b      	strh	r3, [r7, #10]
 8002522:	4613      	mov	r3, r2
 8002524:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	0d5b      	lsrs	r3, r3, #21
 8002530:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <I2C_TransferConfig+0x58>)
 8002536:	430b      	orrs	r3, r1
 8002538:	43db      	mvns	r3, r3
 800253a:	ea02 0103 	and.w	r1, r2, r3
 800253e:	897b      	ldrh	r3, [r7, #10]
 8002540:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002544:	7a7b      	ldrb	r3, [r7, #9]
 8002546:	041b      	lsls	r3, r3, #16
 8002548:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	431a      	orrs	r2, r3
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	431a      	orrs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	03ff63ff 	.word	0x03ff63ff

08002570 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b20      	cmp	r3, #32
 8002584:	d138      	bne.n	80025f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002590:	2302      	movs	r3, #2
 8002592:	e032      	b.n	80025fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2224      	movs	r2, #36	; 0x24
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6819      	ldr	r1, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b20      	cmp	r3, #32
 800261a:	d139      	bne.n	8002690 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002626:	2302      	movs	r3, #2
 8002628:	e033      	b.n	8002692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2224      	movs	r2, #36	; 0x24
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002658:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	e000      	b.n	8002692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f000 bef4 	b.w	80034a2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 816a 	beq.w	800299e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026ca:	4bb3      	ldr	r3, [pc, #716]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d00c      	beq.n	80026f0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026d6:	4bb0      	ldr	r3, [pc, #704]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d159      	bne.n	8002796 <HAL_RCC_OscConfig+0xf6>
 80026e2:	4bad      	ldr	r3, [pc, #692]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ee:	d152      	bne.n	8002796 <HAL_RCC_OscConfig+0xf6>
 80026f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002704:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d102      	bne.n	8002722 <HAL_RCC_OscConfig+0x82>
 800271c:	4b9e      	ldr	r3, [pc, #632]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	e015      	b.n	800274e <HAL_RCC_OscConfig+0xae>
 8002722:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002726:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002736:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800273a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800273e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800274a:	4b93      	ldr	r3, [pc, #588]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002752:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002756:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002762:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0220 	orr.w	r2, r2, #32
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 810c 	beq.w	800299c <HAL_RCC_OscConfig+0x2fc>
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 8106 	bne.w	800299c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	f000 be86 	b.w	80034a2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a0:	d106      	bne.n	80027b0 <HAL_RCC_OscConfig+0x110>
 80027a2:	4b7d      	ldr	r3, [pc, #500]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a7c      	ldr	r2, [pc, #496]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e030      	b.n	8002812 <HAL_RCC_OscConfig+0x172>
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x134>
 80027ba:	4b77      	ldr	r3, [pc, #476]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a76      	ldr	r2, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b74      	ldr	r3, [pc, #464]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a73      	ldr	r2, [pc, #460]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80027cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e01e      	b.n	8002812 <HAL_RCC_OscConfig+0x172>
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027de:	d10c      	bne.n	80027fa <HAL_RCC_OscConfig+0x15a>
 80027e0:	4b6d      	ldr	r3, [pc, #436]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a6c      	ldr	r2, [pc, #432]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80027e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a69      	ldr	r2, [pc, #420]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e00b      	b.n	8002812 <HAL_RCC_OscConfig+0x172>
 80027fa:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a66      	ldr	r2, [pc, #408]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 8002800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b64      	ldr	r3, [pc, #400]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a63      	ldr	r2, [pc, #396]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 800280c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002810:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002812:	4b61      	ldr	r3, [pc, #388]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	f023 020f 	bic.w	r2, r3, #15
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	495d      	ldr	r1, [pc, #372]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 8002822:	4313      	orrs	r3, r2
 8002824:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d059      	beq.n	80028e4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe feac 	bl	800158c <HAL_GetTick>
 8002834:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800283a:	f7fe fea7 	bl	800158c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d902      	bls.n	8002850 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	f000 be29 	b.w	80034a2 <HAL_RCC_OscConfig+0xe02>
 8002850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002854:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002864:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d102      	bne.n	8002882 <HAL_RCC_OscConfig+0x1e2>
 800287c:	4b46      	ldr	r3, [pc, #280]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	e015      	b.n	80028ae <HAL_RCC_OscConfig+0x20e>
 8002882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002886:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002896:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800289e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80028b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80028ba:	fa92 f2a2 	rbit	r2, r2
 80028be:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80028c2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80028c6:	fab2 f282 	clz	r2, r2
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	f042 0220 	orr.w	r2, r2, #32
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	f002 021f 	and.w	r2, r2, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f202 	lsl.w	r2, r1, r2
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ab      	beq.n	800283a <HAL_RCC_OscConfig+0x19a>
 80028e2:	e05c      	b.n	800299e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fe52 	bl	800158c <HAL_GetTick>
 80028e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ee:	f7fe fe4d 	bl	800158c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d902      	bls.n	8002904 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	f000 bdcf 	b.w	80034a2 <HAL_RCC_OscConfig+0xe02>
 8002904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002908:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002918:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d102      	bne.n	8002936 <HAL_RCC_OscConfig+0x296>
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x2c2>
 8002936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800294a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002952:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_RCC_OscConfig+0x2f8>)
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002966:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800296a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800296e:	fa92 f2a2 	rbit	r2, r2
 8002972:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002976:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800297a:	fab2 f282 	clz	r2, r2
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f042 0220 	orr.w	r2, r2, #32
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f002 021f 	and.w	r2, r2, #31
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1ab      	bne.n	80028ee <HAL_RCC_OscConfig+0x24e>
 8002996:	e002      	b.n	800299e <HAL_RCC_OscConfig+0x2fe>
 8002998:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 816f 	beq.w	8002c8c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029ae:	4bd0      	ldr	r3, [pc, #832]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029ba:	4bcd      	ldr	r3, [pc, #820]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d16c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x400>
 80029c6:	4bca      	ldr	r3, [pc, #808]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d166      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x400>
 80029d2:	2302      	movs	r3, #2
 80029d4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80029e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d102      	bne.n	8002a02 <HAL_RCC_OscConfig+0x362>
 80029fc:	4bbc      	ldr	r3, [pc, #752]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	e013      	b.n	8002a2a <HAL_RCC_OscConfig+0x38a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a14:	2302      	movs	r3, #2
 8002a16:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a26:	4bb2      	ldr	r3, [pc, #712]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002a30:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a34:	fa92 f2a2 	rbit	r2, r2
 8002a38:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002a3c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f042 0220 	orr.w	r2, r2, #32
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	f002 021f 	and.w	r2, r2, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_RCC_OscConfig+0x3cc>
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d002      	beq.n	8002a6c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f000 bd1b 	b.w	80034a2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6c:	4ba0      	ldr	r3, [pc, #640]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	21f8      	movs	r1, #248	; 0xf8
 8002a7c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a84:	fa91 f1a1 	rbit	r1, r1
 8002a88:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a8c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a90:	fab1 f181 	clz	r1, r1
 8002a94:	b2c9      	uxtb	r1, r1
 8002a96:	408b      	lsls	r3, r1
 8002a98:	4995      	ldr	r1, [pc, #596]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9e:	e0f5      	b.n	8002c8c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8085 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x516>
 8002aac:	2301      	movs	r3, #1
 8002aae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002abe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002acc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fd58 	bl	800158c <HAL_GetTick>
 8002adc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae2:	f7fe fd53 	bl	800158c <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d902      	bls.n	8002af8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	f000 bcd5 	b.w	80034a2 <HAL_RCC_OscConfig+0xe02>
 8002af8:	2302      	movs	r3, #2
 8002afa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002b0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d102      	bne.n	8002b28 <HAL_RCC_OscConfig+0x488>
 8002b22:	4b73      	ldr	r3, [pc, #460]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	e013      	b.n	8002b50 <HAL_RCC_OscConfig+0x4b0>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b40:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2202      	movs	r2, #2
 8002b52:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002b56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b5a:	fa92 f2a2 	rbit	r2, r2
 8002b5e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b62:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b66:	fab2 f282 	clz	r2, r2
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f042 0220 	orr.w	r2, r2, #32
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	f002 021f 	and.w	r2, r2, #31
 8002b76:	2101      	movs	r1, #1
 8002b78:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0af      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b82:	4b5b      	ldr	r3, [pc, #364]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	21f8      	movs	r1, #248	; 0xf8
 8002b92:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b9a:	fa91 f1a1 	rbit	r1, r1
 8002b9e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ba2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ba6:	fab1 f181 	clz	r1, r1
 8002baa:	b2c9      	uxtb	r1, r1
 8002bac:	408b      	lsls	r3, r1
 8002bae:	4950      	ldr	r1, [pc, #320]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
 8002bb4:	e06a      	b.n	8002c8c <HAL_RCC_OscConfig+0x5ec>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002bc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2300      	movs	r3, #0
 8002be0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe fcd3 	bl	800158c <HAL_GetTick>
 8002be6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bec:	f7fe fcce 	bl	800158c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d902      	bls.n	8002c02 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	f000 bc50 	b.w	80034a2 <HAL_RCC_OscConfig+0xe02>
 8002c02:	2302      	movs	r3, #2
 8002c04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c18:	fab3 f383 	clz	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d102      	bne.n	8002c32 <HAL_RCC_OscConfig+0x592>
 8002c2c:	4b30      	ldr	r3, [pc, #192]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	e013      	b.n	8002c5a <HAL_RCC_OscConfig+0x5ba>
 8002c32:	2302      	movs	r3, #2
 8002c34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c44:	2302      	movs	r3, #2
 8002c46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_RCC_OscConfig+0x650>)
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c60:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c64:	fa92 f2a2 	rbit	r2, r2
 8002c68:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c6c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c70:	fab2 f282 	clz	r2, r2
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	f042 0220 	orr.w	r2, r2, #32
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f002 021f 	and.w	r2, r2, #31
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1af      	bne.n	8002bec <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80da 	beq.w	8002e50 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d069      	beq.n	8002d7a <HAL_RCC_OscConfig+0x6da>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_OscConfig+0x654>)
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2301      	movs	r3, #1
 8002cce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd0:	f7fe fc5c 	bl	800158c <HAL_GetTick>
 8002cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd8:	e00e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cda:	f7fe fc57 	bl	800158c <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d906      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e3d9      	b.n	80034a2 <HAL_RCC_OscConfig+0xe02>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	10908120 	.word	0x10908120
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d0a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002d0e:	2202      	movs	r2, #2
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f2a3 	rbit	r2, r3
 8002d1c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002d26:	2202      	movs	r2, #2
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	fa93 f2a3 	rbit	r2, r3
 8002d34:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002d38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	4ba5      	ldr	r3, [pc, #660]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d3e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d42:	2102      	movs	r1, #2
 8002d44:	6019      	str	r1, [r3, #0]
 8002d46:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fa93 f1a3 	rbit	r1, r3
 8002d50:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d54:	6019      	str	r1, [r3, #0]
  return result;
 8002d56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0b0      	beq.n	8002cda <HAL_RCC_OscConfig+0x63a>
 8002d78:	e06a      	b.n	8002e50 <HAL_RCC_OscConfig+0x7b0>
 8002d7a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d90:	601a      	str	r2, [r3, #0]
  return result;
 8002d92:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d96:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b8c      	ldr	r3, [pc, #560]	; (8002fd4 <HAL_RCC_OscConfig+0x934>)
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	461a      	mov	r2, r3
 8002da8:	2300      	movs	r3, #0
 8002daa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dac:	f7fe fbee 	bl	800158c <HAL_GetTick>
 8002db0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	e009      	b.n	8002dca <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db6:	f7fe fbe9 	bl	800158c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e36b      	b.n	80034a2 <HAL_RCC_OscConfig+0xe02>
 8002dca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002dce:	2202      	movs	r2, #2
 8002dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fa93 f2a3 	rbit	r2, r3
 8002ddc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002de6:	2202      	movs	r2, #2
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	fa93 f2a3 	rbit	r2, r3
 8002df4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002dfe:	2202      	movs	r2, #2
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	fa93 f2a3 	rbit	r2, r3
 8002e0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e12:	4b6f      	ldr	r3, [pc, #444]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e16:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	6019      	str	r1, [r3, #0]
 8002e1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	fa93 f1a3 	rbit	r1, r3
 8002e28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e2c:	6019      	str	r1, [r3, #0]
  return result;
 8002e2e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fab3 f383 	clz	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1b2      	bne.n	8002db6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8158 	beq.w	8003110 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b5a      	ldr	r3, [pc, #360]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d112      	bne.n	8002e98 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4a56      	ldr	r2, [pc, #344]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	61d3      	str	r3, [r2, #28]
 8002e7e:	4b54      	ldr	r3, [pc, #336]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e86:	f107 0308 	add.w	r3, r7, #8
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b4f      	ldr	r3, [pc, #316]	; (8002fd8 <HAL_RCC_OscConfig+0x938>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11a      	bne.n	8002eda <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea4:	4b4c      	ldr	r3, [pc, #304]	; (8002fd8 <HAL_RCC_OscConfig+0x938>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a4b      	ldr	r2, [pc, #300]	; (8002fd8 <HAL_RCC_OscConfig+0x938>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb0:	f7fe fb6c 	bl	800158c <HAL_GetTick>
 8002eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e009      	b.n	8002ece <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7fe fb67 	bl	800158c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e2e9      	b.n	80034a2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <HAL_RCC_OscConfig+0x938>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0ef      	beq.n	8002eba <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x852>
 8002ee4:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a39      	ldr	r2, [pc, #228]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	e02f      	b.n	8002f52 <HAL_RCC_OscConfig+0x8b2>
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCC_OscConfig+0x876>
 8002efc:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a33      	ldr	r2, [pc, #204]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a30      	ldr	r2, [pc, #192]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002f0e:	f023 0304 	bic.w	r3, r3, #4
 8002f12:	6213      	str	r3, [r2, #32]
 8002f14:	e01d      	b.n	8002f52 <HAL_RCC_OscConfig+0x8b2>
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x89a>
 8002f20:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	6213      	str	r3, [r2, #32]
 8002f2c:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6213      	str	r3, [r2, #32]
 8002f38:	e00b      	b.n	8002f52 <HAL_RCC_OscConfig+0x8b2>
 8002f3a:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a21      	ldr	r2, [pc, #132]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d06b      	beq.n	8003034 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5c:	f7fe fb16 	bl	800158c <HAL_GetTick>
 8002f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	e00b      	b.n	8002f7e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe fb11 	bl	800158c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e291      	b.n	80034a2 <HAL_RCC_OscConfig+0xe02>
 8002f7e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f82:	2202      	movs	r2, #2
 8002f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	fa93 f2a3 	rbit	r2, r3
 8002f90:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	fa93 f2a3 	rbit	r2, r3
 8002fa8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002fac:	601a      	str	r2, [r3, #0]
  return result;
 8002fae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002fb2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f043 0302 	orr.w	r3, r3, #2
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d109      	bne.n	8002fdc <HAL_RCC_OscConfig+0x93c>
 8002fc8:	4b01      	ldr	r3, [pc, #4]	; (8002fd0 <HAL_RCC_OscConfig+0x930>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCC_OscConfig+0x958>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	10908120 	.word	0x10908120
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	fa93 f2a3 	rbit	r2, r3
 8002fee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	4bbb      	ldr	r3, [pc, #748]	; (80032e4 <HAL_RCC_OscConfig+0xc44>)
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	6011      	str	r1, [r2, #0]
 8003000:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	fa92 f1a2 	rbit	r1, r2
 800300a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800300e:	6011      	str	r1, [r2, #0]
  return result;
 8003010:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	fab2 f282 	clz	r2, r2
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f002 021f 	and.w	r2, r2, #31
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d099      	beq.n	8002f66 <HAL_RCC_OscConfig+0x8c6>
 8003032:	e063      	b.n	80030fc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003034:	f7fe faaa 	bl	800158c <HAL_GetTick>
 8003038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303c:	e00b      	b.n	8003056 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe faa5 	bl	800158c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e225      	b.n	80034a2 <HAL_RCC_OscConfig+0xe02>
 8003056:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800305a:	2202      	movs	r2, #2
 800305c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	fa93 f2a3 	rbit	r2, r3
 8003068:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003072:	2202      	movs	r2, #2
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	fa93 f2a3 	rbit	r2, r3
 8003080:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003084:	601a      	str	r2, [r3, #0]
  return result;
 8003086:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800308a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d102      	bne.n	80030a6 <HAL_RCC_OscConfig+0xa06>
 80030a0:	4b90      	ldr	r3, [pc, #576]	; (80032e4 <HAL_RCC_OscConfig+0xc44>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	e00d      	b.n	80030c2 <HAL_RCC_OscConfig+0xa22>
 80030a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80030aa:	2202      	movs	r2, #2
 80030ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	fa93 f2a3 	rbit	r2, r3
 80030b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	4b89      	ldr	r3, [pc, #548]	; (80032e4 <HAL_RCC_OscConfig+0xc44>)
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80030c6:	2102      	movs	r1, #2
 80030c8:	6011      	str	r1, [r2, #0]
 80030ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	fa92 f1a2 	rbit	r1, r2
 80030d4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80030d8:	6011      	str	r1, [r2, #0]
  return result;
 80030da:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	fab2 f282 	clz	r2, r2
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	f002 021f 	and.w	r2, r2, #31
 80030f0:	2101      	movs	r1, #1
 80030f2:	fa01 f202 	lsl.w	r2, r1, r2
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1a0      	bne.n	800303e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003104:	4b77      	ldr	r3, [pc, #476]	; (80032e4 <HAL_RCC_OscConfig+0xc44>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	4a76      	ldr	r2, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0xc44>)
 800310a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003110:	1d3b      	adds	r3, r7, #4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 81c2 	beq.w	80034a0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800311c:	4b71      	ldr	r3, [pc, #452]	; (80032e4 <HAL_RCC_OscConfig+0xc44>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b08      	cmp	r3, #8
 8003126:	f000 819c 	beq.w	8003462 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	2b02      	cmp	r3, #2
 8003132:	f040 8114 	bne.w	800335e <HAL_RCC_OscConfig+0xcbe>
 8003136:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800313a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800313e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800314e:	601a      	str	r2, [r3, #0]
  return result;
 8003150:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003154:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003160:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	461a      	mov	r2, r3
 8003168:	2300      	movs	r3, #0
 800316a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe fa0e 	bl	800158c <HAL_GetTick>
 8003170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003174:	e009      	b.n	800318a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003176:	f7fe fa09 	bl	800158c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e18b      	b.n	80034a2 <HAL_RCC_OscConfig+0xe02>
 800318a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800318e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	fa93 f2a3 	rbit	r2, r3
 800319e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80031a2:	601a      	str	r2, [r3, #0]
  return result;
 80031a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80031a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d102      	bne.n	80031c4 <HAL_RCC_OscConfig+0xb24>
 80031be:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <HAL_RCC_OscConfig+0xc44>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	e01b      	b.n	80031fc <HAL_RCC_OscConfig+0xb5c>
 80031c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80031c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	fa93 f2a3 	rbit	r2, r3
 80031d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	fa93 f2a3 	rbit	r2, r3
 80031f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <HAL_RCC_OscConfig+0xc44>)
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003200:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003204:	6011      	str	r1, [r2, #0]
 8003206:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	fa92 f1a2 	rbit	r1, r2
 8003210:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003214:	6011      	str	r1, [r2, #0]
  return result;
 8003216:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	fab2 f282 	clz	r2, r2
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f042 0220 	orr.w	r2, r2, #32
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	f002 021f 	and.w	r2, r2, #31
 800322c:	2101      	movs	r1, #1
 800322e:	fa01 f202 	lsl.w	r2, r1, r2
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d19e      	bne.n	8003176 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_RCC_OscConfig+0xc44>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	430b      	orrs	r3, r1
 800324e:	4925      	ldr	r1, [pc, #148]	; (80032e4 <HAL_RCC_OscConfig+0xc44>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
 8003254:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800325c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800326c:	601a      	str	r2, [r3, #0]
  return result;
 800326e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003272:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800327e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	461a      	mov	r2, r3
 8003286:	2301      	movs	r3, #1
 8003288:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe f97f 	bl	800158c <HAL_GetTick>
 800328e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003292:	e009      	b.n	80032a8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003294:	f7fe f97a 	bl	800158c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0fc      	b.n	80034a2 <HAL_RCC_OscConfig+0xe02>
 80032a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	fa93 f2a3 	rbit	r2, r3
 80032bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032c0:	601a      	str	r2, [r3, #0]
  return result;
 80032c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <HAL_RCC_OscConfig+0xc48>
 80032dc:	4b01      	ldr	r3, [pc, #4]	; (80032e4 <HAL_RCC_OscConfig+0xc44>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	e01e      	b.n	8003320 <HAL_RCC_OscConfig+0xc80>
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
 80032e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f2a3 	rbit	r2, r3
 80032fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f2a3 	rbit	r2, r3
 8003316:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_OscConfig+0xe0c>)
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003324:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003328:	6011      	str	r1, [r2, #0]
 800332a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	fa92 f1a2 	rbit	r1, r2
 8003334:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003338:	6011      	str	r1, [r2, #0]
  return result;
 800333a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	fab2 f282 	clz	r2, r2
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f042 0220 	orr.w	r2, r2, #32
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	f002 021f 	and.w	r2, r2, #31
 8003350:	2101      	movs	r1, #1
 8003352:	fa01 f202 	lsl.w	r2, r1, r2
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d09b      	beq.n	8003294 <HAL_RCC_OscConfig+0xbf4>
 800335c:	e0a0      	b.n	80034a0 <HAL_RCC_OscConfig+0xe00>
 800335e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003362:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	fa93 f2a3 	rbit	r2, r3
 8003372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003376:	601a      	str	r2, [r3, #0]
  return result;
 8003378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800337c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003388:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	461a      	mov	r2, r3
 8003390:	2300      	movs	r3, #0
 8003392:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe f8fa 	bl	800158c <HAL_GetTick>
 8003398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339c:	e009      	b.n	80033b2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339e:	f7fe f8f5 	bl	800158c <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e077      	b.n	80034a2 <HAL_RCC_OscConfig+0xe02>
 80033b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	fa93 f2a3 	rbit	r2, r3
 80033c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ca:	601a      	str	r2, [r3, #0]
  return result;
 80033cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d102      	bne.n	80033ec <HAL_RCC_OscConfig+0xd4c>
 80033e6:	4b31      	ldr	r3, [pc, #196]	; (80034ac <HAL_RCC_OscConfig+0xe0c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	e01b      	b.n	8003424 <HAL_RCC_OscConfig+0xd84>
 80033ec:	f107 0320 	add.w	r3, r7, #32
 80033f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f107 0320 	add.w	r3, r7, #32
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fa93 f2a3 	rbit	r2, r3
 8003400:	f107 031c 	add.w	r3, r7, #28
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f107 0318 	add.w	r3, r7, #24
 800340a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f107 0318 	add.w	r3, r7, #24
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_RCC_OscConfig+0xe0c>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f107 0210 	add.w	r2, r7, #16
 8003428:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800342c:	6011      	str	r1, [r2, #0]
 800342e:	f107 0210 	add.w	r2, r7, #16
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	fa92 f1a2 	rbit	r1, r2
 8003438:	f107 020c 	add.w	r2, r7, #12
 800343c:	6011      	str	r1, [r2, #0]
  return result;
 800343e:	f107 020c 	add.w	r2, r7, #12
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	fab2 f282 	clz	r2, r2
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	f042 0220 	orr.w	r2, r2, #32
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	f002 021f 	and.w	r2, r2, #31
 8003454:	2101      	movs	r1, #1
 8003456:	fa01 f202 	lsl.w	r2, r1, r2
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d19e      	bne.n	800339e <HAL_RCC_OscConfig+0xcfe>
 8003460:	e01e      	b.n	80034a0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e018      	b.n	80034a2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <HAL_RCC_OscConfig+0xe0c>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003478:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800347c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	429a      	cmp	r2, r3
 8003488:	d108      	bne.n	800349c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800348a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800348e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000

080034b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b09e      	sub	sp, #120	; 0x78
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e162      	b.n	800378e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c8:	4b90      	ldr	r3, [pc, #576]	; (800370c <HAL_RCC_ClockConfig+0x25c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d910      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b8d      	ldr	r3, [pc, #564]	; (800370c <HAL_RCC_ClockConfig+0x25c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0207 	bic.w	r2, r3, #7
 80034de:	498b      	ldr	r1, [pc, #556]	; (800370c <HAL_RCC_ClockConfig+0x25c>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b89      	ldr	r3, [pc, #548]	; (800370c <HAL_RCC_ClockConfig+0x25c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e14a      	b.n	800378e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003504:	4b82      	ldr	r3, [pc, #520]	; (8003710 <HAL_RCC_ClockConfig+0x260>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	497f      	ldr	r1, [pc, #508]	; (8003710 <HAL_RCC_ClockConfig+0x260>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80dc 	beq.w	80036dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d13c      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xf6>
 800352c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003530:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800353a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d102      	bne.n	8003556 <HAL_RCC_ClockConfig+0xa6>
 8003550:	4b6f      	ldr	r3, [pc, #444]	; (8003710 <HAL_RCC_ClockConfig+0x260>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	e00f      	b.n	8003576 <HAL_RCC_ClockConfig+0xc6>
 8003556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800355a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	667b      	str	r3, [r7, #100]	; 0x64
 8003564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003568:	663b      	str	r3, [r7, #96]	; 0x60
 800356a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003572:	4b67      	ldr	r3, [pc, #412]	; (8003710 <HAL_RCC_ClockConfig+0x260>)
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800357a:	65ba      	str	r2, [r7, #88]	; 0x58
 800357c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800357e:	fa92 f2a2 	rbit	r2, r2
 8003582:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003584:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003586:	fab2 f282 	clz	r2, r2
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	f042 0220 	orr.w	r2, r2, #32
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	f002 021f 	and.w	r2, r2, #31
 8003596:	2101      	movs	r1, #1
 8003598:	fa01 f202 	lsl.w	r2, r1, r2
 800359c:	4013      	ands	r3, r2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d17b      	bne.n	800369a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0f3      	b.n	800378e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d13c      	bne.n	8003628 <HAL_RCC_ClockConfig+0x178>
 80035ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d102      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x128>
 80035d2:	4b4f      	ldr	r3, [pc, #316]	; (8003710 <HAL_RCC_ClockConfig+0x260>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	e00f      	b.n	80035f8 <HAL_RCC_ClockConfig+0x148>
 80035d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	647b      	str	r3, [r7, #68]	; 0x44
 80035e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ea:	643b      	str	r3, [r7, #64]	; 0x40
 80035ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f4:	4b46      	ldr	r3, [pc, #280]	; (8003710 <HAL_RCC_ClockConfig+0x260>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80035fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003600:	fa92 f2a2 	rbit	r2, r2
 8003604:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003608:	fab2 f282 	clz	r2, r2
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f042 0220 	orr.w	r2, r2, #32
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f002 021f 	and.w	r2, r2, #31
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f202 	lsl.w	r2, r1, r2
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d13a      	bne.n	800369a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0b2      	b.n	800378e <HAL_RCC_ClockConfig+0x2de>
 8003628:	2302      	movs	r3, #2
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d102      	bne.n	8003650 <HAL_RCC_ClockConfig+0x1a0>
 800364a:	4b31      	ldr	r3, [pc, #196]	; (8003710 <HAL_RCC_ClockConfig+0x260>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	e00d      	b.n	800366c <HAL_RCC_ClockConfig+0x1bc>
 8003650:	2302      	movs	r3, #2
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
 800365c:	2302      	movs	r3, #2
 800365e:	623b      	str	r3, [r7, #32]
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	61fb      	str	r3, [r7, #28]
 8003668:	4b29      	ldr	r3, [pc, #164]	; (8003710 <HAL_RCC_ClockConfig+0x260>)
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	2202      	movs	r2, #2
 800366e:	61ba      	str	r2, [r7, #24]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	fa92 f2a2 	rbit	r2, r2
 8003676:	617a      	str	r2, [r7, #20]
  return result;
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	fab2 f282 	clz	r2, r2
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	f042 0220 	orr.w	r2, r2, #32
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	f002 021f 	and.w	r2, r2, #31
 800368a:	2101      	movs	r1, #1
 800368c:	fa01 f202 	lsl.w	r2, r1, r2
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e079      	b.n	800378e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_RCC_ClockConfig+0x260>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	491a      	ldr	r1, [pc, #104]	; (8003710 <HAL_RCC_ClockConfig+0x260>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ac:	f7fd ff6e 	bl	800158c <HAL_GetTick>
 80036b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b4:	f7fd ff6a 	bl	800158c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e061      	b.n	800378e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_RCC_ClockConfig+0x260>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 020c 	and.w	r2, r3, #12
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	429a      	cmp	r2, r3
 80036da:	d1eb      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCC_ClockConfig+0x25c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d214      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b08      	ldr	r3, [pc, #32]	; (800370c <HAL_RCC_ClockConfig+0x25c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 0207 	bic.w	r2, r3, #7
 80036f2:	4906      	ldr	r1, [pc, #24]	; (800370c <HAL_RCC_ClockConfig+0x25c>)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <HAL_RCC_ClockConfig+0x25c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e040      	b.n	800378e <HAL_RCC_ClockConfig+0x2de>
 800370c:	40022000 	.word	0x40022000
 8003710:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCC_ClockConfig+0x2e8>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	491a      	ldr	r1, [pc, #104]	; (8003798 <HAL_RCC_ClockConfig+0x2e8>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373e:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_RCC_ClockConfig+0x2e8>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4912      	ldr	r1, [pc, #72]	; (8003798 <HAL_RCC_ClockConfig+0x2e8>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003752:	f000 f829 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8003756:	4601      	mov	r1, r0
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <HAL_RCC_ClockConfig+0x2e8>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003760:	22f0      	movs	r2, #240	; 0xf0
 8003762:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	fa92 f2a2 	rbit	r2, r2
 800376a:	60fa      	str	r2, [r7, #12]
  return result;
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	fab2 f282 	clz	r2, r2
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	40d3      	lsrs	r3, r2
 8003776:	4a09      	ldr	r2, [pc, #36]	; (800379c <HAL_RCC_ClockConfig+0x2ec>)
 8003778:	5cd3      	ldrb	r3, [r2, r3]
 800377a:	fa21 f303 	lsr.w	r3, r1, r3
 800377e:	4a08      	ldr	r2, [pc, #32]	; (80037a0 <HAL_RCC_ClockConfig+0x2f0>)
 8003780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <HAL_RCC_ClockConfig+0x2f4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd febc 	bl	8001504 <HAL_InitTick>
  
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3778      	adds	r7, #120	; 0x78
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	0800b79c 	.word	0x0800b79c
 80037a0:	2000000c 	.word	0x2000000c
 80037a4:	20000010 	.word	0x20000010

080037a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b08b      	sub	sp, #44	; 0x2c
 80037ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80037c2:	4b29      	ldr	r3, [pc, #164]	; (8003868 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d002      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x30>
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d003      	beq.n	80037de <HAL_RCC_GetSysClockFreq+0x36>
 80037d6:	e03c      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037d8:	4b24      	ldr	r3, [pc, #144]	; (800386c <HAL_RCC_GetSysClockFreq+0xc4>)
 80037da:	623b      	str	r3, [r7, #32]
      break;
 80037dc:	e03c      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80037e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	fa92 f2a2 	rbit	r2, r2
 80037f0:	607a      	str	r2, [r7, #4]
  return result;
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	fab2 f282 	clz	r2, r2
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	40d3      	lsrs	r3, r2
 80037fc:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003802:	4b19      	ldr	r3, [pc, #100]	; (8003868 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	220f      	movs	r2, #15
 800380c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	fa92 f2a2 	rbit	r2, r2
 8003814:	60fa      	str	r2, [r7, #12]
  return result;
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	fab2 f282 	clz	r2, r2
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	40d3      	lsrs	r3, r2
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003822:	5cd3      	ldrb	r3, [r2, r3]
 8003824:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003830:	4a0e      	ldr	r2, [pc, #56]	; (800386c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	fbb2 f2f3 	udiv	r2, r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
 8003840:	e004      	b.n	800384c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	623b      	str	r3, [r7, #32]
      break;
 8003850:	e002      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003854:	623b      	str	r3, [r7, #32]
      break;
 8003856:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003858:	6a3b      	ldr	r3, [r7, #32]
}
 800385a:	4618      	mov	r0, r3
 800385c:	372c      	adds	r7, #44	; 0x2c
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000
 800386c:	007a1200 	.word	0x007a1200
 8003870:	0800b7b4 	.word	0x0800b7b4
 8003874:	0800b7c4 	.word	0x0800b7c4
 8003878:	003d0900 	.word	0x003d0900

0800387c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <HAL_RCC_GetHCLKFreq+0x14>)
 8003882:	681b      	ldr	r3, [r3, #0]
}
 8003884:	4618      	mov	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	2000000c 	.word	0x2000000c

08003894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800389a:	f7ff ffef 	bl	800387c <HAL_RCC_GetHCLKFreq>
 800389e:	4601      	mov	r1, r0
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	fa92 f2a2 	rbit	r2, r2
 80038b4:	603a      	str	r2, [r7, #0]
  return result;
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	fab2 f282 	clz	r2, r2
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	40d3      	lsrs	r3, r2
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80038c2:	5cd3      	ldrb	r3, [r2, r3]
 80038c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	0800b7ac 	.word	0x0800b7ac

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80038de:	f7ff ffcd 	bl	800387c <HAL_RCC_GetHCLKFreq>
 80038e2:	4601      	mov	r1, r0
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80038ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	fa92 f2a2 	rbit	r2, r2
 80038f8:	603a      	str	r2, [r7, #0]
  return result;
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	fab2 f282 	clz	r2, r2
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	40d3      	lsrs	r3, r2
 8003904:	4a04      	ldr	r2, [pc, #16]	; (8003918 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	0800b7ac 	.word	0x0800b7ac

0800391c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b092      	sub	sp, #72	; 0x48
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800392c:	2300      	movs	r3, #0
 800392e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80cd 	beq.w	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003940:	4b86      	ldr	r3, [pc, #536]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10e      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b83      	ldr	r3, [pc, #524]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	4a82      	ldr	r2, [pc, #520]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003956:	61d3      	str	r3, [r2, #28]
 8003958:	4b80      	ldr	r3, [pc, #512]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396a:	4b7d      	ldr	r3, [pc, #500]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d118      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003976:	4b7a      	ldr	r3, [pc, #488]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a79      	ldr	r2, [pc, #484]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800397c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003980:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003982:	f7fd fe03 	bl	800158c <HAL_GetTick>
 8003986:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	e008      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398a:	f7fd fdff 	bl	800158c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b64      	cmp	r3, #100	; 0x64
 8003996:	d901      	bls.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e0db      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	4b70      	ldr	r3, [pc, #448]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a8:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d07d      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d076      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c6:	4b65      	ldr	r3, [pc, #404]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039e0:	fab3 f383 	clz	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	461a      	mov	r2, r3
 80039f0:	2301      	movs	r3, #1
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a04:	fab3 f383 	clz	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b55      	ldr	r3, [pc, #340]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	461a      	mov	r2, r3
 8003a14:	2300      	movs	r3, #0
 8003a16:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a18:	4a50      	ldr	r2, [pc, #320]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d045      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fd fdb0 	bl	800158c <HAL_GetTick>
 8003a2c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a30:	f7fd fdac 	bl	800158c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e086      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003a46:	2302      	movs	r3, #2
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
 8003a52:	2302      	movs	r3, #2
 8003a54:	623b      	str	r3, [r7, #32]
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	61fb      	str	r3, [r7, #28]
  return result;
 8003a5e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f043 0302 	orr.w	r3, r3, #2
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d102      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a74:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	e007      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	613a      	str	r2, [r7, #16]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	fa92 f2a2 	rbit	r2, r2
 8003a94:	60fa      	str	r2, [r7, #12]
  return result;
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	fab2 f282 	clz	r2, r2
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	f002 021f 	and.w	r2, r2, #31
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0bd      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ab4:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	4926      	ldr	r1, [pc, #152]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ac6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d105      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	491a      	ldr	r1, [pc, #104]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b04:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	f023 0210 	bic.w	r2, r3, #16
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4912      	ldr	r1, [pc, #72]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	490b      	ldr	r1, [pc, #44]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	4903      	ldr	r1, [pc, #12]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3748      	adds	r7, #72	; 0x48
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40007000 	.word	0x40007000
 8003b64:	10908100 	.word	0x10908100

08003b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e049      	b.n	8003c0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd fb08 	bl	80011a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f000 faf4 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d001      	beq.n	8003c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e040      	b.n	8003cb2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <HAL_TIM_Base_Start_IT+0xa8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00e      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x58>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5a:	d009      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x58>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <HAL_TIM_Base_Start_IT+0xac>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x58>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d115      	bne.n	8003c9c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_TIM_Base_Start_IT+0xb4>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b06      	cmp	r3, #6
 8003c80:	d015      	beq.n	8003cae <HAL_TIM_Base_Start_IT+0x96>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c88:	d011      	beq.n	8003cae <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9a:	e008      	b.n	8003cae <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e000      	b.n	8003cb0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	00010007 	.word	0x00010007

08003cd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e049      	b.n	8003d76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f841 	bl	8003d7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f000 fa40 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d109      	bne.n	8003db8 <HAL_TIM_PWM_Start+0x24>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e03c      	b.n	8003e32 <HAL_TIM_PWM_Start+0x9e>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d109      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0x3e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	bf14      	ite	ne
 8003dca:	2301      	movne	r3, #1
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	e02f      	b.n	8003e32 <HAL_TIM_PWM_Start+0x9e>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d109      	bne.n	8003dec <HAL_TIM_PWM_Start+0x58>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	bf14      	ite	ne
 8003de4:	2301      	movne	r3, #1
 8003de6:	2300      	moveq	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	e022      	b.n	8003e32 <HAL_TIM_PWM_Start+0x9e>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d109      	bne.n	8003e06 <HAL_TIM_PWM_Start+0x72>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	bf14      	ite	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	2300      	moveq	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	e015      	b.n	8003e32 <HAL_TIM_PWM_Start+0x9e>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d109      	bne.n	8003e20 <HAL_TIM_PWM_Start+0x8c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	e008      	b.n	8003e32 <HAL_TIM_PWM_Start+0x9e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e088      	b.n	8003f4c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Start+0xb6>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e48:	e023      	b.n	8003e92 <HAL_TIM_PWM_Start+0xfe>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_PWM_Start+0xc6>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e58:	e01b      	b.n	8003e92 <HAL_TIM_PWM_Start+0xfe>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_PWM_Start+0xd6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e68:	e013      	b.n	8003e92 <HAL_TIM_PWM_Start+0xfe>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b0c      	cmp	r3, #12
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_PWM_Start+0xe6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e78:	e00b      	b.n	8003e92 <HAL_TIM_PWM_Start+0xfe>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_PWM_Start+0xf6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e88:	e003      	b.n	8003e92 <HAL_TIM_PWM_Start+0xfe>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2201      	movs	r2, #1
 8003e98:	6839      	ldr	r1, [r7, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fc98 	bl	80047d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a2b      	ldr	r2, [pc, #172]	; (8003f54 <HAL_TIM_PWM_Start+0x1c0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_TIM_PWM_Start+0x134>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a2a      	ldr	r2, [pc, #168]	; (8003f58 <HAL_TIM_PWM_Start+0x1c4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_TIM_PWM_Start+0x134>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a28      	ldr	r2, [pc, #160]	; (8003f5c <HAL_TIM_PWM_Start+0x1c8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_TIM_PWM_Start+0x134>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <HAL_TIM_PWM_Start+0x1cc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d101      	bne.n	8003ecc <HAL_TIM_PWM_Start+0x138>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_TIM_PWM_Start+0x13a>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1b      	ldr	r2, [pc, #108]	; (8003f54 <HAL_TIM_PWM_Start+0x1c0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x176>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d009      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x176>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <HAL_TIM_PWM_Start+0x1d0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x176>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <HAL_TIM_PWM_Start+0x1c4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d115      	bne.n	8003f36 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <HAL_TIM_PWM_Start+0x1d4>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b06      	cmp	r3, #6
 8003f1a:	d015      	beq.n	8003f48 <HAL_TIM_PWM_Start+0x1b4>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f22:	d011      	beq.n	8003f48 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f34:	e008      	b.n	8003f48 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e000      	b.n	8003f4a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800
 8003f64:	40000400 	.word	0x40000400
 8003f68:	00010007 	.word	0x00010007

08003f6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e0ff      	b.n	800418a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b14      	cmp	r3, #20
 8003f96:	f200 80f0 	bhi.w	800417a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f9a:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003ff5 	.word	0x08003ff5
 8003fa4:	0800417b 	.word	0x0800417b
 8003fa8:	0800417b 	.word	0x0800417b
 8003fac:	0800417b 	.word	0x0800417b
 8003fb0:	08004035 	.word	0x08004035
 8003fb4:	0800417b 	.word	0x0800417b
 8003fb8:	0800417b 	.word	0x0800417b
 8003fbc:	0800417b 	.word	0x0800417b
 8003fc0:	08004077 	.word	0x08004077
 8003fc4:	0800417b 	.word	0x0800417b
 8003fc8:	0800417b 	.word	0x0800417b
 8003fcc:	0800417b 	.word	0x0800417b
 8003fd0:	080040b7 	.word	0x080040b7
 8003fd4:	0800417b 	.word	0x0800417b
 8003fd8:	0800417b 	.word	0x0800417b
 8003fdc:	0800417b 	.word	0x0800417b
 8003fe0:	080040f9 	.word	0x080040f9
 8003fe4:	0800417b 	.word	0x0800417b
 8003fe8:	0800417b 	.word	0x0800417b
 8003fec:	0800417b 	.word	0x0800417b
 8003ff0:	08004139 	.word	0x08004139
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f942 	bl	8004284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0208 	orr.w	r2, r2, #8
 800400e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0204 	bic.w	r2, r2, #4
 800401e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6999      	ldr	r1, [r3, #24]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	619a      	str	r2, [r3, #24]
      break;
 8004032:	e0a5      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f9a8 	bl	8004390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800404e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6999      	ldr	r1, [r3, #24]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	021a      	lsls	r2, r3, #8
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	619a      	str	r2, [r3, #24]
      break;
 8004074:	e084      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fa07 	bl	8004490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0208 	orr.w	r2, r2, #8
 8004090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0204 	bic.w	r2, r2, #4
 80040a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69d9      	ldr	r1, [r3, #28]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	61da      	str	r2, [r3, #28]
      break;
 80040b4:	e064      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fa65 	bl	800458c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69d9      	ldr	r1, [r3, #28]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	021a      	lsls	r2, r3, #8
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	61da      	str	r2, [r3, #28]
      break;
 80040f6:	e043      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 faa8 	bl	8004654 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0208 	orr.w	r2, r2, #8
 8004112:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0204 	bic.w	r2, r2, #4
 8004122:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004136:	e023      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fae6 	bl	8004710 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004152:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	021a      	lsls	r2, r3, #8
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004178:	e002      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	75fb      	strb	r3, [r7, #23]
      break;
 800417e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004188:	7dfb      	ldrb	r3, [r7, #23]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop

08004194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a32      	ldr	r2, [pc, #200]	; (8004270 <TIM_Base_SetConfig+0xdc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <TIM_Base_SetConfig+0x28>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0x28>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a2f      	ldr	r2, [pc, #188]	; (8004274 <TIM_Base_SetConfig+0xe0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d108      	bne.n	80041ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a27      	ldr	r2, [pc, #156]	; (8004270 <TIM_Base_SetConfig+0xdc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041dc:	d00f      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a24      	ldr	r2, [pc, #144]	; (8004274 <TIM_Base_SetConfig+0xe0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a23      	ldr	r2, [pc, #140]	; (8004278 <TIM_Base_SetConfig+0xe4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a22      	ldr	r2, [pc, #136]	; (800427c <TIM_Base_SetConfig+0xe8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a21      	ldr	r2, [pc, #132]	; (8004280 <TIM_Base_SetConfig+0xec>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <TIM_Base_SetConfig+0xdc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00b      	beq.n	8004254 <TIM_Base_SetConfig+0xc0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a0e      	ldr	r2, [pc, #56]	; (8004278 <TIM_Base_SetConfig+0xe4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d007      	beq.n	8004254 <TIM_Base_SetConfig+0xc0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a0d      	ldr	r2, [pc, #52]	; (800427c <TIM_Base_SetConfig+0xe8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d003      	beq.n	8004254 <TIM_Base_SetConfig+0xc0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a0c      	ldr	r2, [pc, #48]	; (8004280 <TIM_Base_SetConfig+0xec>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d103      	bne.n	800425c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	615a      	str	r2, [r3, #20]
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40000400 	.word	0x40000400
 8004278:	40014000 	.word	0x40014000
 800427c:	40014400 	.word	0x40014400
 8004280:	40014800 	.word	0x40014800

08004284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f023 0201 	bic.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0303 	bic.w	r3, r3, #3
 80042be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f023 0302 	bic.w	r3, r3, #2
 80042d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a28      	ldr	r2, [pc, #160]	; (8004380 <TIM_OC1_SetConfig+0xfc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00b      	beq.n	80042fc <TIM_OC1_SetConfig+0x78>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a27      	ldr	r2, [pc, #156]	; (8004384 <TIM_OC1_SetConfig+0x100>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <TIM_OC1_SetConfig+0x78>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a26      	ldr	r2, [pc, #152]	; (8004388 <TIM_OC1_SetConfig+0x104>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_OC1_SetConfig+0x78>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a25      	ldr	r2, [pc, #148]	; (800438c <TIM_OC1_SetConfig+0x108>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10c      	bne.n	8004316 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f023 0308 	bic.w	r3, r3, #8
 8004302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f023 0304 	bic.w	r3, r3, #4
 8004314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <TIM_OC1_SetConfig+0xfc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00b      	beq.n	8004336 <TIM_OC1_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a18      	ldr	r2, [pc, #96]	; (8004384 <TIM_OC1_SetConfig+0x100>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d007      	beq.n	8004336 <TIM_OC1_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a17      	ldr	r2, [pc, #92]	; (8004388 <TIM_OC1_SetConfig+0x104>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d003      	beq.n	8004336 <TIM_OC1_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a16      	ldr	r2, [pc, #88]	; (800438c <TIM_OC1_SetConfig+0x108>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d111      	bne.n	800435a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	621a      	str	r2, [r3, #32]
}
 8004374:	bf00      	nop
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40014000 	.word	0x40014000
 8004388:	40014400 	.word	0x40014400
 800438c:	40014800 	.word	0x40014800

08004390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f023 0210 	bic.w	r2, r3, #16
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0320 	bic.w	r3, r3, #32
 80043de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a24      	ldr	r2, [pc, #144]	; (8004480 <TIM_OC2_SetConfig+0xf0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10d      	bne.n	8004410 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1b      	ldr	r2, [pc, #108]	; (8004480 <TIM_OC2_SetConfig+0xf0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00b      	beq.n	8004430 <TIM_OC2_SetConfig+0xa0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <TIM_OC2_SetConfig+0xf4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d007      	beq.n	8004430 <TIM_OC2_SetConfig+0xa0>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a19      	ldr	r2, [pc, #100]	; (8004488 <TIM_OC2_SetConfig+0xf8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_OC2_SetConfig+0xa0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a18      	ldr	r2, [pc, #96]	; (800448c <TIM_OC2_SetConfig+0xfc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d113      	bne.n	8004458 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004436:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800443e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	621a      	str	r2, [r3, #32]
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800

08004490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a23      	ldr	r2, [pc, #140]	; (800457c <TIM_OC3_SetConfig+0xec>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d10d      	bne.n	800450e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800450c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1a      	ldr	r2, [pc, #104]	; (800457c <TIM_OC3_SetConfig+0xec>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00b      	beq.n	800452e <TIM_OC3_SetConfig+0x9e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a19      	ldr	r2, [pc, #100]	; (8004580 <TIM_OC3_SetConfig+0xf0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d007      	beq.n	800452e <TIM_OC3_SetConfig+0x9e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a18      	ldr	r2, [pc, #96]	; (8004584 <TIM_OC3_SetConfig+0xf4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_OC3_SetConfig+0x9e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a17      	ldr	r2, [pc, #92]	; (8004588 <TIM_OC3_SetConfig+0xf8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d113      	bne.n	8004556 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800453c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40012c00 	.word	0x40012c00
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800

0800458c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	031b      	lsls	r3, r3, #12
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a16      	ldr	r2, [pc, #88]	; (8004644 <TIM_OC4_SetConfig+0xb8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00b      	beq.n	8004608 <TIM_OC4_SetConfig+0x7c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a15      	ldr	r2, [pc, #84]	; (8004648 <TIM_OC4_SetConfig+0xbc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d007      	beq.n	8004608 <TIM_OC4_SetConfig+0x7c>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a14      	ldr	r2, [pc, #80]	; (800464c <TIM_OC4_SetConfig+0xc0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_OC4_SetConfig+0x7c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a13      	ldr	r2, [pc, #76]	; (8004650 <TIM_OC4_SetConfig+0xc4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d109      	bne.n	800461c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800460e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	019b      	lsls	r3, r3, #6
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40012c00 	.word	0x40012c00
 8004648:	40014000 	.word	0x40014000
 800464c:	40014400 	.word	0x40014400
 8004650:	40014800 	.word	0x40014800

08004654 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004698:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	041b      	lsls	r3, r3, #16
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a15      	ldr	r2, [pc, #84]	; (8004700 <TIM_OC5_SetConfig+0xac>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00b      	beq.n	80046c6 <TIM_OC5_SetConfig+0x72>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a14      	ldr	r2, [pc, #80]	; (8004704 <TIM_OC5_SetConfig+0xb0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d007      	beq.n	80046c6 <TIM_OC5_SetConfig+0x72>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a13      	ldr	r2, [pc, #76]	; (8004708 <TIM_OC5_SetConfig+0xb4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <TIM_OC5_SetConfig+0x72>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a12      	ldr	r2, [pc, #72]	; (800470c <TIM_OC5_SetConfig+0xb8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d109      	bne.n	80046da <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	621a      	str	r2, [r3, #32]
}
 80046f4:	bf00      	nop
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40014000 	.word	0x40014000
 8004708:	40014400 	.word	0x40014400
 800470c:	40014800 	.word	0x40014800

08004710 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800473e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	051b      	lsls	r3, r3, #20
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <TIM_OC6_SetConfig+0xb0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00b      	beq.n	8004784 <TIM_OC6_SetConfig+0x74>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <TIM_OC6_SetConfig+0xb4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <TIM_OC6_SetConfig+0x74>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <TIM_OC6_SetConfig+0xb8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_OC6_SetConfig+0x74>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <TIM_OC6_SetConfig+0xbc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d109      	bne.n	8004798 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	029b      	lsls	r3, r3, #10
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40014400 	.word	0x40014400
 80047cc:	40014800 	.word	0x40014800

080047d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	2201      	movs	r2, #1
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a1a      	ldr	r2, [r3, #32]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	401a      	ands	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1a      	ldr	r2, [r3, #32]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	431a      	orrs	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
	...

0800481c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004834:	2302      	movs	r3, #2
 8004836:	e060      	b.n	80048fa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a14      	ldr	r2, [pc, #80]	; (8004908 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d115      	bne.n	80048e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	051b      	lsls	r3, r3, #20
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40012c00 	.word	0x40012c00

0800490c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e040      	b.n	80049a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc fcc8 	bl	80012c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2224      	movs	r2, #36	; 0x24
 8004938:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fc0e 	bl	800516c <UART_SetConfig>
 8004950:	4603      	mov	r3, r0
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e022      	b.n	80049a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fd3a 	bl	80053dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fdc1 	bl	8005520 <UART_CheckIdleState>
 800499e:	4603      	mov	r3, r0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	; 0x28
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	4613      	mov	r3, r2
 80049b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049bc:	2b20      	cmp	r3, #32
 80049be:	f040 8082 	bne.w	8004ac6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_UART_Transmit+0x26>
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e07a      	b.n	8004ac8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_UART_Transmit+0x38>
 80049dc:	2302      	movs	r3, #2
 80049de:	e073      	b.n	8004ac8 <HAL_UART_Transmit+0x120>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2221      	movs	r2, #33	; 0x21
 80049f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049f6:	f7fc fdc9 	bl	800158c <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	88fa      	ldrh	r2, [r7, #6]
 8004a08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a14:	d108      	bne.n	8004a28 <HAL_UART_Transmit+0x80>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	e003      	b.n	8004a30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a38:	e02d      	b.n	8004a96 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2180      	movs	r1, #128	; 0x80
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 fdb4 	bl	80055b2 <UART_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e039      	b.n	8004ac8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	881a      	ldrh	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a66:	b292      	uxth	r2, r2
 8004a68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	3302      	adds	r3, #2
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	e008      	b.n	8004a84 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	781a      	ldrb	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	b292      	uxth	r2, r2
 8004a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3301      	adds	r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1cb      	bne.n	8004a3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2140      	movs	r1, #64	; 0x40
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 fd80 	bl	80055b2 <UART_WaitOnFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e005      	b.n	8004ac8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e000      	b.n	8004ac8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
  }
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	; 0x28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d13d      	bne.n	8004b62 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_UART_Receive_IT+0x22>
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e036      	b.n	8004b64 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_UART_Receive_IT+0x34>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e02f      	b.n	8004b64 <HAL_UART_Receive_IT+0x94>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d018      	beq.n	8004b52 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	623b      	str	r3, [r7, #32]
 8004b40:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	69f9      	ldr	r1, [r7, #28]
 8004b44:	6a3a      	ldr	r2, [r7, #32]
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e6      	bne.n	8004b20 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	461a      	mov	r2, r3
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fdef 	bl	800573c <UART_Start_Receive_IT>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	e000      	b.n	8004b64 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3728      	adds	r7, #40	; 0x28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b0ba      	sub	sp, #232	; 0xe8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b96:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d115      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00f      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 82a4 	beq.w	8005112 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
      }
      return;
 8004bd2:	e29e      	b.n	8005112 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8117 	beq.w	8004e0c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bee:	4b85      	ldr	r3, [pc, #532]	; (8004e04 <HAL_UART_IRQHandler+0x298>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 810a 	beq.w	8004e0c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d011      	beq.n	8004c28 <HAL_UART_IRQHandler+0xbc>
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2201      	movs	r2, #1
 8004c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1e:	f043 0201 	orr.w	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d011      	beq.n	8004c58 <HAL_UART_IRQHandler+0xec>
 8004c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2202      	movs	r2, #2
 8004c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c4e:	f043 0204 	orr.w	r2, r3, #4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d011      	beq.n	8004c88 <HAL_UART_IRQHandler+0x11c>
 8004c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2204      	movs	r2, #4
 8004c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c7e:	f043 0202 	orr.w	r2, r3, #2
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d017      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d105      	bne.n	8004cac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ca4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00b      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cba:	f043 0208 	orr.w	r2, r3, #8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d012      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x18a>
 8004cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00c      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 820a 	beq.w	8005116 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00d      	beq.n	8004d2a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d005      	beq.n	8004d4e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d04f      	beq.n	8004dee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fda0 	bl	8005894 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d141      	bne.n	8004de6 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3308      	adds	r3, #8
 8004d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1d9      	bne.n	8004d62 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d013      	beq.n	8004dde <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <HAL_UART_IRQHandler+0x29c>)
 8004dbc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fc fd8a 	bl	80018dc <HAL_DMA_Abort_IT>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d017      	beq.n	8004dfe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ddc:	e00f      	b.n	8004dfe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f9ae 	bl	8005140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de4:	e00b      	b.n	8004dfe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f9aa 	bl	8005140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e007      	b.n	8004dfe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f9a6 	bl	8005140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004dfc:	e18b      	b.n	8005116 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfe:	bf00      	nop
    return;
 8004e00:	e189      	b.n	8005116 <HAL_UART_IRQHandler+0x5aa>
 8004e02:	bf00      	nop
 8004e04:	04000120 	.word	0x04000120
 8004e08:	0800595b 	.word	0x0800595b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	f040 8143 	bne.w	800509c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 813c 	beq.w	800509c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8135 	beq.w	800509c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2210      	movs	r2, #16
 8004e38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	f040 80b1 	bne.w	8004fac <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e56:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 815d 	beq.w	800511a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	f080 8155 	bcs.w	800511a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	f000 8085 	beq.w	8004f90 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004eb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004eb4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ebc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1da      	bne.n	8004e86 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3308      	adds	r3, #8
 8004ef0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ef4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004efc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e1      	bne.n	8004ed0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3308      	adds	r3, #8
 8004f12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e3      	bne.n	8004f0c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f60:	f023 0310 	bic.w	r3, r3, #16
 8004f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f72:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e4      	bne.n	8004f50 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fc fc6d 	bl	800186a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f8d5 	bl	8005154 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004faa:	e0b6      	b.n	800511a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80a8 	beq.w	800511e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004fce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80a3 	beq.w	800511e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e4      	bne.n	8004fd8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3308      	adds	r3, #8
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	623b      	str	r3, [r7, #32]
   return(result);
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3308      	adds	r3, #8
 800502e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005032:	633a      	str	r2, [r7, #48]	; 0x30
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e3      	bne.n	800500e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	60fb      	str	r3, [r7, #12]
   return(result);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800507a:	61fb      	str	r3, [r7, #28]
 800507c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	69b9      	ldr	r1, [r7, #24]
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	617b      	str	r3, [r7, #20]
   return(result);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e4      	bne.n	8005058 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800508e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f85d 	bl	8005154 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800509a:	e040      	b.n	800511e <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800509c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00e      	beq.n	80050c6 <HAL_UART_IRQHandler+0x55a>
 80050a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fde7 	bl	8005c92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050c4:	e02e      	b.n	8005124 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00e      	beq.n	80050f0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01d      	beq.n	8005122 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
    }
    return;
 80050ee:	e018      	b.n	8005122 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d013      	beq.n	8005124 <HAL_UART_IRQHandler+0x5b8>
 80050fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00d      	beq.n	8005124 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fc3c 	bl	8005986 <UART_EndTransmit_IT>
    return;
 800510e:	bf00      	nop
 8005110:	e008      	b.n	8005124 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005112:	bf00      	nop
 8005114:	e006      	b.n	8005124 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005116:	bf00      	nop
 8005118:	e004      	b.n	8005124 <HAL_UART_IRQHandler+0x5b8>
      return;
 800511a:	bf00      	nop
 800511c:	e002      	b.n	8005124 <HAL_UART_IRQHandler+0x5b8>
      return;
 800511e:	bf00      	nop
 8005120:	e000      	b.n	8005124 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005122:	bf00      	nop
  }

}
 8005124:	37e8      	adds	r7, #232	; 0xe8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop

0800512c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b8b      	ldr	r3, [pc, #556]	; (80053c4 <UART_SetConfig+0x258>)
 8005198:	4013      	ands	r3, r2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	6979      	ldr	r1, [r7, #20]
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	430a      	orrs	r2, r1
 80051dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a79      	ldr	r2, [pc, #484]	; (80053c8 <UART_SetConfig+0x25c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d121      	bne.n	800522c <UART_SetConfig+0xc0>
 80051e8:	4b78      	ldr	r3, [pc, #480]	; (80053cc <UART_SetConfig+0x260>)
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	2b03      	cmp	r3, #3
 80051f2:	d817      	bhi.n	8005224 <UART_SetConfig+0xb8>
 80051f4:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <UART_SetConfig+0x90>)
 80051f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fa:	bf00      	nop
 80051fc:	0800520d 	.word	0x0800520d
 8005200:	08005219 	.word	0x08005219
 8005204:	0800521f 	.word	0x0800521f
 8005208:	08005213 	.word	0x08005213
 800520c:	2300      	movs	r3, #0
 800520e:	77fb      	strb	r3, [r7, #31]
 8005210:	e01e      	b.n	8005250 <UART_SetConfig+0xe4>
 8005212:	2302      	movs	r3, #2
 8005214:	77fb      	strb	r3, [r7, #31]
 8005216:	e01b      	b.n	8005250 <UART_SetConfig+0xe4>
 8005218:	2304      	movs	r3, #4
 800521a:	77fb      	strb	r3, [r7, #31]
 800521c:	e018      	b.n	8005250 <UART_SetConfig+0xe4>
 800521e:	2308      	movs	r3, #8
 8005220:	77fb      	strb	r3, [r7, #31]
 8005222:	e015      	b.n	8005250 <UART_SetConfig+0xe4>
 8005224:	2310      	movs	r3, #16
 8005226:	77fb      	strb	r3, [r7, #31]
 8005228:	bf00      	nop
 800522a:	e011      	b.n	8005250 <UART_SetConfig+0xe4>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a67      	ldr	r2, [pc, #412]	; (80053d0 <UART_SetConfig+0x264>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d102      	bne.n	800523c <UART_SetConfig+0xd0>
 8005236:	2300      	movs	r3, #0
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	e009      	b.n	8005250 <UART_SetConfig+0xe4>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a64      	ldr	r2, [pc, #400]	; (80053d4 <UART_SetConfig+0x268>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d102      	bne.n	800524c <UART_SetConfig+0xe0>
 8005246:	2300      	movs	r3, #0
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e001      	b.n	8005250 <UART_SetConfig+0xe4>
 800524c:	2310      	movs	r3, #16
 800524e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005258:	d15c      	bne.n	8005314 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800525a:	7ffb      	ldrb	r3, [r7, #31]
 800525c:	2b08      	cmp	r3, #8
 800525e:	d828      	bhi.n	80052b2 <UART_SetConfig+0x146>
 8005260:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0xfc>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	0800528d 	.word	0x0800528d
 800526c:	08005295 	.word	0x08005295
 8005270:	0800529d 	.word	0x0800529d
 8005274:	080052b3 	.word	0x080052b3
 8005278:	080052a3 	.word	0x080052a3
 800527c:	080052b3 	.word	0x080052b3
 8005280:	080052b3 	.word	0x080052b3
 8005284:	080052b3 	.word	0x080052b3
 8005288:	080052ab 	.word	0x080052ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800528c:	f7fe fb02 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005290:	61b8      	str	r0, [r7, #24]
        break;
 8005292:	e013      	b.n	80052bc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005294:	f7fe fb20 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8005298:	61b8      	str	r0, [r7, #24]
        break;
 800529a:	e00f      	b.n	80052bc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800529c:	4b4e      	ldr	r3, [pc, #312]	; (80053d8 <UART_SetConfig+0x26c>)
 800529e:	61bb      	str	r3, [r7, #24]
        break;
 80052a0:	e00c      	b.n	80052bc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a2:	f7fe fa81 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 80052a6:	61b8      	str	r0, [r7, #24]
        break;
 80052a8:	e008      	b.n	80052bc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ae:	61bb      	str	r3, [r7, #24]
        break;
 80052b0:	e004      	b.n	80052bc <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	77bb      	strb	r3, [r7, #30]
        break;
 80052ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d074      	beq.n	80053ac <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	005a      	lsls	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	441a      	add	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b0f      	cmp	r3, #15
 80052de:	d916      	bls.n	800530e <UART_SetConfig+0x1a2>
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e6:	d212      	bcs.n	800530e <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f023 030f 	bic.w	r3, r3, #15
 80052f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	89fb      	ldrh	r3, [r7, #14]
 8005300:	4313      	orrs	r3, r2
 8005302:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	89fa      	ldrh	r2, [r7, #14]
 800530a:	60da      	str	r2, [r3, #12]
 800530c:	e04e      	b.n	80053ac <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	77bb      	strb	r3, [r7, #30]
 8005312:	e04b      	b.n	80053ac <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005314:	7ffb      	ldrb	r3, [r7, #31]
 8005316:	2b08      	cmp	r3, #8
 8005318:	d827      	bhi.n	800536a <UART_SetConfig+0x1fe>
 800531a:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <UART_SetConfig+0x1b4>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005345 	.word	0x08005345
 8005324:	0800534d 	.word	0x0800534d
 8005328:	08005355 	.word	0x08005355
 800532c:	0800536b 	.word	0x0800536b
 8005330:	0800535b 	.word	0x0800535b
 8005334:	0800536b 	.word	0x0800536b
 8005338:	0800536b 	.word	0x0800536b
 800533c:	0800536b 	.word	0x0800536b
 8005340:	08005363 	.word	0x08005363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005344:	f7fe faa6 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005348:	61b8      	str	r0, [r7, #24]
        break;
 800534a:	e013      	b.n	8005374 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800534c:	f7fe fac4 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8005350:	61b8      	str	r0, [r7, #24]
        break;
 8005352:	e00f      	b.n	8005374 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005354:	4b20      	ldr	r3, [pc, #128]	; (80053d8 <UART_SetConfig+0x26c>)
 8005356:	61bb      	str	r3, [r7, #24]
        break;
 8005358:	e00c      	b.n	8005374 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535a:	f7fe fa25 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 800535e:	61b8      	str	r0, [r7, #24]
        break;
 8005360:	e008      	b.n	8005374 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005366:	61bb      	str	r3, [r7, #24]
        break;
 8005368:	e004      	b.n	8005374 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	77bb      	strb	r3, [r7, #30]
        break;
 8005372:	bf00      	nop
    }

    if (pclk != 0U)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d018      	beq.n	80053ac <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	085a      	lsrs	r2, r3, #1
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	441a      	add	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	b29b      	uxth	r3, r3
 800538e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b0f      	cmp	r3, #15
 8005394:	d908      	bls.n	80053a8 <UART_SetConfig+0x23c>
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539c:	d204      	bcs.n	80053a8 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	e001      	b.n	80053ac <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	efff69f3 	.word	0xefff69f3
 80053c8:	40013800 	.word	0x40013800
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40004400 	.word	0x40004400
 80053d4:	40004800 	.word	0x40004800
 80053d8:	007a1200 	.word	0x007a1200

080053dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	f003 0310 	and.w	r3, r3, #16
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01a      	beq.n	80054f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054da:	d10a      	bne.n	80054f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	605a      	str	r2, [r3, #4]
  }
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af02      	add	r7, sp, #8
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005530:	f7fc f82c 	bl	800158c <HAL_GetTick>
 8005534:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b08      	cmp	r3, #8
 8005542:	d10e      	bne.n	8005562 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f82d 	bl	80055b2 <UART_WaitOnFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e023      	b.n	80055aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b04      	cmp	r3, #4
 800556e:	d10e      	bne.n	800558e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f817 	bl	80055b2 <UART_WaitOnFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e00d      	b.n	80055aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b09c      	sub	sp, #112	; 0x70
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c2:	e0a5      	b.n	8005710 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ca:	f000 80a1 	beq.w	8005710 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ce:	f7fb ffdd 	bl	800158c <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055da:	429a      	cmp	r2, r3
 80055dc:	d302      	bcc.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80055de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d13e      	bne.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055f8:	667b      	str	r3, [r7, #100]	; 0x64
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005604:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005608:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e6      	bne.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3308      	adds	r3, #8
 800561c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	f023 0301 	bic.w	r3, r3, #1
 800562c:	663b      	str	r3, [r7, #96]	; 0x60
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3308      	adds	r3, #8
 8005634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005636:	64ba      	str	r2, [r7, #72]	; 0x48
 8005638:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800563c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e5      	bne.n	8005616 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e067      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d04f      	beq.n	8005710 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567e:	d147      	bne.n	8005710 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005688:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	e853 3f00 	ldrex	r3, [r3]
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800569e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
 80056aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b0:	e841 2300 	strex	r3, r2, [r1]
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e6      	bne.n	800568a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	613b      	str	r3, [r7, #16]
   return(result);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3308      	adds	r3, #8
 80056da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056dc:	623a      	str	r2, [r7, #32]
 80056de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	69f9      	ldr	r1, [r7, #28]
 80056e2:	6a3a      	ldr	r2, [r7, #32]
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e5      	bne.n	80056bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e010      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69da      	ldr	r2, [r3, #28]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4013      	ands	r3, r2
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	429a      	cmp	r2, r3
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	429a      	cmp	r2, r3
 800572c:	f43f af4a 	beq.w	80055c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3770      	adds	r7, #112	; 0x70
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800573c:	b480      	push	{r7}
 800573e:	b091      	sub	sp, #68	; 0x44
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576e:	d10e      	bne.n	800578e <UART_Start_Receive_IT+0x52>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <UART_Start_Receive_IT+0x48>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800577e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005782:	e02d      	b.n	80057e0 <UART_Start_Receive_IT+0xa4>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	22ff      	movs	r2, #255	; 0xff
 8005788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800578c:	e028      	b.n	80057e0 <UART_Start_Receive_IT+0xa4>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10d      	bne.n	80057b2 <UART_Start_Receive_IT+0x76>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d104      	bne.n	80057a8 <UART_Start_Receive_IT+0x6c>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	22ff      	movs	r2, #255	; 0xff
 80057a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057a6:	e01b      	b.n	80057e0 <UART_Start_Receive_IT+0xa4>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	227f      	movs	r2, #127	; 0x7f
 80057ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057b0:	e016      	b.n	80057e0 <UART_Start_Receive_IT+0xa4>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ba:	d10d      	bne.n	80057d8 <UART_Start_Receive_IT+0x9c>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d104      	bne.n	80057ce <UART_Start_Receive_IT+0x92>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	227f      	movs	r2, #127	; 0x7f
 80057c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057cc:	e008      	b.n	80057e0 <UART_Start_Receive_IT+0xa4>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	223f      	movs	r2, #63	; 0x3f
 80057d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057d6:	e003      	b.n	80057e0 <UART_Start_Receive_IT+0xa4>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2222      	movs	r2, #34	; 0x22
 80057ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3308      	adds	r3, #8
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800580e:	637a      	str	r2, [r7, #52]	; 0x34
 8005810:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582a:	d107      	bne.n	800583c <UART_Start_Receive_IT+0x100>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d103      	bne.n	800583c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4a15      	ldr	r2, [pc, #84]	; (800588c <UART_Start_Receive_IT+0x150>)
 8005838:	665a      	str	r2, [r3, #100]	; 0x64
 800583a:	e002      	b.n	8005842 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a14      	ldr	r2, [pc, #80]	; (8005890 <UART_Start_Receive_IT+0x154>)
 8005840:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	613b      	str	r3, [r7, #16]
   return(result);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800585e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	623b      	str	r3, [r7, #32]
 800586a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	69f9      	ldr	r1, [r7, #28]
 800586e:	6a3a      	ldr	r2, [r7, #32]
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	61bb      	str	r3, [r7, #24]
   return(result);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e6      	bne.n	800584a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3744      	adds	r7, #68	; 0x44
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	08005b37 	.word	0x08005b37
 8005890:	080059db 	.word	0x080059db

08005894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b095      	sub	sp, #84	; 0x54
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ba:	643b      	str	r3, [r7, #64]	; 0x40
 80058bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e6      	bne.n	800589c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f023 0301 	bic.w	r3, r3, #1
 80058e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3308      	adds	r3, #8
 80058ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e5      	bne.n	80058ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005906:	2b01      	cmp	r3, #1
 8005908:	d118      	bne.n	800593c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	60bb      	str	r3, [r7, #8]
   return(result);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f023 0310 	bic.w	r3, r3, #16
 800591e:	647b      	str	r3, [r7, #68]	; 0x44
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6979      	ldr	r1, [r7, #20]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	613b      	str	r3, [r7, #16]
   return(result);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e6      	bne.n	800590a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800594e:	bf00      	nop
 8005950:	3754      	adds	r7, #84	; 0x54
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff fbe1 	bl	8005140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800597e:	bf00      	nop
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b088      	sub	sp, #32
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	60bb      	str	r3, [r7, #8]
   return(result);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6979      	ldr	r1, [r7, #20]
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e6      	bne.n	800598e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff fbad 	bl	800512c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d2:	bf00      	nop
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b096      	sub	sp, #88	; 0x58
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f0:	2b22      	cmp	r3, #34	; 0x22
 80059f2:	f040 8094 	bne.w	8005b1e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a00:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005a04:	b2d9      	uxtb	r1, r3
 8005a06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a10:	400a      	ands	r2, r1
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d177      	bne.n	8005b2e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a52:	653b      	str	r3, [r7, #80]	; 0x50
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e6      	bne.n	8005a3e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3308      	adds	r3, #8
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	f023 0301 	bic.w	r3, r3, #1
 8005a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a90:	633a      	str	r2, [r7, #48]	; 0x30
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e5      	bne.n	8005a70 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d12e      	bne.n	8005b16 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0310 	bic.w	r3, r3, #16
 8005ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	69b9      	ldr	r1, [r7, #24]
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e6      	bne.n	8005abe <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	2b10      	cmp	r3, #16
 8005afc:	d103      	bne.n	8005b06 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2210      	movs	r2, #16
 8005b04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff fb20 	bl	8005154 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b14:	e00b      	b.n	8005b2e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fb f89a 	bl	8000c50 <HAL_UART_RxCpltCallback>
}
 8005b1c:	e007      	b.n	8005b2e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0208 	orr.w	r2, r2, #8
 8005b2c:	619a      	str	r2, [r3, #24]
}
 8005b2e:	bf00      	nop
 8005b30:	3758      	adds	r7, #88	; 0x58
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b096      	sub	sp, #88	; 0x58
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b4c:	2b22      	cmp	r3, #34	; 0x22
 8005b4e:	f040 8094 	bne.w	8005c7a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b58:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b60:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b62:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005b66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d177      	bne.n	8005c8a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb8:	643b      	str	r3, [r7, #64]	; 0x40
 8005bba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3308      	adds	r3, #8
 8005bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e5      	bne.n	8005bcc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d12e      	bne.n	8005c72 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f023 0310 	bic.w	r3, r3, #16
 8005c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6979      	ldr	r1, [r7, #20]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	613b      	str	r3, [r7, #16]
   return(result);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e6      	bne.n	8005c1a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b10      	cmp	r3, #16
 8005c58:	d103      	bne.n	8005c62 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2210      	movs	r2, #16
 8005c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff fa72 	bl	8005154 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c70:	e00b      	b.n	8005c8a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fa ffec 	bl	8000c50 <HAL_UART_RxCpltCallback>
}
 8005c78:	e007      	b.n	8005c8a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0208 	orr.w	r2, r2, #8
 8005c88:	619a      	str	r2, [r3, #24]
}
 8005c8a:	bf00      	nop
 8005c8c:	3758      	adds	r7, #88	; 0x58
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 fce5 	bl	8007686 <VL53L0X_get_offset_calibration_data_micro_meter>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	218a      	movs	r1, #138	; 0x8a
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f004 fee8 	bl	800aabc <VL53L0X_WrByte>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8005cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005cfc:	b5b0      	push	{r4, r5, r7, lr}
 8005cfe:	b096      	sub	sp, #88	; 0x58
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005d0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d107      	bne.n	8005d22 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005d12:	2200      	movs	r2, #0
 8005d14:	2188      	movs	r1, #136	; 0x88
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f004 fed0 	bl	800aabc <VL53L0X_WrByte>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d30:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005d3a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a9e      	ldr	r2, [pc, #632]	; (8005fbc <VL53L0X_DataInit+0x2c0>)
 8005d42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a9d      	ldr	r2, [pc, #628]	; (8005fc0 <VL53L0X_DataInit+0x2c4>)
 8005d4a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005d54:	f107 0310 	add.w	r3, r7, #16
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fac2 	bl	80062e4 <VL53L0X_GetDeviceParameters>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8005d66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d112      	bne.n	8005d94 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005d72:	2300      	movs	r3, #0
 8005d74:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f103 0410 	add.w	r4, r3, #16
 8005d7c:	f107 0510 	add.w	r5, r7, #16
 8005d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2264      	movs	r2, #100	; 0x64
 8005d98:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005da2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005dac:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005db6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	2180      	movs	r1, #128	; 0x80
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f004 fe78 	bl	800aabc <VL53L0X_WrByte>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005dda:	2201      	movs	r2, #1
 8005ddc:	21ff      	movs	r1, #255	; 0xff
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f004 fe6c 	bl	800aabc <VL53L0X_WrByte>
 8005de4:	4603      	mov	r3, r0
 8005de6:	461a      	mov	r2, r3
 8005de8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005df2:	2200      	movs	r2, #0
 8005df4:	2100      	movs	r1, #0
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f004 fe60 	bl	800aabc <VL53L0X_WrByte>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8005e0a:	f107 030f 	add.w	r3, r7, #15
 8005e0e:	461a      	mov	r2, r3
 8005e10:	2191      	movs	r1, #145	; 0x91
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f004 fed4 	bl	800abc0 <VL53L0X_RdByte>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8005e26:	7bfa      	ldrb	r2, [r7, #15]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005e2e:	2201      	movs	r2, #1
 8005e30:	2100      	movs	r1, #0
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f004 fe42 	bl	800aabc <VL53L0X_WrByte>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e46:	2200      	movs	r2, #0
 8005e48:	21ff      	movs	r1, #255	; 0xff
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f004 fe36 	bl	800aabc <VL53L0X_WrByte>
 8005e50:	4603      	mov	r3, r0
 8005e52:	461a      	mov	r2, r3
 8005e54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2180      	movs	r1, #128	; 0x80
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f004 fe2a 	bl	800aabc <VL53L0X_WrByte>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005e76:	2300      	movs	r3, #0
 8005e78:	653b      	str	r3, [r7, #80]	; 0x50
 8005e7a:	e014      	b.n	8005ea6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005e7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d114      	bne.n	8005eae <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2201      	movs	r2, #1
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fd51 	bl	8006934 <VL53L0X_SetLimitCheckEnable>
 8005e92:	4603      	mov	r3, r0
 8005e94:	461a      	mov	r2, r3
 8005e96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	dde7      	ble.n	8005e7c <VL53L0X_DataInit+0x180>
 8005eac:	e000      	b.n	8005eb0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005eae:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005eb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d107      	bne.n	8005ec8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2102      	movs	r1, #2
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fd39 	bl	8006934 <VL53L0X_SetLimitCheckEnable>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005ec8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d107      	bne.n	8005ee0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2103      	movs	r1, #3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fd2d 	bl	8006934 <VL53L0X_SetLimitCheckEnable>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005ee0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d107      	bne.n	8005ef8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2104      	movs	r1, #4
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fd21 	bl	8006934 <VL53L0X_SetLimitCheckEnable>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005ef8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d107      	bne.n	8005f10 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005f00:	2200      	movs	r2, #0
 8005f02:	2105      	movs	r1, #5
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fd15 	bl	8006934 <VL53L0X_SetLimitCheckEnable>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005f10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d108      	bne.n	8005f2a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f18:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fdb8 	bl	8006a94 <VL53L0X_SetLimitCheckValue>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005f2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d108      	bne.n	8005f44 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f36:	2101      	movs	r1, #1
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fdab 	bl	8006a94 <VL53L0X_SetLimitCheckValue>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d108      	bne.n	8005f5e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f4c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005f50:	2102      	movs	r1, #2
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fd9e 	bl	8006a94 <VL53L0X_SetLimitCheckValue>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f66:	2200      	movs	r2, #0
 8005f68:	2103      	movs	r1, #3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fd92 	bl	8006a94 <VL53L0X_SetLimitCheckValue>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10f      	bne.n	8005f9e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	22ff      	movs	r2, #255	; 0xff
 8005f82:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f86:	22ff      	movs	r2, #255	; 0xff
 8005f88:	2101      	movs	r1, #1
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f004 fd96 	bl	800aabc <VL53L0X_WrByte>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005f9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005fae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3758      	adds	r7, #88	; 0x58
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	00016b85 	.word	0x00016b85
 8005fc0:	000970a4 	.word	0x000970a4

08005fc4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005fc4:	b5b0      	push	{r4, r5, r7, lr}
 8005fc6:	b09e      	sub	sp, #120	; 0x78
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005fd2:	f107 031c 	add.w	r3, r7, #28
 8005fd6:	2240      	movs	r2, #64	; 0x40
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f004 fed7 	bl	800ad8e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006000:	2101      	movs	r1, #1
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f002 fa95 	bl	8008532 <VL53L0X_get_info_from_device>
 8006008:	4603      	mov	r3, r0
 800600a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006014:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800601c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006024:	2b01      	cmp	r3, #1
 8006026:	d80d      	bhi.n	8006044 <VL53L0X_StaticInit+0x80>
 8006028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800602c:	2b01      	cmp	r3, #1
 800602e:	d102      	bne.n	8006036 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006032:	2b20      	cmp	r3, #32
 8006034:	d806      	bhi.n	8006044 <VL53L0X_StaticInit+0x80>
 8006036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10e      	bne.n	800605c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800603e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006040:	2b0c      	cmp	r3, #12
 8006042:	d90b      	bls.n	800605c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006044:	f107 0218 	add.w	r2, r7, #24
 8006048:	f107 0314 	add.w	r3, r7, #20
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 fd14 	bl	8007a7c <VL53L0X_perform_ref_spad_management>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800605a:	e009      	b.n	8006070 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800605c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006060:	461a      	mov	r2, r3
 8006062:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 ff15 	bl	8007e94 <VL53L0X_set_reference_spads>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006070:	4b94      	ldr	r3, [pc, #592]	; (80062c4 <VL53L0X_StaticInit+0x300>)
 8006072:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006074:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10f      	bne.n	800609c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006082:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006086:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006094:	66bb      	str	r3, [r7, #104]	; 0x68
 8006096:	e001      	b.n	800609c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006098:	4b8a      	ldr	r3, [pc, #552]	; (80062c4 <VL53L0X_StaticInit+0x300>)
 800609a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800609c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d106      	bne.n	80060b2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80060a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f003 fde8 	bl	8009c7c <VL53L0X_load_tuning_settings>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80060b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80060ba:	2300      	movs	r3, #0
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2304      	movs	r3, #4
 80060c0:	2200      	movs	r2, #0
 80060c2:	2100      	movs	r1, #0
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 f90d 	bl	80072e4 <VL53L0X_SetGpioConfig>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80060d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d121      	bne.n	800611c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80060d8:	2201      	movs	r2, #1
 80060da:	21ff      	movs	r1, #255	; 0xff
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f004 fced 	bl	800aabc <VL53L0X_WrByte>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80060e8:	f107 031a 	add.w	r3, r7, #26
 80060ec:	461a      	mov	r2, r3
 80060ee:	2184      	movs	r1, #132	; 0x84
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f004 fd8f 	bl	800ac14 <VL53L0X_RdWord>
 80060f6:	4603      	mov	r3, r0
 80060f8:	461a      	mov	r2, r3
 80060fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80060fe:	4313      	orrs	r3, r2
 8006100:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006104:	2200      	movs	r2, #0
 8006106:	21ff      	movs	r1, #255	; 0xff
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f004 fcd7 	bl	800aabc <VL53L0X_WrByte>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006116:	4313      	orrs	r3, r2
 8006118:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800611c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006124:	8b7b      	ldrh	r3, [r7, #26]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006130:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006134:	2b00      	cmp	r3, #0
 8006136:	d108      	bne.n	800614a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006138:	f107 031c 	add.w	r3, r7, #28
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f8d0 	bl	80062e4 <VL53L0X_GetDeviceParameters>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800614a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800614e:	2b00      	cmp	r3, #0
 8006150:	d110      	bne.n	8006174 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006152:	f107 0319 	add.w	r3, r7, #25
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f9ae 	bl	80064ba <VL53L0X_GetFractionEnable>
 800615e:	4603      	mov	r3, r0
 8006160:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006164:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800616c:	7e7a      	ldrb	r2, [r7, #25]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006174:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10e      	bne.n	800619a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f103 0410 	add.w	r4, r3, #16
 8006182:	f107 051c 	add.w	r5, r7, #28
 8006186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800618a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800618c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800618e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006192:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006196:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800619a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d111      	bne.n	80061c6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80061a2:	f107 0319 	add.w	r3, r7, #25
 80061a6:	461a      	mov	r2, r3
 80061a8:	2101      	movs	r1, #1
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f004 fd08 	bl	800abc0 <VL53L0X_RdByte>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80061b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d103      	bne.n	80061c6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80061be:	7e7a      	ldrb	r2, [r7, #25]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80061c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d107      	bne.n	80061de <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80061ce:	2200      	movs	r2, #0
 80061d0:	2100      	movs	r1, #0
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f9e6 	bl	80065a4 <VL53L0X_SetSequenceStepEnable>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80061de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d107      	bne.n	80061f6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80061e6:	2200      	movs	r2, #0
 80061e8:	2102      	movs	r1, #2
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f9da 	bl	80065a4 <VL53L0X_SetSequenceStepEnable>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80061f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2203      	movs	r2, #3
 8006202:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006206:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800620a:	2b00      	cmp	r3, #0
 800620c:	d109      	bne.n	8006222 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800620e:	f107 0313 	add.w	r3, r7, #19
 8006212:	461a      	mov	r2, r3
 8006214:	2100      	movs	r1, #0
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f9ac 	bl	8006574 <VL53L0X_GetVcselPulsePeriod>
 800621c:	4603      	mov	r3, r0
 800621e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006222:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006226:	2b00      	cmp	r3, #0
 8006228:	d103      	bne.n	8006232 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800622a:	7cfa      	ldrb	r2, [r7, #19]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006232:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006236:	2b00      	cmp	r3, #0
 8006238:	d109      	bne.n	800624e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800623a:	f107 0313 	add.w	r3, r7, #19
 800623e:	461a      	mov	r2, r3
 8006240:	2101      	movs	r1, #1
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f996 	bl	8006574 <VL53L0X_GetVcselPulsePeriod>
 8006248:	4603      	mov	r3, r0
 800624a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800624e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006252:	2b00      	cmp	r3, #0
 8006254:	d103      	bne.n	800625e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006256:	7cfa      	ldrb	r2, [r7, #19]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800625e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006266:	f107 030c 	add.w	r3, r7, #12
 800626a:	461a      	mov	r2, r3
 800626c:	2103      	movs	r1, #3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f002 fee0 	bl	8009034 <get_sequence_step_timeout>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800627a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800627e:	2b00      	cmp	r3, #0
 8006280:	d103      	bne.n	800628a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800628a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8006292:	f107 030c 	add.w	r3, r7, #12
 8006296:	461a      	mov	r2, r3
 8006298:	2104      	movs	r1, #4
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f002 feca 	bl	8009034 <get_sequence_step_timeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80062a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d103      	bne.n	80062b6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3770      	adds	r7, #112	; 0x70
 80062be:	46bd      	mov	sp, r7
 80062c0:	bdb0      	pop	{r4, r5, r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000018 	.word	0x20000018

080062c8 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80062d0:	239d      	movs	r3, #157	; 0x9d
 80062d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80062d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f8cc 	bl	8006494 <VL53L0X_GetDeviceMode>
 80062fc:	4603      	mov	r3, r0
 80062fe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d107      	bne.n	8006318 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	3308      	adds	r3, #8
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa94 	bl	800683c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006314:	4603      	mov	r3, r0
 8006316:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2200      	movs	r2, #0
 8006324:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d107      	bne.n	800633e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	3310      	adds	r3, #16
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 faca 	bl	80068ce <VL53L0X_GetXTalkCompensationRateMegaCps>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800633e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d107      	bne.n	8006356 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	3314      	adds	r3, #20
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff fcaa 	bl	8005ca6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d134      	bne.n	80063c8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800635e:	2300      	movs	r3, #0
 8006360:	60bb      	str	r3, [r7, #8]
 8006362:	e02a      	b.n	80063ba <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d12a      	bne.n	80063c2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	b299      	uxth	r1, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	3308      	adds	r3, #8
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	4413      	add	r3, r2
 800637a:	3304      	adds	r3, #4
 800637c:	461a      	mov	r2, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fbea 	bl	8006b58 <VL53L0X_GetLimitCheckValue>
 8006384:	4603      	mov	r3, r0
 8006386:	461a      	mov	r2, r3
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	4313      	orrs	r3, r2
 800638c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800638e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d117      	bne.n	80063c6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	b299      	uxth	r1, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	3318      	adds	r3, #24
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	4413      	add	r3, r2
 80063a2:	461a      	mov	r2, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fb51 	bl	8006a4c <VL53L0X_GetLimitCheckEnable>
 80063aa:	4603      	mov	r3, r0
 80063ac:	461a      	mov	r2, r3
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60bb      	str	r3, [r7, #8]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b05      	cmp	r3, #5
 80063be:	ddd1      	ble.n	8006364 <VL53L0X_GetDeviceParameters+0x80>
 80063c0:	e002      	b.n	80063c8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80063c6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80063c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d107      	bne.n	80063e0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	333c      	adds	r3, #60	; 0x3c
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fc4c 	bl	8006c74 <VL53L0X_GetWrapAroundCheckEnable>
 80063dc:	4603      	mov	r3, r0
 80063de:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80063e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d107      	bne.n	80063f8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f895 	bl	800651e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80063f4:	4603      	mov	r3, r0
 80063f6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80063f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006410:	2300      	movs	r3, #0
 8006412:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	2b15      	cmp	r3, #21
 8006418:	d832      	bhi.n	8006480 <VL53L0X_SetDeviceMode+0x7c>
 800641a:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <VL53L0X_SetDeviceMode+0x1c>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006479 	.word	0x08006479
 8006424:	08006479 	.word	0x08006479
 8006428:	08006481 	.word	0x08006481
 800642c:	08006479 	.word	0x08006479
 8006430:	08006481 	.word	0x08006481
 8006434:	08006481 	.word	0x08006481
 8006438:	08006481 	.word	0x08006481
 800643c:	08006481 	.word	0x08006481
 8006440:	08006481 	.word	0x08006481
 8006444:	08006481 	.word	0x08006481
 8006448:	08006481 	.word	0x08006481
 800644c:	08006481 	.word	0x08006481
 8006450:	08006481 	.word	0x08006481
 8006454:	08006481 	.word	0x08006481
 8006458:	08006481 	.word	0x08006481
 800645c:	08006481 	.word	0x08006481
 8006460:	08006481 	.word	0x08006481
 8006464:	08006481 	.word	0x08006481
 8006468:	08006481 	.word	0x08006481
 800646c:	08006481 	.word	0x08006481
 8006470:	08006479 	.word	0x08006479
 8006474:	08006479 	.word	0x08006479
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	78fa      	ldrb	r2, [r7, #3]
 800647c:	741a      	strb	r2, [r3, #16]
		break;
 800647e:	e001      	b.n	8006484 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006480:	23f8      	movs	r3, #248	; 0xf8
 8006482:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	7c1a      	ldrb	r2, [r3, #16]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80064aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	2109      	movs	r1, #9
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f004 fb77 	bl	800abc0 <VL53L0X_RdByte>
 80064d2:	4603      	mov	r3, r0
 80064d4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80064d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80064ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f003 fa26 	bl	800995a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800650e:	4603      	mov	r3, r0
 8006510:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006512:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006528:	2300      	movs	r3, #0
 800652a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f003 faf3 	bl	8009b1a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006534:	4603      	mov	r3, r0
 8006536:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006538:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
 8006550:	4613      	mov	r3, r2
 8006552:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006558:	78ba      	ldrb	r2, [r7, #2]
 800655a:	78fb      	ldrb	r3, [r7, #3]
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f002 ff3b 	bl	80093da <VL53L0X_set_vcsel_pulse_period>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006568:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	460b      	mov	r3, r1
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006582:	2300      	movs	r3, #0
 8006584:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006586:	7afb      	ldrb	r3, [r7, #11]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	4619      	mov	r1, r3
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f003 f9ad 	bl	80098ec <VL53L0X_get_vcsel_pulse_period>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006596:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
 80065b0:	4613      	mov	r3, r2
 80065b2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065b4:	2300      	movs	r3, #0
 80065b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80065c0:	f107 030f 	add.w	r3, r7, #15
 80065c4:	461a      	mov	r2, r3
 80065c6:	2101      	movs	r1, #1
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f004 faf9 	bl	800abc0 <VL53L0X_RdByte>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80065d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d15a      	bne.n	8006694 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80065de:	78bb      	ldrb	r3, [r7, #2]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d12b      	bne.n	800663c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d825      	bhi.n	8006636 <VL53L0X_SetSequenceStepEnable+0x92>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006605 	.word	0x08006605
 80065f4:	0800660f 	.word	0x0800660f
 80065f8:	08006619 	.word	0x08006619
 80065fc:	08006623 	.word	0x08006623
 8006600:	0800662d 	.word	0x0800662d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006604:	7dbb      	ldrb	r3, [r7, #22]
 8006606:	f043 0310 	orr.w	r3, r3, #16
 800660a:	75bb      	strb	r3, [r7, #22]
				break;
 800660c:	e043      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800660e:	7dbb      	ldrb	r3, [r7, #22]
 8006610:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006614:	75bb      	strb	r3, [r7, #22]
				break;
 8006616:	e03e      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006618:	7dbb      	ldrb	r3, [r7, #22]
 800661a:	f043 0304 	orr.w	r3, r3, #4
 800661e:	75bb      	strb	r3, [r7, #22]
				break;
 8006620:	e039      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006622:	7dbb      	ldrb	r3, [r7, #22]
 8006624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006628:	75bb      	strb	r3, [r7, #22]
				break;
 800662a:	e034      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800662c:	7dbb      	ldrb	r3, [r7, #22]
 800662e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006632:	75bb      	strb	r3, [r7, #22]
				break;
 8006634:	e02f      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006636:	23fc      	movs	r3, #252	; 0xfc
 8006638:	75fb      	strb	r3, [r7, #23]
 800663a:	e02c      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	2b04      	cmp	r3, #4
 8006640:	d825      	bhi.n	800668e <VL53L0X_SetSequenceStepEnable+0xea>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	0800665d 	.word	0x0800665d
 800664c:	08006667 	.word	0x08006667
 8006650:	08006671 	.word	0x08006671
 8006654:	0800667b 	.word	0x0800667b
 8006658:	08006685 	.word	0x08006685
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800665c:	7dbb      	ldrb	r3, [r7, #22]
 800665e:	f023 0310 	bic.w	r3, r3, #16
 8006662:	75bb      	strb	r3, [r7, #22]
				break;
 8006664:	e017      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006666:	7dbb      	ldrb	r3, [r7, #22]
 8006668:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800666c:	75bb      	strb	r3, [r7, #22]
				break;
 800666e:	e012      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006670:	7dbb      	ldrb	r3, [r7, #22]
 8006672:	f023 0304 	bic.w	r3, r3, #4
 8006676:	75bb      	strb	r3, [r7, #22]
				break;
 8006678:	e00d      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800667a:	7dbb      	ldrb	r3, [r7, #22]
 800667c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006680:	75bb      	strb	r3, [r7, #22]
				break;
 8006682:	e008      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006684:	7dbb      	ldrb	r3, [r7, #22]
 8006686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800668a:	75bb      	strb	r3, [r7, #22]
				break;
 800668c:	e003      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800668e:	23fc      	movs	r3, #252	; 0xfc
 8006690:	75fb      	strb	r3, [r7, #23]
 8006692:	e000      	b.n	8006696 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006694:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	7dba      	ldrb	r2, [r7, #22]
 800669a:	429a      	cmp	r2, r3
 800669c:	d01e      	beq.n	80066dc <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800669e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d107      	bne.n	80066b6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80066a6:	7dbb      	ldrb	r3, [r7, #22]
 80066a8:	461a      	mov	r2, r3
 80066aa:	2101      	movs	r1, #1
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f004 fa05 	bl	800aabc <VL53L0X_WrByte>
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80066b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d103      	bne.n	80066c6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7dba      	ldrb	r2, [r7, #22]
 80066c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80066c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80066d4:	6939      	ldr	r1, [r7, #16]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff ff0e 	bl	80064f8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80066dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	607b      	str	r3, [r7, #4]
 80066f2:	460b      	mov	r3, r1
 80066f4:	72fb      	strb	r3, [r7, #11]
 80066f6:	4613      	mov	r3, r2
 80066f8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066fa:	2300      	movs	r3, #0
 80066fc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006704:	7afb      	ldrb	r3, [r7, #11]
 8006706:	2b04      	cmp	r3, #4
 8006708:	d836      	bhi.n	8006778 <sequence_step_enabled+0x90>
 800670a:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <sequence_step_enabled+0x28>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006725 	.word	0x08006725
 8006714:	08006737 	.word	0x08006737
 8006718:	08006749 	.word	0x08006749
 800671c:	0800675b 	.word	0x0800675b
 8006720:	0800676d 	.word	0x0800676d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006724:	7abb      	ldrb	r3, [r7, #10]
 8006726:	111b      	asrs	r3, r3, #4
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	b2da      	uxtb	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	701a      	strb	r2, [r3, #0]
		break;
 8006734:	e022      	b.n	800677c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006736:	7abb      	ldrb	r3, [r7, #10]
 8006738:	10db      	asrs	r3, r3, #3
 800673a:	b2db      	uxtb	r3, r3
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	b2da      	uxtb	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	701a      	strb	r2, [r3, #0]
		break;
 8006746:	e019      	b.n	800677c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006748:	7abb      	ldrb	r3, [r7, #10]
 800674a:	109b      	asrs	r3, r3, #2
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	b2da      	uxtb	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	701a      	strb	r2, [r3, #0]
		break;
 8006758:	e010      	b.n	800677c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800675a:	7abb      	ldrb	r3, [r7, #10]
 800675c:	119b      	asrs	r3, r3, #6
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	b2da      	uxtb	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	701a      	strb	r2, [r3, #0]
		break;
 800676a:	e007      	b.n	800677c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800676c:	7abb      	ldrb	r3, [r7, #10]
 800676e:	09db      	lsrs	r3, r3, #7
 8006770:	b2da      	uxtb	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	701a      	strb	r2, [r3, #0]
		break;
 8006776:	e001      	b.n	800677c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006778:	23fc      	movs	r3, #252	; 0xfc
 800677a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800677c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006780:	4618      	mov	r0, r3
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800679e:	f107 030e 	add.w	r3, r7, #14
 80067a2:	461a      	mov	r2, r3
 80067a4:	2101      	movs	r1, #1
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f004 fa0a 	bl	800abc0 <VL53L0X_RdByte>
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80067b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d107      	bne.n	80067c8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80067b8:	7bba      	ldrb	r2, [r7, #14]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2100      	movs	r1, #0
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff ff92 	bl	80066e8 <sequence_step_enabled>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80067c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d108      	bne.n	80067e2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80067d0:	7bba      	ldrb	r2, [r7, #14]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	3302      	adds	r3, #2
 80067d6:	2101      	movs	r1, #1
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff ff85 	bl	80066e8 <sequence_step_enabled>
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80067e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d108      	bne.n	80067fc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80067ea:	7bba      	ldrb	r2, [r7, #14]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	3301      	adds	r3, #1
 80067f0:	2102      	movs	r1, #2
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff ff78 	bl	80066e8 <sequence_step_enabled>
 80067f8:	4603      	mov	r3, r0
 80067fa:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80067fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d108      	bne.n	8006816 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006804:	7bba      	ldrb	r2, [r7, #14]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	3303      	adds	r3, #3
 800680a:	2103      	movs	r1, #3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff ff6b 	bl	80066e8 <sequence_step_enabled>
 8006812:	4603      	mov	r3, r0
 8006814:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d108      	bne.n	8006830 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800681e:	7bba      	ldrb	r2, [r7, #14]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	3304      	adds	r3, #4
 8006824:	2104      	movs	r1, #4
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ff5e 	bl	80066e8 <sequence_step_enabled>
 800682c:	4603      	mov	r3, r0
 800682e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006830:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800684a:	f107 030c 	add.w	r3, r7, #12
 800684e:	461a      	mov	r2, r3
 8006850:	21f8      	movs	r1, #248	; 0xf8
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f004 f9de 	bl	800ac14 <VL53L0X_RdWord>
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800685c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d108      	bne.n	8006876 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006864:	f107 0308 	add.w	r3, r7, #8
 8006868:	461a      	mov	r2, r3
 800686a:	2104      	movs	r1, #4
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f004 fa09 	bl	800ac84 <VL53L0X_RdDWord>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10c      	bne.n	8006898 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800687e:	89bb      	ldrh	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	89ba      	ldrh	r2, [r7, #12]
 8006888:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006898:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7f1b      	ldrb	r3, [r3, #28]
 80068b6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	7bba      	ldrb	r2, [r7, #14]
 80068bc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80068be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b086      	sub	sp, #24
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068d8:	2300      	movs	r3, #0
 80068da:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80068dc:	f107 030e 	add.w	r3, r7, #14
 80068e0:	461a      	mov	r2, r3
 80068e2:	2120      	movs	r1, #32
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f004 f995 	bl	800ac14 <VL53L0X_RdWord>
 80068ea:	4603      	mov	r3, r0
 80068ec:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80068ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d118      	bne.n	8006928 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80068f6:	89fb      	ldrh	r3, [r7, #14]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	771a      	strb	r2, [r3, #28]
 800690e:	e00b      	b.n	8006928 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006910:	89fb      	ldrh	r3, [r7, #14]
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	807b      	strh	r3, [r7, #2]
 8006940:	4613      	mov	r3, r2
 8006942:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006944:	2300      	movs	r3, #0
 8006946:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006954:	887b      	ldrh	r3, [r7, #2]
 8006956:	2b05      	cmp	r3, #5
 8006958:	d902      	bls.n	8006960 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800695a:	23fc      	movs	r3, #252	; 0xfc
 800695c:	75fb      	strb	r3, [r7, #23]
 800695e:	e05b      	b.n	8006a18 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006960:	787b      	ldrb	r3, [r7, #1]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800696e:	2301      	movs	r3, #1
 8006970:	73bb      	strb	r3, [r7, #14]
 8006972:	e00a      	b.n	800698a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006974:	887b      	ldrh	r3, [r7, #2]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	330c      	adds	r3, #12
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006986:	2301      	movs	r3, #1
 8006988:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800698a:	887b      	ldrh	r3, [r7, #2]
 800698c:	2b05      	cmp	r3, #5
 800698e:	d841      	bhi.n	8006a14 <VL53L0X_SetLimitCheckEnable+0xe0>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <VL53L0X_SetLimitCheckEnable+0x64>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069b1 	.word	0x080069b1
 800699c:	080069bb 	.word	0x080069bb
 80069a0:	080069d1 	.word	0x080069d1
 80069a4:	080069db 	.word	0x080069db
 80069a8:	080069e5 	.word	0x080069e5
 80069ac:	080069fd 	.word	0x080069fd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	7bfa      	ldrb	r2, [r7, #15]
 80069b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80069b8:	e02e      	b.n	8006a18 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80069be:	b29b      	uxth	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	2144      	movs	r1, #68	; 0x44
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f004 f89d 	bl	800ab04 <VL53L0X_WrWord>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]

			break;
 80069ce:	e023      	b.n	8006a18 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	7bfa      	ldrb	r2, [r7, #15]
 80069d4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80069d8:	e01e      	b.n	8006a18 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	7bfa      	ldrb	r2, [r7, #15]
 80069de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80069e2:	e019      	b.n	8006a18 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80069ea:	7b7b      	ldrb	r3, [r7, #13]
 80069ec:	22fe      	movs	r2, #254	; 0xfe
 80069ee:	2160      	movs	r1, #96	; 0x60
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f004 f8b1 	bl	800ab58 <VL53L0X_UpdateByte>
 80069f6:	4603      	mov	r3, r0
 80069f8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80069fa:	e00d      	b.n	8006a18 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006a02:	7b7b      	ldrb	r3, [r7, #13]
 8006a04:	22ef      	movs	r2, #239	; 0xef
 8006a06:	2160      	movs	r1, #96	; 0x60
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f004 f8a5 	bl	800ab58 <VL53L0X_UpdateByte>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006a12:	e001      	b.n	8006a18 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a14:	23fc      	movs	r3, #252	; 0xfc
 8006a16:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10f      	bne.n	8006a40 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006a20:	787b      	ldrb	r3, [r7, #1]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a26:	887b      	ldrh	r3, [r7, #2]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006a32:	e005      	b.n	8006a40 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a34:	887b      	ldrh	r3, [r7, #2]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4413      	add	r3, r2
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	460b      	mov	r3, r1
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006a5e:	897b      	ldrh	r3, [r7, #10]
 8006a60:	2b05      	cmp	r3, #5
 8006a62:	d905      	bls.n	8006a70 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a64:	23fc      	movs	r3, #252	; 0xfc
 8006a66:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	e008      	b.n	8006a82 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a70:	897b      	ldrh	r3, [r7, #10]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4413      	add	r3, r2
 8006a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a7a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7dba      	ldrb	r2, [r7, #22]
 8006a80:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
	...

08006a94 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006aa6:	897b      	ldrh	r3, [r7, #10]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ab0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8006ab2:	7dbb      	ldrb	r3, [r7, #22]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d107      	bne.n	8006ac8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006ab8:	897b      	ldrh	r3, [r7, #10]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	330c      	adds	r3, #12
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	605a      	str	r2, [r3, #4]
 8006ac6:	e040      	b.n	8006b4a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006ac8:	897b      	ldrh	r3, [r7, #10]
 8006aca:	2b05      	cmp	r3, #5
 8006acc:	d830      	bhi.n	8006b30 <VL53L0X_SetLimitCheckValue+0x9c>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <VL53L0X_SetLimitCheckValue+0x40>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006aed 	.word	0x08006aed
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	08006b0b 	.word	0x08006b0b
 8006ae0:	08006b13 	.word	0x08006b13
 8006ae4:	08006b1b 	.word	0x08006b1b
 8006ae8:	08006b1b 	.word	0x08006b1b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006af2:	e01f      	b.n	8006b34 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	2144      	movs	r1, #68	; 0x44
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f004 f800 	bl	800ab04 <VL53L0X_WrWord>
 8006b04:	4603      	mov	r3, r0
 8006b06:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006b08:	e014      	b.n	8006b34 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006b10:	e010      	b.n	8006b34 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006b18:	e00c      	b.n	8006b34 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	2164      	movs	r1, #100	; 0x64
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f003 ffed 	bl	800ab04 <VL53L0X_WrWord>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006b2e:	e001      	b.n	8006b34 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b30:	23fc      	movs	r3, #252	; 0xfc
 8006b32:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006b34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d106      	bne.n	8006b4a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b3c:	897b      	ldrh	r3, [r7, #10]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	330c      	adds	r3, #12
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop

08006b58 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	460b      	mov	r3, r1
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006b6e:	897b      	ldrh	r3, [r7, #10]
 8006b70:	2b05      	cmp	r3, #5
 8006b72:	d847      	bhi.n	8006c04 <VL53L0X_GetLimitCheckValue+0xac>
 8006b74:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <VL53L0X_GetLimitCheckValue+0x24>)
 8006b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7a:	bf00      	nop
 8006b7c:	08006b95 	.word	0x08006b95
 8006b80:	08006ba1 	.word	0x08006ba1
 8006b84:	08006bc7 	.word	0x08006bc7
 8006b88:	08006bd3 	.word	0x08006bd3
 8006b8c:	08006bdf 	.word	0x08006bdf
 8006b90:	08006bdf 	.word	0x08006bdf

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b98:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	77bb      	strb	r3, [r7, #30]
		break;
 8006b9e:	e033      	b.n	8006c08 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006ba0:	f107 0316 	add.w	r3, r7, #22
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	2144      	movs	r1, #68	; 0x44
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f004 f833 	bl	800ac14 <VL53L0X_RdWord>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006bb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d102      	bne.n	8006bc0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006bba:	8afb      	ldrh	r3, [r7, #22]
 8006bbc:	025b      	lsls	r3, r3, #9
 8006bbe:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	77bb      	strb	r3, [r7, #30]
		break;
 8006bc4:	e020      	b.n	8006c08 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	77bb      	strb	r3, [r7, #30]
		break;
 8006bd0:	e01a      	b.n	8006c08 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	77bb      	strb	r3, [r7, #30]
		break;
 8006bdc:	e014      	b.n	8006c08 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006bde:	f107 0316 	add.w	r3, r7, #22
 8006be2:	461a      	mov	r2, r3
 8006be4:	2164      	movs	r1, #100	; 0x64
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f004 f814 	bl	800ac14 <VL53L0X_RdWord>
 8006bec:	4603      	mov	r3, r0
 8006bee:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006bf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d102      	bne.n	8006bfe <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006bf8:	8afb      	ldrh	r3, [r7, #22]
 8006bfa:	025b      	lsls	r3, r3, #9
 8006bfc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	77bb      	strb	r3, [r7, #30]
		break;
 8006c02:	e001      	b.n	8006c08 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c04:	23fc      	movs	r3, #252	; 0xfc
 8006c06:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d12a      	bne.n	8006c66 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006c10:	7fbb      	ldrb	r3, [r7, #30]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d124      	bne.n	8006c60 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d110      	bne.n	8006c3e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006c1c:	897b      	ldrh	r3, [r7, #10]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	330c      	adds	r3, #12
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006c30:	897b      	ldrh	r3, [r7, #10]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006c3c:	e013      	b.n	8006c66 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006c44:	897b      	ldrh	r3, [r7, #10]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006c52:	897b      	ldrh	r3, [r7, #10]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006c5e:	e002      	b.n	8006c66 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c66:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop

08006c74 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006c82:	f107 030e 	add.w	r3, r7, #14
 8006c86:	461a      	mov	r2, r3
 8006c88:	2101      	movs	r1, #1
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f003 ff98 	bl	800abc0 <VL53L0X_RdByte>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10e      	bne.n	8006cba <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006c9c:	7bba      	ldrb	r2, [r7, #14]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	b25b      	sxtb	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	da03      	bge.n	8006cb4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	e002      	b.n	8006cba <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d104      	bne.n	8006ccc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006ce4:	f107 030e 	add.w	r3, r7, #14
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff fbd2 	bl	8006494 <VL53L0X_GetDeviceMode>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d107      	bne.n	8006d0c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f898 	bl	8006e38 <VL53L0X_StartMeasurement>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 fb3f 	bl	8008398 <VL53L0X_measurement_poll_for_completion>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d103      	bne.n	8006d34 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2203      	movs	r2, #3
 8006d30:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006d50:	2301      	movs	r3, #1
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f001 fae1 	bl	800831e <VL53L0X_perform_ref_calibration>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006d82:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006d84:	7dbb      	ldrb	r3, [r7, #22]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d005      	beq.n	8006d96 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006d8a:	7dbb      	ldrb	r3, [r7, #22]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d002      	beq.n	8006d96 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006d90:	7dbb      	ldrb	r3, [r7, #22]
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d147      	bne.n	8006e26 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006d96:	f107 030c 	add.w	r3, r7, #12
 8006d9a:	f107 0210 	add.w	r2, r7, #16
 8006d9e:	2101      	movs	r1, #1
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fbc3 	bl	800752c <VL53L0X_GetInterruptThresholds>
 8006da6:	4603      	mov	r3, r0
 8006da8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006db0:	d803      	bhi.n	8006dba <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8006db2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006db4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006db8:	d935      	bls.n	8006e26 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d131      	bne.n	8006e26 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d006      	beq.n	8006dd6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006dc8:	491a      	ldr	r1, [pc, #104]	; (8006e34 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f002 ff56 	bl	8009c7c <VL53L0X_load_tuning_settings>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	75fb      	strb	r3, [r7, #23]
 8006dd4:	e027      	b.n	8006e26 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	21ff      	movs	r1, #255	; 0xff
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f003 fe6e 	bl	800aabc <VL53L0X_WrByte>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006dea:	2200      	movs	r2, #0
 8006dec:	2170      	movs	r1, #112	; 0x70
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f003 fe64 	bl	800aabc <VL53L0X_WrByte>
 8006df4:	4603      	mov	r3, r0
 8006df6:	461a      	mov	r2, r3
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006dfe:	2200      	movs	r2, #0
 8006e00:	21ff      	movs	r1, #255	; 0xff
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f003 fe5a 	bl	800aabc <VL53L0X_WrByte>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006e12:	2200      	movs	r2, #0
 8006e14:	2180      	movs	r1, #128	; 0x80
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f003 fe50 	bl	800aabc <VL53L0X_WrByte>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006e26:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	2000010c 	.word	0x2000010c

08006e38 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e40:	2300      	movs	r3, #0
 8006e42:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006e44:	2301      	movs	r3, #1
 8006e46:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006e48:	f107 030e 	add.w	r3, r7, #14
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fb20 	bl	8006494 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006e54:	2201      	movs	r2, #1
 8006e56:	2180      	movs	r1, #128	; 0x80
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f003 fe2f 	bl	800aabc <VL53L0X_WrByte>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e62:	2201      	movs	r2, #1
 8006e64:	21ff      	movs	r1, #255	; 0xff
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f003 fe28 	bl	800aabc <VL53L0X_WrByte>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006e70:	2200      	movs	r2, #0
 8006e72:	2100      	movs	r1, #0
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f003 fe21 	bl	800aabc <VL53L0X_WrByte>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006e84:	461a      	mov	r2, r3
 8006e86:	2191      	movs	r1, #145	; 0x91
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f003 fe17 	bl	800aabc <VL53L0X_WrByte>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006e92:	2201      	movs	r2, #1
 8006e94:	2100      	movs	r1, #0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f003 fe10 	bl	800aabc <VL53L0X_WrByte>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	21ff      	movs	r1, #255	; 0xff
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f003 fe09 	bl	800aabc <VL53L0X_WrByte>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2180      	movs	r1, #128	; 0x80
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f003 fe02 	bl	800aabc <VL53L0X_WrByte>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d037      	beq.n	8006f32 <VL53L0X_StartMeasurement+0xfa>
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d04f      	beq.n	8006f66 <VL53L0X_StartMeasurement+0x12e>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d167      	bne.n	8006f9a <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006eca:	2201      	movs	r2, #1
 8006ecc:	2100      	movs	r1, #0
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f003 fdf4 	bl	800aabc <VL53L0X_WrByte>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d15d      	bne.n	8006fa0 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d008      	beq.n	8006f00 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8006eee:	f107 030d 	add.w	r3, r7, #13
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f003 fe62 	bl	800abc0 <VL53L0X_RdByte>
 8006efc:	4603      	mov	r3, r0
 8006efe:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	3301      	adds	r3, #1
 8006f04:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8006f06:	7b7a      	ldrb	r2, [r7, #13]
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006f0e:	7bfa      	ldrb	r2, [r7, #15]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d107      	bne.n	8006f24 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8006f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d103      	bne.n	8006f24 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006f22:	d3e1      	bcc.n	8006ee8 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006f2a:	d339      	bcc.n	8006fa0 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006f2c:	23f9      	movs	r3, #249	; 0xf9
 8006f2e:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006f30:	e036      	b.n	8006fa0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff ff15 	bl	8006d6c <VL53L0X_CheckAndLoadInterruptSettings>
 8006f42:	4603      	mov	r3, r0
 8006f44:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006f46:	2202      	movs	r2, #2
 8006f48:	2100      	movs	r1, #0
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f003 fdb6 	bl	800aabc <VL53L0X_WrByte>
 8006f50:	4603      	mov	r3, r0
 8006f52:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006f54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d123      	bne.n	8006fa4 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006f64:	e01e      	b.n	8006fa4 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d105      	bne.n	8006f7a <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006f6e:	2101      	movs	r1, #1
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff fefb 	bl	8006d6c <VL53L0X_CheckAndLoadInterruptSettings>
 8006f76:	4603      	mov	r3, r0
 8006f78:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f003 fd9c 	bl	800aabc <VL53L0X_WrByte>
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2204      	movs	r2, #4
 8006f94:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006f98:	e006      	b.n	8006fa8 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006f9a:	23f8      	movs	r3, #248	; 0xf8
 8006f9c:	75fb      	strb	r3, [r7, #23]
 8006f9e:	e004      	b.n	8006faa <VL53L0X_StartMeasurement+0x172>
		break;
 8006fa0:	bf00      	nop
 8006fa2:	e002      	b.n	8006faa <VL53L0X_StartMeasurement+0x172>
		break;
 8006fa4:	bf00      	nop
 8006fa6:	e000      	b.n	8006faa <VL53L0X_StartMeasurement+0x172>
		break;
 8006fa8:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006fca:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d112      	bne.n	8006ff8 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006fd2:	f107 0308 	add.w	r3, r7, #8
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fb1d 	bl	8007618 <VL53L0X_GetInterruptMaskStatus>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d103      	bne.n	8006ff0 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2201      	movs	r2, #1
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e01c      	b.n	800702a <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	e018      	b.n	800702a <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006ff8:	f107 030d 	add.w	r3, r7, #13
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	2114      	movs	r1, #20
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f003 fddd 	bl	800abc0 <VL53L0X_RdByte>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800700a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10b      	bne.n	800702a <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007012:	7b7b      	ldrb	r3, [r7, #13]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2201      	movs	r2, #1
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	e002      	b.n	800702a <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2200      	movs	r2, #0
 8007028:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800702a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007038:	b5b0      	push	{r4, r5, r7, lr}
 800703a:	b096      	sub	sp, #88	; 0x58
 800703c:	af02      	add	r7, sp, #8
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007042:	2300      	movs	r3, #0
 8007044:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007048:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800704c:	230c      	movs	r3, #12
 800704e:	2114      	movs	r1, #20
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f003 fd07 	bl	800aa64 <VL53L0X_ReadMulti>
 8007056:	4603      	mov	r3, r0
 8007058:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800705c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007060:	2b00      	cmp	r3, #0
 8007062:	f040 80d2 	bne.w	800720a <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2200      	movs	r2, #0
 800706a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007072:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007076:	b29b      	uxth	r3, r3
 8007078:	021b      	lsls	r3, r3, #8
 800707a:	b29a      	uxth	r2, r3
 800707c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007080:	b29b      	uxth	r3, r3
 8007082:	4413      	add	r3, r2
 8007084:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2200      	movs	r2, #0
 800708c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800708e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007092:	b29b      	uxth	r3, r3
 8007094:	021b      	lsls	r3, r3, #8
 8007096:	b29a      	uxth	r2, r3
 8007098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800709c:	b29b      	uxth	r3, r3
 800709e:	4413      	add	r3, r2
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	025b      	lsls	r3, r3, #9
 80070a4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070aa:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80070ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	021b      	lsls	r3, r3, #8
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	4413      	add	r3, r2
 80070be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80070c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80070c6:	025b      	lsls	r3, r3, #9
 80070c8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80070ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	021b      	lsls	r3, r3, #8
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070dc:	b29b      	uxth	r3, r3
 80070de:	4413      	add	r3, r2
 80070e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80070ea:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80070ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80070f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80070fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007106:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800710c:	d047      	beq.n	800719e <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800710e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007110:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007114:	fb02 f303 	mul.w	r3, r2, r3
 8007118:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800711c:	4a58      	ldr	r2, [pc, #352]	; (8007280 <VL53L0X_GetRangingMeasurementData+0x248>)
 800711e:	fb82 1203 	smull	r1, r2, r2, r3
 8007122:	1192      	asrs	r2, r2, #6
 8007124:	17db      	asrs	r3, r3, #31
 8007126:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007128:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7f1b      	ldrb	r3, [r3, #28]
 8007136:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800713a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800713e:	2b00      	cmp	r3, #0
 8007140:	d02d      	beq.n	800719e <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007142:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007144:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007148:	fb02 f303 	mul.w	r3, r2, r3
 800714c:	121b      	asrs	r3, r3, #8
 800714e:	461a      	mov	r2, r3
				if ((SignalRate
 8007150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007152:	4293      	cmp	r3, r2
 8007154:	d10d      	bne.n	8007172 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8007156:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800715a:	2b00      	cmp	r3, #0
 800715c:	d004      	beq.n	8007168 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 800715e:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007162:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007166:	e016      	b.n	8007196 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8007168:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800716c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007170:	e011      	b.n	8007196 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007172:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007178:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800717c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800717e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007182:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007186:	121b      	asrs	r3, r3, #8
 8007188:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800718a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800718c:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800718e:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007192:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007196:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800719a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800719e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00d      	beq.n	80071c2 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80071a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071aa:	089b      	lsrs	r3, r3, #2
 80071ac:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80071b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	019b      	lsls	r3, r3, #6
 80071ba:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	75da      	strb	r2, [r3, #23]
 80071c0:	e006      	b.n	80071d0 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80071c8:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2200      	movs	r2, #0
 80071ce:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80071d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80071d4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80071d8:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	4613      	mov	r3, r2
 80071e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f003 f9f0 	bl	800a5cc <VL53L0X_get_pal_range_status>
 80071ec:	4603      	mov	r3, r0
 80071ee:	461a      	mov	r2, r3
 80071f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80071fa:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d103      	bne.n	800720a <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007202:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800720a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800720e:	2b00      	cmp	r3, #0
 8007210:	d12f      	bne.n	8007272 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f107 040c 	add.w	r4, r7, #12
 8007218:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800721c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800721e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007220:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007224:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800722c:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800723a:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007240:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007246:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800724c:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007252:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007258:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007262:	f107 050c 	add.w	r5, r7, #12
 8007266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800726a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800726e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007272:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007276:	4618      	mov	r0, r3
 8007278:	3750      	adds	r7, #80	; 0x50
 800727a:	46bd      	mov	sp, r7
 800727c:	bdb0      	pop	{r4, r5, r7, pc}
 800727e:	bf00      	nop
 8007280:	10624dd3 	.word	0x10624dd3

08007284 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007292:	2100      	movs	r1, #0
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff f8b5 	bl	8006404 <VL53L0X_SetDeviceMode>
 800729a:	4603      	mov	r3, r0
 800729c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800729e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d104      	bne.n	80072b0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff fd16 	bl	8006cd8 <VL53L0X_PerformSingleMeasurement>
 80072ac:	4603      	mov	r3, r0
 80072ae:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80072b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d105      	bne.n	80072c4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff febc 	bl	8007038 <VL53L0X_GetRangingMeasurementData>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80072c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d105      	bne.n	80072d8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80072cc:	2100      	movs	r1, #0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f962 	bl	8007598 <VL53L0X_ClearInterruptMask>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80072d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	4608      	mov	r0, r1
 80072ee:	4611      	mov	r1, r2
 80072f0:	461a      	mov	r2, r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	70fb      	strb	r3, [r7, #3]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70bb      	strb	r3, [r7, #2]
 80072fa:	4613      	mov	r3, r2
 80072fc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072fe:	2300      	movs	r3, #0
 8007300:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007302:	78fb      	ldrb	r3, [r7, #3]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007308:	23f6      	movs	r3, #246	; 0xf6
 800730a:	73fb      	strb	r3, [r7, #15]
 800730c:	e107      	b.n	800751e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800730e:	78bb      	ldrb	r3, [r7, #2]
 8007310:	2b14      	cmp	r3, #20
 8007312:	d110      	bne.n	8007336 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007314:	7e3b      	ldrb	r3, [r7, #24]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d102      	bne.n	8007320 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800731a:	2310      	movs	r3, #16
 800731c:	73bb      	strb	r3, [r7, #14]
 800731e:	e001      	b.n	8007324 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007320:	2301      	movs	r3, #1
 8007322:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	461a      	mov	r2, r3
 8007328:	2184      	movs	r1, #132	; 0x84
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f003 fbc6 	bl	800aabc <VL53L0X_WrByte>
 8007330:	4603      	mov	r3, r0
 8007332:	73fb      	strb	r3, [r7, #15]
 8007334:	e0f3      	b.n	800751e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007336:	78bb      	ldrb	r3, [r7, #2]
 8007338:	2b15      	cmp	r3, #21
 800733a:	f040 8097 	bne.w	800746c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800733e:	2201      	movs	r2, #1
 8007340:	21ff      	movs	r1, #255	; 0xff
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f003 fbba 	bl	800aabc <VL53L0X_WrByte>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	4313      	orrs	r3, r2
 8007350:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007352:	2200      	movs	r2, #0
 8007354:	2100      	movs	r1, #0
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f003 fbb0 	bl	800aabc <VL53L0X_WrByte>
 800735c:	4603      	mov	r3, r0
 800735e:	461a      	mov	r2, r3
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	4313      	orrs	r3, r2
 8007364:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007366:	2200      	movs	r2, #0
 8007368:	21ff      	movs	r1, #255	; 0xff
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f003 fba6 	bl	800aabc <VL53L0X_WrByte>
 8007370:	4603      	mov	r3, r0
 8007372:	461a      	mov	r2, r3
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	4313      	orrs	r3, r2
 8007378:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800737a:	2201      	movs	r2, #1
 800737c:	2180      	movs	r1, #128	; 0x80
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f003 fb9c 	bl	800aabc <VL53L0X_WrByte>
 8007384:	4603      	mov	r3, r0
 8007386:	461a      	mov	r2, r3
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	4313      	orrs	r3, r2
 800738c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800738e:	2202      	movs	r2, #2
 8007390:	2185      	movs	r1, #133	; 0x85
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f003 fb92 	bl	800aabc <VL53L0X_WrByte>
 8007398:	4603      	mov	r3, r0
 800739a:	461a      	mov	r2, r3
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	4313      	orrs	r3, r2
 80073a0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80073a2:	2204      	movs	r2, #4
 80073a4:	21ff      	movs	r1, #255	; 0xff
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f003 fb88 	bl	800aabc <VL53L0X_WrByte>
 80073ac:	4603      	mov	r3, r0
 80073ae:	461a      	mov	r2, r3
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80073b6:	2200      	movs	r2, #0
 80073b8:	21cd      	movs	r1, #205	; 0xcd
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f003 fb7e 	bl	800aabc <VL53L0X_WrByte>
 80073c0:	4603      	mov	r3, r0
 80073c2:	461a      	mov	r2, r3
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80073ca:	2211      	movs	r2, #17
 80073cc:	21cc      	movs	r1, #204	; 0xcc
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f003 fb74 	bl	800aabc <VL53L0X_WrByte>
 80073d4:	4603      	mov	r3, r0
 80073d6:	461a      	mov	r2, r3
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	4313      	orrs	r3, r2
 80073dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80073de:	2207      	movs	r2, #7
 80073e0:	21ff      	movs	r1, #255	; 0xff
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f003 fb6a 	bl	800aabc <VL53L0X_WrByte>
 80073e8:	4603      	mov	r3, r0
 80073ea:	461a      	mov	r2, r3
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80073f2:	2200      	movs	r2, #0
 80073f4:	21be      	movs	r1, #190	; 0xbe
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f003 fb60 	bl	800aabc <VL53L0X_WrByte>
 80073fc:	4603      	mov	r3, r0
 80073fe:	461a      	mov	r2, r3
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	4313      	orrs	r3, r2
 8007404:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007406:	2206      	movs	r2, #6
 8007408:	21ff      	movs	r1, #255	; 0xff
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f003 fb56 	bl	800aabc <VL53L0X_WrByte>
 8007410:	4603      	mov	r3, r0
 8007412:	461a      	mov	r2, r3
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	4313      	orrs	r3, r2
 8007418:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800741a:	2209      	movs	r2, #9
 800741c:	21cc      	movs	r1, #204	; 0xcc
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f003 fb4c 	bl	800aabc <VL53L0X_WrByte>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	4313      	orrs	r3, r2
 800742c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800742e:	2200      	movs	r2, #0
 8007430:	21ff      	movs	r1, #255	; 0xff
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f003 fb42 	bl	800aabc <VL53L0X_WrByte>
 8007438:	4603      	mov	r3, r0
 800743a:	461a      	mov	r2, r3
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	4313      	orrs	r3, r2
 8007440:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007442:	2201      	movs	r2, #1
 8007444:	21ff      	movs	r1, #255	; 0xff
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f003 fb38 	bl	800aabc <VL53L0X_WrByte>
 800744c:	4603      	mov	r3, r0
 800744e:	461a      	mov	r2, r3
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	4313      	orrs	r3, r2
 8007454:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007456:	2200      	movs	r2, #0
 8007458:	2100      	movs	r1, #0
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f003 fb2e 	bl	800aabc <VL53L0X_WrByte>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	4313      	orrs	r3, r2
 8007468:	73fb      	strb	r3, [r7, #15]
 800746a:	e058      	b.n	800751e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800746c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d121      	bne.n	80074b8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007474:	787b      	ldrb	r3, [r7, #1]
 8007476:	2b04      	cmp	r3, #4
 8007478:	d81b      	bhi.n	80074b2 <VL53L0X_SetGpioConfig+0x1ce>
 800747a:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <VL53L0X_SetGpioConfig+0x19c>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	08007495 	.word	0x08007495
 8007484:	0800749b 	.word	0x0800749b
 8007488:	080074a1 	.word	0x080074a1
 800748c:	080074a7 	.word	0x080074a7
 8007490:	080074ad 	.word	0x080074ad
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007494:	2300      	movs	r3, #0
 8007496:	73bb      	strb	r3, [r7, #14]
				break;
 8007498:	e00f      	b.n	80074ba <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800749a:	2301      	movs	r3, #1
 800749c:	73bb      	strb	r3, [r7, #14]
				break;
 800749e:	e00c      	b.n	80074ba <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80074a0:	2302      	movs	r3, #2
 80074a2:	73bb      	strb	r3, [r7, #14]
				break;
 80074a4:	e009      	b.n	80074ba <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80074a6:	2303      	movs	r3, #3
 80074a8:	73bb      	strb	r3, [r7, #14]
				break;
 80074aa:	e006      	b.n	80074ba <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80074ac:	2304      	movs	r3, #4
 80074ae:	73bb      	strb	r3, [r7, #14]
				break;
 80074b0:	e003      	b.n	80074ba <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80074b2:	23f5      	movs	r3, #245	; 0xf5
 80074b4:	73fb      	strb	r3, [r7, #15]
 80074b6:	e000      	b.n	80074ba <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80074b8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80074ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d107      	bne.n	80074d2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	461a      	mov	r2, r3
 80074c6:	210a      	movs	r1, #10
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f003 faf7 	bl	800aabc <VL53L0X_WrByte>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80074d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10f      	bne.n	80074fa <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80074da:	7e3b      	ldrb	r3, [r7, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73bb      	strb	r3, [r7, #14]
 80074e4:	e001      	b.n	80074ea <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80074e6:	2310      	movs	r3, #16
 80074e8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	22ef      	movs	r2, #239	; 0xef
 80074ee:	2184      	movs	r1, #132	; 0x84
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f003 fb31 	bl	800ab58 <VL53L0X_UpdateByte>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80074fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d103      	bne.n	800750a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	787a      	ldrb	r2, [r7, #1]
 8007506:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800750a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007512:	2100      	movs	r1, #0
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f83f 	bl	8007598 <VL53L0X_ClearInterruptMask>
 800751a:	4603      	mov	r3, r0
 800751c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800751e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop

0800752c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	460b      	mov	r3, r1
 800753a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800753c:	2300      	movs	r3, #0
 800753e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007540:	f107 0314 	add.w	r3, r7, #20
 8007544:	461a      	mov	r2, r3
 8007546:	210e      	movs	r1, #14
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f003 fb63 	bl	800ac14 <VL53L0X_RdWord>
 800754e:	4603      	mov	r3, r0
 8007550:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007552:	8abb      	ldrh	r3, [r7, #20]
 8007554:	045b      	lsls	r3, r3, #17
 8007556:	461a      	mov	r2, r3
 8007558:	4b0e      	ldr	r3, [pc, #56]	; (8007594 <VL53L0X_GetInterruptThresholds+0x68>)
 800755a:	4013      	ands	r3, r2
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10f      	bne.n	8007588 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007568:	f107 0314 	add.w	r3, r7, #20
 800756c:	461a      	mov	r2, r3
 800756e:	210c      	movs	r1, #12
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f003 fb4f 	bl	800ac14 <VL53L0X_RdWord>
 8007576:	4603      	mov	r3, r0
 8007578:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800757a:	8abb      	ldrh	r3, [r7, #20]
 800757c:	045b      	lsls	r3, r3, #17
 800757e:	461a      	mov	r2, r3
 8007580:	4b04      	ldr	r3, [pc, #16]	; (8007594 <VL53L0X_GetInterruptThresholds+0x68>)
 8007582:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007588:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	1ffe0000 	.word	0x1ffe0000

08007598 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80075aa:	2201      	movs	r2, #1
 80075ac:	210b      	movs	r1, #11
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f003 fa84 	bl	800aabc <VL53L0X_WrByte>
 80075b4:	4603      	mov	r3, r0
 80075b6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80075b8:	2200      	movs	r2, #0
 80075ba:	210b      	movs	r1, #11
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f003 fa7d 	bl	800aabc <VL53L0X_WrByte>
 80075c2:	4603      	mov	r3, r0
 80075c4:	461a      	mov	r2, r3
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80075cc:	f107 030d 	add.w	r3, r7, #13
 80075d0:	461a      	mov	r2, r3
 80075d2:	2113      	movs	r1, #19
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f003 faf3 	bl	800abc0 <VL53L0X_RdByte>
 80075da:	4603      	mov	r3, r0
 80075dc:	461a      	mov	r2, r3
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	3301      	adds	r3, #1
 80075e8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80075ea:	7b7b      	ldrb	r3, [r7, #13]
 80075ec:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d006      	beq.n	8007602 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d803      	bhi.n	8007602 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80075fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0d3      	beq.n	80075aa <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d901      	bls.n	800760c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007608:	23f4      	movs	r3, #244	; 0xf4
 800760a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800760c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007626:	f107 030e 	add.w	r3, r7, #14
 800762a:	461a      	mov	r2, r3
 800762c:	2113      	movs	r1, #19
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f003 fac6 	bl	800abc0 <VL53L0X_RdByte>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	f003 0207 	and.w	r2, r3, #7
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	f003 0318 	and.w	r3, r3, #24
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800764c:	23fa      	movs	r3, #250	; 0xfa
 800764e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007668:	2300      	movs	r3, #0
 800766a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 fa03 	bl	8007a7c <VL53L0X_perform_ref_spad_management>
 8007676:	4603      	mov	r3, r0
 8007678:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800767a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007694:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007698:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800769a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800769e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80076a0:	f107 0308 	add.w	r3, r7, #8
 80076a4:	461a      	mov	r2, r3
 80076a6:	2128      	movs	r1, #40	; 0x28
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f003 fab3 	bl	800ac14 <VL53L0X_RdWord>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80076b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d11e      	bne.n	80076f8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80076ba:	893b      	ldrh	r3, [r7, #8]
 80076bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80076c4:	893b      	ldrh	r3, [r7, #8]
 80076c6:	461a      	mov	r2, r3
 80076c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	dd0b      	ble.n	80076e8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80076d0:	893a      	ldrh	r2, [r7, #8]
 80076d2:	897b      	ldrh	r3, [r7, #10]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	b21b      	sxth	r3, r3
 80076da:	461a      	mov	r2, r3
					* 250;
 80076dc:	23fa      	movs	r3, #250	; 0xfa
 80076de:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	e007      	b.n	80076f8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80076e8:	893b      	ldrh	r3, [r7, #8]
 80076ea:	b21b      	sxth	r3, r3
 80076ec:	461a      	mov	r2, r3
 80076ee:	23fa      	movs	r3, #250	; 0xfa
 80076f0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80076f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007704:	b480      	push	{r7}
 8007706:	b08b      	sub	sp, #44	; 0x2c
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
 8007710:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007712:	2308      	movs	r3, #8
 8007714:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007720:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	fbb2 f3f3 	udiv	r3, r2, r3
 800772a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	fbb3 f2f2 	udiv	r2, r3, r2
 8007734:	69b9      	ldr	r1, [r7, #24]
 8007736:	fb01 f202 	mul.w	r2, r1, r2
 800773a:	1a9b      	subs	r3, r3, r2
 800773c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
 8007742:	e030      	b.n	80077a6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	4413      	add	r3, r2
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	429a      	cmp	r2, r3
 8007758:	d11e      	bne.n	8007798 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800775a:	7ffa      	ldrb	r2, [r7, #31]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	fa42 f303 	asr.w	r3, r2, r3
 8007762:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007768:	e016      	b.n	8007798 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800776a:	7ffb      	ldrb	r3, [r7, #31]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <get_next_good_spad+0x88>
				success = 1;
 8007774:	2301      	movs	r3, #1
 8007776:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	fb02 f203 	mul.w	r2, r2, r3
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	4413      	add	r3, r2
 8007784:	461a      	mov	r2, r3
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	601a      	str	r2, [r3, #0]
				break;
 800778a:	e009      	b.n	80077a0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800778c:	7ffb      	ldrb	r3, [r7, #31]
 800778e:	085b      	lsrs	r3, r3, #1
 8007790:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	3301      	adds	r3, #1
 8007796:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007798:	6a3a      	ldr	r2, [r7, #32]
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	429a      	cmp	r2, r3
 800779e:	d3e4      	bcc.n	800776a <get_next_good_spad+0x66>
				coarseIndex++) {
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	3301      	adds	r3, #1
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80077a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d202      	bcs.n	80077b4 <get_next_good_spad+0xb0>
 80077ae:	7fbb      	ldrb	r3, [r7, #30]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0c7      	beq.n	8007744 <get_next_good_spad+0x40>
		}
	}
}
 80077b4:	bf00      	nop
 80077b6:	372c      	adds	r7, #44	; 0x2c
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80077c8:	2301      	movs	r3, #1
 80077ca:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	099b      	lsrs	r3, r3, #6
 80077d0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80077d2:	4a07      	ldr	r2, [pc, #28]	; (80077f0 <is_aperture+0x30>)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <is_aperture+0x22>
		isAperture = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	200002c4 	.word	0x200002c4

080077f4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b089      	sub	sp, #36	; 0x24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007800:	2300      	movs	r3, #0
 8007802:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007804:	2308      	movs	r3, #8
 8007806:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	fbb3 f2f2 	udiv	r2, r3, r2
 800781a:	69b9      	ldr	r1, [r7, #24]
 800781c:	fb01 f202 	mul.w	r2, r1, r2
 8007820:	1a9b      	subs	r3, r3, r2
 8007822:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	429a      	cmp	r2, r3
 800782a:	d302      	bcc.n	8007832 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800782c:	23ce      	movs	r3, #206	; 0xce
 800782e:	77fb      	strb	r3, [r7, #31]
 8007830:	e010      	b.n	8007854 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	4413      	add	r3, r2
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	b25a      	sxtb	r2, r3
 800783c:	2101      	movs	r1, #1
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	fa01 f303 	lsl.w	r3, r1, r3
 8007844:	b25b      	sxtb	r3, r3
 8007846:	4313      	orrs	r3, r2
 8007848:	b259      	sxtb	r1, r3
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	4413      	add	r3, r2
 8007850:	b2ca      	uxtb	r2, r1
 8007852:	701a      	strb	r2, [r3, #0]

	return status;
 8007854:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3724      	adds	r7, #36	; 0x24
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800786e:	2306      	movs	r3, #6
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	21b0      	movs	r1, #176	; 0xb0
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f003 f8c5 	bl	800aa04 <VL53L0X_WriteMulti>
 800787a:	4603      	mov	r3, r0
 800787c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800787e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007894:	2306      	movs	r3, #6
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	21b0      	movs	r1, #176	; 0xb0
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f003 f8e2 	bl	800aa64 <VL53L0X_ReadMulti>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80078a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08c      	sub	sp, #48	; 0x30
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	460b      	mov	r3, r1
 80078be:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80078c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80078ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078cc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80078ce:	2300      	movs	r3, #0
 80078d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d2:	e02b      	b.n	800792c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80078d4:	f107 031c 	add.w	r3, r7, #28
 80078d8:	6a3a      	ldr	r2, [r7, #32]
 80078da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ff11 	bl	8007704 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078e8:	d103      	bne.n	80078f2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80078ea:	23ce      	movs	r3, #206	; 0xce
 80078ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80078f0:	e020      	b.n	8007934 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	461a      	mov	r2, r3
 80078f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f8:	4413      	add	r3, r2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7ff ff60 	bl	80077c0 <is_aperture>
 8007900:	4603      	mov	r3, r0
 8007902:	461a      	mov	r2, r3
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	4293      	cmp	r3, r2
 8007908:	d003      	beq.n	8007912 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800790a:	23ce      	movs	r3, #206	; 0xce
 800790c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007910:	e010      	b.n	8007934 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007916:	6a3a      	ldr	r2, [r7, #32]
 8007918:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800791a:	6838      	ldr	r0, [r7, #0]
 800791c:	f7ff ff6a 	bl	80077f4 <enable_spad_bit>
		currentSpad++;
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	3301      	adds	r3, #1
 8007924:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	3301      	adds	r3, #1
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
 800792c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800792e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007930:	429a      	cmp	r2, r3
 8007932:	d3cf      	bcc.n	80078d4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007936:	6a3a      	ldr	r2, [r7, #32]
 8007938:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800793a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800793e:	2b00      	cmp	r3, #0
 8007940:	d106      	bne.n	8007950 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f7ff ff8d 	bl	8007864 <set_ref_spad_map>
 800794a:	4603      	mov	r3, r0
 800794c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007950:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007954:	2b00      	cmp	r3, #0
 8007956:	d121      	bne.n	800799c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007958:	f107 0314 	add.w	r3, r7, #20
 800795c:	4619      	mov	r1, r3
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff ff93 	bl	800788a <get_ref_spad_map>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800796a:	2300      	movs	r3, #0
 800796c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800796e:	e011      	b.n	8007994 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	4413      	add	r3, r2
 8007976:	781a      	ldrb	r2, [r3, #0]
 8007978:	f107 0114 	add.w	r1, r7, #20
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	440b      	add	r3, r1
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	429a      	cmp	r2, r3
 8007984:	d003      	beq.n	800798e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007986:	23ce      	movs	r3, #206	; 0xce
 8007988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800798c:	e006      	b.n	800799c <enable_ref_spads+0xec>
			}
			i++;
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	3301      	adds	r3, #1
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	429a      	cmp	r2, r3
 800799a:	d3e9      	bcc.n	8007970 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800799c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3730      	adds	r7, #48	; 0x30
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08a      	sub	sp, #40	; 0x28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80079c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80079c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d107      	bne.n	80079e0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80079d0:	22c0      	movs	r2, #192	; 0xc0
 80079d2:	2101      	movs	r1, #1
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f003 f871 	bl	800aabc <VL53L0X_WrByte>
 80079da:	4603      	mov	r3, r0
 80079dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80079e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d108      	bne.n	80079fa <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80079e8:	f107 0308 	add.w	r3, r7, #8
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff fc48 	bl	8007284 <VL53L0X_PerformSingleRangingMeasurement>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80079fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d107      	bne.n	8007a12 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a02:	2201      	movs	r2, #1
 8007a04:	21ff      	movs	r1, #255	; 0xff
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f003 f858 	bl	800aabc <VL53L0X_WrByte>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007a12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d107      	bne.n	8007a2a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	21b6      	movs	r1, #182	; 0xb6
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f003 f8f8 	bl	800ac14 <VL53L0X_RdWord>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007a2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d107      	bne.n	8007a42 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a32:	2200      	movs	r2, #0
 8007a34:	21ff      	movs	r1, #255	; 0xff
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f003 f840 	bl	800aabc <VL53L0X_WrByte>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007a42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d112      	bne.n	8007a70 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007a4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a4e:	461a      	mov	r2, r3
 8007a50:	2101      	movs	r1, #1
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f003 f832 	bl	800aabc <VL53L0X_WrByte>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007a5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a6c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007a70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3728      	adds	r7, #40	; 0x28
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007a7c:	b590      	push	{r4, r7, lr}
 8007a7e:	b09d      	sub	sp, #116	; 0x74
 8007a80:	af06      	add	r7, sp, #24
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007a8e:	23b4      	movs	r3, #180	; 0xb4
 8007a90:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007a94:	2303      	movs	r3, #3
 8007a96:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007a98:	232c      	movs	r3, #44	; 0x2c
 8007a9a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007aa8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007aac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007ab6:	2306      	movs	r3, #6
 8007ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8007ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae6:	e009      	b.n	8007afc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007af2:	2200      	movs	r2, #0
 8007af4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007af8:	3301      	adds	r3, #1
 8007afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d3f1      	bcc.n	8007ae8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007b04:	2201      	movs	r2, #1
 8007b06:	21ff      	movs	r1, #255	; 0xff
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f002 ffd7 	bl	800aabc <VL53L0X_WrByte>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007b14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d107      	bne.n	8007b2c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	214f      	movs	r1, #79	; 0x4f
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f002 ffcb 	bl	800aabc <VL53L0X_WrByte>
 8007b26:	4603      	mov	r3, r0
 8007b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007b2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d107      	bne.n	8007b44 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007b34:	222c      	movs	r2, #44	; 0x2c
 8007b36:	214e      	movs	r1, #78	; 0x4e
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f002 ffbf 	bl	800aabc <VL53L0X_WrByte>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007b44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d107      	bne.n	8007b5c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	21ff      	movs	r1, #255	; 0xff
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f002 ffb3 	bl	800aabc <VL53L0X_WrByte>
 8007b56:	4603      	mov	r3, r0
 8007b58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007b5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d109      	bne.n	8007b78 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007b64:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007b68:	461a      	mov	r2, r3
 8007b6a:	21b6      	movs	r1, #182	; 0xb6
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f002 ffa5 	bl	800aabc <VL53L0X_WrByte>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007b78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d107      	bne.n	8007b90 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007b80:	2200      	movs	r2, #0
 8007b82:	2180      	movs	r1, #128	; 0x80
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f002 ff99 	bl	800aabc <VL53L0X_WrByte>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007b90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007b98:	f107 0210 	add.w	r2, r7, #16
 8007b9c:	f107 0111 	add.w	r1, r7, #17
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 fbbb 	bl	800831e <VL53L0X_perform_ref_calibration>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007bae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d121      	bne.n	8007bfa <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bbc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007bd2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007bd6:	f107 0218 	add.w	r2, r7, #24
 8007bda:	9204      	str	r2, [sp, #16]
 8007bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bde:	9203      	str	r2, [sp, #12]
 8007be0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007be2:	9202      	str	r2, [sp, #8]
 8007be4:	9301      	str	r3, [sp, #4]
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	4623      	mov	r3, r4
 8007bec:	4602      	mov	r2, r0
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f7ff fe5e 	bl	80078b0 <enable_ref_spads>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007bfa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d174      	bne.n	8007cec <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007c06:	f107 0312 	add.w	r3, r7, #18
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f7ff fecb 	bl	80079a8 <perform_ref_signal_measurement>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007c18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d161      	bne.n	8007ce4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007c20:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007c22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d25d      	bcs.n	8007ce4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c2c:	e009      	b.n	8007c42 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007c38:	2200      	movs	r2, #0
 8007c3a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c3e:	3301      	adds	r3, #1
 8007c40:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d3f1      	bcc.n	8007c2e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007c4a:	e002      	b.n	8007c52 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c4e:	3301      	adds	r3, #1
 8007c50:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007c52:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c58:	4413      	add	r3, r2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7ff fdb0 	bl	80077c0 <is_aperture>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d103      	bne.n	8007c6e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007c66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d3ee      	bcc.n	8007c4c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c74:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007c82:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007c86:	f107 0218 	add.w	r2, r7, #24
 8007c8a:	9204      	str	r2, [sp, #16]
 8007c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c8e:	9203      	str	r2, [sp, #12]
 8007c90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c92:	9202      	str	r2, [sp, #8]
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	4623      	mov	r3, r4
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7ff fe06 	bl	80078b0 <enable_ref_spads>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007caa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d11b      	bne.n	8007cea <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007cb6:	f107 0312 	add.w	r3, r7, #18
 8007cba:	4619      	mov	r1, r3
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff fe73 	bl	80079a8 <perform_ref_signal_measurement>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007cc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10c      	bne.n	8007cea <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007cd0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007cd2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d208      	bcs.n	8007cea <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007ce2:	e002      	b.n	8007cea <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ce8:	e000      	b.n	8007cec <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007cea:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007cec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f040 80af 	bne.w	8007e54 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007cf6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007cf8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	f240 80aa 	bls.w	8007e54 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007d10:	f107 031c 	add.w	r3, r7, #28
 8007d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d16:	4618      	mov	r0, r3
 8007d18:	f003 f82e 	bl	800ad78 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007d1c:	8a7b      	ldrh	r3, [r7, #18]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bfb8      	it	lt
 8007d28:	425b      	neglt	r3, r3
 8007d2a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8007d32:	e086      	b.n	8007e42 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007d3a:	f107 0314 	add.w	r3, r7, #20
 8007d3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d42:	f7ff fcdf 	bl	8007704 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d4c:	d103      	bne.n	8007d56 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007d4e:	23ce      	movs	r3, #206	; 0xce
 8007d50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007d54:	e07e      	b.n	8007e54 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007d56:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fd2e 	bl	80077c0 <is_aperture>
 8007d64:	4603      	mov	r3, r0
 8007d66:	461a      	mov	r2, r3
 8007d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d003      	beq.n	8007d76 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8007d74:	e06e      	b.n	8007e54 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8007d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d78:	3301      	adds	r3, #1
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007d86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff fd32 	bl	80077f4 <enable_spad_bit>
 8007d90:	4603      	mov	r3, r0
 8007d92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007d96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10c      	bne.n	8007db8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007da0:	3301      	adds	r3, #1
 8007da2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8007daa:	4619      	mov	r1, r3
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff fd59 	bl	8007864 <set_ref_spad_map>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007db8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d146      	bne.n	8007e4e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007dc0:	f107 0312 	add.w	r3, r7, #18
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f7ff fdee 	bl	80079a8 <perform_ref_signal_measurement>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007dd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d13b      	bne.n	8007e52 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007dda:	8a7b      	ldrh	r3, [r7, #18]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bfb8      	it	lt
 8007de6:	425b      	neglt	r3, r3
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007dea:	8a7b      	ldrh	r3, [r7, #18]
 8007dec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d21c      	bcs.n	8007e2c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d914      	bls.n	8007e24 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007dfa:	f107 031c 	add.w	r3, r7, #28
 8007dfe:	4619      	mov	r1, r3
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7ff fd2f 	bl	8007864 <set_ref_spad_map>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007e12:	f107 011c 	add.w	r1, r7, #28
 8007e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f002 ffad 	bl	800ad78 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e20:	3b01      	subs	r3, #1
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2a:	e00a      	b.n	8007e42 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007e36:	f107 031c 	add.w	r3, r7, #28
 8007e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f002 ff9b 	bl	800ad78 <memcpy>
		while (!complete) {
 8007e42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f43f af74 	beq.w	8007d34 <VL53L0X_perform_ref_spad_management+0x2b8>
 8007e4c:	e002      	b.n	8007e54 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007e4e:	bf00      	nop
 8007e50:	e000      	b.n	8007e54 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007e52:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007e54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d115      	bne.n	8007e88 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e60:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007e68:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007e88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	375c      	adds	r7, #92	; 0x5c
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd90      	pop	{r4, r7, pc}

08007e94 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007e94:	b590      	push	{r4, r7, lr}
 8007e96:	b093      	sub	sp, #76	; 0x4c
 8007e98:	af06      	add	r7, sp, #24
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007eac:	23b4      	movs	r3, #180	; 0xb4
 8007eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007eb2:	2306      	movs	r3, #6
 8007eb4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007eb6:	232c      	movs	r3, #44	; 0x2c
 8007eb8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007eba:	2201      	movs	r2, #1
 8007ebc:	21ff      	movs	r1, #255	; 0xff
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f002 fdfc 	bl	800aabc <VL53L0X_WrByte>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007eca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d107      	bne.n	8007ee2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	214f      	movs	r1, #79	; 0x4f
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f002 fdf0 	bl	800aabc <VL53L0X_WrByte>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007ee2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d107      	bne.n	8007efa <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007eea:	222c      	movs	r2, #44	; 0x2c
 8007eec:	214e      	movs	r1, #78	; 0x4e
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f002 fde4 	bl	800aabc <VL53L0X_WrByte>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007efa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d107      	bne.n	8007f12 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007f02:	2200      	movs	r2, #0
 8007f04:	21ff      	movs	r1, #255	; 0xff
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f002 fdd8 	bl	800aabc <VL53L0X_WrByte>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007f12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8007f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f1e:	461a      	mov	r2, r3
 8007f20:	21b6      	movs	r1, #182	; 0xb6
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f002 fdca 	bl	800aabc <VL53L0X_WrByte>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8007f2e:	2300      	movs	r3, #0
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
 8007f32:	e009      	b.n	8007f48 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007f3e:	2200      	movs	r2, #0
 8007f40:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	3301      	adds	r3, #1
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
 8007f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d3f1      	bcc.n	8007f34 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d011      	beq.n	8007f7a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007f56:	e002      	b.n	8007f5e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007f5e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	4413      	add	r3, r2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7ff fc2a 	bl	80077c0 <is_aperture>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d103      	bne.n	8007f7a <VL53L0X_set_reference_spads+0xe6>
 8007f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d3ee      	bcc.n	8007f58 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007f86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f8a:	79f9      	ldrb	r1, [r7, #7]
 8007f8c:	f107 0214 	add.w	r2, r7, #20
 8007f90:	9204      	str	r2, [sp, #16]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	9203      	str	r2, [sp, #12]
 8007f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f98:	9202      	str	r2, [sp, #8]
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	4623      	mov	r3, r4
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f7ff fc83 	bl	80078b0 <enable_ref_spads>
 8007faa:	4603      	mov	r3, r0
 8007fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007fb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10c      	bne.n	8007fd2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	79fa      	ldrb	r2, [r7, #7]
 8007fce:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007fd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3734      	adds	r7, #52	; 0x34
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd90      	pop	{r4, r7, pc}

08007fde <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10a      	bne.n	800800c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	f043 0301 	orr.w	r3, r3, #1
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	461a      	mov	r2, r3
 8008000:	2100      	movs	r1, #0
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f002 fd5a 	bl	800aabc <VL53L0X_WrByte>
 8008008:	4603      	mov	r3, r0
 800800a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800800c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d104      	bne.n	800801e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f9bf 	bl	8008398 <VL53L0X_measurement_poll_for_completion>
 800801a:	4603      	mov	r3, r0
 800801c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800801e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d105      	bne.n	8008032 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008026:	2100      	movs	r1, #0
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff fab5 	bl	8007598 <VL53L0X_ClearInterruptMask>
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d106      	bne.n	8008048 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800803a:	2200      	movs	r2, #0
 800803c:	2100      	movs	r1, #0
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f002 fd3c 	bl	800aabc <VL53L0X_WrByte>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008048:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	4608      	mov	r0, r1
 800805e:	4611      	mov	r1, r2
 8008060:	461a      	mov	r2, r3
 8008062:	4603      	mov	r3, r0
 8008064:	70fb      	strb	r3, [r7, #3]
 8008066:	460b      	mov	r3, r1
 8008068:	70bb      	strb	r3, [r7, #2]
 800806a:	4613      	mov	r3, r2
 800806c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008076:	2201      	movs	r2, #1
 8008078:	21ff      	movs	r1, #255	; 0xff
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f002 fd1e 	bl	800aabc <VL53L0X_WrByte>
 8008080:	4603      	mov	r3, r0
 8008082:	461a      	mov	r2, r3
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	4313      	orrs	r3, r2
 8008088:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800808a:	2200      	movs	r2, #0
 800808c:	2100      	movs	r1, #0
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f002 fd14 	bl	800aabc <VL53L0X_WrByte>
 8008094:	4603      	mov	r3, r0
 8008096:	461a      	mov	r2, r3
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	4313      	orrs	r3, r2
 800809c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800809e:	2200      	movs	r2, #0
 80080a0:	21ff      	movs	r1, #255	; 0xff
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f002 fd0a 	bl	800aabc <VL53L0X_WrByte>
 80080a8:	4603      	mov	r3, r0
 80080aa:	461a      	mov	r2, r3
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01e      	beq.n	80080f6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80080b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d009      	beq.n	80080d4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	21cb      	movs	r1, #203	; 0xcb
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f002 fd7b 	bl	800abc0 <VL53L0X_RdByte>
 80080ca:	4603      	mov	r3, r0
 80080cc:	461a      	mov	r2, r3
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80080d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d02a      	beq.n	8008132 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80080dc:	f107 030e 	add.w	r3, r7, #14
 80080e0:	461a      	mov	r2, r3
 80080e2:	21ee      	movs	r1, #238	; 0xee
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f002 fd6b 	bl	800abc0 <VL53L0X_RdByte>
 80080ea:	4603      	mov	r3, r0
 80080ec:	461a      	mov	r2, r3
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	73fb      	strb	r3, [r7, #15]
 80080f4:	e01d      	b.n	8008132 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80080f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80080fe:	78bb      	ldrb	r3, [r7, #2]
 8008100:	461a      	mov	r2, r3
 8008102:	21cb      	movs	r1, #203	; 0xcb
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f002 fcd9 	bl	800aabc <VL53L0X_WrByte>
 800810a:	4603      	mov	r3, r0
 800810c:	461a      	mov	r2, r3
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	4313      	orrs	r3, r2
 8008112:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800811c:	787b      	ldrb	r3, [r7, #1]
 800811e:	2280      	movs	r2, #128	; 0x80
 8008120:	21ee      	movs	r1, #238	; 0xee
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f002 fd18 	bl	800ab58 <VL53L0X_UpdateByte>
 8008128:	4603      	mov	r3, r0
 800812a:	461a      	mov	r2, r3
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	4313      	orrs	r3, r2
 8008130:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008132:	2201      	movs	r2, #1
 8008134:	21ff      	movs	r1, #255	; 0xff
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f002 fcc0 	bl	800aabc <VL53L0X_WrByte>
 800813c:	4603      	mov	r3, r0
 800813e:	461a      	mov	r2, r3
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	4313      	orrs	r3, r2
 8008144:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008146:	2201      	movs	r2, #1
 8008148:	2100      	movs	r1, #0
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f002 fcb6 	bl	800aabc <VL53L0X_WrByte>
 8008150:	4603      	mov	r3, r0
 8008152:	461a      	mov	r2, r3
 8008154:	7bfb      	ldrb	r3, [r7, #15]
 8008156:	4313      	orrs	r3, r2
 8008158:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800815a:	2200      	movs	r2, #0
 800815c:	21ff      	movs	r1, #255	; 0xff
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f002 fcac 	bl	800aabc <VL53L0X_WrByte>
 8008164:	4603      	mov	r3, r0
 8008166:	461a      	mov	r2, r3
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	4313      	orrs	r3, r2
 800816c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	f023 0310 	bic.w	r3, r3, #16
 8008174:	b2da      	uxtb	r2, r3
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	701a      	strb	r2, [r3, #0]

	return Status;
 800817a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b08a      	sub	sp, #40	; 0x28
 800818a:	af04      	add	r7, sp, #16
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	4611      	mov	r1, r2
 8008192:	461a      	mov	r2, r3
 8008194:	460b      	mov	r3, r1
 8008196:	71fb      	strb	r3, [r7, #7]
 8008198:	4613      	mov	r3, r2
 800819a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800819c:	2300      	movs	r3, #0
 800819e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80081b0:	79bb      	ldrb	r3, [r7, #6]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80081bc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80081be:	2201      	movs	r2, #1
 80081c0:	2101      	movs	r1, #1
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f002 fc7a 	bl	800aabc <VL53L0X_WrByte>
 80081c8:	4603      	mov	r3, r0
 80081ca:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80081cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d105      	bne.n	80081e0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80081d4:	2140      	movs	r1, #64	; 0x40
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f7ff ff01 	bl	8007fde <VL53L0X_perform_single_ref_calibration>
 80081dc:	4603      	mov	r3, r0
 80081de:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80081e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d115      	bne.n	8008214 <VL53L0X_perform_vhv_calibration+0x8e>
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d112      	bne.n	8008214 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80081ee:	7d39      	ldrb	r1, [r7, #20]
 80081f0:	7d7a      	ldrb	r2, [r7, #21]
 80081f2:	2300      	movs	r3, #0
 80081f4:	9303      	str	r3, [sp, #12]
 80081f6:	2301      	movs	r3, #1
 80081f8:	9302      	str	r3, [sp, #8]
 80081fa:	f107 0313 	add.w	r3, r7, #19
 80081fe:	9301      	str	r3, [sp, #4]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	460b      	mov	r3, r1
 8008206:	2101      	movs	r1, #1
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f7ff ff23 	bl	8008054 <VL53L0X_ref_calibration_io>
 800820e:	4603      	mov	r3, r0
 8008210:	75fb      	strb	r3, [r7, #23]
 8008212:	e002      	b.n	800821a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2200      	movs	r2, #0
 8008218:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800821a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d112      	bne.n	8008248 <VL53L0X_perform_vhv_calibration+0xc2>
 8008222:	79bb      	ldrb	r3, [r7, #6]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00f      	beq.n	8008248 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008228:	7dbb      	ldrb	r3, [r7, #22]
 800822a:	461a      	mov	r2, r3
 800822c:	2101      	movs	r1, #1
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f002 fc44 	bl	800aabc <VL53L0X_WrByte>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008238:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d103      	bne.n	8008248 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	7dba      	ldrb	r2, [r7, #22]
 8008244:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008248:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08a      	sub	sp, #40	; 0x28
 8008258:	af04      	add	r7, sp, #16
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	4611      	mov	r1, r2
 8008260:	461a      	mov	r2, r3
 8008262:	460b      	mov	r3, r1
 8008264:	71fb      	strb	r3, [r7, #7]
 8008266:	4613      	mov	r3, r2
 8008268:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800826a:	2300      	movs	r3, #0
 800826c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800827a:	79bb      	ldrb	r3, [r7, #6]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d003      	beq.n	8008288 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008286:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008288:	2202      	movs	r2, #2
 800828a:	2101      	movs	r1, #1
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f002 fc15 	bl	800aabc <VL53L0X_WrByte>
 8008292:	4603      	mov	r3, r0
 8008294:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008296:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d105      	bne.n	80082aa <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800829e:	2100      	movs	r1, #0
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7ff fe9c 	bl	8007fde <VL53L0X_perform_single_ref_calibration>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80082aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d115      	bne.n	80082de <VL53L0X_perform_phase_calibration+0x8a>
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d112      	bne.n	80082de <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80082b8:	7d39      	ldrb	r1, [r7, #20]
 80082ba:	7d7a      	ldrb	r2, [r7, #21]
 80082bc:	2301      	movs	r3, #1
 80082be:	9303      	str	r3, [sp, #12]
 80082c0:	2300      	movs	r3, #0
 80082c2:	9302      	str	r3, [sp, #8]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	f107 0313 	add.w	r3, r7, #19
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	460b      	mov	r3, r1
 80082d0:	2101      	movs	r1, #1
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff febe 	bl	8008054 <VL53L0X_ref_calibration_io>
 80082d8:	4603      	mov	r3, r0
 80082da:	75fb      	strb	r3, [r7, #23]
 80082dc:	e002      	b.n	80082e4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2200      	movs	r2, #0
 80082e2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80082e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d112      	bne.n	8008312 <VL53L0X_perform_phase_calibration+0xbe>
 80082ec:	79bb      	ldrb	r3, [r7, #6]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00f      	beq.n	8008312 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80082f2:	7dbb      	ldrb	r3, [r7, #22]
 80082f4:	461a      	mov	r2, r3
 80082f6:	2101      	movs	r1, #1
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f002 fbdf 	bl	800aabc <VL53L0X_WrByte>
 80082fe:	4603      	mov	r3, r0
 8008300:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008302:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d103      	bne.n	8008312 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	7dba      	ldrb	r2, [r7, #22]
 800830e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b086      	sub	sp, #24
 8008322:	af00      	add	r7, sp, #0
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	607a      	str	r2, [r7, #4]
 800832a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800832c:	2300      	movs	r3, #0
 800832e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800833a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	2300      	movs	r3, #0
 8008340:	68b9      	ldr	r1, [r7, #8]
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f7ff ff1f 	bl	8008186 <VL53L0X_perform_vhv_calibration>
 8008348:	4603      	mov	r3, r0
 800834a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800834c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d107      	bne.n	8008364 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008354:	78fa      	ldrb	r2, [r7, #3]
 8008356:	2300      	movs	r3, #0
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff ff7a 	bl	8008254 <VL53L0X_perform_phase_calibration>
 8008360:	4603      	mov	r3, r0
 8008362:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10f      	bne.n	800838c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800836c:	7dbb      	ldrb	r3, [r7, #22]
 800836e:	461a      	mov	r2, r3
 8008370:	2101      	movs	r1, #1
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f002 fba2 	bl	800aabc <VL53L0X_WrByte>
 8008378:	4603      	mov	r3, r0
 800837a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800837c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d103      	bne.n	800838c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	7dba      	ldrb	r2, [r7, #22]
 8008388:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800838c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083a0:	2300      	movs	r3, #0
 80083a2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80083ac:	f107 030f 	add.w	r3, r7, #15
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7fe fdff 	bl	8006fb6 <VL53L0X_GetMeasurementDataReady>
 80083b8:	4603      	mov	r3, r0
 80083ba:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80083bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d110      	bne.n	80083e6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d00f      	beq.n	80083ea <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	3301      	adds	r3, #1
 80083ce:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80083d6:	d302      	bcc.n	80083de <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80083d8:	23f9      	movs	r3, #249	; 0xf9
 80083da:	75fb      	strb	r3, [r7, #23]
			break;
 80083dc:	e006      	b.n	80083ec <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f002 fc8c 	bl	800acfc <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80083e4:	e7e2      	b.n	80083ac <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80083e6:	bf00      	nop
 80083e8:	e000      	b.n	80083ec <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80083ea:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80083ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	3301      	adds	r3, #1
 800840a:	b2db      	uxtb	r3, r3
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	4603      	mov	r3, r0
 8008426:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	085b      	lsrs	r3, r3, #1
 8008430:	b2db      	uxtb	r3, r3
 8008432:	3b01      	subs	r3, #1
 8008434:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008454:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008456:	e002      	b.n	800845e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	089b      	lsrs	r3, r3, #2
 800845c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d8f8      	bhi.n	8008458 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008466:	e017      	b.n	8008498 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	4413      	add	r3, r2
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d30b      	bcc.n	800848c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	4413      	add	r3, r2
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	085b      	lsrs	r3, r3, #1
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	4413      	add	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	e002      	b.n	8008492 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	085b      	lsrs	r3, r3, #1
 8008490:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	089b      	lsrs	r3, r3, #2
 8008496:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e4      	bne.n	8008468 <VL53L0X_isqrt+0x24>
	}

	return res;
 800849e:	68fb      	ldr	r3, [r7, #12]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80084b8:	2200      	movs	r2, #0
 80084ba:	2183      	movs	r1, #131	; 0x83
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f002 fafd 	bl	800aabc <VL53L0X_WrByte>
 80084c2:	4603      	mov	r3, r0
 80084c4:	461a      	mov	r2, r3
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80084cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d11e      	bne.n	8008512 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80084d8:	f107 030f 	add.w	r3, r7, #15
 80084dc:	461a      	mov	r2, r3
 80084de:	2183      	movs	r1, #131	; 0x83
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f002 fb6d 	bl	800abc0 <VL53L0X_RdByte>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <VL53L0X_device_read_strobe+0x5a>
 80084f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d106      	bne.n	8008506 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	3301      	adds	r3, #1
 80084fc:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008504:	d3e8      	bcc.n	80084d8 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800850c:	d301      	bcc.n	8008512 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800850e:	23f9      	movs	r3, #249	; 0xf9
 8008510:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008512:	2201      	movs	r2, #1
 8008514:	2183      	movs	r1, #131	; 0x83
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f002 fad0 	bl	800aabc <VL53L0X_WrByte>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	7dfb      	ldrb	r3, [r7, #23]
 8008522:	4313      	orrs	r3, r2
 8008524:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008526:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b098      	sub	sp, #96	; 0x60
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	460b      	mov	r3, r1
 800853c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800853e:	2300      	movs	r3, #0
 8008540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800855c:	2300      	movs	r3, #0
 800855e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008562:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008566:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800857a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800857e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008582:	2b07      	cmp	r3, #7
 8008584:	f000 8408 	beq.w	8008d98 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008588:	2201      	movs	r2, #1
 800858a:	2180      	movs	r1, #128	; 0x80
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f002 fa95 	bl	800aabc <VL53L0X_WrByte>
 8008592:	4603      	mov	r3, r0
 8008594:	461a      	mov	r2, r3
 8008596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800859a:	4313      	orrs	r3, r2
 800859c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80085a0:	2201      	movs	r2, #1
 80085a2:	21ff      	movs	r1, #255	; 0xff
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f002 fa89 	bl	800aabc <VL53L0X_WrByte>
 80085aa:	4603      	mov	r3, r0
 80085ac:	461a      	mov	r2, r3
 80085ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085b2:	4313      	orrs	r3, r2
 80085b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80085b8:	2200      	movs	r2, #0
 80085ba:	2100      	movs	r1, #0
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f002 fa7d 	bl	800aabc <VL53L0X_WrByte>
 80085c2:	4603      	mov	r3, r0
 80085c4:	461a      	mov	r2, r3
 80085c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085ca:	4313      	orrs	r3, r2
 80085cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80085d0:	2206      	movs	r2, #6
 80085d2:	21ff      	movs	r1, #255	; 0xff
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f002 fa71 	bl	800aabc <VL53L0X_WrByte>
 80085da:	4603      	mov	r3, r0
 80085dc:	461a      	mov	r2, r3
 80085de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80085e8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80085ec:	461a      	mov	r2, r3
 80085ee:	2183      	movs	r1, #131	; 0x83
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f002 fae5 	bl	800abc0 <VL53L0X_RdByte>
 80085f6:	4603      	mov	r3, r0
 80085f8:	461a      	mov	r2, r3
 80085fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085fe:	4313      	orrs	r3, r2
 8008600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008604:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008608:	f043 0304 	orr.w	r3, r3, #4
 800860c:	b2db      	uxtb	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	2183      	movs	r1, #131	; 0x83
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f002 fa52 	bl	800aabc <VL53L0X_WrByte>
 8008618:	4603      	mov	r3, r0
 800861a:	461a      	mov	r2, r3
 800861c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008620:	4313      	orrs	r3, r2
 8008622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008626:	2207      	movs	r2, #7
 8008628:	21ff      	movs	r1, #255	; 0xff
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f002 fa46 	bl	800aabc <VL53L0X_WrByte>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008638:	4313      	orrs	r3, r2
 800863a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800863e:	2201      	movs	r2, #1
 8008640:	2181      	movs	r1, #129	; 0x81
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f002 fa3a 	bl	800aabc <VL53L0X_WrByte>
 8008648:	4603      	mov	r3, r0
 800864a:	461a      	mov	r2, r3
 800864c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008650:	4313      	orrs	r3, r2
 8008652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f002 fb50 	bl	800acfc <VL53L0X_PollingDelay>
 800865c:	4603      	mov	r3, r0
 800865e:	461a      	mov	r2, r3
 8008660:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008664:	4313      	orrs	r3, r2
 8008666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800866a:	2201      	movs	r2, #1
 800866c:	2180      	movs	r1, #128	; 0x80
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f002 fa24 	bl	800aabc <VL53L0X_WrByte>
 8008674:	4603      	mov	r3, r0
 8008676:	461a      	mov	r2, r3
 8008678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800867c:	4313      	orrs	r3, r2
 800867e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 8098 	beq.w	80087be <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800868e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008692:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008696:	2b00      	cmp	r3, #0
 8008698:	f040 8091 	bne.w	80087be <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800869c:	226b      	movs	r2, #107	; 0x6b
 800869e:	2194      	movs	r1, #148	; 0x94
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f002 fa0b 	bl	800aabc <VL53L0X_WrByte>
 80086a6:	4603      	mov	r3, r0
 80086a8:	461a      	mov	r2, r3
 80086aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ae:	4313      	orrs	r3, r2
 80086b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7ff fef9 	bl	80084ac <VL53L0X_device_read_strobe>
 80086ba:	4603      	mov	r3, r0
 80086bc:	461a      	mov	r2, r3
 80086be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086c2:	4313      	orrs	r3, r2
 80086c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80086c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086cc:	461a      	mov	r2, r3
 80086ce:	2190      	movs	r1, #144	; 0x90
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f002 fad7 	bl	800ac84 <VL53L0X_RdDWord>
 80086d6:	4603      	mov	r3, r0
 80086d8:	461a      	mov	r2, r3
 80086da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086de:	4313      	orrs	r3, r2
 80086e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	0a1b      	lsrs	r3, r3, #8
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	0bdb      	lsrs	r3, r3, #15
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008700:	2224      	movs	r2, #36	; 0x24
 8008702:	2194      	movs	r1, #148	; 0x94
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f002 f9d9 	bl	800aabc <VL53L0X_WrByte>
 800870a:	4603      	mov	r3, r0
 800870c:	461a      	mov	r2, r3
 800870e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008712:	4313      	orrs	r3, r2
 8008714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff fec7 	bl	80084ac <VL53L0X_device_read_strobe>
 800871e:	4603      	mov	r3, r0
 8008720:	461a      	mov	r2, r3
 8008722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008726:	4313      	orrs	r3, r2
 8008728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800872c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008730:	461a      	mov	r2, r3
 8008732:	2190      	movs	r1, #144	; 0x90
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f002 faa5 	bl	800ac84 <VL53L0X_RdDWord>
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008742:	4313      	orrs	r3, r2
 8008744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	0e1b      	lsrs	r3, r3, #24
 800874c:	b2db      	uxtb	r3, r3
 800874e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	0c1b      	lsrs	r3, r3, #16
 8008754:	b2db      	uxtb	r3, r3
 8008756:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875a:	0a1b      	lsrs	r3, r3, #8
 800875c:	b2db      	uxtb	r3, r3
 800875e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	b2db      	uxtb	r3, r3
 8008764:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008766:	2225      	movs	r2, #37	; 0x25
 8008768:	2194      	movs	r1, #148	; 0x94
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f002 f9a6 	bl	800aabc <VL53L0X_WrByte>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008778:	4313      	orrs	r3, r2
 800877a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff fe94 	bl	80084ac <VL53L0X_device_read_strobe>
 8008784:	4603      	mov	r3, r0
 8008786:	461a      	mov	r2, r3
 8008788:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800878c:	4313      	orrs	r3, r2
 800878e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008792:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008796:	461a      	mov	r2, r3
 8008798:	2190      	movs	r1, #144	; 0x90
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f002 fa72 	bl	800ac84 <VL53L0X_RdDWord>
 80087a0:	4603      	mov	r3, r0
 80087a2:	461a      	mov	r2, r3
 80087a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087a8:	4313      	orrs	r3, r2
 80087aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	0e1b      	lsrs	r3, r3, #24
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	0c1b      	lsrs	r3, r3, #16
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 8189 	beq.w	8008adc <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80087ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087ce:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f040 8182 	bne.w	8008adc <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80087d8:	2202      	movs	r2, #2
 80087da:	2194      	movs	r1, #148	; 0x94
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f002 f96d 	bl	800aabc <VL53L0X_WrByte>
 80087e2:	4603      	mov	r3, r0
 80087e4:	461a      	mov	r2, r3
 80087e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087ea:	4313      	orrs	r3, r2
 80087ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7ff fe5b 	bl	80084ac <VL53L0X_device_read_strobe>
 80087f6:	4603      	mov	r3, r0
 80087f8:	461a      	mov	r2, r3
 80087fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087fe:	4313      	orrs	r3, r2
 8008800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008804:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008808:	461a      	mov	r2, r3
 800880a:	2190      	movs	r1, #144	; 0x90
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f002 f9d7 	bl	800abc0 <VL53L0X_RdByte>
 8008812:	4603      	mov	r3, r0
 8008814:	461a      	mov	r2, r3
 8008816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800881a:	4313      	orrs	r3, r2
 800881c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008820:	227b      	movs	r2, #123	; 0x7b
 8008822:	2194      	movs	r1, #148	; 0x94
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f002 f949 	bl	800aabc <VL53L0X_WrByte>
 800882a:	4603      	mov	r3, r0
 800882c:	461a      	mov	r2, r3
 800882e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008832:	4313      	orrs	r3, r2
 8008834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff fe37 	bl	80084ac <VL53L0X_device_read_strobe>
 800883e:	4603      	mov	r3, r0
 8008840:	461a      	mov	r2, r3
 8008842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008846:	4313      	orrs	r3, r2
 8008848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800884c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008850:	461a      	mov	r2, r3
 8008852:	2190      	movs	r1, #144	; 0x90
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f002 f9b3 	bl	800abc0 <VL53L0X_RdByte>
 800885a:	4603      	mov	r3, r0
 800885c:	461a      	mov	r2, r3
 800885e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008862:	4313      	orrs	r3, r2
 8008864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008868:	2277      	movs	r2, #119	; 0x77
 800886a:	2194      	movs	r1, #148	; 0x94
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f002 f925 	bl	800aabc <VL53L0X_WrByte>
 8008872:	4603      	mov	r3, r0
 8008874:	461a      	mov	r2, r3
 8008876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800887a:	4313      	orrs	r3, r2
 800887c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff fe13 	bl	80084ac <VL53L0X_device_read_strobe>
 8008886:	4603      	mov	r3, r0
 8008888:	461a      	mov	r2, r3
 800888a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800888e:	4313      	orrs	r3, r2
 8008890:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008898:	461a      	mov	r2, r3
 800889a:	2190      	movs	r1, #144	; 0x90
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f002 f9f1 	bl	800ac84 <VL53L0X_RdDWord>
 80088a2:	4603      	mov	r3, r0
 80088a4:	461a      	mov	r2, r3
 80088a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	0e5b      	lsrs	r3, r3, #25
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	0c9b      	lsrs	r3, r3, #18
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	0adb      	lsrs	r3, r3, #11
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	091b      	lsrs	r3, r3, #4
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	00db      	lsls	r3, r3, #3
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80088fa:	2278      	movs	r2, #120	; 0x78
 80088fc:	2194      	movs	r1, #148	; 0x94
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f002 f8dc 	bl	800aabc <VL53L0X_WrByte>
 8008904:	4603      	mov	r3, r0
 8008906:	461a      	mov	r2, r3
 8008908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800890c:	4313      	orrs	r3, r2
 800890e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7ff fdca 	bl	80084ac <VL53L0X_device_read_strobe>
 8008918:	4603      	mov	r3, r0
 800891a:	461a      	mov	r2, r3
 800891c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008920:	4313      	orrs	r3, r2
 8008922:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008926:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800892a:	461a      	mov	r2, r3
 800892c:	2190      	movs	r1, #144	; 0x90
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f002 f9a8 	bl	800ac84 <VL53L0X_RdDWord>
 8008934:	4603      	mov	r3, r0
 8008936:	461a      	mov	r2, r3
 8008938:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800893c:	4313      	orrs	r3, r2
 800893e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	0f5b      	lsrs	r3, r3, #29
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800894c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800894e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008952:	4413      	add	r3, r2
 8008954:	b2db      	uxtb	r3, r3
 8008956:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895a:	0d9b      	lsrs	r3, r3, #22
 800895c:	b2db      	uxtb	r3, r3
 800895e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008962:	b2db      	uxtb	r3, r3
 8008964:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	0bdb      	lsrs	r3, r3, #15
 800896a:	b2db      	uxtb	r3, r3
 800896c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008970:	b2db      	uxtb	r3, r3
 8008972:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008976:	0a1b      	lsrs	r3, r3, #8
 8008978:	b2db      	uxtb	r3, r3
 800897a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800897e:	b2db      	uxtb	r3, r3
 8008980:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	085b      	lsrs	r3, r3, #1
 8008986:	b2db      	uxtb	r3, r3
 8008988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800898c:	b2db      	uxtb	r3, r3
 800898e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	b2db      	uxtb	r3, r3
 8008994:	019b      	lsls	r3, r3, #6
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80089a2:	2279      	movs	r2, #121	; 0x79
 80089a4:	2194      	movs	r1, #148	; 0x94
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f002 f888 	bl	800aabc <VL53L0X_WrByte>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461a      	mov	r2, r3
 80089b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b4:	4313      	orrs	r3, r2
 80089b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7ff fd76 	bl	80084ac <VL53L0X_device_read_strobe>
 80089c0:	4603      	mov	r3, r0
 80089c2:	461a      	mov	r2, r3
 80089c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089c8:	4313      	orrs	r3, r2
 80089ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80089ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089d2:	461a      	mov	r2, r3
 80089d4:	2190      	movs	r1, #144	; 0x90
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f002 f954 	bl	800ac84 <VL53L0X_RdDWord>
 80089dc:	4603      	mov	r3, r0
 80089de:	461a      	mov	r2, r3
 80089e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089e4:	4313      	orrs	r3, r2
 80089e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	0e9b      	lsrs	r3, r3, #26
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80089f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089fa:	4413      	add	r3, r2
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	0cdb      	lsrs	r3, r3, #19
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a10:	0b1b      	lsrs	r3, r3, #12
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	095b      	lsrs	r3, r3, #5
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008a3c:	227a      	movs	r2, #122	; 0x7a
 8008a3e:	2194      	movs	r1, #148	; 0x94
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f002 f83b 	bl	800aabc <VL53L0X_WrByte>
 8008a46:	4603      	mov	r3, r0
 8008a48:	461a      	mov	r2, r3
 8008a4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff fd29 	bl	80084ac <VL53L0X_device_read_strobe>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a62:	4313      	orrs	r3, r2
 8008a64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	2190      	movs	r1, #144	; 0x90
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f002 f907 	bl	800ac84 <VL53L0X_RdDWord>
 8008a76:	4603      	mov	r3, r0
 8008a78:	461a      	mov	r2, r3
 8008a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a86:	0f9b      	lsrs	r3, r3, #30
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a8e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a94:	4413      	add	r3, r2
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	0ddb      	lsrs	r3, r3, #23
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	0c1b      	lsrs	r3, r3, #16
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	0a5b      	lsrs	r3, r3, #9
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	089b      	lsrs	r3, r3, #2
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	f003 0304 	and.w	r3, r3, #4
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 80f1 	beq.w	8008cca <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008ae8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008aec:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f040 80ea 	bne.w	8008cca <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008af6:	227b      	movs	r2, #123	; 0x7b
 8008af8:	2194      	movs	r1, #148	; 0x94
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 ffde 	bl	800aabc <VL53L0X_WrByte>
 8008b00:	4603      	mov	r3, r0
 8008b02:	461a      	mov	r2, r3
 8008b04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7ff fccc 	bl	80084ac <VL53L0X_device_read_strobe>
 8008b14:	4603      	mov	r3, r0
 8008b16:	461a      	mov	r2, r3
 8008b18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b26:	461a      	mov	r2, r3
 8008b28:	2190      	movs	r1, #144	; 0x90
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f002 f8aa 	bl	800ac84 <VL53L0X_RdDWord>
 8008b30:	4603      	mov	r3, r0
 8008b32:	461a      	mov	r2, r3
 8008b34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008b3e:	227c      	movs	r2, #124	; 0x7c
 8008b40:	2194      	movs	r1, #148	; 0x94
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f001 ffba 	bl	800aabc <VL53L0X_WrByte>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b50:	4313      	orrs	r3, r2
 8008b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff fca8 	bl	80084ac <VL53L0X_device_read_strobe>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b64:	4313      	orrs	r3, r2
 8008b66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8008b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b6e:	461a      	mov	r2, r3
 8008b70:	2190      	movs	r1, #144	; 0x90
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f002 f886 	bl	800ac84 <VL53L0X_RdDWord>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b80:	4313      	orrs	r3, r2
 8008b82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8008b86:	2273      	movs	r2, #115	; 0x73
 8008b88:	2194      	movs	r1, #148	; 0x94
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f001 ff96 	bl	800aabc <VL53L0X_WrByte>
 8008b90:	4603      	mov	r3, r0
 8008b92:	461a      	mov	r2, r3
 8008b94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff fc84 	bl	80084ac <VL53L0X_device_read_strobe>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bac:	4313      	orrs	r3, r2
 8008bae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008bb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	2190      	movs	r1, #144	; 0x90
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f002 f862 	bl	800ac84 <VL53L0X_RdDWord>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008bd6:	2274      	movs	r2, #116	; 0x74
 8008bd8:	2194      	movs	r1, #148	; 0x94
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 ff6e 	bl	800aabc <VL53L0X_WrByte>
 8008be0:	4603      	mov	r3, r0
 8008be2:	461a      	mov	r2, r3
 8008be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008be8:	4313      	orrs	r3, r2
 8008bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7ff fc5c 	bl	80084ac <VL53L0X_device_read_strobe>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c06:	461a      	mov	r2, r3
 8008c08:	2190      	movs	r1, #144	; 0x90
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f002 f83a 	bl	800ac84 <VL53L0X_RdDWord>
 8008c10:	4603      	mov	r3, r0
 8008c12:	461a      	mov	r2, r3
 8008c14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008c22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c24:	4313      	orrs	r3, r2
 8008c26:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008c28:	2275      	movs	r2, #117	; 0x75
 8008c2a:	2194      	movs	r1, #148	; 0x94
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 ff45 	bl	800aabc <VL53L0X_WrByte>
 8008c32:	4603      	mov	r3, r0
 8008c34:	461a      	mov	r2, r3
 8008c36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff fc33 	bl	80084ac <VL53L0X_device_read_strobe>
 8008c46:	4603      	mov	r3, r0
 8008c48:	461a      	mov	r2, r3
 8008c4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c58:	461a      	mov	r2, r3
 8008c5a:	2190      	movs	r1, #144	; 0x90
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f002 f811 	bl	800ac84 <VL53L0X_RdDWord>
 8008c62:	4603      	mov	r3, r0
 8008c64:	461a      	mov	r2, r3
 8008c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8008c78:	2276      	movs	r2, #118	; 0x76
 8008c7a:	2194      	movs	r1, #148	; 0x94
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 ff1d 	bl	800aabc <VL53L0X_WrByte>
 8008c82:	4603      	mov	r3, r0
 8008c84:	461a      	mov	r2, r3
 8008c86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff fc0b 	bl	80084ac <VL53L0X_device_read_strobe>
 8008c96:	4603      	mov	r3, r0
 8008c98:	461a      	mov	r2, r3
 8008c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ca4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ca8:	461a      	mov	r2, r3
 8008caa:	2190      	movs	r1, #144	; 0x90
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 ffe9 	bl	800ac84 <VL53L0X_RdDWord>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008cc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008cca:	2200      	movs	r2, #0
 8008ccc:	2181      	movs	r1, #129	; 0x81
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fef4 	bl	800aabc <VL53L0X_WrByte>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008ce2:	2206      	movs	r2, #6
 8008ce4:	21ff      	movs	r1, #255	; 0xff
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 fee8 	bl	800aabc <VL53L0X_WrByte>
 8008cec:	4603      	mov	r3, r0
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008cfa:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008cfe:	461a      	mov	r2, r3
 8008d00:	2183      	movs	r1, #131	; 0x83
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 ff5c 	bl	800abc0 <VL53L0X_RdByte>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d10:	4313      	orrs	r3, r2
 8008d12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008d16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d1a:	f023 0304 	bic.w	r3, r3, #4
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	461a      	mov	r2, r3
 8008d22:	2183      	movs	r1, #131	; 0x83
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 fec9 	bl	800aabc <VL53L0X_WrByte>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d32:	4313      	orrs	r3, r2
 8008d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008d38:	2201      	movs	r2, #1
 8008d3a:	21ff      	movs	r1, #255	; 0xff
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f001 febd 	bl	800aabc <VL53L0X_WrByte>
 8008d42:	4603      	mov	r3, r0
 8008d44:	461a      	mov	r2, r3
 8008d46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008d50:	2201      	movs	r2, #1
 8008d52:	2100      	movs	r1, #0
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 feb1 	bl	800aabc <VL53L0X_WrByte>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d62:	4313      	orrs	r3, r2
 8008d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008d68:	2200      	movs	r2, #0
 8008d6a:	21ff      	movs	r1, #255	; 0xff
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f001 fea5 	bl	800aabc <VL53L0X_WrByte>
 8008d72:	4603      	mov	r3, r0
 8008d74:	461a      	mov	r2, r3
 8008d76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008d80:	2200      	movs	r2, #0
 8008d82:	2180      	movs	r1, #128	; 0x80
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f001 fe99 	bl	800aabc <VL53L0X_WrByte>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d92:	4313      	orrs	r3, r2
 8008d94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008d98:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f040 808f 	bne.w	8008ec0 <VL53L0X_get_info_from_device+0x98e>
 8008da2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008da6:	2b07      	cmp	r3, #7
 8008da8:	f000 808a 	beq.w	8008ec0 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d024      	beq.n	8008e00 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008db6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dba:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d11e      	bne.n	8008e00 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008dc8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008dd2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dda:	e00e      	b.n	8008dfa <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008ddc:	f107 0208 	add.w	r2, r7, #8
 8008de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008de2:	4413      	add	r3, r2
 8008de4:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008df0:	460a      	mov	r2, r1
 8008df2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df6:	3301      	adds	r3, #1
 8008df8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfc:	2b05      	cmp	r3, #5
 8008dfe:	dded      	ble.n	8008ddc <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d018      	beq.n	8008e3c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008e0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e0e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d112      	bne.n	8008e3c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e16:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e20:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	33f3      	adds	r3, #243	; 0xf3
 8008e2e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008e30:	f107 0310 	add.w	r3, r7, #16
 8008e34:	4619      	mov	r1, r3
 8008e36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e38:	f001 ffd2 	bl	800ade0 <strcpy>

		}

		if (((option & 4) == 4) &&
 8008e3c:	78fb      	ldrb	r3, [r7, #3]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d030      	beq.n	8008ea8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008e46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e4a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d12a      	bne.n	8008ea8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e64:	025b      	lsls	r3, r3, #9
 8008e66:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d011      	beq.n	8008ea0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008e7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e8a:	fb02 f303 	mul.w	r3, r2, r3
 8008e8e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008e90:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008e94:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008e98:	425b      	negs	r3, r3
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008ea0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008ea8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008eb6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ec0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3760      	adds	r7, #96	; 0x60
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008ecc:	b490      	push	{r4, r7}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008ed8:	f240 6377 	movw	r3, #1655	; 0x677
 8008edc:	f04f 0400 	mov.w	r4, #0
 8008ee0:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8008ee4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008ee8:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008eea:	78fb      	ldrb	r3, [r7, #3]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	fb02 f303 	mul.w	r3, r2, r3
 8008ef8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008efa:	68bb      	ldr	r3, [r7, #8]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc90      	pop	{r4, r7}
 8008f04:	4770      	bx	lr

08008f06 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b087      	sub	sp, #28
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d017      	beq.n	8008f50 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008f26:	e005      	b.n	8008f34 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008f2e:	89fb      	ldrh	r3, [r7, #14]
 8008f30:	3301      	adds	r3, #1
 8008f32:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1f4      	bne.n	8008f28 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008f3e:	89fb      	ldrh	r3, [r7, #14]
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008f4c:	4413      	add	r3, r2
 8008f4e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008f50:	8afb      	ldrh	r3, [r7, #22]

}
 8008f52:	4618      	mov	r0, r3
 8008f54:	371c      	adds	r7, #28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	4603      	mov	r3, r0
 8008f66:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008f6c:	88fb      	ldrh	r3, [r7, #6]
 8008f6e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008f70:	88fa      	ldrh	r2, [r7, #6]
 8008f72:	0a12      	lsrs	r2, r2, #8
 8008f74:	b292      	uxth	r2, r2
 8008f76:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
	...

08008f8c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	4613      	mov	r3, r2
 8008f98:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7ff ff92 	bl	8008ecc <VL53L0X_calc_macro_period_ps>
 8008fa8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008fb0:	4a0a      	ldr	r2, [pc, #40]	; (8008fdc <VL53L0X_calc_timeout_mclks+0x50>)
 8008fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb6:	099b      	lsrs	r3, r3, #6
 8008fb8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008fc0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	085b      	lsrs	r3, r3, #1
 8008fc8:	441a      	add	r2, r3
	timeout_period_mclks =
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008fd2:	69fb      	ldr	r3, [r7, #28]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3720      	adds	r7, #32
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	10624dd3 	.word	0x10624dd3

08008fe0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	807b      	strh	r3, [r7, #2]
 8008fec:	4613      	mov	r3, r2
 8008fee:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008ff4:	787b      	ldrb	r3, [r7, #1]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff ff67 	bl	8008ecc <VL53L0X_calc_macro_period_ps>
 8008ffe:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009006:	4a0a      	ldr	r2, [pc, #40]	; (8009030 <VL53L0X_calc_timeout_us+0x50>)
 8009008:	fba2 2303 	umull	r2, r3, r2, r3
 800900c:	099b      	lsrs	r3, r3, #6
 800900e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009010:	887b      	ldrh	r3, [r7, #2]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	fb02 f303 	mul.w	r3, r2, r3
 8009018:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800901c:	4a04      	ldr	r2, [pc, #16]	; (8009030 <VL53L0X_calc_timeout_us+0x50>)
 800901e:	fba2 2303 	umull	r2, r3, r2, r3
 8009022:	099b      	lsrs	r3, r3, #6
 8009024:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009026:	697b      	ldr	r3, [r7, #20]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	10624dd3 	.word	0x10624dd3

08009034 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08c      	sub	sp, #48	; 0x30
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	460b      	mov	r3, r1
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009042:	2300      	movs	r3, #0
 8009044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800905a:	7afb      	ldrb	r3, [r7, #11]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <get_sequence_step_timeout+0x38>
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d002      	beq.n	800906c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009066:	7afb      	ldrb	r3, [r7, #11]
 8009068:	2b02      	cmp	r3, #2
 800906a:	d128      	bne.n	80090be <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800906c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009070:	461a      	mov	r2, r3
 8009072:	2100      	movs	r1, #0
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f7fd fa7d 	bl	8006574 <VL53L0X_GetVcselPulsePeriod>
 800907a:	4603      	mov	r3, r0
 800907c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009080:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009084:	2b00      	cmp	r3, #0
 8009086:	d109      	bne.n	800909c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009088:	f107 0320 	add.w	r3, r7, #32
 800908c:	461a      	mov	r2, r3
 800908e:	2146      	movs	r1, #70	; 0x46
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f001 fd95 	bl	800abc0 <VL53L0X_RdByte>
 8009096:	4603      	mov	r3, r0
 8009098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800909c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7ff ff5b 	bl	8008f5e <VL53L0X_decode_timeout>
 80090a8:	4603      	mov	r3, r0
 80090aa:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80090ac:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80090b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090b2:	4619      	mov	r1, r3
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f7ff ff93 	bl	8008fe0 <VL53L0X_calc_timeout_us>
 80090ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80090bc:	e092      	b.n	80091e4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d135      	bne.n	8009130 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80090c4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80090c8:	461a      	mov	r2, r3
 80090ca:	2100      	movs	r1, #0
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f7fd fa51 	bl	8006574 <VL53L0X_GetVcselPulsePeriod>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80090d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f040 8081 	bne.w	80091e4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80090e2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80090e6:	461a      	mov	r2, r3
 80090e8:	2100      	movs	r1, #0
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7fd fa42 	bl	8006574 <VL53L0X_GetVcselPulsePeriod>
 80090f0:	4603      	mov	r3, r0
 80090f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80090f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d109      	bne.n	8009112 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80090fe:	f107 031e 	add.w	r3, r7, #30
 8009102:	461a      	mov	r2, r3
 8009104:	2151      	movs	r1, #81	; 0x51
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f001 fd84 	bl	800ac14 <VL53L0X_RdWord>
 800910c:	4603      	mov	r3, r0
 800910e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009112:	8bfb      	ldrh	r3, [r7, #30]
 8009114:	4618      	mov	r0, r3
 8009116:	f7ff ff22 	bl	8008f5e <VL53L0X_decode_timeout>
 800911a:	4603      	mov	r3, r0
 800911c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800911e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009124:	4619      	mov	r1, r3
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7ff ff5a 	bl	8008fe0 <VL53L0X_calc_timeout_us>
 800912c:	62b8      	str	r0, [r7, #40]	; 0x28
 800912e:	e059      	b.n	80091e4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009130:	7afb      	ldrb	r3, [r7, #11]
 8009132:	2b04      	cmp	r3, #4
 8009134:	d156      	bne.n	80091e4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009136:	f107 0314 	add.w	r3, r7, #20
 800913a:	4619      	mov	r1, r3
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f7fd fb25 	bl	800678c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d01d      	beq.n	8009188 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800914c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009150:	461a      	mov	r2, r3
 8009152:	2100      	movs	r1, #0
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7fd fa0d 	bl	8006574 <VL53L0X_GetVcselPulsePeriod>
 800915a:	4603      	mov	r3, r0
 800915c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009160:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10f      	bne.n	8009188 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009168:	f107 031e 	add.w	r3, r7, #30
 800916c:	461a      	mov	r2, r3
 800916e:	2151      	movs	r1, #81	; 0x51
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f001 fd4f 	bl	800ac14 <VL53L0X_RdWord>
 8009176:	4603      	mov	r3, r0
 8009178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800917c:	8bfb      	ldrh	r3, [r7, #30]
 800917e:	4618      	mov	r0, r3
 8009180:	f7ff feed 	bl	8008f5e <VL53L0X_decode_timeout>
 8009184:	4603      	mov	r3, r0
 8009186:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009188:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800918c:	2b00      	cmp	r3, #0
 800918e:	d109      	bne.n	80091a4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009190:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009194:	461a      	mov	r2, r3
 8009196:	2101      	movs	r1, #1
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7fd f9eb 	bl	8006574 <VL53L0X_GetVcselPulsePeriod>
 800919e:	4603      	mov	r3, r0
 80091a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80091a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10f      	bne.n	80091cc <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80091ac:	f107 031c 	add.w	r3, r7, #28
 80091b0:	461a      	mov	r2, r3
 80091b2:	2171      	movs	r1, #113	; 0x71
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f001 fd2d 	bl	800ac14 <VL53L0X_RdWord>
 80091ba:	4603      	mov	r3, r0
 80091bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80091c0:	8bbb      	ldrh	r3, [r7, #28]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7ff fecb 	bl	8008f5e <VL53L0X_decode_timeout>
 80091c8:	4603      	mov	r3, r0
 80091ca:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80091cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80091d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80091d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091da:	4619      	mov	r1, r3
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff feff 	bl	8008fe0 <VL53L0X_calc_timeout_us>
 80091e2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091e8:	601a      	str	r2, [r3, #0]

	return Status;
 80091ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3730      	adds	r7, #48	; 0x30
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b08a      	sub	sp, #40	; 0x28
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	60f8      	str	r0, [r7, #12]
 80091fe:	460b      	mov	r3, r1
 8009200:	607a      	str	r2, [r7, #4]
 8009202:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009204:	2300      	movs	r3, #0
 8009206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800920a:	7afb      	ldrb	r3, [r7, #11]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <set_sequence_step_timeout+0x26>
 8009210:	7afb      	ldrb	r3, [r7, #11]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d002      	beq.n	800921c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009216:	7afb      	ldrb	r3, [r7, #11]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d138      	bne.n	800928e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800921c:	f107 031b 	add.w	r3, r7, #27
 8009220:	461a      	mov	r2, r3
 8009222:	2100      	movs	r1, #0
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f7fd f9a5 	bl	8006574 <VL53L0X_GetVcselPulsePeriod>
 800922a:	4603      	mov	r3, r0
 800922c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009230:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009234:	2b00      	cmp	r3, #0
 8009236:	d11a      	bne.n	800926e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009238:	7efb      	ldrb	r3, [r7, #27]
 800923a:	461a      	mov	r2, r3
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7ff fea4 	bl	8008f8c <VL53L0X_calc_timeout_mclks>
 8009244:	4603      	mov	r3, r0
 8009246:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009248:	8bbb      	ldrh	r3, [r7, #28]
 800924a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800924e:	d903      	bls.n	8009258 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009250:	23ff      	movs	r3, #255	; 0xff
 8009252:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009256:	e004      	b.n	8009262 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009258:	8bbb      	ldrh	r3, [r7, #28]
 800925a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800925c:	3b01      	subs	r3, #1
 800925e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009262:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009266:	b29a      	uxth	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800926e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009272:	2b00      	cmp	r3, #0
 8009274:	f040 80ab 	bne.w	80093ce <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009278:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800927c:	461a      	mov	r2, r3
 800927e:	2146      	movs	r1, #70	; 0x46
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f001 fc1b 	bl	800aabc <VL53L0X_WrByte>
 8009286:	4603      	mov	r3, r0
 8009288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800928c:	e09f      	b.n	80093ce <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800928e:	7afb      	ldrb	r3, [r7, #11]
 8009290:	2b03      	cmp	r3, #3
 8009292:	d135      	bne.n	8009300 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009294:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009298:	2b00      	cmp	r3, #0
 800929a:	d11b      	bne.n	80092d4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800929c:	f107 031b 	add.w	r3, r7, #27
 80092a0:	461a      	mov	r2, r3
 80092a2:	2100      	movs	r1, #0
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f7fd f965 	bl	8006574 <VL53L0X_GetVcselPulsePeriod>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80092b0:	7efb      	ldrb	r3, [r7, #27]
 80092b2:	461a      	mov	r2, r3
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f7ff fe68 	bl	8008f8c <VL53L0X_calc_timeout_mclks>
 80092bc:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80092be:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80092c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff fe1f 	bl	8008f06 <VL53L0X_encode_timeout>
 80092c8:	4603      	mov	r3, r0
 80092ca:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092cc:	8b3a      	ldrh	r2, [r7, #24]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80092d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d108      	bne.n	80092ee <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80092dc:	8b3b      	ldrh	r3, [r7, #24]
 80092de:	461a      	mov	r2, r3
 80092e0:	2151      	movs	r1, #81	; 0x51
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f001 fc0e 	bl	800ab04 <VL53L0X_WrWord>
 80092e8:	4603      	mov	r3, r0
 80092ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80092ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d16b      	bne.n	80093ce <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80092fe:	e066      	b.n	80093ce <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009300:	7afb      	ldrb	r3, [r7, #11]
 8009302:	2b04      	cmp	r3, #4
 8009304:	d160      	bne.n	80093c8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009306:	f107 0310 	add.w	r3, r7, #16
 800930a:	4619      	mov	r1, r3
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f7fd fa3d 	bl	800678c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009316:	7cfb      	ldrb	r3, [r7, #19]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01d      	beq.n	8009358 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800931c:	f107 031b 	add.w	r3, r7, #27
 8009320:	461a      	mov	r2, r3
 8009322:	2100      	movs	r1, #0
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7fd f925 	bl	8006574 <VL53L0X_GetVcselPulsePeriod>
 800932a:	4603      	mov	r3, r0
 800932c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009330:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10f      	bne.n	8009358 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009338:	f107 0318 	add.w	r3, r7, #24
 800933c:	461a      	mov	r2, r3
 800933e:	2151      	movs	r1, #81	; 0x51
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f001 fc67 	bl	800ac14 <VL53L0X_RdWord>
 8009346:	4603      	mov	r3, r0
 8009348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800934c:	8b3b      	ldrh	r3, [r7, #24]
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff fe05 	bl	8008f5e <VL53L0X_decode_timeout>
 8009354:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009356:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800935c:	2b00      	cmp	r3, #0
 800935e:	d109      	bne.n	8009374 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009360:	f107 031b 	add.w	r3, r7, #27
 8009364:	461a      	mov	r2, r3
 8009366:	2101      	movs	r1, #1
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f7fd f903 	bl	8006574 <VL53L0X_GetVcselPulsePeriod>
 800936e:	4603      	mov	r3, r0
 8009370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009374:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009378:	2b00      	cmp	r3, #0
 800937a:	d128      	bne.n	80093ce <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800937c:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800937e:	461a      	mov	r2, r3
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff fe02 	bl	8008f8c <VL53L0X_calc_timeout_mclks>
 8009388:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800938a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800938c:	6a3a      	ldr	r2, [r7, #32]
 800938e:	4413      	add	r3, r2
 8009390:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8009392:	6a38      	ldr	r0, [r7, #32]
 8009394:	f7ff fdb7 	bl	8008f06 <VL53L0X_encode_timeout>
 8009398:	4603      	mov	r3, r0
 800939a:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 800939c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d108      	bne.n	80093b6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80093a4:	8bfb      	ldrh	r3, [r7, #30]
 80093a6:	461a      	mov	r2, r3
 80093a8:	2171      	movs	r1, #113	; 0x71
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f001 fbaa 	bl	800ab04 <VL53L0X_WrWord>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80093b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d107      	bne.n	80093ce <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80093c6:	e002      	b.n	80093ce <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80093c8:	23fc      	movs	r3, #252	; 0xfc
 80093ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80093ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3728      	adds	r7, #40	; 0x28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b08a      	sub	sp, #40	; 0x28
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
 80093e6:	4613      	mov	r3, r2
 80093e8:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093ea:	2300      	movs	r3, #0
 80093ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80093f0:	230c      	movs	r3, #12
 80093f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80093f6:	2312      	movs	r3, #18
 80093f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80093fc:	2308      	movs	r3, #8
 80093fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009402:	230e      	movs	r3, #14
 8009404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800940c:	78bb      	ldrb	r3, [r7, #2]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009418:	23fc      	movs	r3, #252	; 0xfc
 800941a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800941e:	e020      	b.n	8009462 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10d      	bne.n	8009442 <VL53L0X_set_vcsel_pulse_period+0x68>
 8009426:	78ba      	ldrb	r2, [r7, #2]
 8009428:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800942c:	429a      	cmp	r2, r3
 800942e:	d304      	bcc.n	800943a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009430:	78ba      	ldrb	r2, [r7, #2]
 8009432:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009436:	429a      	cmp	r2, r3
 8009438:	d903      	bls.n	8009442 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800943a:	23fc      	movs	r3, #252	; 0xfc
 800943c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009440:	e00f      	b.n	8009462 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8009442:	78fb      	ldrb	r3, [r7, #3]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d10c      	bne.n	8009462 <VL53L0X_set_vcsel_pulse_period+0x88>
 8009448:	78ba      	ldrb	r2, [r7, #2]
 800944a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800944e:	429a      	cmp	r2, r3
 8009450:	d304      	bcc.n	800945c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8009452:	78ba      	ldrb	r2, [r7, #2]
 8009454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009458:	429a      	cmp	r2, r3
 800945a:	d902      	bls.n	8009462 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800945c:	23fc      	movs	r3, #252	; 0xfc
 800945e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8009462:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800946a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800946e:	e239      	b.n	80098e4 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d150      	bne.n	8009518 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009476:	78bb      	ldrb	r3, [r7, #2]
 8009478:	2b0c      	cmp	r3, #12
 800947a:	d110      	bne.n	800949e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800947c:	2218      	movs	r2, #24
 800947e:	2157      	movs	r1, #87	; 0x57
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 fb1b 	bl	800aabc <VL53L0X_WrByte>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800948c:	2208      	movs	r2, #8
 800948e:	2156      	movs	r1, #86	; 0x56
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f001 fb13 	bl	800aabc <VL53L0X_WrByte>
 8009496:	4603      	mov	r3, r0
 8009498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800949c:	e17f      	b.n	800979e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800949e:	78bb      	ldrb	r3, [r7, #2]
 80094a0:	2b0e      	cmp	r3, #14
 80094a2:	d110      	bne.n	80094c6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80094a4:	2230      	movs	r2, #48	; 0x30
 80094a6:	2157      	movs	r1, #87	; 0x57
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 fb07 	bl	800aabc <VL53L0X_WrByte>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80094b4:	2208      	movs	r2, #8
 80094b6:	2156      	movs	r1, #86	; 0x56
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 faff 	bl	800aabc <VL53L0X_WrByte>
 80094be:	4603      	mov	r3, r0
 80094c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094c4:	e16b      	b.n	800979e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80094c6:	78bb      	ldrb	r3, [r7, #2]
 80094c8:	2b10      	cmp	r3, #16
 80094ca:	d110      	bne.n	80094ee <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80094cc:	2240      	movs	r2, #64	; 0x40
 80094ce:	2157      	movs	r1, #87	; 0x57
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 faf3 	bl	800aabc <VL53L0X_WrByte>
 80094d6:	4603      	mov	r3, r0
 80094d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80094dc:	2208      	movs	r2, #8
 80094de:	2156      	movs	r1, #86	; 0x56
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f001 faeb 	bl	800aabc <VL53L0X_WrByte>
 80094e6:	4603      	mov	r3, r0
 80094e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094ec:	e157      	b.n	800979e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80094ee:	78bb      	ldrb	r3, [r7, #2]
 80094f0:	2b12      	cmp	r3, #18
 80094f2:	f040 8154 	bne.w	800979e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80094f6:	2250      	movs	r2, #80	; 0x50
 80094f8:	2157      	movs	r1, #87	; 0x57
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 fade 	bl	800aabc <VL53L0X_WrByte>
 8009500:	4603      	mov	r3, r0
 8009502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009506:	2208      	movs	r2, #8
 8009508:	2156      	movs	r1, #86	; 0x56
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 fad6 	bl	800aabc <VL53L0X_WrByte>
 8009510:	4603      	mov	r3, r0
 8009512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009516:	e142      	b.n	800979e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	2b01      	cmp	r3, #1
 800951c:	f040 813f 	bne.w	800979e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009520:	78bb      	ldrb	r3, [r7, #2]
 8009522:	2b08      	cmp	r3, #8
 8009524:	d14c      	bne.n	80095c0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009526:	2210      	movs	r2, #16
 8009528:	2148      	movs	r1, #72	; 0x48
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fac6 	bl	800aabc <VL53L0X_WrByte>
 8009530:	4603      	mov	r3, r0
 8009532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009536:	2208      	movs	r2, #8
 8009538:	2147      	movs	r1, #71	; 0x47
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 fabe 	bl	800aabc <VL53L0X_WrByte>
 8009540:	4603      	mov	r3, r0
 8009542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009546:	2202      	movs	r2, #2
 8009548:	2132      	movs	r1, #50	; 0x32
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 fab6 	bl	800aabc <VL53L0X_WrByte>
 8009550:	4603      	mov	r3, r0
 8009552:	461a      	mov	r2, r3
 8009554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009558:	4313      	orrs	r3, r2
 800955a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800955e:	220c      	movs	r2, #12
 8009560:	2130      	movs	r1, #48	; 0x30
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 faaa 	bl	800aabc <VL53L0X_WrByte>
 8009568:	4603      	mov	r3, r0
 800956a:	461a      	mov	r2, r3
 800956c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009570:	4313      	orrs	r3, r2
 8009572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009576:	2201      	movs	r2, #1
 8009578:	21ff      	movs	r1, #255	; 0xff
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 fa9e 	bl	800aabc <VL53L0X_WrByte>
 8009580:	4603      	mov	r3, r0
 8009582:	461a      	mov	r2, r3
 8009584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009588:	4313      	orrs	r3, r2
 800958a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800958e:	2230      	movs	r2, #48	; 0x30
 8009590:	2130      	movs	r1, #48	; 0x30
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 fa92 	bl	800aabc <VL53L0X_WrByte>
 8009598:	4603      	mov	r3, r0
 800959a:	461a      	mov	r2, r3
 800959c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095a0:	4313      	orrs	r3, r2
 80095a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80095a6:	2200      	movs	r2, #0
 80095a8:	21ff      	movs	r1, #255	; 0xff
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 fa86 	bl	800aabc <VL53L0X_WrByte>
 80095b0:	4603      	mov	r3, r0
 80095b2:	461a      	mov	r2, r3
 80095b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b8:	4313      	orrs	r3, r2
 80095ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095be:	e0ee      	b.n	800979e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80095c0:	78bb      	ldrb	r3, [r7, #2]
 80095c2:	2b0a      	cmp	r3, #10
 80095c4:	d14c      	bne.n	8009660 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80095c6:	2228      	movs	r2, #40	; 0x28
 80095c8:	2148      	movs	r1, #72	; 0x48
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f001 fa76 	bl	800aabc <VL53L0X_WrByte>
 80095d0:	4603      	mov	r3, r0
 80095d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80095d6:	2208      	movs	r2, #8
 80095d8:	2147      	movs	r1, #71	; 0x47
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f001 fa6e 	bl	800aabc <VL53L0X_WrByte>
 80095e0:	4603      	mov	r3, r0
 80095e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80095e6:	2203      	movs	r2, #3
 80095e8:	2132      	movs	r1, #50	; 0x32
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 fa66 	bl	800aabc <VL53L0X_WrByte>
 80095f0:	4603      	mov	r3, r0
 80095f2:	461a      	mov	r2, r3
 80095f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095f8:	4313      	orrs	r3, r2
 80095fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80095fe:	2209      	movs	r2, #9
 8009600:	2130      	movs	r1, #48	; 0x30
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 fa5a 	bl	800aabc <VL53L0X_WrByte>
 8009608:	4603      	mov	r3, r0
 800960a:	461a      	mov	r2, r3
 800960c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009610:	4313      	orrs	r3, r2
 8009612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009616:	2201      	movs	r2, #1
 8009618:	21ff      	movs	r1, #255	; 0xff
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 fa4e 	bl	800aabc <VL53L0X_WrByte>
 8009620:	4603      	mov	r3, r0
 8009622:	461a      	mov	r2, r3
 8009624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009628:	4313      	orrs	r3, r2
 800962a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800962e:	2220      	movs	r2, #32
 8009630:	2130      	movs	r1, #48	; 0x30
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 fa42 	bl	800aabc <VL53L0X_WrByte>
 8009638:	4603      	mov	r3, r0
 800963a:	461a      	mov	r2, r3
 800963c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009640:	4313      	orrs	r3, r2
 8009642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009646:	2200      	movs	r2, #0
 8009648:	21ff      	movs	r1, #255	; 0xff
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 fa36 	bl	800aabc <VL53L0X_WrByte>
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009658:	4313      	orrs	r3, r2
 800965a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800965e:	e09e      	b.n	800979e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009660:	78bb      	ldrb	r3, [r7, #2]
 8009662:	2b0c      	cmp	r3, #12
 8009664:	d14c      	bne.n	8009700 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009666:	2238      	movs	r2, #56	; 0x38
 8009668:	2148      	movs	r1, #72	; 0x48
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f001 fa26 	bl	800aabc <VL53L0X_WrByte>
 8009670:	4603      	mov	r3, r0
 8009672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009676:	2208      	movs	r2, #8
 8009678:	2147      	movs	r1, #71	; 0x47
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 fa1e 	bl	800aabc <VL53L0X_WrByte>
 8009680:	4603      	mov	r3, r0
 8009682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009686:	2203      	movs	r2, #3
 8009688:	2132      	movs	r1, #50	; 0x32
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 fa16 	bl	800aabc <VL53L0X_WrByte>
 8009690:	4603      	mov	r3, r0
 8009692:	461a      	mov	r2, r3
 8009694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009698:	4313      	orrs	r3, r2
 800969a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800969e:	2208      	movs	r2, #8
 80096a0:	2130      	movs	r1, #48	; 0x30
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f001 fa0a 	bl	800aabc <VL53L0X_WrByte>
 80096a8:	4603      	mov	r3, r0
 80096aa:	461a      	mov	r2, r3
 80096ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096b0:	4313      	orrs	r3, r2
 80096b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80096b6:	2201      	movs	r2, #1
 80096b8:	21ff      	movs	r1, #255	; 0xff
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 f9fe 	bl	800aabc <VL53L0X_WrByte>
 80096c0:	4603      	mov	r3, r0
 80096c2:	461a      	mov	r2, r3
 80096c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c8:	4313      	orrs	r3, r2
 80096ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80096ce:	2220      	movs	r2, #32
 80096d0:	2130      	movs	r1, #48	; 0x30
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 f9f2 	bl	800aabc <VL53L0X_WrByte>
 80096d8:	4603      	mov	r3, r0
 80096da:	461a      	mov	r2, r3
 80096dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096e0:	4313      	orrs	r3, r2
 80096e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80096e6:	2200      	movs	r2, #0
 80096e8:	21ff      	movs	r1, #255	; 0xff
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 f9e6 	bl	800aabc <VL53L0X_WrByte>
 80096f0:	4603      	mov	r3, r0
 80096f2:	461a      	mov	r2, r3
 80096f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096f8:	4313      	orrs	r3, r2
 80096fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096fe:	e04e      	b.n	800979e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009700:	78bb      	ldrb	r3, [r7, #2]
 8009702:	2b0e      	cmp	r3, #14
 8009704:	d14b      	bne.n	800979e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009706:	2248      	movs	r2, #72	; 0x48
 8009708:	2148      	movs	r1, #72	; 0x48
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 f9d6 	bl	800aabc <VL53L0X_WrByte>
 8009710:	4603      	mov	r3, r0
 8009712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009716:	2208      	movs	r2, #8
 8009718:	2147      	movs	r1, #71	; 0x47
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f001 f9ce 	bl	800aabc <VL53L0X_WrByte>
 8009720:	4603      	mov	r3, r0
 8009722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009726:	2203      	movs	r2, #3
 8009728:	2132      	movs	r1, #50	; 0x32
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f001 f9c6 	bl	800aabc <VL53L0X_WrByte>
 8009730:	4603      	mov	r3, r0
 8009732:	461a      	mov	r2, r3
 8009734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009738:	4313      	orrs	r3, r2
 800973a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800973e:	2207      	movs	r2, #7
 8009740:	2130      	movs	r1, #48	; 0x30
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 f9ba 	bl	800aabc <VL53L0X_WrByte>
 8009748:	4603      	mov	r3, r0
 800974a:	461a      	mov	r2, r3
 800974c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009750:	4313      	orrs	r3, r2
 8009752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009756:	2201      	movs	r2, #1
 8009758:	21ff      	movs	r1, #255	; 0xff
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f001 f9ae 	bl	800aabc <VL53L0X_WrByte>
 8009760:	4603      	mov	r3, r0
 8009762:	461a      	mov	r2, r3
 8009764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009768:	4313      	orrs	r3, r2
 800976a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800976e:	2220      	movs	r2, #32
 8009770:	2130      	movs	r1, #48	; 0x30
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 f9a2 	bl	800aabc <VL53L0X_WrByte>
 8009778:	4603      	mov	r3, r0
 800977a:	461a      	mov	r2, r3
 800977c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009780:	4313      	orrs	r3, r2
 8009782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009786:	2200      	movs	r2, #0
 8009788:	21ff      	movs	r1, #255	; 0xff
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 f996 	bl	800aabc <VL53L0X_WrByte>
 8009790:	4603      	mov	r3, r0
 8009792:	461a      	mov	r2, r3
 8009794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009798:	4313      	orrs	r3, r2
 800979a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800979e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d17f      	bne.n	80098a6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80097a6:	78bb      	ldrb	r3, [r7, #2]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe fe38 	bl	800841e <VL53L0X_encode_vcsel_period>
 80097ae:	4603      	mov	r3, r0
 80097b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d002      	beq.n	80097c0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d045      	beq.n	800984a <VL53L0X_set_vcsel_pulse_period+0x470>
 80097be:	e06e      	b.n	800989e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80097c0:	f107 0314 	add.w	r3, r7, #20
 80097c4:	461a      	mov	r2, r3
 80097c6:	2103      	movs	r1, #3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7ff fc33 	bl	8009034 <get_sequence_step_timeout>
 80097ce:	4603      	mov	r3, r0
 80097d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80097d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d109      	bne.n	80097f0 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80097dc:	f107 0310 	add.w	r3, r7, #16
 80097e0:	461a      	mov	r2, r3
 80097e2:	2102      	movs	r1, #2
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff fc25 	bl	8009034 <get_sequence_step_timeout>
 80097ea:	4603      	mov	r3, r0
 80097ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80097f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d109      	bne.n	800980c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80097f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80097fc:	461a      	mov	r2, r3
 80097fe:	2150      	movs	r1, #80	; 0x50
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f001 f95b 	bl	800aabc <VL53L0X_WrByte>
 8009806:	4603      	mov	r3, r0
 8009808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800980c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009810:	2b00      	cmp	r3, #0
 8009812:	d108      	bne.n	8009826 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	461a      	mov	r2, r3
 8009818:	2103      	movs	r1, #3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7ff fceb 	bl	80091f6 <set_sequence_step_timeout>
 8009820:	4603      	mov	r3, r0
 8009822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009826:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800982a:	2b00      	cmp	r3, #0
 800982c:	d108      	bne.n	8009840 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	461a      	mov	r2, r3
 8009832:	2102      	movs	r1, #2
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff fcde 	bl	80091f6 <set_sequence_step_timeout>
 800983a:	4603      	mov	r3, r0
 800983c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	78ba      	ldrb	r2, [r7, #2]
 8009844:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009848:	e02e      	b.n	80098a8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800984a:	f107 0318 	add.w	r3, r7, #24
 800984e:	461a      	mov	r2, r3
 8009850:	2104      	movs	r1, #4
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7ff fbee 	bl	8009034 <get_sequence_step_timeout>
 8009858:	4603      	mov	r3, r0
 800985a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800985e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009862:	2b00      	cmp	r3, #0
 8009864:	d109      	bne.n	800987a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009866:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800986a:	461a      	mov	r2, r3
 800986c:	2170      	movs	r1, #112	; 0x70
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 f924 	bl	800aabc <VL53L0X_WrByte>
 8009874:	4603      	mov	r3, r0
 8009876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800987a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800987e:	2b00      	cmp	r3, #0
 8009880:	d108      	bne.n	8009894 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	461a      	mov	r2, r3
 8009886:	2104      	movs	r1, #4
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff fcb4 	bl	80091f6 <set_sequence_step_timeout>
 800988e:	4603      	mov	r3, r0
 8009890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	78ba      	ldrb	r2, [r7, #2]
 8009898:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800989c:	e004      	b.n	80098a8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800989e:	23fc      	movs	r3, #252	; 0xfc
 80098a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098a4:	e000      	b.n	80098a8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80098a6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80098a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d109      	bne.n	80098c4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80098b6:	69f9      	ldr	r1, [r7, #28]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7fc fe1d 	bl	80064f8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80098be:	4603      	mov	r3, r0
 80098c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80098c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d109      	bne.n	80098e0 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80098cc:	f107 010f 	add.w	r1, r7, #15
 80098d0:	2301      	movs	r3, #1
 80098d2:	2200      	movs	r2, #0
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fe fcbd 	bl	8008254 <VL53L0X_perform_phase_calibration>
 80098da:	4603      	mov	r3, r0
 80098dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80098e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3728      	adds	r7, #40	; 0x28
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	460b      	mov	r3, r1
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098fa:	2300      	movs	r3, #0
 80098fc:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80098fe:	7afb      	ldrb	r3, [r7, #11]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009904:	2b01      	cmp	r3, #1
 8009906:	d00a      	beq.n	800991e <VL53L0X_get_vcsel_pulse_period+0x32>
 8009908:	e013      	b.n	8009932 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800990a:	f107 0316 	add.w	r3, r7, #22
 800990e:	461a      	mov	r2, r3
 8009910:	2150      	movs	r1, #80	; 0x50
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f001 f954 	bl	800abc0 <VL53L0X_RdByte>
 8009918:	4603      	mov	r3, r0
 800991a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800991c:	e00b      	b.n	8009936 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800991e:	f107 0316 	add.w	r3, r7, #22
 8009922:	461a      	mov	r2, r3
 8009924:	2170      	movs	r1, #112	; 0x70
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f001 f94a 	bl	800abc0 <VL53L0X_RdByte>
 800992c:	4603      	mov	r3, r0
 800992e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009930:	e001      	b.n	8009936 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009932:	23fc      	movs	r3, #252	; 0xfc
 8009934:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d107      	bne.n	800994e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800993e:	7dbb      	ldrb	r3, [r7, #22]
 8009940:	4618      	mov	r0, r3
 8009942:	f7fe fd59 	bl	80083f8 <VL53L0X_decode_vcsel_period>
 8009946:	4603      	mov	r3, r0
 8009948:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	701a      	strb	r2, [r3, #0]

	return Status;
 800994e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b092      	sub	sp, #72	; 0x48
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009964:	2300      	movs	r3, #0
 8009966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800996a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800996e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009970:	f240 7376 	movw	r3, #1910	; 0x776
 8009974:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009976:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800997a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800997c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009980:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8009982:	f240 234e 	movw	r3, #590	; 0x24e
 8009986:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009988:	f240 23b2 	movw	r3, #690	; 0x2b2
 800998c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800998e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009994:	f240 2326 	movw	r3, #550	; 0x226
 8009998:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800999e:	f644 6320 	movw	r3, #20000	; 0x4e20
 80099a2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d205      	bcs.n	80099bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099b0:	23fc      	movs	r3, #252	; 0xfc
 80099b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80099b6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80099ba:	e0aa      	b.n	8009b12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80099bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80099c8:	f107 0314 	add.w	r3, r7, #20
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7fc fedc 	bl	800678c <VL53L0X_GetSequenceStepEnables>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80099da:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d15b      	bne.n	8009a9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80099e2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d105      	bne.n	80099f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80099e8:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d102      	bne.n	80099f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80099ee:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d052      	beq.n	8009a9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80099f4:	f107 0310 	add.w	r3, r7, #16
 80099f8:	461a      	mov	r2, r3
 80099fa:	2102      	movs	r1, #2
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff fb19 	bl	8009034 <get_sequence_step_timeout>
 8009a02:	4603      	mov	r3, r0
 8009a04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009a08:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009a10:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a14:	e07d      	b.n	8009b12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009a16:	7d3b      	ldrb	r3, [r7, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00f      	beq.n	8009a3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009a1c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a20:	4413      	add	r3, r2
 8009a22:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009a24:	69fa      	ldr	r2, [r7, #28]
 8009a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d204      	bcs.n	8009a36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009a2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	643b      	str	r3, [r7, #64]	; 0x40
 8009a34:	e002      	b.n	8009a3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a36:	23fc      	movs	r3, #252	; 0xfc
 8009a38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009a3c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009a44:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a48:	e063      	b.n	8009b12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009a4a:	7dbb      	ldrb	r3, [r7, #22]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d011      	beq.n	8009a74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a54:	4413      	add	r3, r2
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d204      	bcs.n	8009a6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009a62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	643b      	str	r3, [r7, #64]	; 0x40
 8009a6a:	e016      	b.n	8009a9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a6c:	23fc      	movs	r3, #252	; 0xfc
 8009a6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a72:	e012      	b.n	8009a9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009a74:	7d7b      	ldrb	r3, [r7, #21]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00f      	beq.n	8009a9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a7e:	4413      	add	r3, r2
 8009a80:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009a82:	69fa      	ldr	r2, [r7, #28]
 8009a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d204      	bcs.n	8009a94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	643b      	str	r3, [r7, #64]	; 0x40
 8009a92:	e002      	b.n	8009a9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a94:	23fc      	movs	r3, #252	; 0xfc
 8009a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009a9a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009aa2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009aa6:	e034      	b.n	8009b12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d019      	beq.n	8009ae2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009aae:	f107 030c 	add.w	r3, r7, #12
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	2103      	movs	r1, #3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7ff fabc 	bl	8009034 <get_sequence_step_timeout>
 8009abc:	4603      	mov	r3, r0
 8009abe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ac6:	4413      	add	r3, r2
 8009ac8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009aca:	69fa      	ldr	r2, [r7, #28]
 8009acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d204      	bcs.n	8009adc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009ad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8009ada:	e002      	b.n	8009ae2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009adc:	23fc      	movs	r3, #252	; 0xfc
 8009ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009ae2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d111      	bne.n	8009b0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009aea:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00e      	beq.n	8009b0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8009af8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009afa:	2104      	movs	r1, #4
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff fb7a 	bl	80091f6 <set_sequence_step_timeout>
 8009b02:	4603      	mov	r3, r0
 8009b04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009b0e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3748      	adds	r7, #72	; 0x48
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b090      	sub	sp, #64	; 0x40
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b24:	2300      	movs	r3, #0
 8009b26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009b2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009b2e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009b30:	f240 7376 	movw	r3, #1910	; 0x776
 8009b34:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009b36:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009b3a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009b3c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009b40:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009b42:	f240 234e 	movw	r3, #590	; 0x24e
 8009b46:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009b48:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009b4c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009b4e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009b54:	f240 2326 	movw	r3, #550	; 0x226
 8009b58:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8009b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b62:	441a      	add	r2, r3
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009b68:	f107 0318 	add.w	r3, r7, #24
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7fc fe0c 	bl	800678c <VL53L0X_GetSequenceStepEnables>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8009b7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009b82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b86:	e075      	b.n	8009c74 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8009b88:	7e3b      	ldrb	r3, [r7, #24]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d105      	bne.n	8009b9a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009b8e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d102      	bne.n	8009b9a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8009b94:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d030      	beq.n	8009bfc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8009b9a:	f107 0310 	add.w	r3, r7, #16
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	2102      	movs	r1, #2
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff fa46 	bl	8009034 <get_sequence_step_timeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8009bae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d122      	bne.n	8009bfc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009bb6:	7e3b      	ldrb	r3, [r7, #24]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d007      	beq.n	8009bcc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009bc0:	6939      	ldr	r1, [r7, #16]
 8009bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bc6:	441a      	add	r2, r3
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009bcc:	7ebb      	ldrb	r3, [r7, #26]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d009      	beq.n	8009be6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009bd6:	6939      	ldr	r1, [r7, #16]
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	440b      	add	r3, r1
 8009bdc:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bde:	441a      	add	r2, r3
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	e00a      	b.n	8009bfc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009be6:	7e7b      	ldrb	r3, [r7, #25]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d007      	beq.n	8009bfc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009bf0:	6939      	ldr	r1, [r7, #16]
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bf6:	441a      	add	r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009bfc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d114      	bne.n	8009c2e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009c04:	7efb      	ldrb	r3, [r7, #27]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d011      	beq.n	8009c2e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009c0a:	f107 030c 	add.w	r3, r7, #12
 8009c0e:	461a      	mov	r2, r3
 8009c10:	2103      	movs	r1, #3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff fa0e 	bl	8009034 <get_sequence_step_timeout>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8009c22:	68f9      	ldr	r1, [r7, #12]
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c28:	441a      	add	r2, r3
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d114      	bne.n	8009c60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009c36:	7f3b      	ldrb	r3, [r7, #28]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d011      	beq.n	8009c60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009c3c:	f107 0314 	add.w	r3, r7, #20
 8009c40:	461a      	mov	r2, r3
 8009c42:	2104      	movs	r1, #4
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff f9f5 	bl	8009034 <get_sequence_step_timeout>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009c54:	6979      	ldr	r1, [r7, #20]
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c5a:	441a      	add	r2, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d103      	bne.n	8009c70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3740      	adds	r7, #64	; 0x40
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b088      	sub	sp, #32
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c86:	2300      	movs	r3, #0
 8009c88:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009c8e:	e0c6      	b.n	8009e1e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	4413      	add	r3, r2
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	74fb      	strb	r3, [r7, #19]
		Index++;
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8009ca0:	7cfb      	ldrb	r3, [r7, #19]
 8009ca2:	2bff      	cmp	r3, #255	; 0xff
 8009ca4:	f040 808d 	bne.w	8009dc2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	4413      	add	r3, r2
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	747b      	strb	r3, [r7, #17]
			Index++;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009cb8:	7c7b      	ldrb	r3, [r7, #17]
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d87e      	bhi.n	8009dbc <VL53L0X_load_tuning_settings+0x140>
 8009cbe:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <VL53L0X_load_tuning_settings+0x48>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009cd5 	.word	0x08009cd5
 8009cc8:	08009d0f 	.word	0x08009d0f
 8009ccc:	08009d49 	.word	0x08009d49
 8009cd0:	08009d83 	.word	0x08009d83
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	4413      	add	r3, r2
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	743b      	strb	r3, [r7, #16]
				Index++;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	4413      	add	r3, r2
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009cf4:	7c3b      	ldrb	r3, [r7, #16]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	021b      	lsls	r3, r3, #8
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	4413      	add	r3, r2
 8009d02:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	89ba      	ldrh	r2, [r7, #12]
 8009d08:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009d0c:	e087      	b.n	8009e1e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	4413      	add	r3, r2
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	743b      	strb	r3, [r7, #16]
				Index++;
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	4413      	add	r3, r2
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009d2e:	7c3b      	ldrb	r3, [r7, #16]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	021b      	lsls	r3, r3, #8
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	4413      	add	r3, r2
 8009d3c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	89ba      	ldrh	r2, [r7, #12]
 8009d42:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009d46:	e06a      	b.n	8009e1e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	743b      	strb	r3, [r7, #16]
				Index++;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	3301      	adds	r3, #1
 8009d56:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	3301      	adds	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009d68:	7c3b      	ldrb	r3, [r7, #16]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	4413      	add	r3, r2
 8009d76:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	89ba      	ldrh	r2, [r7, #12]
 8009d7c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8009d80:	e04d      	b.n	8009e1e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	4413      	add	r3, r2
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	743b      	strb	r3, [r7, #16]
				Index++;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	4413      	add	r3, r2
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009da2:	7c3b      	ldrb	r3, [r7, #16]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	021b      	lsls	r3, r3, #8
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	4413      	add	r3, r2
 8009db0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	89ba      	ldrh	r2, [r7, #12]
 8009db6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8009dba:	e030      	b.n	8009e1e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009dbc:	23fc      	movs	r3, #252	; 0xfc
 8009dbe:	77fb      	strb	r3, [r7, #31]
 8009dc0:	e02d      	b.n	8009e1e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8009dc2:	7cfb      	ldrb	r3, [r7, #19]
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	d828      	bhi.n	8009e1a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	4413      	add	r3, r2
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009dd8:	2300      	movs	r3, #0
 8009dda:	61bb      	str	r3, [r7, #24]
 8009ddc:	e00f      	b.n	8009dfe <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	4413      	add	r3, r2
 8009de4:	7819      	ldrb	r1, [r3, #0]
 8009de6:	f107 0208 	add.w	r2, r7, #8
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	4413      	add	r3, r2
 8009dee:	460a      	mov	r2, r1
 8009df0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	3301      	adds	r3, #1
 8009df6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	61bb      	str	r3, [r7, #24]
 8009dfe:	7cfb      	ldrb	r3, [r7, #19]
 8009e00:	69ba      	ldr	r2, [r7, #24]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	dbeb      	blt.n	8009dde <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009e06:	7cfb      	ldrb	r3, [r7, #19]
 8009e08:	f107 0208 	add.w	r2, r7, #8
 8009e0c:	7cb9      	ldrb	r1, [r7, #18]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fdf8 	bl	800aa04 <VL53L0X_WriteMulti>
 8009e14:	4603      	mov	r3, r0
 8009e16:	77fb      	strb	r3, [r7, #31]
 8009e18:	e001      	b.n	8009e1e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e1a:	23fc      	movs	r3, #252	; 0xfc
 8009e1c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	4413      	add	r3, r2
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d004      	beq.n	8009e34 <VL53L0X_load_tuning_settings+0x1b8>
 8009e2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f43f af2e 	beq.w	8009c90 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009e34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3720      	adds	r7, #32
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009e56:	f107 0313 	add.w	r3, r7, #19
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f7fc fd21 	bl	80068a4 <VL53L0X_GetXTalkCompensationEnable>
 8009e62:	4603      	mov	r3, r0
 8009e64:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009e66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d111      	bne.n	8009e92 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8009e6e:	7cfb      	ldrb	r3, [r7, #19]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00e      	beq.n	8009e92 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6a1b      	ldr	r3, [r3, #32]
 8009e78:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	8a9b      	ldrh	r3, [r3, #20]
 8009e7e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	fb02 f303 	mul.w	r3, r2, r3
 8009e86:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	3380      	adds	r3, #128	; 0x80
 8009e8c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8009e92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3720      	adds	r7, #32
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b086      	sub	sp, #24
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009eb6:	f107 0310 	add.w	r3, r7, #16
 8009eba:	461a      	mov	r2, r3
 8009ebc:	68b9      	ldr	r1, [r7, #8]
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f7ff ffbe 	bl	8009e40 <VL53L0X_get_total_xtalk_rate>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d105      	bne.n	8009edc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	441a      	add	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	601a      	str	r2, [r3, #0]

	return Status;
 8009edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b09a      	sub	sp, #104	; 0x68
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009ef6:	2312      	movs	r3, #18
 8009ef8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8009efa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009efe:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009f00:	2342      	movs	r3, #66	; 0x42
 8009f02:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009f04:	2306      	movs	r3, #6
 8009f06:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009f08:	2307      	movs	r3, #7
 8009f0a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8009f18:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009f20:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8009f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f26:	fb02 f303 	mul.w	r3, r2, r3
 8009f2a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2e:	3380      	adds	r3, #128	; 0x80
 8009f30:	0a1b      	lsrs	r3, r3, #8
 8009f32:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f38:	fb02 f303 	mul.w	r3, r2, r3
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d01b      	beq.n	8009f80 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	029b      	lsls	r3, r3, #10
 8009f4c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8009f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f54:	4413      	add	r3, r2
 8009f56:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8009f58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f60:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8009f62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f64:	4613      	mov	r3, r2
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	4413      	add	r3, r2
 8009f6a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8009f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f70:	fb02 f303 	mul.w	r3, r2, r3
 8009f74:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8009f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009f7c:	0c1b      	lsrs	r3, r3, #16
 8009f7e:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009f84:	fb02 f303 	mul.w	r3, r2, r3
 8009f88:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8009f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009f90:	0c1b      	lsrs	r3, r3, #16
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f98:	fb02 f303 	mul.w	r3, r2, r3
 8009f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8009f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fa0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009fa4:	0c1b      	lsrs	r3, r3, #16
 8009fa6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009faa:	085a      	lsrs	r2, r3, #1
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	441a      	add	r2, r3
 8009fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fbc:	fb02 f303 	mul.w	r3, r2, r3
 8009fc0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8009fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc8:	d302      	bcc.n	8009fd0 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8009fca:	4b55      	ldr	r3, [pc, #340]	; (800a120 <VL53L0X_calc_dmax+0x238>)
 8009fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8009fce:	e016      	b.n	8009ffe <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8009fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fd2:	085a      	lsrs	r2, r3, #1
 8009fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fd6:	441a      	add	r2, r3
 8009fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fde:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8009fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fe4:	fb02 f303 	mul.w	r3, r2, r3
 8009fe8:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8009fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009ff0:	0c1b      	lsrs	r3, r3, #16
 8009ff2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8009ff4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ff6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ff8:	fb02 f303 	mul.w	r3, r2, r3
 8009ffc:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a000:	039b      	lsls	r3, r3, #14
 800a002:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a006:	4a47      	ldr	r2, [pc, #284]	; (800a124 <VL53L0X_calc_dmax+0x23c>)
 800a008:	fba2 2303 	umull	r2, r3, r2, r3
 800a00c:	099b      	lsrs	r3, r3, #6
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a014:	fb02 f303 	mul.w	r3, r2, r3
 800a018:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a01c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a01e:	fb02 f303 	mul.w	r3, r2, r3
 800a022:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	3308      	adds	r3, #8
 800a028:	091b      	lsrs	r3, r3, #4
 800a02a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a036:	4613      	mov	r3, r2
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	4413      	add	r3, r2
 800a03c:	011b      	lsls	r3, r3, #4
 800a03e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a046:	0b9b      	lsrs	r3, r3, #14
 800a048:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a04a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a04c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a04e:	4413      	add	r3, r2
 800a050:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a054:	085b      	lsrs	r3, r3, #1
 800a056:	69ba      	ldr	r2, [r7, #24]
 800a058:	4413      	add	r3, r2
 800a05a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a05c:	69ba      	ldr	r2, [r7, #24]
 800a05e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a060:	fbb2 f3f3 	udiv	r3, r2, r3
 800a064:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	039b      	lsls	r3, r3, #14
 800a06a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	4413      	add	r3, r2
 800a074:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a07e:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a084:	fb02 f303 	mul.w	r3, r2, r3
 800a088:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a090:	4a24      	ldr	r2, [pc, #144]	; (800a124 <VL53L0X_calc_dmax+0x23c>)
 800a092:	fba2 2303 	umull	r2, r3, r2, r3
 800a096:	099b      	lsrs	r3, r3, #6
 800a098:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	011b      	lsls	r3, r3, #4
 800a09e:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a0a6:	4a1f      	ldr	r2, [pc, #124]	; (800a124 <VL53L0X_calc_dmax+0x23c>)
 800a0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ac:	099b      	lsrs	r3, r3, #6
 800a0ae:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a0b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0b2:	3380      	adds	r3, #128	; 0x80
 800a0b4:	0a1b      	lsrs	r3, r3, #8
 800a0b6:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d008      	beq.n	800a0d0 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	085a      	lsrs	r2, r3, #1
 800a0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c4:	441a      	add	r2, r3
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0ce:	e001      	b.n	800a0d4 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a0d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a0d6:	f7fe f9b5 	bl	8008444 <VL53L0X_isqrt>
 800a0da:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d008      	beq.n	800a0f4 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	085a      	lsrs	r2, r3, #1
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e8:	441a      	add	r2, r3
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0f2:	e001      	b.n	800a0f8 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a0f8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a0fa:	f7fe f9a3 	bl	8008444 <VL53L0X_isqrt>
 800a0fe:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d902      	bls.n	800a114 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800a10e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a110:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a112:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a114:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3768      	adds	r7, #104	; 0x68
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	fff00000 	.word	0xfff00000
 800a124:	10624dd3 	.word	0x10624dd3

0800a128 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b0b4      	sub	sp, #208	; 0xd0
 800a12c:	af04      	add	r7, sp, #16
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
 800a134:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a136:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a13a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a13e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800a146:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a14a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a14e:	f241 235c 	movw	r3, #4700	; 0x125c
 800a152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a156:	4b9e      	ldr	r3, [pc, #632]	; (800a3d0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800a158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a15c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a160:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a162:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a16e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a170:	4b98      	ldr	r3, [pc, #608]	; (800a3d4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800a172:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a178:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a17a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a17e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800a180:	f240 6377 	movw	r3, #1655	; 0x677
 800a184:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a186:	2300      	movs	r3, #0
 800a188:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a19a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a19e:	0c1b      	lsrs	r3, r3, #16
 800a1a0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a1a8:	f107 0310 	add.w	r3, r7, #16
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f7ff fe74 	bl	8009e9e <VL53L0X_get_total_signal_rate>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a1bc:	f107 0314 	add.w	r3, r7, #20
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	68b9      	ldr	r1, [r7, #8]
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f7ff fe3b 	bl	8009e40 <VL53L0X_get_total_xtalk_rate>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1d6:	fb02 f303 	mul.w	r3, r2, r3
 800a1da:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a1dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a1e2:	0c1b      	lsrs	r3, r3, #16
 800a1e4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1ec:	fb02 f303 	mul.w	r3, r2, r3
 800a1f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a1f4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a1f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d902      	bls.n	800a204 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a1fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a200:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a204:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d168      	bne.n	800a2de <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a212:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a21c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a220:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a224:	461a      	mov	r2, r3
 800a226:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7fe feae 	bl	8008f8c <VL53L0X_calc_timeout_mclks>
 800a230:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a242:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a246:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a24a:	461a      	mov	r2, r3
 800a24c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f7fe fe9b 	bl	8008f8c <VL53L0X_calc_timeout_mclks>
 800a256:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a258:	2303      	movs	r3, #3
 800a25a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800a25e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a262:	2b08      	cmp	r3, #8
 800a264:	d102      	bne.n	800a26c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800a266:	2302      	movs	r3, #2
 800a268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a26c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a270:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a272:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a276:	fb02 f303 	mul.w	r3, r2, r3
 800a27a:	02db      	lsls	r3, r3, #11
 800a27c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a280:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a284:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a288:	4a53      	ldr	r2, [pc, #332]	; (800a3d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a28a:	fba2 2303 	umull	r2, r3, r2, r3
 800a28e:	099b      	lsrs	r3, r3, #6
 800a290:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800a294:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a298:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a29a:	fb02 f303 	mul.w	r3, r2, r3
 800a29e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a2a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a2aa:	4a4b      	ldr	r2, [pc, #300]	; (800a3d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a2ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b0:	099b      	lsrs	r3, r3, #6
 800a2b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	3380      	adds	r3, #128	; 0x80
 800a2ba:	0a1b      	lsrs	r3, r3, #8
 800a2bc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2c4:	fb02 f303 	mul.w	r3, r2, r3
 800a2c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a2cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a2d0:	3380      	adds	r3, #128	; 0x80
 800a2d2:	0a1b      	lsrs	r3, r3, #8
 800a2d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	021b      	lsls	r3, r3, #8
 800a2dc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a2de:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d002      	beq.n	800a2ec <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800a2e6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a2ea:	e165      	b.n	800a5b8 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800a2ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10c      	bne.n	800a30c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a2f8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a300:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]
 800a30a:	e153      	b.n	800a5b4 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800a30c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a310:	2b00      	cmp	r3, #0
 800a312:	d102      	bne.n	800a31a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800a314:	2301      	movs	r3, #1
 800a316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a31a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a31e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a322:	041a      	lsls	r2, r3, #16
 800a324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a326:	fbb2 f3f3 	udiv	r3, r2, r3
 800a32a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a32e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a334:	429a      	cmp	r2, r3
 800a336:	d902      	bls.n	800a33e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a33a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a33e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a342:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a346:	fb02 f303 	mul.w	r3, r2, r3
 800a34a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a34e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a352:	4613      	mov	r3, r2
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	4413      	add	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe f872 	bl	8008444 <VL53L0X_isqrt>
 800a360:	4603      	mov	r3, r0
 800a362:	005b      	lsls	r3, r3, #1
 800a364:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	891b      	ldrh	r3, [r3, #8]
 800a36a:	461a      	mov	r2, r3
 800a36c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a36e:	fb02 f303 	mul.w	r3, r2, r3
 800a372:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a376:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a378:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a37c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a37e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a380:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a384:	4a14      	ldr	r2, [pc, #80]	; (800a3d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a386:	fba2 2303 	umull	r2, r3, r2, r3
 800a38a:	099b      	lsrs	r3, r3, #6
 800a38c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800a38e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a390:	041b      	lsls	r3, r3, #16
 800a392:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a396:	4a10      	ldr	r2, [pc, #64]	; (800a3d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a398:	fba2 2303 	umull	r2, r3, r2, r3
 800a39c:	099b      	lsrs	r3, r3, #6
 800a39e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3a2:	021b      	lsls	r3, r3, #8
 800a3a4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a3a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	bfb8      	it	lt
 800a3b2:	425b      	neglt	r3, r3
 800a3b4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b8:	021b      	lsls	r3, r3, #8
 800a3ba:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	7e1b      	ldrb	r3, [r3, #24]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00b      	beq.n	800a3dc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a3c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a3c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3cc:	e035      	b.n	800a43a <VL53L0X_calc_sigma_estimate+0x312>
 800a3ce:	bf00      	nop
 800a3d0:	028f87ae 	.word	0x028f87ae
 800a3d4:	0006999a 	.word	0x0006999a
 800a3d8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a3dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ec:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a3f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3f4:	fb02 f303 	mul.w	r3, r2, r3
 800a3f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a3fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a402:	4413      	add	r3, r2
 800a404:	0c1b      	lsrs	r3, r3, #16
 800a406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a40a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a40e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800a416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a41a:	085b      	lsrs	r3, r3, #1
 800a41c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a424:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a428:	fb02 f303 	mul.w	r3, r2, r3
 800a42c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a434:	0b9b      	lsrs	r3, r3, #14
 800a436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a43a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a43e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a440:	fb02 f303 	mul.w	r3, r2, r3
 800a444:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a44c:	0c1b      	lsrs	r3, r3, #16
 800a44e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a454:	fb02 f303 	mul.w	r3, r2, r3
 800a458:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800a45a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a45e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a462:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a466:	0c1b      	lsrs	r3, r3, #16
 800a468:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a46e:	fb02 f303 	mul.w	r3, r2, r3
 800a472:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a478:	4413      	add	r3, r2
 800a47a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a47c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a47e:	f7fd ffe1 	bl	8008444 <VL53L0X_isqrt>
 800a482:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	041b      	lsls	r3, r3, #16
 800a488:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	3332      	adds	r3, #50	; 0x32
 800a48e:	4a4c      	ldr	r2, [pc, #304]	; (800a5c0 <VL53L0X_calc_sigma_estimate+0x498>)
 800a490:	fba2 2303 	umull	r2, r3, r2, r3
 800a494:	095a      	lsrs	r2, r3, #5
 800a496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a498:	fbb2 f3f3 	udiv	r3, r2, r3
 800a49c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a4a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4a4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a4a8:	fb02 f303 	mul.w	r3, r2, r3
 800a4ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a4b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4b4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800a4be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4c2:	4a40      	ldr	r2, [pc, #256]	; (800a5c4 <VL53L0X_calc_sigma_estimate+0x49c>)
 800a4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4c8:	0b5b      	lsrs	r3, r3, #13
 800a4ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a4ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a4d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d902      	bls.n	800a4de <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a4d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800a4de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a4e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a4ec:	4a36      	ldr	r2, [pc, #216]	; (800a5c8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800a4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f2:	099b      	lsrs	r3, r3, #6
 800a4f4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800a4fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4fe:	441a      	add	r2, r3
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800a506:	4618      	mov	r0, r3
 800a508:	f7fd ff9c 	bl	8008444 <VL53L0X_isqrt>
 800a50c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	021b      	lsls	r3, r3, #8
 800a512:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a51a:	4a2b      	ldr	r2, [pc, #172]	; (800a5c8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800a51c:	fba2 2303 	umull	r2, r3, r2, r3
 800a520:	099b      	lsrs	r3, r3, #6
 800a522:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a528:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a52c:	fb02 f303 	mul.w	r3, r2, r3
 800a530:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	69fa      	ldr	r2, [r7, #28]
 800a536:	fb02 f303 	mul.w	r3, r2, r3
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a540:	4413      	add	r3, r2
 800a542:	4618      	mov	r0, r3
 800a544:	f7fd ff7e 	bl	8008444 <VL53L0X_isqrt>
 800a548:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a550:	fb02 f303 	mul.w	r3, r2, r3
 800a554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d009      	beq.n	800a572 <VL53L0X_calc_sigma_estimate+0x44a>
 800a55e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <VL53L0X_calc_sigma_estimate+0x44a>
 800a566:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a56a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a56e:	429a      	cmp	r2, r3
 800a570:	d903      	bls.n	800a57a <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a572:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a580:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800a58c:	6939      	ldr	r1, [r7, #16]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	9303      	str	r3, [sp, #12]
 800a592:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a596:	9302      	str	r3, [sp, #8]
 800a598:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f7ff fc9d 	bl	8009ee8 <VL53L0X_calc_dmax>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5b4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	37c0      	adds	r7, #192	; 0xc0
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	51eb851f 	.word	0x51eb851f
 800a5c4:	d1b71759 	.word	0xd1b71759
 800a5c8:	10624dd3 	.word	0x10624dd3

0800a5cc <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b090      	sub	sp, #64	; 0x40
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	607a      	str	r2, [r7, #4]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	460b      	mov	r3, r1
 800a5da:	72fb      	strb	r3, [r7, #11]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a610:	2300      	movs	r3, #0
 800a612:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a61e:	7afb      	ldrb	r3, [r7, #11]
 800a620:	10db      	asrs	r3, r3, #3
 800a622:	b2db      	uxtb	r3, r3
 800a624:	f003 030f 	and.w	r3, r3, #15
 800a628:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a62c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a630:	2b00      	cmp	r3, #0
 800a632:	d017      	beq.n	800a664 <VL53L0X_get_pal_range_status+0x98>
 800a634:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a638:	2b05      	cmp	r3, #5
 800a63a:	d013      	beq.n	800a664 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a63c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a640:	2b07      	cmp	r3, #7
 800a642:	d00f      	beq.n	800a664 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a644:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a648:	2b0c      	cmp	r3, #12
 800a64a:	d00b      	beq.n	800a664 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a64c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a650:	2b0d      	cmp	r3, #13
 800a652:	d007      	beq.n	800a664 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a654:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a658:	2b0e      	cmp	r3, #14
 800a65a:	d003      	beq.n	800a664 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a65c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a660:	2b0f      	cmp	r3, #15
 800a662:	d103      	bne.n	800a66c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a664:	2301      	movs	r3, #1
 800a666:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a66a:	e002      	b.n	800a672 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a672:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a676:	2b00      	cmp	r3, #0
 800a678:	d109      	bne.n	800a68e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a67a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a67e:	461a      	mov	r2, r3
 800a680:	2100      	movs	r1, #0
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f7fc f9e2 	bl	8006a4c <VL53L0X_GetLimitCheckEnable>
 800a688:	4603      	mov	r3, r0
 800a68a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a68e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a692:	2b00      	cmp	r3, #0
 800a694:	d02e      	beq.n	800a6f4 <VL53L0X_get_pal_range_status+0x128>
 800a696:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d12a      	bne.n	800a6f4 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a69e:	f107 0310 	add.w	r3, r7, #16
 800a6a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a6a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f7ff fd3d 	bl	800a128 <VL53L0X_calc_sigma_estimate>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a6b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d103      	bne.n	800a6c4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6c2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a6c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d113      	bne.n	800a6f4 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a6cc:	f107 0320 	add.w	r3, r7, #32
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7fc fa3f 	bl	8006b58 <VL53L0X_GetLimitCheckValue>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d006      	beq.n	800a6f4 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800a6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d902      	bls.n	800a6f4 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a6f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d109      	bne.n	800a710 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a6fc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a700:	461a      	mov	r2, r3
 800a702:	2102      	movs	r1, #2
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7fc f9a1 	bl	8006a4c <VL53L0X_GetLimitCheckEnable>
 800a70a:	4603      	mov	r3, r0
 800a70c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a710:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a714:	2b00      	cmp	r3, #0
 800a716:	d044      	beq.n	800a7a2 <VL53L0X_get_pal_range_status+0x1d6>
 800a718:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d140      	bne.n	800a7a2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a720:	f107 031c 	add.w	r3, r7, #28
 800a724:	461a      	mov	r2, r3
 800a726:	2102      	movs	r1, #2
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7fc fa15 	bl	8006b58 <VL53L0X_GetLimitCheckValue>
 800a72e:	4603      	mov	r3, r0
 800a730:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a734:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d107      	bne.n	800a74c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a73c:	2201      	movs	r2, #1
 800a73e:	21ff      	movs	r1, #255	; 0xff
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 f9bb 	bl	800aabc <VL53L0X_WrByte>
 800a746:	4603      	mov	r3, r0
 800a748:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800a74c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a750:	2b00      	cmp	r3, #0
 800a752:	d109      	bne.n	800a768 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800a754:	f107 0316 	add.w	r3, r7, #22
 800a758:	461a      	mov	r2, r3
 800a75a:	21b6      	movs	r1, #182	; 0xb6
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 fa59 	bl	800ac14 <VL53L0X_RdWord>
 800a762:	4603      	mov	r3, r0
 800a764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800a768:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d107      	bne.n	800a780 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a770:	2200      	movs	r2, #0
 800a772:	21ff      	movs	r1, #255	; 0xff
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 f9a1 	bl	800aabc <VL53L0X_WrByte>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a780:	8afb      	ldrh	r3, [r7, #22]
 800a782:	025b      	lsls	r3, r3, #9
 800a784:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a78a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d006      	beq.n	800a7a2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a794:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a798:	429a      	cmp	r2, r3
 800a79a:	d902      	bls.n	800a7a2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a79c:	2301      	movs	r3, #1
 800a79e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a7a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d109      	bne.n	800a7be <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a7aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	2103      	movs	r1, #3
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7fc f94a 	bl	8006a4c <VL53L0X_GetLimitCheckEnable>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a7be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d023      	beq.n	800a80e <VL53L0X_get_pal_range_status+0x242>
 800a7c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d11f      	bne.n	800a80e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a7ce:	893b      	ldrh	r3, [r7, #8]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d102      	bne.n	800a7da <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7d8:	e005      	b.n	800a7e6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	021a      	lsls	r2, r3, #8
 800a7de:	893b      	ldrh	r3, [r7, #8]
 800a7e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a7e6:	f107 0318 	add.w	r3, r7, #24
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	2103      	movs	r1, #3
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f7fc f9b2 	bl	8006b58 <VL53L0X_GetLimitCheckValue>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d006      	beq.n	800a80e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a800:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a804:	429a      	cmp	r2, r3
 800a806:	d202      	bcs.n	800a80e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a80e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a812:	2b00      	cmp	r3, #0
 800a814:	d14a      	bne.n	800a8ac <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800a816:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d103      	bne.n	800a826 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800a81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a820:	22ff      	movs	r2, #255	; 0xff
 800a822:	701a      	strb	r2, [r3, #0]
 800a824:	e042      	b.n	800a8ac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a826:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d007      	beq.n	800a83e <VL53L0X_get_pal_range_status+0x272>
 800a82e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a832:	2b02      	cmp	r3, #2
 800a834:	d003      	beq.n	800a83e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800a836:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d103      	bne.n	800a846 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a840:	2205      	movs	r2, #5
 800a842:	701a      	strb	r2, [r3, #0]
 800a844:	e032      	b.n	800a8ac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a846:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a84a:	2b06      	cmp	r3, #6
 800a84c:	d003      	beq.n	800a856 <VL53L0X_get_pal_range_status+0x28a>
 800a84e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a852:	2b09      	cmp	r3, #9
 800a854:	d103      	bne.n	800a85e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a858:	2204      	movs	r2, #4
 800a85a:	701a      	strb	r2, [r3, #0]
 800a85c:	e026      	b.n	800a8ac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a85e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a862:	2b08      	cmp	r3, #8
 800a864:	d007      	beq.n	800a876 <VL53L0X_get_pal_range_status+0x2aa>
 800a866:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a86a:	2b0a      	cmp	r3, #10
 800a86c:	d003      	beq.n	800a876 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800a86e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a872:	2b01      	cmp	r3, #1
 800a874:	d103      	bne.n	800a87e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a878:	2203      	movs	r2, #3
 800a87a:	701a      	strb	r2, [r3, #0]
 800a87c:	e016      	b.n	800a8ac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a87e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a882:	2b04      	cmp	r3, #4
 800a884:	d003      	beq.n	800a88e <VL53L0X_get_pal_range_status+0x2c2>
 800a886:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d103      	bne.n	800a896 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a88e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a890:	2202      	movs	r2, #2
 800a892:	701a      	strb	r2, [r3, #0]
 800a894:	e00a      	b.n	800a8ac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800a896:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d103      	bne.n	800a8a6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	701a      	strb	r2, [r3, #0]
 800a8a4:	e002      	b.n	800a8ac <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a8a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800a8ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d102      	bne.n	800a8ba <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800a8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a8ba:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a8be:	461a      	mov	r2, r3
 800a8c0:	2101      	movs	r1, #1
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f7fc f8c2 	bl	8006a4c <VL53L0X_GetLimitCheckEnable>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a8ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d14f      	bne.n	800a976 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a8d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <VL53L0X_get_pal_range_status+0x31a>
 800a8de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d103      	bne.n	800a8ee <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ec:	e002      	b.n	800a8f4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a8fa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a8fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a902:	2b04      	cmp	r3, #4
 800a904:	d003      	beq.n	800a90e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a906:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d103      	bne.n	800a916 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800a90e:	2301      	movs	r3, #1
 800a910:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a914:	e002      	b.n	800a91c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a922:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a926:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <VL53L0X_get_pal_range_status+0x36a>
 800a92e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a932:	2b01      	cmp	r3, #1
 800a934:	d103      	bne.n	800a93e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a936:	2301      	movs	r3, #1
 800a938:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a93c:	e002      	b.n	800a944 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a94a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a94e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a952:	2b00      	cmp	r3, #0
 800a954:	d003      	beq.n	800a95e <VL53L0X_get_pal_range_status+0x392>
 800a956:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d103      	bne.n	800a966 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a95e:	2301      	movs	r3, #1
 800a960:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a964:	e002      	b.n	800a96c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800a966:	2300      	movs	r3, #0
 800a968:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a972:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a976:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3740      	adds	r7, #64	; 0x40
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a982:	b580      	push	{r7, lr}
 800a984:	b088      	sub	sp, #32
 800a986:	af02      	add	r7, sp, #8
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	60b9      	str	r1, [r7, #8]
 800a98c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	330a      	adds	r3, #10
 800a992:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a9a0:	b299      	uxth	r1, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	f7f7 fa05 	bl	8001dbc <HAL_I2C_Master_Transmit>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800a9b6:	693b      	ldr	r3, [r7, #16]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3718      	adds	r7, #24
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	330a      	adds	r3, #10
 800a9d0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a9de:	f043 0301 	orr.w	r3, r3, #1
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	b299      	uxth	r1, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	f7f7 fad7 	bl	8001fa4 <HAL_I2C_Master_Receive>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800a9fa:	693b      	ldr	r3, [r7, #16]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3718      	adds	r7, #24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	607a      	str	r2, [r7, #4]
 800aa0e:	603b      	str	r3, [r7, #0]
 800aa10:	460b      	mov	r3, r1
 800aa12:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa14:	2300      	movs	r3, #0
 800aa16:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2b3f      	cmp	r3, #63	; 0x3f
 800aa1c:	d902      	bls.n	800aa24 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800aa1e:	f06f 0303 	mvn.w	r3, #3
 800aa22:	e016      	b.n	800aa52 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800aa24:	4a0d      	ldr	r2, [pc, #52]	; (800aa5c <VL53L0X_WriteMulti+0x58>)
 800aa26:	7afb      	ldrb	r3, [r7, #11]
 800aa28:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	480c      	ldr	r0, [pc, #48]	; (800aa60 <VL53L0X_WriteMulti+0x5c>)
 800aa30:	f000 f9a2 	bl	800ad78 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	3301      	adds	r3, #1
 800aa38:	461a      	mov	r2, r3
 800aa3a:	4908      	ldr	r1, [pc, #32]	; (800aa5c <VL53L0X_WriteMulti+0x58>)
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f7ff ffa0 	bl	800a982 <_I2CWrite>
 800aa42:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d001      	beq.n	800aa4e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aa4a:	23ec      	movs	r3, #236	; 0xec
 800aa4c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800aa4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3718      	adds	r7, #24
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20000b80 	.word	0x20000b80
 800aa60:	20000b81 	.word	0x20000b81

0800aa64 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	607a      	str	r2, [r7, #4]
 800aa6e:	603b      	str	r3, [r7, #0]
 800aa70:	460b      	mov	r3, r1
 800aa72:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa74:	2300      	movs	r3, #0
 800aa76:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800aa78:	f107 030b 	add.w	r3, r7, #11
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	4619      	mov	r1, r3
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f7ff ff7e 	bl	800a982 <_I2CWrite>
 800aa86:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d002      	beq.n	800aa94 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aa8e:	23ec      	movs	r3, #236	; 0xec
 800aa90:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aa92:	e00c      	b.n	800aaae <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f7ff ff91 	bl	800a9c0 <_I2CRead>
 800aa9e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aaa6:	23ec      	movs	r3, #236	; 0xec
 800aaa8:	75fb      	strb	r3, [r7, #23]
 800aaaa:	e000      	b.n	800aaae <VL53L0X_ReadMulti+0x4a>
    }
done:
 800aaac:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800aaae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3718      	adds	r7, #24
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
	...

0800aabc <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
 800aac8:	4613      	mov	r3, r2
 800aaca:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aacc:	2300      	movs	r3, #0
 800aace:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800aad0:	4a0b      	ldr	r2, [pc, #44]	; (800ab00 <VL53L0X_WrByte+0x44>)
 800aad2:	78fb      	ldrb	r3, [r7, #3]
 800aad4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800aad6:	4a0a      	ldr	r2, [pc, #40]	; (800ab00 <VL53L0X_WrByte+0x44>)
 800aad8:	78bb      	ldrb	r3, [r7, #2]
 800aada:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800aadc:	2202      	movs	r2, #2
 800aade:	4908      	ldr	r1, [pc, #32]	; (800ab00 <VL53L0X_WrByte+0x44>)
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff ff4e 	bl	800a982 <_I2CWrite>
 800aae6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aaee:	23ec      	movs	r3, #236	; 0xec
 800aaf0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800aaf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	20000b80 	.word	0x20000b80

0800ab04 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	70fb      	strb	r3, [r7, #3]
 800ab10:	4613      	mov	r3, r2
 800ab12:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab14:	2300      	movs	r3, #0
 800ab16:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ab18:	4a0e      	ldr	r2, [pc, #56]	; (800ab54 <VL53L0X_WrWord+0x50>)
 800ab1a:	78fb      	ldrb	r3, [r7, #3]
 800ab1c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ab1e:	883b      	ldrh	r3, [r7, #0]
 800ab20:	0a1b      	lsrs	r3, r3, #8
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	4b0b      	ldr	r3, [pc, #44]	; (800ab54 <VL53L0X_WrWord+0x50>)
 800ab28:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ab2a:	883b      	ldrh	r3, [r7, #0]
 800ab2c:	b2da      	uxtb	r2, r3
 800ab2e:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <VL53L0X_WrWord+0x50>)
 800ab30:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ab32:	2203      	movs	r2, #3
 800ab34:	4907      	ldr	r1, [pc, #28]	; (800ab54 <VL53L0X_WrWord+0x50>)
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff ff23 	bl	800a982 <_I2CWrite>
 800ab3c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ab44:	23ec      	movs	r3, #236	; 0xec
 800ab46:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ab48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	20000b80 	.word	0x20000b80

0800ab58 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	4608      	mov	r0, r1
 800ab62:	4611      	mov	r1, r2
 800ab64:	461a      	mov	r2, r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	70fb      	strb	r3, [r7, #3]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70bb      	strb	r3, [r7, #2]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ab76:	f107 020e 	add.w	r2, r7, #14
 800ab7a:	78fb      	ldrb	r3, [r7, #3]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f81e 	bl	800abc0 <VL53L0X_RdByte>
 800ab84:	4603      	mov	r3, r0
 800ab86:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ab88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d110      	bne.n	800abb2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ab90:	7bba      	ldrb	r2, [r7, #14]
 800ab92:	78bb      	ldrb	r3, [r7, #2]
 800ab94:	4013      	ands	r3, r2
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	787b      	ldrb	r3, [r7, #1]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800aba0:	7bba      	ldrb	r2, [r7, #14]
 800aba2:	78fb      	ldrb	r3, [r7, #3]
 800aba4:	4619      	mov	r1, r3
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f7ff ff88 	bl	800aabc <VL53L0X_WrByte>
 800abac:	4603      	mov	r3, r0
 800abae:	73fb      	strb	r3, [r7, #15]
 800abb0:	e000      	b.n	800abb4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800abb2:	bf00      	nop
done:
    return Status;
 800abb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	460b      	mov	r3, r1
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abce:	2300      	movs	r3, #0
 800abd0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800abd2:	f107 030b 	add.w	r3, r7, #11
 800abd6:	2201      	movs	r2, #1
 800abd8:	4619      	mov	r1, r3
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f7ff fed1 	bl	800a982 <_I2CWrite>
 800abe0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800abe8:	23ec      	movs	r3, #236	; 0xec
 800abea:	75fb      	strb	r3, [r7, #23]
        goto done;
 800abec:	e00c      	b.n	800ac08 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800abee:	2201      	movs	r2, #1
 800abf0:	6879      	ldr	r1, [r7, #4]
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f7ff fee4 	bl	800a9c0 <_I2CRead>
 800abf8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac00:	23ec      	movs	r3, #236	; 0xec
 800ac02:	75fb      	strb	r3, [r7, #23]
 800ac04:	e000      	b.n	800ac08 <VL53L0X_RdByte+0x48>
    }
done:
 800ac06:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ac08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac22:	2300      	movs	r3, #0
 800ac24:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ac26:	f107 030b 	add.w	r3, r7, #11
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f7ff fea7 	bl	800a982 <_I2CWrite>
 800ac34:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac3c:	23ec      	movs	r3, #236	; 0xec
 800ac3e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ac40:	e017      	b.n	800ac72 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ac42:	2202      	movs	r2, #2
 800ac44:	490e      	ldr	r1, [pc, #56]	; (800ac80 <VL53L0X_RdWord+0x6c>)
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f7ff feba 	bl	800a9c0 <_I2CRead>
 800ac4c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac54:	23ec      	movs	r3, #236	; 0xec
 800ac56:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ac58:	e00b      	b.n	800ac72 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ac5a:	4b09      	ldr	r3, [pc, #36]	; (800ac80 <VL53L0X_RdWord+0x6c>)
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	021b      	lsls	r3, r3, #8
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	4b06      	ldr	r3, [pc, #24]	; (800ac80 <VL53L0X_RdWord+0x6c>)
 800ac66:	785b      	ldrb	r3, [r3, #1]
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	4413      	add	r3, r2
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800ac72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000b80 	.word	0x20000b80

0800ac84 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac92:	2300      	movs	r3, #0
 800ac94:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ac96:	f107 030b 	add.w	r3, r7, #11
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f7ff fe6f 	bl	800a982 <_I2CWrite>
 800aca4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d002      	beq.n	800acb2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800acac:	23ec      	movs	r3, #236	; 0xec
 800acae:	75fb      	strb	r3, [r7, #23]
        goto done;
 800acb0:	e01b      	b.n	800acea <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800acb2:	2204      	movs	r2, #4
 800acb4:	4910      	ldr	r1, [pc, #64]	; (800acf8 <VL53L0X_RdDWord+0x74>)
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f7ff fe82 	bl	800a9c0 <_I2CRead>
 800acbc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800acc4:	23ec      	movs	r3, #236	; 0xec
 800acc6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800acc8:	e00f      	b.n	800acea <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800acca:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <VL53L0X_RdDWord+0x74>)
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	061a      	lsls	r2, r3, #24
 800acd0:	4b09      	ldr	r3, [pc, #36]	; (800acf8 <VL53L0X_RdDWord+0x74>)
 800acd2:	785b      	ldrb	r3, [r3, #1]
 800acd4:	041b      	lsls	r3, r3, #16
 800acd6:	441a      	add	r2, r3
 800acd8:	4b07      	ldr	r3, [pc, #28]	; (800acf8 <VL53L0X_RdDWord+0x74>)
 800acda:	789b      	ldrb	r3, [r3, #2]
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	4413      	add	r3, r2
 800ace0:	4a05      	ldr	r2, [pc, #20]	; (800acf8 <VL53L0X_RdDWord+0x74>)
 800ace2:	78d2      	ldrb	r2, [r2, #3]
 800ace4:	441a      	add	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800acea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3718      	adds	r7, #24
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20000b80 	.word	0x20000b80

0800acfc <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ad04:	2300      	movs	r3, #0
 800ad06:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ad08:	2002      	movs	r0, #2
 800ad0a:	f7f6 fc4b 	bl	80015a4 <HAL_Delay>
    return status;
 800ad0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <atoi>:
 800ad1a:	220a      	movs	r2, #10
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	f000 b8f5 	b.w	800af0c <strtol>
	...

0800ad24 <__errno>:
 800ad24:	4b01      	ldr	r3, [pc, #4]	; (800ad2c <__errno+0x8>)
 800ad26:	6818      	ldr	r0, [r3, #0]
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	200002d4 	.word	0x200002d4

0800ad30 <__libc_init_array>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	4e0d      	ldr	r6, [pc, #52]	; (800ad68 <__libc_init_array+0x38>)
 800ad34:	4c0d      	ldr	r4, [pc, #52]	; (800ad6c <__libc_init_array+0x3c>)
 800ad36:	1ba4      	subs	r4, r4, r6
 800ad38:	10a4      	asrs	r4, r4, #2
 800ad3a:	2500      	movs	r5, #0
 800ad3c:	42a5      	cmp	r5, r4
 800ad3e:	d109      	bne.n	800ad54 <__libc_init_array+0x24>
 800ad40:	4e0b      	ldr	r6, [pc, #44]	; (800ad70 <__libc_init_array+0x40>)
 800ad42:	4c0c      	ldr	r4, [pc, #48]	; (800ad74 <__libc_init_array+0x44>)
 800ad44:	f000 fcf6 	bl	800b734 <_init>
 800ad48:	1ba4      	subs	r4, r4, r6
 800ad4a:	10a4      	asrs	r4, r4, #2
 800ad4c:	2500      	movs	r5, #0
 800ad4e:	42a5      	cmp	r5, r4
 800ad50:	d105      	bne.n	800ad5e <__libc_init_array+0x2e>
 800ad52:	bd70      	pop	{r4, r5, r6, pc}
 800ad54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad58:	4798      	blx	r3
 800ad5a:	3501      	adds	r5, #1
 800ad5c:	e7ee      	b.n	800ad3c <__libc_init_array+0xc>
 800ad5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad62:	4798      	blx	r3
 800ad64:	3501      	adds	r5, #1
 800ad66:	e7f2      	b.n	800ad4e <__libc_init_array+0x1e>
 800ad68:	0800b914 	.word	0x0800b914
 800ad6c:	0800b914 	.word	0x0800b914
 800ad70:	0800b914 	.word	0x0800b914
 800ad74:	0800b918 	.word	0x0800b918

0800ad78 <memcpy>:
 800ad78:	b510      	push	{r4, lr}
 800ad7a:	1e43      	subs	r3, r0, #1
 800ad7c:	440a      	add	r2, r1
 800ad7e:	4291      	cmp	r1, r2
 800ad80:	d100      	bne.n	800ad84 <memcpy+0xc>
 800ad82:	bd10      	pop	{r4, pc}
 800ad84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad8c:	e7f7      	b.n	800ad7e <memcpy+0x6>

0800ad8e <memset>:
 800ad8e:	4402      	add	r2, r0
 800ad90:	4603      	mov	r3, r0
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d100      	bne.n	800ad98 <memset+0xa>
 800ad96:	4770      	bx	lr
 800ad98:	f803 1b01 	strb.w	r1, [r3], #1
 800ad9c:	e7f9      	b.n	800ad92 <memset+0x4>
	...

0800ada0 <siprintf>:
 800ada0:	b40e      	push	{r1, r2, r3}
 800ada2:	b500      	push	{lr}
 800ada4:	b09c      	sub	sp, #112	; 0x70
 800ada6:	ab1d      	add	r3, sp, #116	; 0x74
 800ada8:	9002      	str	r0, [sp, #8]
 800adaa:	9006      	str	r0, [sp, #24]
 800adac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800adb0:	4809      	ldr	r0, [pc, #36]	; (800add8 <siprintf+0x38>)
 800adb2:	9107      	str	r1, [sp, #28]
 800adb4:	9104      	str	r1, [sp, #16]
 800adb6:	4909      	ldr	r1, [pc, #36]	; (800addc <siprintf+0x3c>)
 800adb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adbc:	9105      	str	r1, [sp, #20]
 800adbe:	6800      	ldr	r0, [r0, #0]
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	a902      	add	r1, sp, #8
 800adc4:	f000 f928 	bl	800b018 <_svfiprintf_r>
 800adc8:	9b02      	ldr	r3, [sp, #8]
 800adca:	2200      	movs	r2, #0
 800adcc:	701a      	strb	r2, [r3, #0]
 800adce:	b01c      	add	sp, #112	; 0x70
 800add0:	f85d eb04 	ldr.w	lr, [sp], #4
 800add4:	b003      	add	sp, #12
 800add6:	4770      	bx	lr
 800add8:	200002d4 	.word	0x200002d4
 800addc:	ffff0208 	.word	0xffff0208

0800ade0 <strcpy>:
 800ade0:	4603      	mov	r3, r0
 800ade2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ade6:	f803 2b01 	strb.w	r2, [r3], #1
 800adea:	2a00      	cmp	r2, #0
 800adec:	d1f9      	bne.n	800ade2 <strcpy+0x2>
 800adee:	4770      	bx	lr

0800adf0 <strncmp>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	b16a      	cbz	r2, 800ae10 <strncmp+0x20>
 800adf4:	3901      	subs	r1, #1
 800adf6:	1884      	adds	r4, r0, r2
 800adf8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800adfc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d103      	bne.n	800ae0c <strncmp+0x1c>
 800ae04:	42a0      	cmp	r0, r4
 800ae06:	d001      	beq.n	800ae0c <strncmp+0x1c>
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1f5      	bne.n	800adf8 <strncmp+0x8>
 800ae0c:	1a98      	subs	r0, r3, r2
 800ae0e:	bd10      	pop	{r4, pc}
 800ae10:	4610      	mov	r0, r2
 800ae12:	e7fc      	b.n	800ae0e <strncmp+0x1e>

0800ae14 <_strtol_l.isra.0>:
 800ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae18:	4680      	mov	r8, r0
 800ae1a:	4689      	mov	r9, r1
 800ae1c:	4692      	mov	sl, r2
 800ae1e:	461e      	mov	r6, r3
 800ae20:	460f      	mov	r7, r1
 800ae22:	463d      	mov	r5, r7
 800ae24:	9808      	ldr	r0, [sp, #32]
 800ae26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae2a:	f000 f885 	bl	800af38 <__locale_ctype_ptr_l>
 800ae2e:	4420      	add	r0, r4
 800ae30:	7843      	ldrb	r3, [r0, #1]
 800ae32:	f013 0308 	ands.w	r3, r3, #8
 800ae36:	d132      	bne.n	800ae9e <_strtol_l.isra.0+0x8a>
 800ae38:	2c2d      	cmp	r4, #45	; 0x2d
 800ae3a:	d132      	bne.n	800aea2 <_strtol_l.isra.0+0x8e>
 800ae3c:	787c      	ldrb	r4, [r7, #1]
 800ae3e:	1cbd      	adds	r5, r7, #2
 800ae40:	2201      	movs	r2, #1
 800ae42:	2e00      	cmp	r6, #0
 800ae44:	d05d      	beq.n	800af02 <_strtol_l.isra.0+0xee>
 800ae46:	2e10      	cmp	r6, #16
 800ae48:	d109      	bne.n	800ae5e <_strtol_l.isra.0+0x4a>
 800ae4a:	2c30      	cmp	r4, #48	; 0x30
 800ae4c:	d107      	bne.n	800ae5e <_strtol_l.isra.0+0x4a>
 800ae4e:	782b      	ldrb	r3, [r5, #0]
 800ae50:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ae54:	2b58      	cmp	r3, #88	; 0x58
 800ae56:	d14f      	bne.n	800aef8 <_strtol_l.isra.0+0xe4>
 800ae58:	786c      	ldrb	r4, [r5, #1]
 800ae5a:	2610      	movs	r6, #16
 800ae5c:	3502      	adds	r5, #2
 800ae5e:	2a00      	cmp	r2, #0
 800ae60:	bf14      	ite	ne
 800ae62:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ae66:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ae6a:	2700      	movs	r7, #0
 800ae6c:	fbb1 fcf6 	udiv	ip, r1, r6
 800ae70:	4638      	mov	r0, r7
 800ae72:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ae76:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ae7a:	2b09      	cmp	r3, #9
 800ae7c:	d817      	bhi.n	800aeae <_strtol_l.isra.0+0x9a>
 800ae7e:	461c      	mov	r4, r3
 800ae80:	42a6      	cmp	r6, r4
 800ae82:	dd23      	ble.n	800aecc <_strtol_l.isra.0+0xb8>
 800ae84:	1c7b      	adds	r3, r7, #1
 800ae86:	d007      	beq.n	800ae98 <_strtol_l.isra.0+0x84>
 800ae88:	4584      	cmp	ip, r0
 800ae8a:	d31c      	bcc.n	800aec6 <_strtol_l.isra.0+0xb2>
 800ae8c:	d101      	bne.n	800ae92 <_strtol_l.isra.0+0x7e>
 800ae8e:	45a6      	cmp	lr, r4
 800ae90:	db19      	blt.n	800aec6 <_strtol_l.isra.0+0xb2>
 800ae92:	fb00 4006 	mla	r0, r0, r6, r4
 800ae96:	2701      	movs	r7, #1
 800ae98:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae9c:	e7eb      	b.n	800ae76 <_strtol_l.isra.0+0x62>
 800ae9e:	462f      	mov	r7, r5
 800aea0:	e7bf      	b.n	800ae22 <_strtol_l.isra.0+0xe>
 800aea2:	2c2b      	cmp	r4, #43	; 0x2b
 800aea4:	bf04      	itt	eq
 800aea6:	1cbd      	addeq	r5, r7, #2
 800aea8:	787c      	ldrbeq	r4, [r7, #1]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	e7c9      	b.n	800ae42 <_strtol_l.isra.0+0x2e>
 800aeae:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800aeb2:	2b19      	cmp	r3, #25
 800aeb4:	d801      	bhi.n	800aeba <_strtol_l.isra.0+0xa6>
 800aeb6:	3c37      	subs	r4, #55	; 0x37
 800aeb8:	e7e2      	b.n	800ae80 <_strtol_l.isra.0+0x6c>
 800aeba:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800aebe:	2b19      	cmp	r3, #25
 800aec0:	d804      	bhi.n	800aecc <_strtol_l.isra.0+0xb8>
 800aec2:	3c57      	subs	r4, #87	; 0x57
 800aec4:	e7dc      	b.n	800ae80 <_strtol_l.isra.0+0x6c>
 800aec6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aeca:	e7e5      	b.n	800ae98 <_strtol_l.isra.0+0x84>
 800aecc:	1c7b      	adds	r3, r7, #1
 800aece:	d108      	bne.n	800aee2 <_strtol_l.isra.0+0xce>
 800aed0:	2322      	movs	r3, #34	; 0x22
 800aed2:	f8c8 3000 	str.w	r3, [r8]
 800aed6:	4608      	mov	r0, r1
 800aed8:	f1ba 0f00 	cmp.w	sl, #0
 800aedc:	d107      	bne.n	800aeee <_strtol_l.isra.0+0xda>
 800aede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee2:	b102      	cbz	r2, 800aee6 <_strtol_l.isra.0+0xd2>
 800aee4:	4240      	negs	r0, r0
 800aee6:	f1ba 0f00 	cmp.w	sl, #0
 800aeea:	d0f8      	beq.n	800aede <_strtol_l.isra.0+0xca>
 800aeec:	b10f      	cbz	r7, 800aef2 <_strtol_l.isra.0+0xde>
 800aeee:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800aef2:	f8ca 9000 	str.w	r9, [sl]
 800aef6:	e7f2      	b.n	800aede <_strtol_l.isra.0+0xca>
 800aef8:	2430      	movs	r4, #48	; 0x30
 800aefa:	2e00      	cmp	r6, #0
 800aefc:	d1af      	bne.n	800ae5e <_strtol_l.isra.0+0x4a>
 800aefe:	2608      	movs	r6, #8
 800af00:	e7ad      	b.n	800ae5e <_strtol_l.isra.0+0x4a>
 800af02:	2c30      	cmp	r4, #48	; 0x30
 800af04:	d0a3      	beq.n	800ae4e <_strtol_l.isra.0+0x3a>
 800af06:	260a      	movs	r6, #10
 800af08:	e7a9      	b.n	800ae5e <_strtol_l.isra.0+0x4a>
	...

0800af0c <strtol>:
 800af0c:	4b08      	ldr	r3, [pc, #32]	; (800af30 <strtol+0x24>)
 800af0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af10:	681c      	ldr	r4, [r3, #0]
 800af12:	4d08      	ldr	r5, [pc, #32]	; (800af34 <strtol+0x28>)
 800af14:	6a23      	ldr	r3, [r4, #32]
 800af16:	2b00      	cmp	r3, #0
 800af18:	bf08      	it	eq
 800af1a:	462b      	moveq	r3, r5
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	4613      	mov	r3, r2
 800af20:	460a      	mov	r2, r1
 800af22:	4601      	mov	r1, r0
 800af24:	4620      	mov	r0, r4
 800af26:	f7ff ff75 	bl	800ae14 <_strtol_l.isra.0>
 800af2a:	b003      	add	sp, #12
 800af2c:	bd30      	pop	{r4, r5, pc}
 800af2e:	bf00      	nop
 800af30:	200002d4 	.word	0x200002d4
 800af34:	20000338 	.word	0x20000338

0800af38 <__locale_ctype_ptr_l>:
 800af38:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800af3c:	4770      	bx	lr

0800af3e <__ascii_mbtowc>:
 800af3e:	b082      	sub	sp, #8
 800af40:	b901      	cbnz	r1, 800af44 <__ascii_mbtowc+0x6>
 800af42:	a901      	add	r1, sp, #4
 800af44:	b142      	cbz	r2, 800af58 <__ascii_mbtowc+0x1a>
 800af46:	b14b      	cbz	r3, 800af5c <__ascii_mbtowc+0x1e>
 800af48:	7813      	ldrb	r3, [r2, #0]
 800af4a:	600b      	str	r3, [r1, #0]
 800af4c:	7812      	ldrb	r2, [r2, #0]
 800af4e:	1c10      	adds	r0, r2, #0
 800af50:	bf18      	it	ne
 800af52:	2001      	movne	r0, #1
 800af54:	b002      	add	sp, #8
 800af56:	4770      	bx	lr
 800af58:	4610      	mov	r0, r2
 800af5a:	e7fb      	b.n	800af54 <__ascii_mbtowc+0x16>
 800af5c:	f06f 0001 	mvn.w	r0, #1
 800af60:	e7f8      	b.n	800af54 <__ascii_mbtowc+0x16>

0800af62 <__ssputs_r>:
 800af62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af66:	688e      	ldr	r6, [r1, #8]
 800af68:	429e      	cmp	r6, r3
 800af6a:	4682      	mov	sl, r0
 800af6c:	460c      	mov	r4, r1
 800af6e:	4690      	mov	r8, r2
 800af70:	4699      	mov	r9, r3
 800af72:	d837      	bhi.n	800afe4 <__ssputs_r+0x82>
 800af74:	898a      	ldrh	r2, [r1, #12]
 800af76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af7a:	d031      	beq.n	800afe0 <__ssputs_r+0x7e>
 800af7c:	6825      	ldr	r5, [r4, #0]
 800af7e:	6909      	ldr	r1, [r1, #16]
 800af80:	1a6f      	subs	r7, r5, r1
 800af82:	6965      	ldr	r5, [r4, #20]
 800af84:	2302      	movs	r3, #2
 800af86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af8a:	fb95 f5f3 	sdiv	r5, r5, r3
 800af8e:	f109 0301 	add.w	r3, r9, #1
 800af92:	443b      	add	r3, r7
 800af94:	429d      	cmp	r5, r3
 800af96:	bf38      	it	cc
 800af98:	461d      	movcc	r5, r3
 800af9a:	0553      	lsls	r3, r2, #21
 800af9c:	d530      	bpl.n	800b000 <__ssputs_r+0x9e>
 800af9e:	4629      	mov	r1, r5
 800afa0:	f000 fb2e 	bl	800b600 <_malloc_r>
 800afa4:	4606      	mov	r6, r0
 800afa6:	b950      	cbnz	r0, 800afbe <__ssputs_r+0x5c>
 800afa8:	230c      	movs	r3, #12
 800afaa:	f8ca 3000 	str.w	r3, [sl]
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb4:	81a3      	strh	r3, [r4, #12]
 800afb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afbe:	463a      	mov	r2, r7
 800afc0:	6921      	ldr	r1, [r4, #16]
 800afc2:	f7ff fed9 	bl	800ad78 <memcpy>
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afd0:	81a3      	strh	r3, [r4, #12]
 800afd2:	6126      	str	r6, [r4, #16]
 800afd4:	6165      	str	r5, [r4, #20]
 800afd6:	443e      	add	r6, r7
 800afd8:	1bed      	subs	r5, r5, r7
 800afda:	6026      	str	r6, [r4, #0]
 800afdc:	60a5      	str	r5, [r4, #8]
 800afde:	464e      	mov	r6, r9
 800afe0:	454e      	cmp	r6, r9
 800afe2:	d900      	bls.n	800afe6 <__ssputs_r+0x84>
 800afe4:	464e      	mov	r6, r9
 800afe6:	4632      	mov	r2, r6
 800afe8:	4641      	mov	r1, r8
 800afea:	6820      	ldr	r0, [r4, #0]
 800afec:	f000 faa1 	bl	800b532 <memmove>
 800aff0:	68a3      	ldr	r3, [r4, #8]
 800aff2:	1b9b      	subs	r3, r3, r6
 800aff4:	60a3      	str	r3, [r4, #8]
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	441e      	add	r6, r3
 800affa:	6026      	str	r6, [r4, #0]
 800affc:	2000      	movs	r0, #0
 800affe:	e7dc      	b.n	800afba <__ssputs_r+0x58>
 800b000:	462a      	mov	r2, r5
 800b002:	f000 fb57 	bl	800b6b4 <_realloc_r>
 800b006:	4606      	mov	r6, r0
 800b008:	2800      	cmp	r0, #0
 800b00a:	d1e2      	bne.n	800afd2 <__ssputs_r+0x70>
 800b00c:	6921      	ldr	r1, [r4, #16]
 800b00e:	4650      	mov	r0, sl
 800b010:	f000 faa8 	bl	800b564 <_free_r>
 800b014:	e7c8      	b.n	800afa8 <__ssputs_r+0x46>
	...

0800b018 <_svfiprintf_r>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	461d      	mov	r5, r3
 800b01e:	898b      	ldrh	r3, [r1, #12]
 800b020:	061f      	lsls	r7, r3, #24
 800b022:	b09d      	sub	sp, #116	; 0x74
 800b024:	4680      	mov	r8, r0
 800b026:	460c      	mov	r4, r1
 800b028:	4616      	mov	r6, r2
 800b02a:	d50f      	bpl.n	800b04c <_svfiprintf_r+0x34>
 800b02c:	690b      	ldr	r3, [r1, #16]
 800b02e:	b96b      	cbnz	r3, 800b04c <_svfiprintf_r+0x34>
 800b030:	2140      	movs	r1, #64	; 0x40
 800b032:	f000 fae5 	bl	800b600 <_malloc_r>
 800b036:	6020      	str	r0, [r4, #0]
 800b038:	6120      	str	r0, [r4, #16]
 800b03a:	b928      	cbnz	r0, 800b048 <_svfiprintf_r+0x30>
 800b03c:	230c      	movs	r3, #12
 800b03e:	f8c8 3000 	str.w	r3, [r8]
 800b042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b046:	e0c8      	b.n	800b1da <_svfiprintf_r+0x1c2>
 800b048:	2340      	movs	r3, #64	; 0x40
 800b04a:	6163      	str	r3, [r4, #20]
 800b04c:	2300      	movs	r3, #0
 800b04e:	9309      	str	r3, [sp, #36]	; 0x24
 800b050:	2320      	movs	r3, #32
 800b052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b056:	2330      	movs	r3, #48	; 0x30
 800b058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b05c:	9503      	str	r5, [sp, #12]
 800b05e:	f04f 0b01 	mov.w	fp, #1
 800b062:	4637      	mov	r7, r6
 800b064:	463d      	mov	r5, r7
 800b066:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b06a:	b10b      	cbz	r3, 800b070 <_svfiprintf_r+0x58>
 800b06c:	2b25      	cmp	r3, #37	; 0x25
 800b06e:	d13e      	bne.n	800b0ee <_svfiprintf_r+0xd6>
 800b070:	ebb7 0a06 	subs.w	sl, r7, r6
 800b074:	d00b      	beq.n	800b08e <_svfiprintf_r+0x76>
 800b076:	4653      	mov	r3, sl
 800b078:	4632      	mov	r2, r6
 800b07a:	4621      	mov	r1, r4
 800b07c:	4640      	mov	r0, r8
 800b07e:	f7ff ff70 	bl	800af62 <__ssputs_r>
 800b082:	3001      	adds	r0, #1
 800b084:	f000 80a4 	beq.w	800b1d0 <_svfiprintf_r+0x1b8>
 800b088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08a:	4453      	add	r3, sl
 800b08c:	9309      	str	r3, [sp, #36]	; 0x24
 800b08e:	783b      	ldrb	r3, [r7, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	f000 809d 	beq.w	800b1d0 <_svfiprintf_r+0x1b8>
 800b096:	2300      	movs	r3, #0
 800b098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b09c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	9307      	str	r3, [sp, #28]
 800b0a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0a8:	931a      	str	r3, [sp, #104]	; 0x68
 800b0aa:	462f      	mov	r7, r5
 800b0ac:	2205      	movs	r2, #5
 800b0ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b0b2:	4850      	ldr	r0, [pc, #320]	; (800b1f4 <_svfiprintf_r+0x1dc>)
 800b0b4:	f7f5 f88c 	bl	80001d0 <memchr>
 800b0b8:	9b04      	ldr	r3, [sp, #16]
 800b0ba:	b9d0      	cbnz	r0, 800b0f2 <_svfiprintf_r+0xda>
 800b0bc:	06d9      	lsls	r1, r3, #27
 800b0be:	bf44      	itt	mi
 800b0c0:	2220      	movmi	r2, #32
 800b0c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b0c6:	071a      	lsls	r2, r3, #28
 800b0c8:	bf44      	itt	mi
 800b0ca:	222b      	movmi	r2, #43	; 0x2b
 800b0cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b0d0:	782a      	ldrb	r2, [r5, #0]
 800b0d2:	2a2a      	cmp	r2, #42	; 0x2a
 800b0d4:	d015      	beq.n	800b102 <_svfiprintf_r+0xea>
 800b0d6:	9a07      	ldr	r2, [sp, #28]
 800b0d8:	462f      	mov	r7, r5
 800b0da:	2000      	movs	r0, #0
 800b0dc:	250a      	movs	r5, #10
 800b0de:	4639      	mov	r1, r7
 800b0e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e4:	3b30      	subs	r3, #48	; 0x30
 800b0e6:	2b09      	cmp	r3, #9
 800b0e8:	d94d      	bls.n	800b186 <_svfiprintf_r+0x16e>
 800b0ea:	b1b8      	cbz	r0, 800b11c <_svfiprintf_r+0x104>
 800b0ec:	e00f      	b.n	800b10e <_svfiprintf_r+0xf6>
 800b0ee:	462f      	mov	r7, r5
 800b0f0:	e7b8      	b.n	800b064 <_svfiprintf_r+0x4c>
 800b0f2:	4a40      	ldr	r2, [pc, #256]	; (800b1f4 <_svfiprintf_r+0x1dc>)
 800b0f4:	1a80      	subs	r0, r0, r2
 800b0f6:	fa0b f000 	lsl.w	r0, fp, r0
 800b0fa:	4318      	orrs	r0, r3
 800b0fc:	9004      	str	r0, [sp, #16]
 800b0fe:	463d      	mov	r5, r7
 800b100:	e7d3      	b.n	800b0aa <_svfiprintf_r+0x92>
 800b102:	9a03      	ldr	r2, [sp, #12]
 800b104:	1d11      	adds	r1, r2, #4
 800b106:	6812      	ldr	r2, [r2, #0]
 800b108:	9103      	str	r1, [sp, #12]
 800b10a:	2a00      	cmp	r2, #0
 800b10c:	db01      	blt.n	800b112 <_svfiprintf_r+0xfa>
 800b10e:	9207      	str	r2, [sp, #28]
 800b110:	e004      	b.n	800b11c <_svfiprintf_r+0x104>
 800b112:	4252      	negs	r2, r2
 800b114:	f043 0302 	orr.w	r3, r3, #2
 800b118:	9207      	str	r2, [sp, #28]
 800b11a:	9304      	str	r3, [sp, #16]
 800b11c:	783b      	ldrb	r3, [r7, #0]
 800b11e:	2b2e      	cmp	r3, #46	; 0x2e
 800b120:	d10c      	bne.n	800b13c <_svfiprintf_r+0x124>
 800b122:	787b      	ldrb	r3, [r7, #1]
 800b124:	2b2a      	cmp	r3, #42	; 0x2a
 800b126:	d133      	bne.n	800b190 <_svfiprintf_r+0x178>
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	1d1a      	adds	r2, r3, #4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	9203      	str	r2, [sp, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	bfb8      	it	lt
 800b134:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b138:	3702      	adds	r7, #2
 800b13a:	9305      	str	r3, [sp, #20]
 800b13c:	4d2e      	ldr	r5, [pc, #184]	; (800b1f8 <_svfiprintf_r+0x1e0>)
 800b13e:	7839      	ldrb	r1, [r7, #0]
 800b140:	2203      	movs	r2, #3
 800b142:	4628      	mov	r0, r5
 800b144:	f7f5 f844 	bl	80001d0 <memchr>
 800b148:	b138      	cbz	r0, 800b15a <_svfiprintf_r+0x142>
 800b14a:	2340      	movs	r3, #64	; 0x40
 800b14c:	1b40      	subs	r0, r0, r5
 800b14e:	fa03 f000 	lsl.w	r0, r3, r0
 800b152:	9b04      	ldr	r3, [sp, #16]
 800b154:	4303      	orrs	r3, r0
 800b156:	3701      	adds	r7, #1
 800b158:	9304      	str	r3, [sp, #16]
 800b15a:	7839      	ldrb	r1, [r7, #0]
 800b15c:	4827      	ldr	r0, [pc, #156]	; (800b1fc <_svfiprintf_r+0x1e4>)
 800b15e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b162:	2206      	movs	r2, #6
 800b164:	1c7e      	adds	r6, r7, #1
 800b166:	f7f5 f833 	bl	80001d0 <memchr>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d038      	beq.n	800b1e0 <_svfiprintf_r+0x1c8>
 800b16e:	4b24      	ldr	r3, [pc, #144]	; (800b200 <_svfiprintf_r+0x1e8>)
 800b170:	bb13      	cbnz	r3, 800b1b8 <_svfiprintf_r+0x1a0>
 800b172:	9b03      	ldr	r3, [sp, #12]
 800b174:	3307      	adds	r3, #7
 800b176:	f023 0307 	bic.w	r3, r3, #7
 800b17a:	3308      	adds	r3, #8
 800b17c:	9303      	str	r3, [sp, #12]
 800b17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b180:	444b      	add	r3, r9
 800b182:	9309      	str	r3, [sp, #36]	; 0x24
 800b184:	e76d      	b.n	800b062 <_svfiprintf_r+0x4a>
 800b186:	fb05 3202 	mla	r2, r5, r2, r3
 800b18a:	2001      	movs	r0, #1
 800b18c:	460f      	mov	r7, r1
 800b18e:	e7a6      	b.n	800b0de <_svfiprintf_r+0xc6>
 800b190:	2300      	movs	r3, #0
 800b192:	3701      	adds	r7, #1
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	4619      	mov	r1, r3
 800b198:	250a      	movs	r5, #10
 800b19a:	4638      	mov	r0, r7
 800b19c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a0:	3a30      	subs	r2, #48	; 0x30
 800b1a2:	2a09      	cmp	r2, #9
 800b1a4:	d903      	bls.n	800b1ae <_svfiprintf_r+0x196>
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d0c8      	beq.n	800b13c <_svfiprintf_r+0x124>
 800b1aa:	9105      	str	r1, [sp, #20]
 800b1ac:	e7c6      	b.n	800b13c <_svfiprintf_r+0x124>
 800b1ae:	fb05 2101 	mla	r1, r5, r1, r2
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	e7f0      	b.n	800b19a <_svfiprintf_r+0x182>
 800b1b8:	ab03      	add	r3, sp, #12
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	4622      	mov	r2, r4
 800b1be:	4b11      	ldr	r3, [pc, #68]	; (800b204 <_svfiprintf_r+0x1ec>)
 800b1c0:	a904      	add	r1, sp, #16
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	f3af 8000 	nop.w
 800b1c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b1cc:	4681      	mov	r9, r0
 800b1ce:	d1d6      	bne.n	800b17e <_svfiprintf_r+0x166>
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	065b      	lsls	r3, r3, #25
 800b1d4:	f53f af35 	bmi.w	800b042 <_svfiprintf_r+0x2a>
 800b1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1da:	b01d      	add	sp, #116	; 0x74
 800b1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e0:	ab03      	add	r3, sp, #12
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	4622      	mov	r2, r4
 800b1e6:	4b07      	ldr	r3, [pc, #28]	; (800b204 <_svfiprintf_r+0x1ec>)
 800b1e8:	a904      	add	r1, sp, #16
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	f000 f882 	bl	800b2f4 <_printf_i>
 800b1f0:	e7ea      	b.n	800b1c8 <_svfiprintf_r+0x1b0>
 800b1f2:	bf00      	nop
 800b1f4:	0800b7de 	.word	0x0800b7de
 800b1f8:	0800b7e4 	.word	0x0800b7e4
 800b1fc:	0800b7e8 	.word	0x0800b7e8
 800b200:	00000000 	.word	0x00000000
 800b204:	0800af63 	.word	0x0800af63

0800b208 <_printf_common>:
 800b208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b20c:	4691      	mov	r9, r2
 800b20e:	461f      	mov	r7, r3
 800b210:	688a      	ldr	r2, [r1, #8]
 800b212:	690b      	ldr	r3, [r1, #16]
 800b214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b218:	4293      	cmp	r3, r2
 800b21a:	bfb8      	it	lt
 800b21c:	4613      	movlt	r3, r2
 800b21e:	f8c9 3000 	str.w	r3, [r9]
 800b222:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b226:	4606      	mov	r6, r0
 800b228:	460c      	mov	r4, r1
 800b22a:	b112      	cbz	r2, 800b232 <_printf_common+0x2a>
 800b22c:	3301      	adds	r3, #1
 800b22e:	f8c9 3000 	str.w	r3, [r9]
 800b232:	6823      	ldr	r3, [r4, #0]
 800b234:	0699      	lsls	r1, r3, #26
 800b236:	bf42      	ittt	mi
 800b238:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b23c:	3302      	addmi	r3, #2
 800b23e:	f8c9 3000 	strmi.w	r3, [r9]
 800b242:	6825      	ldr	r5, [r4, #0]
 800b244:	f015 0506 	ands.w	r5, r5, #6
 800b248:	d107      	bne.n	800b25a <_printf_common+0x52>
 800b24a:	f104 0a19 	add.w	sl, r4, #25
 800b24e:	68e3      	ldr	r3, [r4, #12]
 800b250:	f8d9 2000 	ldr.w	r2, [r9]
 800b254:	1a9b      	subs	r3, r3, r2
 800b256:	42ab      	cmp	r3, r5
 800b258:	dc28      	bgt.n	800b2ac <_printf_common+0xa4>
 800b25a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b25e:	6822      	ldr	r2, [r4, #0]
 800b260:	3300      	adds	r3, #0
 800b262:	bf18      	it	ne
 800b264:	2301      	movne	r3, #1
 800b266:	0692      	lsls	r2, r2, #26
 800b268:	d42d      	bmi.n	800b2c6 <_printf_common+0xbe>
 800b26a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b26e:	4639      	mov	r1, r7
 800b270:	4630      	mov	r0, r6
 800b272:	47c0      	blx	r8
 800b274:	3001      	adds	r0, #1
 800b276:	d020      	beq.n	800b2ba <_printf_common+0xb2>
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	68e5      	ldr	r5, [r4, #12]
 800b27c:	f8d9 2000 	ldr.w	r2, [r9]
 800b280:	f003 0306 	and.w	r3, r3, #6
 800b284:	2b04      	cmp	r3, #4
 800b286:	bf08      	it	eq
 800b288:	1aad      	subeq	r5, r5, r2
 800b28a:	68a3      	ldr	r3, [r4, #8]
 800b28c:	6922      	ldr	r2, [r4, #16]
 800b28e:	bf0c      	ite	eq
 800b290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b294:	2500      	movne	r5, #0
 800b296:	4293      	cmp	r3, r2
 800b298:	bfc4      	itt	gt
 800b29a:	1a9b      	subgt	r3, r3, r2
 800b29c:	18ed      	addgt	r5, r5, r3
 800b29e:	f04f 0900 	mov.w	r9, #0
 800b2a2:	341a      	adds	r4, #26
 800b2a4:	454d      	cmp	r5, r9
 800b2a6:	d11a      	bne.n	800b2de <_printf_common+0xd6>
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	e008      	b.n	800b2be <_printf_common+0xb6>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	4652      	mov	r2, sl
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	47c0      	blx	r8
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	d103      	bne.n	800b2c2 <_printf_common+0xba>
 800b2ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c2:	3501      	adds	r5, #1
 800b2c4:	e7c3      	b.n	800b24e <_printf_common+0x46>
 800b2c6:	18e1      	adds	r1, r4, r3
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	2030      	movs	r0, #48	; 0x30
 800b2cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2d0:	4422      	add	r2, r4
 800b2d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2da:	3302      	adds	r3, #2
 800b2dc:	e7c5      	b.n	800b26a <_printf_common+0x62>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	47c0      	blx	r8
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d0e6      	beq.n	800b2ba <_printf_common+0xb2>
 800b2ec:	f109 0901 	add.w	r9, r9, #1
 800b2f0:	e7d8      	b.n	800b2a4 <_printf_common+0x9c>
	...

0800b2f4 <_printf_i>:
 800b2f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	7e09      	ldrb	r1, [r1, #24]
 800b300:	b085      	sub	sp, #20
 800b302:	296e      	cmp	r1, #110	; 0x6e
 800b304:	4617      	mov	r7, r2
 800b306:	4606      	mov	r6, r0
 800b308:	4698      	mov	r8, r3
 800b30a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b30c:	f000 80b3 	beq.w	800b476 <_printf_i+0x182>
 800b310:	d822      	bhi.n	800b358 <_printf_i+0x64>
 800b312:	2963      	cmp	r1, #99	; 0x63
 800b314:	d036      	beq.n	800b384 <_printf_i+0x90>
 800b316:	d80a      	bhi.n	800b32e <_printf_i+0x3a>
 800b318:	2900      	cmp	r1, #0
 800b31a:	f000 80b9 	beq.w	800b490 <_printf_i+0x19c>
 800b31e:	2958      	cmp	r1, #88	; 0x58
 800b320:	f000 8083 	beq.w	800b42a <_printf_i+0x136>
 800b324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b328:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b32c:	e032      	b.n	800b394 <_printf_i+0xa0>
 800b32e:	2964      	cmp	r1, #100	; 0x64
 800b330:	d001      	beq.n	800b336 <_printf_i+0x42>
 800b332:	2969      	cmp	r1, #105	; 0x69
 800b334:	d1f6      	bne.n	800b324 <_printf_i+0x30>
 800b336:	6820      	ldr	r0, [r4, #0]
 800b338:	6813      	ldr	r3, [r2, #0]
 800b33a:	0605      	lsls	r5, r0, #24
 800b33c:	f103 0104 	add.w	r1, r3, #4
 800b340:	d52a      	bpl.n	800b398 <_printf_i+0xa4>
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6011      	str	r1, [r2, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	da03      	bge.n	800b352 <_printf_i+0x5e>
 800b34a:	222d      	movs	r2, #45	; 0x2d
 800b34c:	425b      	negs	r3, r3
 800b34e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b352:	486f      	ldr	r0, [pc, #444]	; (800b510 <_printf_i+0x21c>)
 800b354:	220a      	movs	r2, #10
 800b356:	e039      	b.n	800b3cc <_printf_i+0xd8>
 800b358:	2973      	cmp	r1, #115	; 0x73
 800b35a:	f000 809d 	beq.w	800b498 <_printf_i+0x1a4>
 800b35e:	d808      	bhi.n	800b372 <_printf_i+0x7e>
 800b360:	296f      	cmp	r1, #111	; 0x6f
 800b362:	d020      	beq.n	800b3a6 <_printf_i+0xb2>
 800b364:	2970      	cmp	r1, #112	; 0x70
 800b366:	d1dd      	bne.n	800b324 <_printf_i+0x30>
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	f043 0320 	orr.w	r3, r3, #32
 800b36e:	6023      	str	r3, [r4, #0]
 800b370:	e003      	b.n	800b37a <_printf_i+0x86>
 800b372:	2975      	cmp	r1, #117	; 0x75
 800b374:	d017      	beq.n	800b3a6 <_printf_i+0xb2>
 800b376:	2978      	cmp	r1, #120	; 0x78
 800b378:	d1d4      	bne.n	800b324 <_printf_i+0x30>
 800b37a:	2378      	movs	r3, #120	; 0x78
 800b37c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b380:	4864      	ldr	r0, [pc, #400]	; (800b514 <_printf_i+0x220>)
 800b382:	e055      	b.n	800b430 <_printf_i+0x13c>
 800b384:	6813      	ldr	r3, [r2, #0]
 800b386:	1d19      	adds	r1, r3, #4
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6011      	str	r1, [r2, #0]
 800b38c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b394:	2301      	movs	r3, #1
 800b396:	e08c      	b.n	800b4b2 <_printf_i+0x1be>
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6011      	str	r1, [r2, #0]
 800b39c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b3a0:	bf18      	it	ne
 800b3a2:	b21b      	sxthne	r3, r3
 800b3a4:	e7cf      	b.n	800b346 <_printf_i+0x52>
 800b3a6:	6813      	ldr	r3, [r2, #0]
 800b3a8:	6825      	ldr	r5, [r4, #0]
 800b3aa:	1d18      	adds	r0, r3, #4
 800b3ac:	6010      	str	r0, [r2, #0]
 800b3ae:	0628      	lsls	r0, r5, #24
 800b3b0:	d501      	bpl.n	800b3b6 <_printf_i+0xc2>
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	e002      	b.n	800b3bc <_printf_i+0xc8>
 800b3b6:	0668      	lsls	r0, r5, #25
 800b3b8:	d5fb      	bpl.n	800b3b2 <_printf_i+0xbe>
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	4854      	ldr	r0, [pc, #336]	; (800b510 <_printf_i+0x21c>)
 800b3be:	296f      	cmp	r1, #111	; 0x6f
 800b3c0:	bf14      	ite	ne
 800b3c2:	220a      	movne	r2, #10
 800b3c4:	2208      	moveq	r2, #8
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3cc:	6865      	ldr	r5, [r4, #4]
 800b3ce:	60a5      	str	r5, [r4, #8]
 800b3d0:	2d00      	cmp	r5, #0
 800b3d2:	f2c0 8095 	blt.w	800b500 <_printf_i+0x20c>
 800b3d6:	6821      	ldr	r1, [r4, #0]
 800b3d8:	f021 0104 	bic.w	r1, r1, #4
 800b3dc:	6021      	str	r1, [r4, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d13d      	bne.n	800b45e <_printf_i+0x16a>
 800b3e2:	2d00      	cmp	r5, #0
 800b3e4:	f040 808e 	bne.w	800b504 <_printf_i+0x210>
 800b3e8:	4665      	mov	r5, ip
 800b3ea:	2a08      	cmp	r2, #8
 800b3ec:	d10b      	bne.n	800b406 <_printf_i+0x112>
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	07db      	lsls	r3, r3, #31
 800b3f2:	d508      	bpl.n	800b406 <_printf_i+0x112>
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	6862      	ldr	r2, [r4, #4]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	bfde      	ittt	le
 800b3fc:	2330      	movle	r3, #48	; 0x30
 800b3fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b402:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b406:	ebac 0305 	sub.w	r3, ip, r5
 800b40a:	6123      	str	r3, [r4, #16]
 800b40c:	f8cd 8000 	str.w	r8, [sp]
 800b410:	463b      	mov	r3, r7
 800b412:	aa03      	add	r2, sp, #12
 800b414:	4621      	mov	r1, r4
 800b416:	4630      	mov	r0, r6
 800b418:	f7ff fef6 	bl	800b208 <_printf_common>
 800b41c:	3001      	adds	r0, #1
 800b41e:	d14d      	bne.n	800b4bc <_printf_i+0x1c8>
 800b420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b424:	b005      	add	sp, #20
 800b426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b42a:	4839      	ldr	r0, [pc, #228]	; (800b510 <_printf_i+0x21c>)
 800b42c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b430:	6813      	ldr	r3, [r2, #0]
 800b432:	6821      	ldr	r1, [r4, #0]
 800b434:	1d1d      	adds	r5, r3, #4
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6015      	str	r5, [r2, #0]
 800b43a:	060a      	lsls	r2, r1, #24
 800b43c:	d50b      	bpl.n	800b456 <_printf_i+0x162>
 800b43e:	07ca      	lsls	r2, r1, #31
 800b440:	bf44      	itt	mi
 800b442:	f041 0120 	orrmi.w	r1, r1, #32
 800b446:	6021      	strmi	r1, [r4, #0]
 800b448:	b91b      	cbnz	r3, 800b452 <_printf_i+0x15e>
 800b44a:	6822      	ldr	r2, [r4, #0]
 800b44c:	f022 0220 	bic.w	r2, r2, #32
 800b450:	6022      	str	r2, [r4, #0]
 800b452:	2210      	movs	r2, #16
 800b454:	e7b7      	b.n	800b3c6 <_printf_i+0xd2>
 800b456:	064d      	lsls	r5, r1, #25
 800b458:	bf48      	it	mi
 800b45a:	b29b      	uxthmi	r3, r3
 800b45c:	e7ef      	b.n	800b43e <_printf_i+0x14a>
 800b45e:	4665      	mov	r5, ip
 800b460:	fbb3 f1f2 	udiv	r1, r3, r2
 800b464:	fb02 3311 	mls	r3, r2, r1, r3
 800b468:	5cc3      	ldrb	r3, [r0, r3]
 800b46a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b46e:	460b      	mov	r3, r1
 800b470:	2900      	cmp	r1, #0
 800b472:	d1f5      	bne.n	800b460 <_printf_i+0x16c>
 800b474:	e7b9      	b.n	800b3ea <_printf_i+0xf6>
 800b476:	6813      	ldr	r3, [r2, #0]
 800b478:	6825      	ldr	r5, [r4, #0]
 800b47a:	6961      	ldr	r1, [r4, #20]
 800b47c:	1d18      	adds	r0, r3, #4
 800b47e:	6010      	str	r0, [r2, #0]
 800b480:	0628      	lsls	r0, r5, #24
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	d501      	bpl.n	800b48a <_printf_i+0x196>
 800b486:	6019      	str	r1, [r3, #0]
 800b488:	e002      	b.n	800b490 <_printf_i+0x19c>
 800b48a:	066a      	lsls	r2, r5, #25
 800b48c:	d5fb      	bpl.n	800b486 <_printf_i+0x192>
 800b48e:	8019      	strh	r1, [r3, #0]
 800b490:	2300      	movs	r3, #0
 800b492:	6123      	str	r3, [r4, #16]
 800b494:	4665      	mov	r5, ip
 800b496:	e7b9      	b.n	800b40c <_printf_i+0x118>
 800b498:	6813      	ldr	r3, [r2, #0]
 800b49a:	1d19      	adds	r1, r3, #4
 800b49c:	6011      	str	r1, [r2, #0]
 800b49e:	681d      	ldr	r5, [r3, #0]
 800b4a0:	6862      	ldr	r2, [r4, #4]
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f7f4 fe93 	bl	80001d0 <memchr>
 800b4aa:	b108      	cbz	r0, 800b4b0 <_printf_i+0x1bc>
 800b4ac:	1b40      	subs	r0, r0, r5
 800b4ae:	6060      	str	r0, [r4, #4]
 800b4b0:	6863      	ldr	r3, [r4, #4]
 800b4b2:	6123      	str	r3, [r4, #16]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4ba:	e7a7      	b.n	800b40c <_printf_i+0x118>
 800b4bc:	6923      	ldr	r3, [r4, #16]
 800b4be:	462a      	mov	r2, r5
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	47c0      	blx	r8
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d0aa      	beq.n	800b420 <_printf_i+0x12c>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	079b      	lsls	r3, r3, #30
 800b4ce:	d413      	bmi.n	800b4f8 <_printf_i+0x204>
 800b4d0:	68e0      	ldr	r0, [r4, #12]
 800b4d2:	9b03      	ldr	r3, [sp, #12]
 800b4d4:	4298      	cmp	r0, r3
 800b4d6:	bfb8      	it	lt
 800b4d8:	4618      	movlt	r0, r3
 800b4da:	e7a3      	b.n	800b424 <_printf_i+0x130>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	464a      	mov	r2, r9
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	47c0      	blx	r8
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	d09a      	beq.n	800b420 <_printf_i+0x12c>
 800b4ea:	3501      	adds	r5, #1
 800b4ec:	68e3      	ldr	r3, [r4, #12]
 800b4ee:	9a03      	ldr	r2, [sp, #12]
 800b4f0:	1a9b      	subs	r3, r3, r2
 800b4f2:	42ab      	cmp	r3, r5
 800b4f4:	dcf2      	bgt.n	800b4dc <_printf_i+0x1e8>
 800b4f6:	e7eb      	b.n	800b4d0 <_printf_i+0x1dc>
 800b4f8:	2500      	movs	r5, #0
 800b4fa:	f104 0919 	add.w	r9, r4, #25
 800b4fe:	e7f5      	b.n	800b4ec <_printf_i+0x1f8>
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1ac      	bne.n	800b45e <_printf_i+0x16a>
 800b504:	7803      	ldrb	r3, [r0, #0]
 800b506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b50a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b50e:	e76c      	b.n	800b3ea <_printf_i+0xf6>
 800b510:	0800b7ef 	.word	0x0800b7ef
 800b514:	0800b800 	.word	0x0800b800

0800b518 <__ascii_wctomb>:
 800b518:	b149      	cbz	r1, 800b52e <__ascii_wctomb+0x16>
 800b51a:	2aff      	cmp	r2, #255	; 0xff
 800b51c:	bf85      	ittet	hi
 800b51e:	238a      	movhi	r3, #138	; 0x8a
 800b520:	6003      	strhi	r3, [r0, #0]
 800b522:	700a      	strbls	r2, [r1, #0]
 800b524:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b528:	bf98      	it	ls
 800b52a:	2001      	movls	r0, #1
 800b52c:	4770      	bx	lr
 800b52e:	4608      	mov	r0, r1
 800b530:	4770      	bx	lr

0800b532 <memmove>:
 800b532:	4288      	cmp	r0, r1
 800b534:	b510      	push	{r4, lr}
 800b536:	eb01 0302 	add.w	r3, r1, r2
 800b53a:	d807      	bhi.n	800b54c <memmove+0x1a>
 800b53c:	1e42      	subs	r2, r0, #1
 800b53e:	4299      	cmp	r1, r3
 800b540:	d00a      	beq.n	800b558 <memmove+0x26>
 800b542:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b546:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b54a:	e7f8      	b.n	800b53e <memmove+0xc>
 800b54c:	4283      	cmp	r3, r0
 800b54e:	d9f5      	bls.n	800b53c <memmove+0xa>
 800b550:	1881      	adds	r1, r0, r2
 800b552:	1ad2      	subs	r2, r2, r3
 800b554:	42d3      	cmn	r3, r2
 800b556:	d100      	bne.n	800b55a <memmove+0x28>
 800b558:	bd10      	pop	{r4, pc}
 800b55a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b55e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b562:	e7f7      	b.n	800b554 <memmove+0x22>

0800b564 <_free_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4605      	mov	r5, r0
 800b568:	2900      	cmp	r1, #0
 800b56a:	d045      	beq.n	800b5f8 <_free_r+0x94>
 800b56c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b570:	1f0c      	subs	r4, r1, #4
 800b572:	2b00      	cmp	r3, #0
 800b574:	bfb8      	it	lt
 800b576:	18e4      	addlt	r4, r4, r3
 800b578:	f000 f8d2 	bl	800b720 <__malloc_lock>
 800b57c:	4a1f      	ldr	r2, [pc, #124]	; (800b5fc <_free_r+0x98>)
 800b57e:	6813      	ldr	r3, [r2, #0]
 800b580:	4610      	mov	r0, r2
 800b582:	b933      	cbnz	r3, 800b592 <_free_r+0x2e>
 800b584:	6063      	str	r3, [r4, #4]
 800b586:	6014      	str	r4, [r2, #0]
 800b588:	4628      	mov	r0, r5
 800b58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b58e:	f000 b8c8 	b.w	800b722 <__malloc_unlock>
 800b592:	42a3      	cmp	r3, r4
 800b594:	d90c      	bls.n	800b5b0 <_free_r+0x4c>
 800b596:	6821      	ldr	r1, [r4, #0]
 800b598:	1862      	adds	r2, r4, r1
 800b59a:	4293      	cmp	r3, r2
 800b59c:	bf04      	itt	eq
 800b59e:	681a      	ldreq	r2, [r3, #0]
 800b5a0:	685b      	ldreq	r3, [r3, #4]
 800b5a2:	6063      	str	r3, [r4, #4]
 800b5a4:	bf04      	itt	eq
 800b5a6:	1852      	addeq	r2, r2, r1
 800b5a8:	6022      	streq	r2, [r4, #0]
 800b5aa:	6004      	str	r4, [r0, #0]
 800b5ac:	e7ec      	b.n	800b588 <_free_r+0x24>
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	b10a      	cbz	r2, 800b5b8 <_free_r+0x54>
 800b5b4:	42a2      	cmp	r2, r4
 800b5b6:	d9fa      	bls.n	800b5ae <_free_r+0x4a>
 800b5b8:	6819      	ldr	r1, [r3, #0]
 800b5ba:	1858      	adds	r0, r3, r1
 800b5bc:	42a0      	cmp	r0, r4
 800b5be:	d10b      	bne.n	800b5d8 <_free_r+0x74>
 800b5c0:	6820      	ldr	r0, [r4, #0]
 800b5c2:	4401      	add	r1, r0
 800b5c4:	1858      	adds	r0, r3, r1
 800b5c6:	4282      	cmp	r2, r0
 800b5c8:	6019      	str	r1, [r3, #0]
 800b5ca:	d1dd      	bne.n	800b588 <_free_r+0x24>
 800b5cc:	6810      	ldr	r0, [r2, #0]
 800b5ce:	6852      	ldr	r2, [r2, #4]
 800b5d0:	605a      	str	r2, [r3, #4]
 800b5d2:	4401      	add	r1, r0
 800b5d4:	6019      	str	r1, [r3, #0]
 800b5d6:	e7d7      	b.n	800b588 <_free_r+0x24>
 800b5d8:	d902      	bls.n	800b5e0 <_free_r+0x7c>
 800b5da:	230c      	movs	r3, #12
 800b5dc:	602b      	str	r3, [r5, #0]
 800b5de:	e7d3      	b.n	800b588 <_free_r+0x24>
 800b5e0:	6820      	ldr	r0, [r4, #0]
 800b5e2:	1821      	adds	r1, r4, r0
 800b5e4:	428a      	cmp	r2, r1
 800b5e6:	bf04      	itt	eq
 800b5e8:	6811      	ldreq	r1, [r2, #0]
 800b5ea:	6852      	ldreq	r2, [r2, #4]
 800b5ec:	6062      	str	r2, [r4, #4]
 800b5ee:	bf04      	itt	eq
 800b5f0:	1809      	addeq	r1, r1, r0
 800b5f2:	6021      	streq	r1, [r4, #0]
 800b5f4:	605c      	str	r4, [r3, #4]
 800b5f6:	e7c7      	b.n	800b588 <_free_r+0x24>
 800b5f8:	bd38      	pop	{r3, r4, r5, pc}
 800b5fa:	bf00      	nop
 800b5fc:	200004c4 	.word	0x200004c4

0800b600 <_malloc_r>:
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	1ccd      	adds	r5, r1, #3
 800b604:	f025 0503 	bic.w	r5, r5, #3
 800b608:	3508      	adds	r5, #8
 800b60a:	2d0c      	cmp	r5, #12
 800b60c:	bf38      	it	cc
 800b60e:	250c      	movcc	r5, #12
 800b610:	2d00      	cmp	r5, #0
 800b612:	4606      	mov	r6, r0
 800b614:	db01      	blt.n	800b61a <_malloc_r+0x1a>
 800b616:	42a9      	cmp	r1, r5
 800b618:	d903      	bls.n	800b622 <_malloc_r+0x22>
 800b61a:	230c      	movs	r3, #12
 800b61c:	6033      	str	r3, [r6, #0]
 800b61e:	2000      	movs	r0, #0
 800b620:	bd70      	pop	{r4, r5, r6, pc}
 800b622:	f000 f87d 	bl	800b720 <__malloc_lock>
 800b626:	4a21      	ldr	r2, [pc, #132]	; (800b6ac <_malloc_r+0xac>)
 800b628:	6814      	ldr	r4, [r2, #0]
 800b62a:	4621      	mov	r1, r4
 800b62c:	b991      	cbnz	r1, 800b654 <_malloc_r+0x54>
 800b62e:	4c20      	ldr	r4, [pc, #128]	; (800b6b0 <_malloc_r+0xb0>)
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	b91b      	cbnz	r3, 800b63c <_malloc_r+0x3c>
 800b634:	4630      	mov	r0, r6
 800b636:	f000 f863 	bl	800b700 <_sbrk_r>
 800b63a:	6020      	str	r0, [r4, #0]
 800b63c:	4629      	mov	r1, r5
 800b63e:	4630      	mov	r0, r6
 800b640:	f000 f85e 	bl	800b700 <_sbrk_r>
 800b644:	1c43      	adds	r3, r0, #1
 800b646:	d124      	bne.n	800b692 <_malloc_r+0x92>
 800b648:	230c      	movs	r3, #12
 800b64a:	6033      	str	r3, [r6, #0]
 800b64c:	4630      	mov	r0, r6
 800b64e:	f000 f868 	bl	800b722 <__malloc_unlock>
 800b652:	e7e4      	b.n	800b61e <_malloc_r+0x1e>
 800b654:	680b      	ldr	r3, [r1, #0]
 800b656:	1b5b      	subs	r3, r3, r5
 800b658:	d418      	bmi.n	800b68c <_malloc_r+0x8c>
 800b65a:	2b0b      	cmp	r3, #11
 800b65c:	d90f      	bls.n	800b67e <_malloc_r+0x7e>
 800b65e:	600b      	str	r3, [r1, #0]
 800b660:	50cd      	str	r5, [r1, r3]
 800b662:	18cc      	adds	r4, r1, r3
 800b664:	4630      	mov	r0, r6
 800b666:	f000 f85c 	bl	800b722 <__malloc_unlock>
 800b66a:	f104 000b 	add.w	r0, r4, #11
 800b66e:	1d23      	adds	r3, r4, #4
 800b670:	f020 0007 	bic.w	r0, r0, #7
 800b674:	1ac3      	subs	r3, r0, r3
 800b676:	d0d3      	beq.n	800b620 <_malloc_r+0x20>
 800b678:	425a      	negs	r2, r3
 800b67a:	50e2      	str	r2, [r4, r3]
 800b67c:	e7d0      	b.n	800b620 <_malloc_r+0x20>
 800b67e:	428c      	cmp	r4, r1
 800b680:	684b      	ldr	r3, [r1, #4]
 800b682:	bf16      	itet	ne
 800b684:	6063      	strne	r3, [r4, #4]
 800b686:	6013      	streq	r3, [r2, #0]
 800b688:	460c      	movne	r4, r1
 800b68a:	e7eb      	b.n	800b664 <_malloc_r+0x64>
 800b68c:	460c      	mov	r4, r1
 800b68e:	6849      	ldr	r1, [r1, #4]
 800b690:	e7cc      	b.n	800b62c <_malloc_r+0x2c>
 800b692:	1cc4      	adds	r4, r0, #3
 800b694:	f024 0403 	bic.w	r4, r4, #3
 800b698:	42a0      	cmp	r0, r4
 800b69a:	d005      	beq.n	800b6a8 <_malloc_r+0xa8>
 800b69c:	1a21      	subs	r1, r4, r0
 800b69e:	4630      	mov	r0, r6
 800b6a0:	f000 f82e 	bl	800b700 <_sbrk_r>
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d0cf      	beq.n	800b648 <_malloc_r+0x48>
 800b6a8:	6025      	str	r5, [r4, #0]
 800b6aa:	e7db      	b.n	800b664 <_malloc_r+0x64>
 800b6ac:	200004c4 	.word	0x200004c4
 800b6b0:	200004c8 	.word	0x200004c8

0800b6b4 <_realloc_r>:
 800b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b6:	4607      	mov	r7, r0
 800b6b8:	4614      	mov	r4, r2
 800b6ba:	460e      	mov	r6, r1
 800b6bc:	b921      	cbnz	r1, 800b6c8 <_realloc_r+0x14>
 800b6be:	4611      	mov	r1, r2
 800b6c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b6c4:	f7ff bf9c 	b.w	800b600 <_malloc_r>
 800b6c8:	b922      	cbnz	r2, 800b6d4 <_realloc_r+0x20>
 800b6ca:	f7ff ff4b 	bl	800b564 <_free_r>
 800b6ce:	4625      	mov	r5, r4
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6d4:	f000 f826 	bl	800b724 <_malloc_usable_size_r>
 800b6d8:	42a0      	cmp	r0, r4
 800b6da:	d20f      	bcs.n	800b6fc <_realloc_r+0x48>
 800b6dc:	4621      	mov	r1, r4
 800b6de:	4638      	mov	r0, r7
 800b6e0:	f7ff ff8e 	bl	800b600 <_malloc_r>
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d0f2      	beq.n	800b6d0 <_realloc_r+0x1c>
 800b6ea:	4631      	mov	r1, r6
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	f7ff fb43 	bl	800ad78 <memcpy>
 800b6f2:	4631      	mov	r1, r6
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	f7ff ff35 	bl	800b564 <_free_r>
 800b6fa:	e7e9      	b.n	800b6d0 <_realloc_r+0x1c>
 800b6fc:	4635      	mov	r5, r6
 800b6fe:	e7e7      	b.n	800b6d0 <_realloc_r+0x1c>

0800b700 <_sbrk_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4c06      	ldr	r4, [pc, #24]	; (800b71c <_sbrk_r+0x1c>)
 800b704:	2300      	movs	r3, #0
 800b706:	4605      	mov	r5, r0
 800b708:	4608      	mov	r0, r1
 800b70a:	6023      	str	r3, [r4, #0]
 800b70c:	f7f5 fe72 	bl	80013f4 <_sbrk>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d102      	bne.n	800b71a <_sbrk_r+0x1a>
 800b714:	6823      	ldr	r3, [r4, #0]
 800b716:	b103      	cbz	r3, 800b71a <_sbrk_r+0x1a>
 800b718:	602b      	str	r3, [r5, #0]
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	20000bc0 	.word	0x20000bc0

0800b720 <__malloc_lock>:
 800b720:	4770      	bx	lr

0800b722 <__malloc_unlock>:
 800b722:	4770      	bx	lr

0800b724 <_malloc_usable_size_r>:
 800b724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b728:	1f18      	subs	r0, r3, #4
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	bfbc      	itt	lt
 800b72e:	580b      	ldrlt	r3, [r1, r0]
 800b730:	18c0      	addlt	r0, r0, r3
 800b732:	4770      	bx	lr

0800b734 <_init>:
 800b734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b736:	bf00      	nop
 800b738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b73a:	bc08      	pop	{r3}
 800b73c:	469e      	mov	lr, r3
 800b73e:	4770      	bx	lr

0800b740 <_fini>:
 800b740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b742:	bf00      	nop
 800b744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b746:	bc08      	pop	{r3}
 800b748:	469e      	mov	lr, r3
 800b74a:	4770      	bx	lr
