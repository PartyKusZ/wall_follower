
VL53L0X_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000904c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080091dc  080091dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a4  080092a4  00020334  2**0
                  CONTENTS
  4 .ARM          00000000  080092a4  080092a4  00020334  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092a4  080092a4  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092a4  080092a4  000192a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  080092ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000334  080095e0  00020334  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  080095e0  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b27  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023c9  00000000  00000000  00037e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  0003a258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  0003b118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c462  00000000  00000000  0003bef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d86f  00000000  00000000  00058352  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a2d63  00000000  00000000  00065bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108924  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000410c  00000000  00000000  001089a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000334 	.word	0x20000334
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091c4 	.word	0x080091c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000338 	.word	0x20000338
 80001cc:	080091c4 	.word	0x080091c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fc73 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f9a5 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 fa63 	bl	8000748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000282:	f000 fa31 	bl	80006e8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000286:	f000 f9f1 	bl	800066c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  MessageLen = sprintf((char*)Message, "msalamon.pl VL53L0X Continuous mode\n\r");
 800028a:	4bc0      	ldr	r3, [pc, #768]	; (800058c <main+0x31c>)
 800028c:	4ac0      	ldr	r2, [pc, #768]	; (8000590 <main+0x320>)
 800028e:	4614      	mov	r4, r2
 8000290:	469c      	mov	ip, r3
 8000292:	f104 0e20 	add.w	lr, r4, #32
 8000296:	4665      	mov	r5, ip
 8000298:	4626      	mov	r6, r4
 800029a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800029c:	6028      	str	r0, [r5, #0]
 800029e:	6069      	str	r1, [r5, #4]
 80002a0:	60aa      	str	r2, [r5, #8]
 80002a2:	60eb      	str	r3, [r5, #12]
 80002a4:	3410      	adds	r4, #16
 80002a6:	f10c 0c10 	add.w	ip, ip, #16
 80002aa:	4574      	cmp	r4, lr
 80002ac:	d1f3      	bne.n	8000296 <main+0x26>
 80002ae:	4663      	mov	r3, ip
 80002b0:	4622      	mov	r2, r4
 80002b2:	6810      	ldr	r0, [r2, #0]
 80002b4:	6018      	str	r0, [r3, #0]
 80002b6:	8892      	ldrh	r2, [r2, #4]
 80002b8:	809a      	strh	r2, [r3, #4]
 80002ba:	2325      	movs	r3, #37	; 0x25
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4bb5      	ldr	r3, [pc, #724]	; (8000594 <main+0x324>)
 80002c0:	701a      	strb	r2, [r3, #0]
   HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 80002c2:	4bb4      	ldr	r3, [pc, #720]	; (8000594 <main+0x324>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	2364      	movs	r3, #100	; 0x64
 80002ca:	49b0      	ldr	r1, [pc, #704]	; (800058c <main+0x31c>)
 80002cc:	48b2      	ldr	r0, [pc, #712]	; (8000598 <main+0x328>)
 80002ce:	f002 ff81 	bl	80031d4 <HAL_UART_Transmit>


   Dev->I2cHandle = &hi2c1;
 80002d2:	4bb2      	ldr	r3, [pc, #712]	; (800059c <main+0x32c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4ab2      	ldr	r2, [pc, #712]	; (80005a0 <main+0x330>)
 80002d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
   Dev->I2cDevAddr = 0x52;
 80002dc:	4baf      	ldr	r3, [pc, #700]	; (800059c <main+0x32c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2252      	movs	r2, #82	; 0x52
 80002e2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

   Dev_2->I2cHandle = &hi2c1;
 80002e6:	4baf      	ldr	r3, [pc, #700]	; (80005a4 <main+0x334>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4aad      	ldr	r2, [pc, #692]	; (80005a0 <main+0x330>)
 80002ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
   Dev_2->I2cDevAddr = 0x52;
 80002f0:	4bac      	ldr	r3, [pc, #688]	; (80005a4 <main+0x334>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2252      	movs	r2, #82	; 0x52
 80002f6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
   HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80002fa:	2200      	movs	r2, #0
 80002fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000304:	f000 ff68 	bl	80011d8 <HAL_GPIO_WritePin>
   HAL_Delay(20);
 8000308:	2014      	movs	r0, #20
 800030a:	f000 fc8f 	bl	8000c2c <HAL_Delay>
   HAL_GPIO_WritePin(TOF_XSHUT_2_GPIO_Port, TOF_INT_2_Pin, GPIO_PIN_RESET); // Disable XSHUT
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000318:	f000 ff5e 	bl	80011d8 <HAL_GPIO_WritePin>
   HAL_Delay(20);
 800031c:	2014      	movs	r0, #20
 800031e:	f000 fc85 	bl	8000c2c <HAL_Delay>
   HAL_GPIO_WritePin(TOF_XSHUT_2_GPIO_Port, TOF_INT_2_Pin, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032c:	f000 ff54 	bl	80011d8 <HAL_GPIO_WritePin>
   HAL_Delay(20);
 8000330:	2014      	movs	r0, #20
 8000332:	f000 fc7b 	bl	8000c2c <HAL_Delay>
   Dev_2->I2cDevAddr = 0x52;
 8000336:	4b9b      	ldr	r3, [pc, #620]	; (80005a4 <main+0x334>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2252      	movs	r2, #82	; 0x52
 800033c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
   VL53L0X_SetDeviceAddress(Dev_2,0x62);
 8000340:	4b98      	ldr	r3, [pc, #608]	; (80005a4 <main+0x334>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2162      	movs	r1, #98	; 0x62
 8000346:	4618      	mov	r0, r3
 8000348:	f003 fad2 	bl	80038f0 <VL53L0X_SetDeviceAddress>
   HAL_Delay(20);
 800034c:	2014      	movs	r0, #20
 800034e:	f000 fc6d 	bl	8000c2c <HAL_Delay>
   HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_INT_Pin, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2101      	movs	r1, #1
 8000356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035a:	f000 ff3d 	bl	80011d8 <HAL_GPIO_WritePin>
   // VL53L0X init for Single Measurement
   //



   	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800035e:	2006      	movs	r0, #6
 8000360:	f000 fdad 	bl	8000ebe <HAL_NVIC_DisableIRQ>

   	VL53L0X_WaitDeviceBooted(Dev);
 8000364:	4b8d      	ldr	r3, [pc, #564]	; (800059c <main+0x32c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4618      	mov	r0, r3
 800036a:	f003 fdbf 	bl	8003eec <VL53L0X_WaitDeviceBooted>
   	VL53L0X_DataInit(Dev);
 800036e:	4b8b      	ldr	r3, [pc, #556]	; (800059c <main+0x32c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	f003 fad4 	bl	8003920 <VL53L0X_DataInit>
   	VL53L0X_StaticInit(Dev);
 8000378:	4b88      	ldr	r3, [pc, #544]	; (800059c <main+0x32c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f003 fc33 	bl	8003be8 <VL53L0X_StaticInit>
   	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000382:	4b86      	ldr	r3, [pc, #536]	; (800059c <main+0x32c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f107 0209 	add.w	r2, r7, #9
 800038a:	f107 010a 	add.w	r1, r7, #10
 800038e:	4618      	mov	r0, r3
 8000390:	f004 fae8 	bl	8004964 <VL53L0X_PerformRefCalibration>
    VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000394:	4b81      	ldr	r3, [pc, #516]	; (800059c <main+0x32c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f107 020b 	add.w	r2, r7, #11
 800039c:	f107 010c 	add.w	r1, r7, #12
 80003a0:	4618      	mov	r0, r3
 80003a2:	f004 ff6d 	bl	8005280 <VL53L0X_PerformRefSpadManagement>
   	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80003a6:	4b7d      	ldr	r3, [pc, #500]	; (800059c <main+0x32c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2101      	movs	r1, #1
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 fe3b 	bl	8004028 <VL53L0X_SetDeviceMode>

    VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80003b2:	4b7a      	ldr	r3, [pc, #488]	; (800059c <main+0x32c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2201      	movs	r2, #1
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f004 f8cc 	bl	8004558 <VL53L0X_SetLimitCheckEnable>
   	 VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80003c0:	4b76      	ldr	r3, [pc, #472]	; (800059c <main+0x32c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2201      	movs	r2, #1
 80003c6:	2101      	movs	r1, #1
 80003c8:	4618      	mov	r0, r3
 80003ca:	f004 f8c5 	bl	8004558 <VL53L0X_SetLimitCheckEnable>
   	 VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80003ce:	4b73      	ldr	r3, [pc, #460]	; (800059c <main+0x32c>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f641 1299 	movw	r2, #6553	; 0x1999
 80003d6:	2101      	movs	r1, #1
 80003d8:	4618      	mov	r0, r3
 80003da:	f004 f96d 	bl	80046b8 <VL53L0X_SetLimitCheckValue>
   	 VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80003de:	4b6f      	ldr	r3, [pc, #444]	; (800059c <main+0x32c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f004 f965 	bl	80046b8 <VL53L0X_SetLimitCheckValue>
   	 VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80003ee:	4b6b      	ldr	r3, [pc, #428]	; (800059c <main+0x32c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80003f6:	4618      	mov	r0, r3
 80003f8:	f003 fe90 	bl	800411c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80003fc:	4b67      	ldr	r3, [pc, #412]	; (800059c <main+0x32c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2212      	movs	r2, #18
 8000402:	2100      	movs	r1, #0
 8000404:	4618      	mov	r0, r3
 8000406:	f003 feaf 	bl	8004168 <VL53L0X_SetVcselPulsePeriod>
   	 VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800040a:	4b64      	ldr	r3, [pc, #400]	; (800059c <main+0x32c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	220e      	movs	r2, #14
 8000410:	2101      	movs	r1, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fea8 	bl	8004168 <VL53L0X_SetVcselPulsePeriod>

   	 VL53L0X_StartMeasurement(Dev);
 8000418:	4b60      	ldr	r3, [pc, #384]	; (800059c <main+0x32c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f004 fb1d 	bl	8004a5c <VL53L0X_StartMeasurement>

   	VL53L0X_WaitDeviceBooted(Dev_2);
 8000422:	4b60      	ldr	r3, [pc, #384]	; (80005a4 <main+0x334>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4618      	mov	r0, r3
 8000428:	f003 fd60 	bl	8003eec <VL53L0X_WaitDeviceBooted>
   	   	VL53L0X_DataInit(Dev_2);
 800042c:	4b5d      	ldr	r3, [pc, #372]	; (80005a4 <main+0x334>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4618      	mov	r0, r3
 8000432:	f003 fa75 	bl	8003920 <VL53L0X_DataInit>
   	   	VL53L0X_StaticInit(Dev_2);
 8000436:	4b5b      	ldr	r3, [pc, #364]	; (80005a4 <main+0x334>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4618      	mov	r0, r3
 800043c:	f003 fbd4 	bl	8003be8 <VL53L0X_StaticInit>
   	   	VL53L0X_PerformRefCalibration(Dev_2, &VhvSettings_2, &PhaseCal_2);
 8000440:	4b58      	ldr	r3, [pc, #352]	; (80005a4 <main+0x334>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	1c7a      	adds	r2, r7, #1
 8000446:	1cb9      	adds	r1, r7, #2
 8000448:	4618      	mov	r0, r3
 800044a:	f004 fa8b 	bl	8004964 <VL53L0X_PerformRefCalibration>
   	    VL53L0X_PerformRefSpadManagement(Dev_2, &refSpadCount_2, &isApertureSpads_2);
 800044e:	4b55      	ldr	r3, [pc, #340]	; (80005a4 <main+0x334>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	1cfa      	adds	r2, r7, #3
 8000454:	1d39      	adds	r1, r7, #4
 8000456:	4618      	mov	r0, r3
 8000458:	f004 ff12 	bl	8005280 <VL53L0X_PerformRefSpadManagement>
   	   	VL53L0X_SetDeviceMode(Dev_2, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800045c:	4b51      	ldr	r3, [pc, #324]	; (80005a4 <main+0x334>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f003 fde0 	bl	8004028 <VL53L0X_SetDeviceMode>

   	    VL53L0X_SetLimitCheckEnable(Dev_2, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000468:	4b4e      	ldr	r3, [pc, #312]	; (80005a4 <main+0x334>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2201      	movs	r2, #1
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f004 f871 	bl	8004558 <VL53L0X_SetLimitCheckEnable>
   	   	 VL53L0X_SetLimitCheckEnable(Dev_2, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000476:	4b4b      	ldr	r3, [pc, #300]	; (80005a4 <main+0x334>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2201      	movs	r2, #1
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f004 f86a 	bl	8004558 <VL53L0X_SetLimitCheckEnable>
   	   	 VL53L0X_SetLimitCheckValue(Dev_2, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000484:	4b47      	ldr	r3, [pc, #284]	; (80005a4 <main+0x334>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f641 1299 	movw	r2, #6553	; 0x1999
 800048c:	2101      	movs	r1, #1
 800048e:	4618      	mov	r0, r3
 8000490:	f004 f912 	bl	80046b8 <VL53L0X_SetLimitCheckValue>
   	   	 VL53L0X_SetLimitCheckValue(Dev_2, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000494:	4b43      	ldr	r3, [pc, #268]	; (80005a4 <main+0x334>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f004 f90a 	bl	80046b8 <VL53L0X_SetLimitCheckValue>
   	   	 VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev_2, 33000);
 80004a4:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <main+0x334>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80004ac:	4618      	mov	r0, r3
 80004ae:	f003 fe35 	bl	800411c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
   	    VL53L0X_SetVcselPulsePeriod(Dev_2, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80004b2:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <main+0x334>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2212      	movs	r2, #18
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 fe54 	bl	8004168 <VL53L0X_SetVcselPulsePeriod>
   	   	 VL53L0X_SetVcselPulsePeriod(Dev_2, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80004c0:	4b38      	ldr	r3, [pc, #224]	; (80005a4 <main+0x334>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	220e      	movs	r2, #14
 80004c6:	2101      	movs	r1, #1
 80004c8:	4618      	mov	r0, r3
 80004ca:	f003 fe4d 	bl	8004168 <VL53L0X_SetVcselPulsePeriod>

   	   	 VL53L0X_StartMeasurement(Dev_2);
 80004ce:	4b35      	ldr	r3, [pc, #212]	; (80005a4 <main+0x334>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f004 fac2 	bl	8004a5c <VL53L0X_StartMeasurement>

   	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004d8:	2006      	movs	r0, #6
 80004da:	f000 fce2 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(TofDataRead == 1)
 80004de:	4b32      	ldr	r3, [pc, #200]	; (80005a8 <main+0x338>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d125      	bne.n	8000534 <main+0x2c4>
	  {
		  VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 80004e8:	4b2c      	ldr	r3, [pc, #176]	; (800059c <main+0x32c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	492f      	ldr	r1, [pc, #188]	; (80005ac <main+0x33c>)
 80004ee:	4618      	mov	r0, r3
 80004f0:	f004 fbb4 	bl	8004c5c <VL53L0X_GetRangingMeasurementData>
		  		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 80004f4:	4b29      	ldr	r3, [pc, #164]	; (800059c <main+0x32c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2104      	movs	r1, #4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f004 fe5e 	bl	80051bc <VL53L0X_ClearInterruptMask>
		MessageLen = sprintf((char*)Message, "Measured distance: %i\n\r", RangingData.RangeMilliMeter);
 8000500:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <main+0x33c>)
 8000502:	891b      	ldrh	r3, [r3, #8]
 8000504:	461a      	mov	r2, r3
 8000506:	492a      	ldr	r1, [pc, #168]	; (80005b0 <main+0x340>)
 8000508:	4820      	ldr	r0, [pc, #128]	; (800058c <main+0x31c>)
 800050a:	f008 fa57 	bl	80089bc <siprintf>
 800050e:	4603      	mov	r3, r0
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b20      	ldr	r3, [pc, #128]	; (8000594 <main+0x324>)
 8000514:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 8000516:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <main+0x324>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	b29a      	uxth	r2, r3
 800051c:	2364      	movs	r3, #100	; 0x64
 800051e:	491b      	ldr	r1, [pc, #108]	; (800058c <main+0x31c>)
 8000520:	481d      	ldr	r0, [pc, #116]	; (8000598 <main+0x328>)
 8000522:	f002 fe57 	bl	80031d4 <HAL_UART_Transmit>
		TofDataRead = 0;
 8000526:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <main+0x338>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800052c:	2108      	movs	r1, #8
 800052e:	4821      	ldr	r0, [pc, #132]	; (80005b4 <main+0x344>)
 8000530:	f000 fe6a 	bl	8001208 <HAL_GPIO_TogglePin>
	  }

	  if(TofDataRead_2 == 1)
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <main+0x348>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b01      	cmp	r3, #1
 800053c:	d1cf      	bne.n	80004de <main+0x26e>
	 	  {
	 		  VL53L0X_GetRangingMeasurementData(Dev_2, &RangingData_2);
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <main+0x334>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	491e      	ldr	r1, [pc, #120]	; (80005bc <main+0x34c>)
 8000544:	4618      	mov	r0, r3
 8000546:	f004 fb89 	bl	8004c5c <VL53L0X_GetRangingMeasurementData>
	 		  		VL53L0X_ClearInterruptMask(Dev_2, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <main+0x334>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2104      	movs	r1, #4
 8000550:	4618      	mov	r0, r3
 8000552:	f004 fe33 	bl	80051bc <VL53L0X_ClearInterruptMask>
	 		MessageLen = sprintf((char*)Message, "Measured distance_2: %i\n\r", RangingData_2.RangeMilliMeter);
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <main+0x34c>)
 8000558:	891b      	ldrh	r3, [r3, #8]
 800055a:	461a      	mov	r2, r3
 800055c:	4918      	ldr	r1, [pc, #96]	; (80005c0 <main+0x350>)
 800055e:	480b      	ldr	r0, [pc, #44]	; (800058c <main+0x31c>)
 8000560:	f008 fa2c 	bl	80089bc <siprintf>
 8000564:	4603      	mov	r3, r0
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <main+0x324>)
 800056a:	701a      	strb	r2, [r3, #0]
	 		HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <main+0x324>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b29a      	uxth	r2, r3
 8000572:	2364      	movs	r3, #100	; 0x64
 8000574:	4905      	ldr	r1, [pc, #20]	; (800058c <main+0x31c>)
 8000576:	4808      	ldr	r0, [pc, #32]	; (8000598 <main+0x328>)
 8000578:	f002 fe2c 	bl	80031d4 <HAL_UART_Transmit>
	 		TofDataRead = 0;
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <main+0x338>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	 		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000582:	2108      	movs	r1, #8
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <main+0x344>)
 8000586:	f000 fe3f 	bl	8001208 <HAL_GPIO_TogglePin>
 800058a:	e01b      	b.n	80005c4 <main+0x354>
 800058c:	20000558 	.word	0x20000558
 8000590:	080091dc 	.word	0x080091dc
 8000594:	20000555 	.word	0x20000555
 8000598:	20000748 	.word	0x20000748
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000508 	.word	0x20000508
 80005a4:	20000004 	.word	0x20000004
 80005a8:	200005b4 	.word	0x200005b4
 80005ac:	2000035c 	.word	0x2000035c
 80005b0:	08009204 	.word	0x08009204
 80005b4:	48000400 	.word	0x48000400
 80005b8:	20000554 	.word	0x20000554
 80005bc:	20000598 	.word	0x20000598
 80005c0:	0800921c 	.word	0x0800921c
	  if(TofDataRead == 1)
 80005c4:	e78b      	b.n	80004de <main+0x26e>
 80005c6:	bf00      	nop

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b096      	sub	sp, #88	; 0x58
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005d2:	2228      	movs	r2, #40	; 0x28
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f008 f9e7 	bl	80089aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
 80005fa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fb2d 	bl	8001c70 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800061c:	f000 f93e 	bl	800089c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fa20 	bl	8002a80 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000646:	f000 f929 	bl	800089c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800064a:	2320      	movs	r3, #32
 800064c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fc49 	bl	8002eec <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000660:	f000 f91c 	bl	800089c <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3758      	adds	r7, #88	; 0x58
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <MX_I2C1_Init+0x78>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000678:	f240 220b 	movw	r2, #523	; 0x20b
 800067c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000686:	2201      	movs	r2, #1
 8000688:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006aa:	f000 fddf 	bl	800126c <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f8f2 	bl	800089c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4809      	ldr	r0, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006bc:	f001 fa40 	bl	8001b40 <HAL_I2CEx_ConfigAnalogFilter>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006c6:	f000 f8e9 	bl	800089c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ca:	2100      	movs	r1, #0
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006ce:	f001 fa82 	bl	8001bd6 <HAL_I2CEx_ConfigDigitalFilter>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 f8e0 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000508 	.word	0x20000508
 80006e4:	40005400 	.word	0x40005400

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <MX_USART2_UART_Init+0x5c>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006f4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800072c:	f002 fd04 	bl	8003138 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000736:	f000 f8b1 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000748 	.word	0x20000748
 8000744:	40004400 	.word	0x40004400

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b3f      	ldr	r3, [pc, #252]	; (800085c <MX_GPIO_Init+0x114>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a3e      	ldr	r2, [pc, #248]	; (800085c <MX_GPIO_Init+0x114>)
 8000764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b3c      	ldr	r3, [pc, #240]	; (800085c <MX_GPIO_Init+0x114>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b39      	ldr	r3, [pc, #228]	; (800085c <MX_GPIO_Init+0x114>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a38      	ldr	r2, [pc, #224]	; (800085c <MX_GPIO_Init+0x114>)
 800077c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b36      	ldr	r3, [pc, #216]	; (800085c <MX_GPIO_Init+0x114>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b33      	ldr	r3, [pc, #204]	; (800085c <MX_GPIO_Init+0x114>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a32      	ldr	r2, [pc, #200]	; (800085c <MX_GPIO_Init+0x114>)
 8000794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b30      	ldr	r3, [pc, #192]	; (800085c <MX_GPIO_Init+0x114>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TOF_XSHUT_2_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f000 fd12 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2108      	movs	r1, #8
 80007b8:	4829      	ldr	r0, [pc, #164]	; (8000860 <MX_GPIO_Init+0x118>)
 80007ba:	f000 fd0d 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOF_INT_Pin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 80007be:	2301      	movs	r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	4823      	ldr	r0, [pc, #140]	; (8000860 <MX_GPIO_Init+0x118>)
 80007d4:	f000 fb8e 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_XSHUT_2_Pin TOF_XSHUT_Pin */
  GPIO_InitStruct.Pin = TOF_XSHUT_2_Pin|TOF_XSHUT_Pin;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f4:	f000 fb7e 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_2_Pin */
  GPIO_InitStruct.Pin = TOF_INT_2_Pin;
 80007f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_2_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f000 fb6f 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000816:	2308      	movs	r3, #8
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_GPIO_Init+0x118>)
 800082e:	f000 fb61 	bl	8000ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	2006      	movs	r0, #6
 8000838:	f000 fb17 	bl	8000e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800083c:	2006      	movs	r0, #6
 800083e:	f000 fb30 	bl	8000ea2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2028      	movs	r0, #40	; 0x28
 8000848:	f000 fb0f 	bl	8000e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800084c:	2028      	movs	r0, #40	; 0x28
 800084e:	f000 fb28 	bl	8000ea2 <HAL_NVIC_EnableIRQ>

}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000
 8000860:	48000400 	.word	0x48000400

08000864 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOF_INT_Pin)
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d102      	bne.n	800087a <HAL_GPIO_EXTI_Callback+0x16>
	{
//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
		TofDataRead = 1;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <HAL_GPIO_EXTI_Callback+0x30>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]

	}

	if(GPIO_Pin == TOF_INT_2_Pin)
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000880:	d102      	bne.n	8000888 <HAL_GPIO_EXTI_Callback+0x24>
		{
	//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
	//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
			TofDataRead_2 = 1;
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_GPIO_EXTI_Callback+0x34>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]

		}
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	200005b4 	.word	0x200005b4
 8000898:	20000554 	.word	0x20000554

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x44>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_MspInit+0x44>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x44>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x44>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_I2C_MspInit+0x7c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d127      	bne.n	8000966 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_I2C_MspInit+0x80>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a16      	ldr	r2, [pc, #88]	; (8000974 <HAL_I2C_MspInit+0x80>)
 800091c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_I2C_MspInit+0x80>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800092e:	23c0      	movs	r3, #192	; 0xc0
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000932:	2312      	movs	r3, #18
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000936:	2301      	movs	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800093e:	2304      	movs	r3, #4
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <HAL_I2C_MspInit+0x84>)
 800094a:	f000 fad3 	bl	8000ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_I2C_MspInit+0x80>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_I2C_MspInit+0x80>)
 8000954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_I2C_MspInit+0x80>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40005400 	.word	0x40005400
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0x7c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d128      	bne.n	80009f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a16      	ldr	r2, [pc, #88]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80009ce:	230c      	movs	r3, #12
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009de:	2307      	movs	r3, #7
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f000 fa82 	bl	8000ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f8ca 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f000 fbeb 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000a6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a72:	f000 fbe3 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f007 ff48 	bl	8008940 <__errno>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20003000 	.word	0x20003000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	20000350 	.word	0x20000350
 8000ae4:	20000818 	.word	0x20000818

08000ae8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490e      	ldr	r1, [pc, #56]	; (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0b      	ldr	r4, [pc, #44]	; (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b36:	f7ff ffd7 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f007 ff07 	bl	800894c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3e:	f7ff fb97 	bl	8000270 <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8000b50:	080092ac 	.word	0x080092ac
  ldr r2, =_sbss
 8000b54:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8000b58:	20000814 	.word	0x20000814

08000b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_2_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x28>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x28>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f96f 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fe96 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40022000 	.word	0x40022000

08000b8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f995 	bl	8000eda <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc8:	f000 f94f 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000010 	.word	0x20000010
 8000be8:	2000000c 	.word	0x2000000c

08000bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000010 	.word	0x20000010
 8000c10:	200007cc 	.word	0x200007cc

08000c14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200007cc 	.word	0x200007cc

08000c2c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff ffee 	bl	8000c14 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_Delay+0x40>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffde 	bl	8000c14 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000010 	.word	0x20000010

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db10      	blt.n	8000d44 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4909      	ldr	r1, [pc, #36]	; (8000d50 <__NVIC_DisableIRQ+0x40>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	3320      	adds	r3, #32
 8000d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d40:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff07 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff1c 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff0f 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff1f 	bl	8000d10 <__NVIC_DisableIRQ>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff94 	bl	8000e10 <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e14e      	b.n	80011a2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8140 	beq.w	800119c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d005      	beq.n	8000f34 <HAL_GPIO_Init+0x40>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d130      	bne.n	8000f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	f003 0201 	and.w	r2, r3, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d017      	beq.n	8000fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d123      	bne.n	8001026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	691a      	ldr	r2, [r3, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0203 	and.w	r2, r3, #3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 809a 	beq.w	800119c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001068:	4b55      	ldr	r3, [pc, #340]	; (80011c0 <HAL_GPIO_Init+0x2cc>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a54      	ldr	r2, [pc, #336]	; (80011c0 <HAL_GPIO_Init+0x2cc>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <HAL_GPIO_Init+0x2cc>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001080:	4a50      	ldr	r2, [pc, #320]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010aa:	d013      	beq.n	80010d4 <HAL_GPIO_Init+0x1e0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <HAL_GPIO_Init+0x2d4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d00d      	beq.n	80010d0 <HAL_GPIO_Init+0x1dc>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a45      	ldr	r2, [pc, #276]	; (80011cc <HAL_GPIO_Init+0x2d8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d007      	beq.n	80010cc <HAL_GPIO_Init+0x1d8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a44      	ldr	r2, [pc, #272]	; (80011d0 <HAL_GPIO_Init+0x2dc>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d101      	bne.n	80010c8 <HAL_GPIO_Init+0x1d4>
 80010c4:	2303      	movs	r3, #3
 80010c6:	e006      	b.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010c8:	2305      	movs	r3, #5
 80010ca:	e004      	b.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e002      	b.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010d4:	2300      	movs	r3, #0
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	f002 0203 	and.w	r2, r2, #3
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	4093      	lsls	r3, r2
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010e6:	4937      	ldr	r1, [pc, #220]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f4:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001118:	4a2e      	ldr	r2, [pc, #184]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001142:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001196:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f47f aea9 	bne.w	8000f04 <HAL_GPIO_Init+0x10>
  }
}
 80011b2:	bf00      	nop
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000
 80011c8:	48000400 	.word	0x48000400
 80011cc:	48000800 	.word	0x48000800
 80011d0:	48000c00 	.word	0x48000c00
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4013      	ands	r3, r2
 8001220:	041a      	lsls	r2, r3, #16
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43d9      	mvns	r1, r3
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	400b      	ands	r3, r1
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fb02 	bl	8000864 <HAL_GPIO_EXTI_Callback>
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e081      	b.n	8001382 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d106      	bne.n	8001298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fb2e 	bl	80008f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2224      	movs	r2, #36	; 0x24
 800129c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0201 	bic.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d107      	bne.n	80012e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	e006      	b.n	80012f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d104      	bne.n	8001306 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001304:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001318:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001328:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691a      	ldr	r2, [r3, #16]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69d9      	ldr	r1, [r3, #28]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1a      	ldr	r2, [r3, #32]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2220      	movs	r2, #32
 800136e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af02      	add	r7, sp, #8
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	461a      	mov	r2, r3
 8001398:	460b      	mov	r3, r1
 800139a:	817b      	strh	r3, [r7, #10]
 800139c:	4613      	mov	r3, r2
 800139e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	f040 80da 	bne.w	8001562 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_I2C_Master_Transmit+0x30>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e0d3      	b.n	8001564 <HAL_I2C_Master_Transmit+0x1d8>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013c4:	f7ff fc26 	bl	8000c14 <HAL_GetTick>
 80013c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2319      	movs	r3, #25
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 f9e6 	bl	80017a8 <I2C_WaitOnFlagUntilTimeout>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e0be      	b.n	8001564 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2221      	movs	r2, #33	; 0x21
 80013ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2210      	movs	r2, #16
 80013f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	893a      	ldrh	r2, [r7, #8]
 8001406:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001412:	b29b      	uxth	r3, r3
 8001414:	2bff      	cmp	r3, #255	; 0xff
 8001416:	d90e      	bls.n	8001436 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	22ff      	movs	r2, #255	; 0xff
 800141c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001422:	b2da      	uxtb	r2, r3
 8001424:	8979      	ldrh	r1, [r7, #10]
 8001426:	4b51      	ldr	r3, [pc, #324]	; (800156c <HAL_I2C_Master_Transmit+0x1e0>)
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 fb58 	bl	8001ae4 <I2C_TransferConfig>
 8001434:	e06c      	b.n	8001510 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143a:	b29a      	uxth	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001444:	b2da      	uxtb	r2, r3
 8001446:	8979      	ldrh	r1, [r7, #10]
 8001448:	4b48      	ldr	r3, [pc, #288]	; (800156c <HAL_I2C_Master_Transmit+0x1e0>)
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 fb47 	bl	8001ae4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001456:	e05b      	b.n	8001510 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	6a39      	ldr	r1, [r7, #32]
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f000 f9e3 	bl	8001828 <I2C_WaitOnTXISFlagUntilTimeout>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e07b      	b.n	8001564 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001486:	b29b      	uxth	r3, r3
 8001488:	3b01      	subs	r3, #1
 800148a:	b29a      	uxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001494:	3b01      	subs	r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d034      	beq.n	8001510 <HAL_I2C_Master_Transmit+0x184>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d130      	bne.n	8001510 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	2200      	movs	r2, #0
 80014b6:	2180      	movs	r1, #128	; 0x80
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 f975 	bl	80017a8 <I2C_WaitOnFlagUntilTimeout>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e04d      	b.n	8001564 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	2bff      	cmp	r3, #255	; 0xff
 80014d0:	d90e      	bls.n	80014f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	22ff      	movs	r2, #255	; 0xff
 80014d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	8979      	ldrh	r1, [r7, #10]
 80014e0:	2300      	movs	r3, #0
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fafb 	bl	8001ae4 <I2C_TransferConfig>
 80014ee:	e00f      	b.n	8001510 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	8979      	ldrh	r1, [r7, #10]
 8001502:	2300      	movs	r3, #0
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 faea 	bl	8001ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29b      	uxth	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d19e      	bne.n	8001458 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	6a39      	ldr	r1, [r7, #32]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 f9c2 	bl	80018a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e01a      	b.n	8001564 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2220      	movs	r2, #32
 8001534:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_I2C_Master_Transmit+0x1e4>)
 8001542:	400b      	ands	r3, r1
 8001544:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2220      	movs	r2, #32
 800154a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001562:	2302      	movs	r3, #2
  }
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	80002000 	.word	0x80002000
 8001570:	fe00e800 	.word	0xfe00e800

08001574 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	461a      	mov	r2, r3
 8001580:	460b      	mov	r3, r1
 8001582:	817b      	strh	r3, [r7, #10]
 8001584:	4613      	mov	r3, r2
 8001586:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b20      	cmp	r3, #32
 8001592:	f040 80db 	bne.w	800174c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_I2C_Master_Receive+0x30>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e0d4      	b.n	800174e <HAL_I2C_Master_Receive+0x1da>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015ac:	f7ff fb32 	bl	8000c14 <HAL_GetTick>
 80015b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2319      	movs	r3, #25
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 f8f2 	bl	80017a8 <I2C_WaitOnFlagUntilTimeout>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0bf      	b.n	800174e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2222      	movs	r2, #34	; 0x22
 80015d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2210      	movs	r2, #16
 80015da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	893a      	ldrh	r2, [r7, #8]
 80015ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	2bff      	cmp	r3, #255	; 0xff
 80015fe:	d90e      	bls.n	800161e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	22ff      	movs	r2, #255	; 0xff
 8001604:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160a:	b2da      	uxtb	r2, r3
 800160c:	8979      	ldrh	r1, [r7, #10]
 800160e:	4b52      	ldr	r3, [pc, #328]	; (8001758 <HAL_I2C_Master_Receive+0x1e4>)
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 fa64 	bl	8001ae4 <I2C_TransferConfig>
 800161c:	e06d      	b.n	80016fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162c:	b2da      	uxtb	r2, r3
 800162e:	8979      	ldrh	r1, [r7, #10]
 8001630:	4b49      	ldr	r3, [pc, #292]	; (8001758 <HAL_I2C_Master_Receive+0x1e4>)
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 fa53 	bl	8001ae4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800163e:	e05c      	b.n	80016fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	6a39      	ldr	r1, [r7, #32]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f96b 	bl	8001920 <I2C_WaitOnRXNEFlagUntilTimeout>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e07c      	b.n	800174e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001670:	3b01      	subs	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167c:	b29b      	uxth	r3, r3
 800167e:	3b01      	subs	r3, #1
 8001680:	b29a      	uxth	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168a:	b29b      	uxth	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d034      	beq.n	80016fa <HAL_I2C_Master_Receive+0x186>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001694:	2b00      	cmp	r3, #0
 8001696:	d130      	bne.n	80016fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	2200      	movs	r2, #0
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f880 	bl	80017a8 <I2C_WaitOnFlagUntilTimeout>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e04d      	b.n	800174e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	2bff      	cmp	r3, #255	; 0xff
 80016ba:	d90e      	bls.n	80016da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	22ff      	movs	r2, #255	; 0xff
 80016c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	8979      	ldrh	r1, [r7, #10]
 80016ca:	2300      	movs	r3, #0
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 fa06 	bl	8001ae4 <I2C_TransferConfig>
 80016d8:	e00f      	b.n	80016fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	8979      	ldrh	r1, [r7, #10]
 80016ec:	2300      	movs	r3, #0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f9f5 	bl	8001ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d19d      	bne.n	8001640 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	6a39      	ldr	r1, [r7, #32]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 f8cd 	bl	80018a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e01a      	b.n	800174e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2220      	movs	r2, #32
 800171e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6859      	ldr	r1, [r3, #4]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_I2C_Master_Receive+0x1e8>)
 800172c:	400b      	ands	r3, r1
 800172e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2220      	movs	r2, #32
 8001734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	e000      	b.n	800174e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800174c:	2302      	movs	r3, #2
  }
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	80002400 	.word	0x80002400
 800175c:	fe00e800 	.word	0xfe00e800

08001760 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b02      	cmp	r3, #2
 8001774:	d103      	bne.n	800177e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b01      	cmp	r3, #1
 800178a:	d007      	beq.n	800179c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	619a      	str	r2, [r3, #24]
  }
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017b8:	e022      	b.n	8001800 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c0:	d01e      	beq.n	8001800 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017c2:	f7ff fa27 	bl	8000c14 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d302      	bcc.n	80017d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d113      	bne.n	8001800 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f043 0220 	orr.w	r2, r3, #32
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2220      	movs	r2, #32
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e00f      	b.n	8001820 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	4013      	ands	r3, r2
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	429a      	cmp	r2, r3
 800181c:	d0cd      	beq.n	80017ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001834:	e02c      	b.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f8dc 	bl	80019f8 <I2C_IsAcknowledgeFailed>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e02a      	b.n	80018a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001850:	d01e      	beq.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001852:	f7ff f9df 	bl	8000c14 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	429a      	cmp	r2, r3
 8001860:	d302      	bcc.n	8001868 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d113      	bne.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	f043 0220 	orr.w	r2, r3, #32
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2220      	movs	r2, #32
 8001878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e007      	b.n	80018a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b02      	cmp	r3, #2
 800189c:	d1cb      	bne.n	8001836 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018b4:	e028      	b.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 f89c 	bl	80019f8 <I2C_IsAcknowledgeFailed>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e026      	b.n	8001918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ca:	f7ff f9a3 	bl	8000c14 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d302      	bcc.n	80018e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d113      	bne.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e4:	f043 0220 	orr.w	r2, r3, #32
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e007      	b.n	8001918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b20      	cmp	r3, #32
 8001914:	d1cf      	bne.n	80018b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800192c:	e055      	b.n	80019da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f860 	bl	80019f8 <I2C_IsAcknowledgeFailed>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e053      	b.n	80019ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0320 	and.w	r3, r3, #32
 800194c:	2b20      	cmp	r3, #32
 800194e:	d129      	bne.n	80019a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b04      	cmp	r3, #4
 800195c:	d105      	bne.n	800196a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e03f      	b.n	80019ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2220      	movs	r2, #32
 8001970:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800197e:	400b      	ands	r3, r1
 8001980:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2220      	movs	r2, #32
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e022      	b.n	80019ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a4:	f7ff f936 	bl	8000c14 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d302      	bcc.n	80019ba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f043 0220 	orr.w	r2, r3, #32
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e007      	b.n	80019ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d1a2      	bne.n	800192e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	fe00e800 	.word	0xfe00e800

080019f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d161      	bne.n	8001ad6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a20:	d02b      	beq.n	8001a7a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a30:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a32:	e022      	b.n	8001a7a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a3a:	d01e      	beq.n	8001a7a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3c:	f7ff f8ea 	bl	8000c14 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d302      	bcc.n	8001a52 <I2C_IsAcknowledgeFailed+0x5a>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d113      	bne.n	8001a7a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f043 0220 	orr.w	r2, r3, #32
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e02e      	b.n	8001ad8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0320 	and.w	r3, r3, #32
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d1d5      	bne.n	8001a34 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2220      	movs	r2, #32
 8001a96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7ff fe61 	bl	8001760 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <I2C_IsAcknowledgeFailed+0xe8>)
 8001aaa:	400b      	ands	r3, r1
 8001aac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f043 0204 	orr.w	r2, r3, #4
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	fe00e800 	.word	0xfe00e800

08001ae4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	817b      	strh	r3, [r7, #10]
 8001af2:	4613      	mov	r3, r2
 8001af4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	0d5b      	lsrs	r3, r3, #21
 8001b00:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <I2C_TransferConfig+0x58>)
 8001b06:	430b      	orrs	r3, r1
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	ea02 0103 	and.w	r1, r2, r3
 8001b0e:	897b      	ldrh	r3, [r7, #10]
 8001b10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b14:	7a7b      	ldrb	r3, [r7, #9]
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	03ff63ff 	.word	0x03ff63ff

08001b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	d138      	bne.n	8001bc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e032      	b.n	8001bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2224      	movs	r2, #36	; 0x24
 8001b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e000      	b.n	8001bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bc8:	2302      	movs	r3, #2
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d139      	bne.n	8001c60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e033      	b.n	8001c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2224      	movs	r2, #36	; 0x24
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e000      	b.n	8001c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c60:	2302      	movs	r3, #2
  }
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f000 bef4 	b.w	8002a72 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 816a 	beq.w	8001f6e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c9a:	4bb3      	ldr	r3, [pc, #716]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d00c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca6:	4bb0      	ldr	r3, [pc, #704]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d159      	bne.n	8001d66 <HAL_RCC_OscConfig+0xf6>
 8001cb2:	4bad      	ldr	r3, [pc, #692]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbe:	d152      	bne.n	8001d66 <HAL_RCC_OscConfig+0xf6>
 8001cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d102      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x82>
 8001cec:	4b9e      	ldr	r3, [pc, #632]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	e015      	b.n	8001d1e <HAL_RCC_OscConfig+0xae>
 8001cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d0a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d0e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001d1a:	4b93      	ldr	r3, [pc, #588]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d22:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001d26:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d2a:	fa92 f2a2 	rbit	r2, r2
 8001d2e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001d32:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001d36:	fab2 f282 	clz	r2, r2
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f042 0220 	orr.w	r2, r2, #32
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f002 021f 	and.w	r2, r2, #31
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 810c 	beq.w	8001f6c <HAL_RCC_OscConfig+0x2fc>
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 8106 	bne.w	8001f6c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f000 be86 	b.w	8002a72 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d70:	d106      	bne.n	8001d80 <HAL_RCC_OscConfig+0x110>
 8001d72:	4b7d      	ldr	r3, [pc, #500]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a7c      	ldr	r2, [pc, #496]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e030      	b.n	8001de2 <HAL_RCC_OscConfig+0x172>
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x134>
 8001d8a:	4b77      	ldr	r3, [pc, #476]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a76      	ldr	r2, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b74      	ldr	r3, [pc, #464]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a73      	ldr	r2, [pc, #460]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e01e      	b.n	8001de2 <HAL_RCC_OscConfig+0x172>
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dae:	d10c      	bne.n	8001dca <HAL_RCC_OscConfig+0x15a>
 8001db0:	4b6d      	ldr	r3, [pc, #436]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a6c      	ldr	r2, [pc, #432]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a69      	ldr	r2, [pc, #420]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e00b      	b.n	8001de2 <HAL_RCC_OscConfig+0x172>
 8001dca:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a66      	ldr	r2, [pc, #408]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a63      	ldr	r2, [pc, #396]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001de2:	4b61      	ldr	r3, [pc, #388]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	f023 020f 	bic.w	r2, r3, #15
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	495d      	ldr	r1, [pc, #372]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d059      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7fe ff08 	bl	8000c14 <HAL_GetTick>
 8001e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ff03 	bl	8000c14 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d902      	bls.n	8001e20 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	f000 be29 	b.w	8002a72 <HAL_RCC_OscConfig+0xe02>
 8001e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e24:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001e34:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d102      	bne.n	8001e52 <HAL_RCC_OscConfig+0x1e2>
 8001e4c:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	e015      	b.n	8001e7e <HAL_RCC_OscConfig+0x20e>
 8001e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e56:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e6a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e6e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e82:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001e86:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001e92:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001e96:	fab2 f282 	clz	r2, r2
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f042 0220 	orr.w	r2, r2, #32
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f002 021f 	and.w	r2, r2, #31
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0ab      	beq.n	8001e0a <HAL_RCC_OscConfig+0x19a>
 8001eb2:	e05c      	b.n	8001f6e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7fe feae 	bl	8000c14 <HAL_GetTick>
 8001eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ebe:	f7fe fea9 	bl	8000c14 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d902      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	f000 bdcf 	b.w	8002a72 <HAL_RCC_OscConfig+0xe02>
 8001ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ee8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d102      	bne.n	8001f06 <HAL_RCC_OscConfig+0x296>
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	e015      	b.n	8001f32 <HAL_RCC_OscConfig+0x2c2>
 8001f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_RCC_OscConfig+0x2f8>)
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f36:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001f3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f3e:	fa92 f2a2 	rbit	r2, r2
 8001f42:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001f46:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001f4a:	fab2 f282 	clz	r2, r2
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f042 0220 	orr.w	r2, r2, #32
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f002 021f 	and.w	r2, r2, #31
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1ab      	bne.n	8001ebe <HAL_RCC_OscConfig+0x24e>
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_OscConfig+0x2fe>
 8001f68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 816f 	beq.w	800225c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f7e:	4bd0      	ldr	r3, [pc, #832]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f8a:	4bcd      	ldr	r3, [pc, #820]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d16c      	bne.n	8002070 <HAL_RCC_OscConfig+0x400>
 8001f96:	4bca      	ldr	r3, [pc, #808]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d166      	bne.n	8002070 <HAL_RCC_OscConfig+0x400>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001fb4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x362>
 8001fcc:	4bbc      	ldr	r3, [pc, #752]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	e013      	b.n	8001ffa <HAL_RCC_OscConfig+0x38a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001fea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ff6:	4bb2      	ldr	r3, [pc, #712]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002000:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002004:	fa92 f2a2 	rbit	r2, r2
 8002008:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800200c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002010:	fab2 f282 	clz	r2, r2
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f042 0220 	orr.w	r2, r2, #32
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	f002 021f 	and.w	r2, r2, #31
 8002020:	2101      	movs	r1, #1
 8002022:	fa01 f202 	lsl.w	r2, r1, r2
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_RCC_OscConfig+0x3cc>
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d002      	beq.n	800203c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	f000 bd1b 	b.w	8002a72 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203c:	4ba0      	ldr	r3, [pc, #640]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	21f8      	movs	r1, #248	; 0xf8
 800204c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002054:	fa91 f1a1 	rbit	r1, r1
 8002058:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800205c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002060:	fab1 f181 	clz	r1, r1
 8002064:	b2c9      	uxtb	r1, r1
 8002066:	408b      	lsls	r3, r1
 8002068:	4995      	ldr	r1, [pc, #596]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e0f5      	b.n	800225c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8085 	beq.w	8002186 <HAL_RCC_OscConfig+0x516>
 800207c:	2301      	movs	r3, #1
 800207e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800208e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800209c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	461a      	mov	r2, r3
 80020a4:	2301      	movs	r3, #1
 80020a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe fdb4 	bl	8000c14 <HAL_GetTick>
 80020ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b2:	f7fe fdaf 	bl	8000c14 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d902      	bls.n	80020c8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	f000 bcd5 	b.w	8002a72 <HAL_RCC_OscConfig+0xe02>
 80020c8:	2302      	movs	r3, #2
 80020ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80020da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_OscConfig+0x488>
 80020f2:	4b73      	ldr	r3, [pc, #460]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	e013      	b.n	8002120 <HAL_RCC_OscConfig+0x4b0>
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002110:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800211c:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	2202      	movs	r2, #2
 8002122:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002126:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800212a:	fa92 f2a2 	rbit	r2, r2
 800212e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002132:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002136:	fab2 f282 	clz	r2, r2
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f042 0220 	orr.w	r2, r2, #32
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	f002 021f 	and.w	r2, r2, #31
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f202 	lsl.w	r2, r1, r2
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0af      	beq.n	80020b2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	21f8      	movs	r1, #248	; 0xf8
 8002162:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800216a:	fa91 f1a1 	rbit	r1, r1
 800216e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002172:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002176:	fab1 f181 	clz	r1, r1
 800217a:	b2c9      	uxtb	r1, r1
 800217c:	408b      	lsls	r3, r1
 800217e:	4950      	ldr	r1, [pc, #320]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e06a      	b.n	800225c <HAL_RCC_OscConfig+0x5ec>
 8002186:	2301      	movs	r3, #1
 8002188:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002198:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	461a      	mov	r2, r3
 80021ae:	2300      	movs	r3, #0
 80021b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fd2f 	bl	8000c14 <HAL_GetTick>
 80021b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021bc:	f7fe fd2a 	bl	8000c14 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d902      	bls.n	80021d2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	f000 bc50 	b.w	8002a72 <HAL_RCC_OscConfig+0xe02>
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80021e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d102      	bne.n	8002202 <HAL_RCC_OscConfig+0x592>
 80021fc:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	e013      	b.n	800222a <HAL_RCC_OscConfig+0x5ba>
 8002202:	2302      	movs	r3, #2
 8002204:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800221a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_RCC_OscConfig+0x650>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	2202      	movs	r2, #2
 800222c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002230:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002234:	fa92 f2a2 	rbit	r2, r2
 8002238:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800223c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002240:	fab2 f282 	clz	r2, r2
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	f042 0220 	orr.w	r2, r2, #32
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	f002 021f 	and.w	r2, r2, #31
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f202 	lsl.w	r2, r1, r2
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1af      	bne.n	80021bc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80da 	beq.w	8002420 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d069      	beq.n	800234a <HAL_RCC_OscConfig+0x6da>
 8002276:	2301      	movs	r3, #1
 8002278:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_OscConfig+0x654>)
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	461a      	mov	r2, r3
 800229c:	2301      	movs	r3, #1
 800229e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7fe fcb8 	bl	8000c14 <HAL_GetTick>
 80022a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a8:	e00e      	b.n	80022c8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022aa:	f7fe fcb3 	bl	8000c14 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d906      	bls.n	80022c8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e3d9      	b.n	8002a72 <HAL_RCC_OscConfig+0xe02>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	10908120 	.word	0x10908120
 80022c8:	2302      	movs	r3, #2
 80022ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80022da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80022de:	2202      	movs	r2, #2
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80022f6:	2202      	movs	r2, #2
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	fa93 f2a3 	rbit	r2, r3
 8002304:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002308:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230a:	4ba5      	ldr	r3, [pc, #660]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 800230c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002312:	2102      	movs	r1, #2
 8002314:	6019      	str	r1, [r3, #0]
 8002316:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f1a3 	rbit	r1, r3
 8002320:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002324:	6019      	str	r1, [r3, #0]
  return result;
 8002326:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0b0      	beq.n	80022aa <HAL_RCC_OscConfig+0x63a>
 8002348:	e06a      	b.n	8002420 <HAL_RCC_OscConfig+0x7b0>
 800234a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002360:	601a      	str	r2, [r3, #0]
  return result;
 8002362:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002366:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	4b8c      	ldr	r3, [pc, #560]	; (80025a4 <HAL_RCC_OscConfig+0x934>)
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	461a      	mov	r2, r3
 8002378:	2300      	movs	r3, #0
 800237a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7fe fc4a 	bl	8000c14 <HAL_GetTick>
 8002380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	e009      	b.n	800239a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002386:	f7fe fc45 	bl	8000c14 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e36b      	b.n	8002a72 <HAL_RCC_OscConfig+0xe02>
 800239a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800239e:	2202      	movs	r2, #2
 80023a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	fa93 f2a3 	rbit	r2, r3
 80023ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023b6:	2202      	movs	r2, #2
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	fa93 f2a3 	rbit	r2, r3
 80023c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80023ce:	2202      	movs	r2, #2
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e2:	4b6f      	ldr	r3, [pc, #444]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 80023e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80023ea:	2102      	movs	r1, #2
 80023ec:	6019      	str	r1, [r3, #0]
 80023ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	fa93 f1a3 	rbit	r1, r3
 80023f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023fc:	6019      	str	r1, [r3, #0]
  return result;
 80023fe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1b2      	bne.n	8002386 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8158 	beq.w	80026e0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002436:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d112      	bne.n	8002468 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a56      	ldr	r2, [pc, #344]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	61d3      	str	r3, [r2, #28]
 800244e:	4b54      	ldr	r3, [pc, #336]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002456:	f107 0308 	add.w	r3, r7, #8
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f107 0308 	add.w	r3, r7, #8
 8002460:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	4b4f      	ldr	r3, [pc, #316]	; (80025a8 <HAL_RCC_OscConfig+0x938>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11a      	bne.n	80024aa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002474:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <HAL_RCC_OscConfig+0x938>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a4b      	ldr	r2, [pc, #300]	; (80025a8 <HAL_RCC_OscConfig+0x938>)
 800247a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002480:	f7fe fbc8 	bl	8000c14 <HAL_GetTick>
 8002484:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	e009      	b.n	800249e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7fe fbc3 	bl	8000c14 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e2e9      	b.n	8002a72 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_RCC_OscConfig+0x938>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0ef      	beq.n	800248a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x852>
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4a39      	ldr	r2, [pc, #228]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6213      	str	r3, [r2, #32]
 80024c0:	e02f      	b.n	8002522 <HAL_RCC_OscConfig+0x8b2>
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x876>
 80024cc:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a33      	ldr	r2, [pc, #204]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a30      	ldr	r2, [pc, #192]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 80024de:	f023 0304 	bic.w	r3, r3, #4
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	e01d      	b.n	8002522 <HAL_RCC_OscConfig+0x8b2>
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d10c      	bne.n	800250a <HAL_RCC_OscConfig+0x89a>
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4a2a      	ldr	r2, [pc, #168]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6213      	str	r3, [r2, #32]
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e00b      	b.n	8002522 <HAL_RCC_OscConfig+0x8b2>
 800250a:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d06b      	beq.n	8002604 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7fe fb72 	bl	8000c14 <HAL_GetTick>
 8002530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fe fb6d 	bl	8000c14 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e291      	b.n	8002a72 <HAL_RCC_OscConfig+0xe02>
 800254e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fa93 f2a3 	rbit	r2, r3
 8002560:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800256a:	2202      	movs	r2, #2
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800257c:	601a      	str	r2, [r3, #0]
  return result;
 800257e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002582:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d109      	bne.n	80025ac <HAL_RCC_OscConfig+0x93c>
 8002598:	4b01      	ldr	r3, [pc, #4]	; (80025a0 <HAL_RCC_OscConfig+0x930>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	e014      	b.n	80025c8 <HAL_RCC_OscConfig+0x958>
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	10908120 	.word	0x10908120
 80025a8:	40007000 	.word	0x40007000
 80025ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025b0:	2202      	movs	r2, #2
 80025b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	fa93 f2a3 	rbit	r2, r3
 80025be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	4bbb      	ldr	r3, [pc, #748]	; (80028b4 <HAL_RCC_OscConfig+0xc44>)
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025cc:	2102      	movs	r1, #2
 80025ce:	6011      	str	r1, [r2, #0]
 80025d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	fa92 f1a2 	rbit	r1, r2
 80025da:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80025de:	6011      	str	r1, [r2, #0]
  return result;
 80025e0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	fab2 f282 	clz	r2, r2
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f002 021f 	and.w	r2, r2, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f202 	lsl.w	r2, r1, r2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d099      	beq.n	8002536 <HAL_RCC_OscConfig+0x8c6>
 8002602:	e063      	b.n	80026cc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002604:	f7fe fb06 	bl	8000c14 <HAL_GetTick>
 8002608:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	e00b      	b.n	8002626 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe fb01 	bl	8000c14 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e225      	b.n	8002a72 <HAL_RCC_OscConfig+0xe02>
 8002626:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800262a:	2202      	movs	r2, #2
 800262c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fa93 f2a3 	rbit	r2, r3
 8002638:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002642:	2202      	movs	r2, #2
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	fa93 f2a3 	rbit	r2, r3
 8002650:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002654:	601a      	str	r2, [r3, #0]
  return result;
 8002656:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800265a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d102      	bne.n	8002676 <HAL_RCC_OscConfig+0xa06>
 8002670:	4b90      	ldr	r3, [pc, #576]	; (80028b4 <HAL_RCC_OscConfig+0xc44>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	e00d      	b.n	8002692 <HAL_RCC_OscConfig+0xa22>
 8002676:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800267a:	2202      	movs	r2, #2
 800267c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fa93 f2a3 	rbit	r2, r3
 8002688:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4b89      	ldr	r3, [pc, #548]	; (80028b4 <HAL_RCC_OscConfig+0xc44>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002696:	2102      	movs	r1, #2
 8002698:	6011      	str	r1, [r2, #0]
 800269a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	fa92 f1a2 	rbit	r1, r2
 80026a4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80026a8:	6011      	str	r1, [r2, #0]
  return result;
 80026aa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	fab2 f282 	clz	r2, r2
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	f002 021f 	and.w	r2, r2, #31
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f202 	lsl.w	r2, r1, r2
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1a0      	bne.n	800260e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4b77      	ldr	r3, [pc, #476]	; (80028b4 <HAL_RCC_OscConfig+0xc44>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	4a76      	ldr	r2, [pc, #472]	; (80028b4 <HAL_RCC_OscConfig+0xc44>)
 80026da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 81c2 	beq.w	8002a70 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ec:	4b71      	ldr	r3, [pc, #452]	; (80028b4 <HAL_RCC_OscConfig+0xc44>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	f000 819c 	beq.w	8002a32 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b02      	cmp	r3, #2
 8002702:	f040 8114 	bne.w	800292e <HAL_RCC_OscConfig+0xcbe>
 8002706:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800270a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800270e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800271e:	601a      	str	r2, [r3, #0]
  return result;
 8002720:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002724:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002730:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	461a      	mov	r2, r3
 8002738:	2300      	movs	r3, #0
 800273a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe fa6a 	bl	8000c14 <HAL_GetTick>
 8002740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	e009      	b.n	800275a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe fa65 	bl	8000c14 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e18b      	b.n	8002a72 <HAL_RCC_OscConfig+0xe02>
 800275a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800275e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	fa93 f2a3 	rbit	r2, r3
 800276e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002772:	601a      	str	r2, [r3, #0]
  return result;
 8002774:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002778:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_RCC_OscConfig+0xb24>
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <HAL_RCC_OscConfig+0xc44>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	e01b      	b.n	80027cc <HAL_RCC_OscConfig+0xb5c>
 8002794:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	fa93 f2a3 	rbit	r2, r3
 80027a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <HAL_RCC_OscConfig+0xc44>)
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027d4:	6011      	str	r1, [r2, #0]
 80027d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	fa92 f1a2 	rbit	r1, r2
 80027e0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80027e4:	6011      	str	r1, [r2, #0]
  return result;
 80027e6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	fab2 f282 	clz	r2, r2
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	f042 0220 	orr.w	r2, r2, #32
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f002 021f 	and.w	r2, r2, #31
 80027fc:	2101      	movs	r1, #1
 80027fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d19e      	bne.n	8002746 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <HAL_RCC_OscConfig+0xc44>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	430b      	orrs	r3, r1
 800281e:	4925      	ldr	r1, [pc, #148]	; (80028b4 <HAL_RCC_OscConfig+0xc44>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
 8002824:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800282c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	fa93 f2a3 	rbit	r2, r3
 8002838:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800283c:	601a      	str	r2, [r3, #0]
  return result;
 800283e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002842:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800284e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	461a      	mov	r2, r3
 8002856:	2301      	movs	r3, #1
 8002858:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7fe f9db 	bl	8000c14 <HAL_GetTick>
 800285e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002862:	e009      	b.n	8002878 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe f9d6 	bl	8000c14 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0fc      	b.n	8002a72 <HAL_RCC_OscConfig+0xe02>
 8002878:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800287c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	fa93 f2a3 	rbit	r2, r3
 800288c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002890:	601a      	str	r2, [r3, #0]
  return result;
 8002892:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002896:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_OscConfig+0xc48>
 80028ac:	4b01      	ldr	r3, [pc, #4]	; (80028b4 <HAL_RCC_OscConfig+0xc44>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	e01e      	b.n	80028f0 <HAL_RCC_OscConfig+0xc80>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fa93 f2a3 	rbit	r2, r3
 80028cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	fa93 f2a3 	rbit	r2, r3
 80028e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_OscConfig+0xe0c>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80028f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028f8:	6011      	str	r1, [r2, #0]
 80028fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	fa92 f1a2 	rbit	r1, r2
 8002904:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002908:	6011      	str	r1, [r2, #0]
  return result;
 800290a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	fab2 f282 	clz	r2, r2
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	f042 0220 	orr.w	r2, r2, #32
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f002 021f 	and.w	r2, r2, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d09b      	beq.n	8002864 <HAL_RCC_OscConfig+0xbf4>
 800292c:	e0a0      	b.n	8002a70 <HAL_RCC_OscConfig+0xe00>
 800292e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002932:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002946:	601a      	str	r2, [r3, #0]
  return result;
 8002948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002958:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	461a      	mov	r2, r3
 8002960:	2300      	movs	r3, #0
 8002962:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fe f956 	bl	8000c14 <HAL_GetTick>
 8002968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296c:	e009      	b.n	8002982 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296e:	f7fe f951 	bl	8000c14 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e077      	b.n	8002a72 <HAL_RCC_OscConfig+0xe02>
 8002982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	fa93 f2a3 	rbit	r2, r3
 8002996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299a:	601a      	str	r2, [r3, #0]
  return result;
 800299c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d102      	bne.n	80029bc <HAL_RCC_OscConfig+0xd4c>
 80029b6:	4b31      	ldr	r3, [pc, #196]	; (8002a7c <HAL_RCC_OscConfig+0xe0c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	e01b      	b.n	80029f4 <HAL_RCC_OscConfig+0xd84>
 80029bc:	f107 0320 	add.w	r3, r7, #32
 80029c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f107 0320 	add.w	r3, r7, #32
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	fa93 f2a3 	rbit	r2, r3
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f107 0318 	add.w	r3, r7, #24
 80029da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	f107 0318 	add.w	r3, r7, #24
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	fa93 f2a3 	rbit	r2, r3
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_OscConfig+0xe0c>)
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	f107 0210 	add.w	r2, r7, #16
 80029f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029fc:	6011      	str	r1, [r2, #0]
 80029fe:	f107 0210 	add.w	r2, r7, #16
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	fa92 f1a2 	rbit	r1, r2
 8002a08:	f107 020c 	add.w	r2, r7, #12
 8002a0c:	6011      	str	r1, [r2, #0]
  return result;
 8002a0e:	f107 020c 	add.w	r2, r7, #12
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	fab2 f282 	clz	r2, r2
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	f042 0220 	orr.w	r2, r2, #32
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	f002 021f 	and.w	r2, r2, #31
 8002a24:	2101      	movs	r1, #1
 8002a26:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d19e      	bne.n	800296e <HAL_RCC_OscConfig+0xcfe>
 8002a30:	e01e      	b.n	8002a70 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e018      	b.n	8002a72 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a40:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_RCC_OscConfig+0xe0c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a48:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d108      	bne.n	8002a6c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000

08002a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b09e      	sub	sp, #120	; 0x78
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e162      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b90      	ldr	r3, [pc, #576]	; (8002cdc <HAL_RCC_ClockConfig+0x25c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d910      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b8d      	ldr	r3, [pc, #564]	; (8002cdc <HAL_RCC_ClockConfig+0x25c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0207 	bic.w	r2, r3, #7
 8002aae:	498b      	ldr	r1, [pc, #556]	; (8002cdc <HAL_RCC_ClockConfig+0x25c>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b89      	ldr	r3, [pc, #548]	; (8002cdc <HAL_RCC_ClockConfig+0x25c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e14a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad4:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <HAL_RCC_ClockConfig+0x260>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	497f      	ldr	r1, [pc, #508]	; (8002ce0 <HAL_RCC_ClockConfig+0x260>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80dc 	beq.w	8002cac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d13c      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xf6>
 8002afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d102      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xa6>
 8002b20:	4b6f      	ldr	r3, [pc, #444]	; (8002ce0 <HAL_RCC_ClockConfig+0x260>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	e00f      	b.n	8002b46 <HAL_RCC_ClockConfig+0xc6>
 8002b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	667b      	str	r3, [r7, #100]	; 0x64
 8002b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b38:	663b      	str	r3, [r7, #96]	; 0x60
 8002b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b42:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <HAL_RCC_ClockConfig+0x260>)
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b4e:	fa92 f2a2 	rbit	r2, r2
 8002b52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b56:	fab2 f282 	clz	r2, r2
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f042 0220 	orr.w	r2, r2, #32
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f002 021f 	and.w	r2, r2, #31
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d17b      	bne.n	8002c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0f3      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d13c      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x178>
 8002b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d102      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x128>
 8002ba2:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <HAL_RCC_ClockConfig+0x260>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	e00f      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
 8002ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bba:	643b      	str	r3, [r7, #64]	; 0x40
 8002bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc4:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <HAL_RCC_ClockConfig+0x260>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bcc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bd0:	fa92 f2a2 	rbit	r2, r2
 8002bd4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd8:	fab2 f282 	clz	r2, r2
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f042 0220 	orr.w	r2, r2, #32
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f002 021f 	and.w	r2, r2, #31
 8002be8:	2101      	movs	r1, #1
 8002bea:	fa01 f202 	lsl.w	r2, r1, r2
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d13a      	bne.n	8002c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b2      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2de>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x1a0>
 8002c1a:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <HAL_RCC_ClockConfig+0x260>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	e00d      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1bc>
 8002c20:	2302      	movs	r3, #2
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	623b      	str	r3, [r7, #32]
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <HAL_RCC_ClockConfig+0x260>)
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	61ba      	str	r2, [r7, #24]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	fa92 f2a2 	rbit	r2, r2
 8002c46:	617a      	str	r2, [r7, #20]
  return result;
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	fab2 f282 	clz	r2, r2
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	f042 0220 	orr.w	r2, r2, #32
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f002 021f 	and.w	r2, r2, #31
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e079      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_RCC_ClockConfig+0x260>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f023 0203 	bic.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	491a      	ldr	r1, [pc, #104]	; (8002ce0 <HAL_RCC_ClockConfig+0x260>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c7c:	f7fd ffca 	bl	8000c14 <HAL_GetTick>
 8002c80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c84:	f7fd ffc6 	bl	8000c14 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e061      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <HAL_RCC_ClockConfig+0x260>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 020c 	and.w	r2, r3, #12
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d1eb      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_RCC_ClockConfig+0x25c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d214      	bcs.n	8002ce4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_RCC_ClockConfig+0x25c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 0207 	bic.w	r2, r3, #7
 8002cc2:	4906      	ldr	r1, [pc, #24]	; (8002cdc <HAL_RCC_ClockConfig+0x25c>)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_RCC_ClockConfig+0x25c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e040      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2de>
 8002cdc:	40022000 	.word	0x40022000
 8002ce0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCC_ClockConfig+0x2e8>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	491a      	ldr	r1, [pc, #104]	; (8002d68 <HAL_RCC_ClockConfig+0x2e8>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <HAL_RCC_ClockConfig+0x2e8>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4912      	ldr	r1, [pc, #72]	; (8002d68 <HAL_RCC_ClockConfig+0x2e8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d22:	f000 f829 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002d26:	4601      	mov	r1, r0
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_RCC_ClockConfig+0x2e8>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d30:	22f0      	movs	r2, #240	; 0xf0
 8002d32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	fa92 f2a2 	rbit	r2, r2
 8002d3a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	fab2 f282 	clz	r2, r2
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	40d3      	lsrs	r3, r2
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x2ec>)
 8002d48:	5cd3      	ldrb	r3, [r2, r3]
 8002d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d4e:	4a08      	ldr	r2, [pc, #32]	; (8002d70 <HAL_RCC_ClockConfig+0x2f0>)
 8002d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <HAL_RCC_ClockConfig+0x2f4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd ff18 	bl	8000b8c <HAL_InitTick>
  
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3778      	adds	r7, #120	; 0x78
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08009238 	.word	0x08009238
 8002d70:	20000008 	.word	0x20000008
 8002d74:	2000000c 	.word	0x2000000c

08002d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b08b      	sub	sp, #44	; 0x2c
 8002d7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d92:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x30>
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x36>
 8002da6:	e03c      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002da8:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002daa:	623b      	str	r3, [r7, #32]
      break;
 8002dac:	e03c      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002db4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002db8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	fa92 f2a2 	rbit	r2, r2
 8002dc0:	607a      	str	r2, [r7, #4]
  return result;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	fab2 f282 	clz	r2, r2
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	40d3      	lsrs	r3, r2
 8002dcc:	4a1c      	ldr	r2, [pc, #112]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	220f      	movs	r2, #15
 8002ddc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	fa92 f2a2 	rbit	r2, r2
 8002de4:	60fa      	str	r2, [r7, #12]
  return result;
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	fab2 f282 	clz	r2, r2
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	40d3      	lsrs	r3, r2
 8002df0:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e00:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e10:	e004      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	4a0c      	ldr	r2, [pc, #48]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	623b      	str	r3, [r7, #32]
      break;
 8002e20:	e002      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e24:	623b      	str	r3, [r7, #32]
      break;
 8002e26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e28:	6a3b      	ldr	r3, [r7, #32]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	372c      	adds	r7, #44	; 0x2c
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	007a1200 	.word	0x007a1200
 8002e40:	08009250 	.word	0x08009250
 8002e44:	08009260 	.word	0x08009260
 8002e48:	003d0900 	.word	0x003d0900

08002e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000008 	.word	0x20000008

08002e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e6a:	f7ff ffef 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002e6e:	4601      	mov	r1, r0
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	fa92 f2a2 	rbit	r2, r2
 8002e84:	603a      	str	r2, [r7, #0]
  return result;
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	fab2 f282 	clz	r2, r2
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	40d3      	lsrs	r3, r2
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08009248 	.word	0x08009248

08002ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002eae:	f7ff ffcd 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ebc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ec0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	fa92 f2a2 	rbit	r2, r2
 8002ec8:	603a      	str	r2, [r7, #0]
  return result;
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	fab2 f282 	clz	r2, r2
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	40d3      	lsrs	r3, r2
 8002ed4:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ed6:	5cd3      	ldrb	r3, [r2, r3]
 8002ed8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	08009248 	.word	0x08009248

08002eec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b092      	sub	sp, #72	; 0x48
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80cd 	beq.w	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f10:	4b86      	ldr	r3, [pc, #536]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10e      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1c:	4b83      	ldr	r3, [pc, #524]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4a82      	ldr	r2, [pc, #520]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f26:	61d3      	str	r3, [r2, #28]
 8002f28:	4b80      	ldr	r3, [pc, #512]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b7d      	ldr	r3, [pc, #500]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b7a      	ldr	r3, [pc, #488]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a79      	ldr	r2, [pc, #484]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fd fe5f 	bl	8000c14 <HAL_GetTick>
 8002f56:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fd fe5b 	bl	8000c14 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b64      	cmp	r3, #100	; 0x64
 8002f66:	d901      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e0db      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	4b70      	ldr	r3, [pc, #448]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f78:	4b6c      	ldr	r3, [pc, #432]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f80:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d07d      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d076      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f96:	4b65      	ldr	r3, [pc, #404]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b5e      	ldr	r3, [pc, #376]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b55      	ldr	r3, [pc, #340]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fe8:	4a50      	ldr	r2, [pc, #320]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fec:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d045      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fd fe0c 	bl	8000c14 <HAL_GetTick>
 8002ffc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fd fe08 	bl	8000c14 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e086      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003016:	2302      	movs	r3, #2
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	2302      	movs	r3, #2
 8003024:	623b      	str	r3, [r7, #32]
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	61fb      	str	r3, [r7, #28]
  return result;
 800302e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d102      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003044:	4b39      	ldr	r3, [pc, #228]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	e007      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800304a:	2302      	movs	r3, #2
 800304c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	4b35      	ldr	r3, [pc, #212]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2202      	movs	r2, #2
 800305c:	613a      	str	r2, [r7, #16]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	fa92 f2a2 	rbit	r2, r2
 8003064:	60fa      	str	r2, [r7, #12]
  return result;
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	f002 021f 	and.w	r2, r2, #31
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f202 	lsl.w	r2, r1, r2
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0bd      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003084:	4b29      	ldr	r3, [pc, #164]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4926      	ldr	r1, [pc, #152]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003092:	4313      	orrs	r3, r2
 8003094:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003096:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800309a:	2b01      	cmp	r3, #1
 800309c:	d105      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309e:	4b23      	ldr	r3, [pc, #140]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4a22      	ldr	r2, [pc, #136]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f023 0203 	bic.w	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	491a      	ldr	r1, [pc, #104]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030d4:	4b15      	ldr	r3, [pc, #84]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	f023 0210 	bic.w	r2, r3, #16
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4912      	ldr	r1, [pc, #72]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	490b      	ldr	r1, [pc, #44]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003100:	4313      	orrs	r3, r2
 8003102:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	4903      	ldr	r1, [pc, #12]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800311e:	4313      	orrs	r3, r2
 8003120:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3748      	adds	r7, #72	; 0x48
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	40007000 	.word	0x40007000
 8003134:	10908100 	.word	0x10908100

08003138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e040      	b.n	80031cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd fc0e 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2224      	movs	r2, #36	; 0x24
 8003164:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8c0 	bl	80032fc <UART_SetConfig>
 800317c:	4603      	mov	r3, r0
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e022      	b.n	80031cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f9ec 	bl	800356c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fa73 	bl	80036b0 <UART_CheckIdleState>
 80031ca:	4603      	mov	r3, r0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	f040 8082 	bne.w	80032f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_UART_Transmit+0x26>
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e07a      	b.n	80032f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_UART_Transmit+0x38>
 8003208:	2302      	movs	r3, #2
 800320a:	e073      	b.n	80032f4 <HAL_UART_Transmit+0x120>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2221      	movs	r2, #33	; 0x21
 8003220:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003222:	f7fd fcf7 	bl	8000c14 <HAL_GetTick>
 8003226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	88fa      	ldrh	r2, [r7, #6]
 8003234:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003240:	d108      	bne.n	8003254 <HAL_UART_Transmit+0x80>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	e003      	b.n	800325c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003264:	e02d      	b.n	80032c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fa66 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e039      	b.n	80032f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003292:	b292      	uxth	r2, r2
 8003294:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	3302      	adds	r3, #2
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e008      	b.n	80032b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	b292      	uxth	r2, r2
 80032a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3301      	adds	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1cb      	bne.n	8003266 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2140      	movs	r1, #64	; 0x40
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fa32 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e005      	b.n	80032f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e000      	b.n	80032f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b8b      	ldr	r3, [pc, #556]	; (8003554 <UART_SetConfig+0x258>)
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	6979      	ldr	r1, [r7, #20]
 8003330:	430b      	orrs	r3, r1
 8003332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a79      	ldr	r2, [pc, #484]	; (8003558 <UART_SetConfig+0x25c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d121      	bne.n	80033bc <UART_SetConfig+0xc0>
 8003378:	4b78      	ldr	r3, [pc, #480]	; (800355c <UART_SetConfig+0x260>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b03      	cmp	r3, #3
 8003382:	d817      	bhi.n	80033b4 <UART_SetConfig+0xb8>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <UART_SetConfig+0x90>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033a9 	.word	0x080033a9
 8003394:	080033af 	.word	0x080033af
 8003398:	080033a3 	.word	0x080033a3
 800339c:	2300      	movs	r3, #0
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e01e      	b.n	80033e0 <UART_SetConfig+0xe4>
 80033a2:	2302      	movs	r3, #2
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e01b      	b.n	80033e0 <UART_SetConfig+0xe4>
 80033a8:	2304      	movs	r3, #4
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e018      	b.n	80033e0 <UART_SetConfig+0xe4>
 80033ae:	2308      	movs	r3, #8
 80033b0:	77fb      	strb	r3, [r7, #31]
 80033b2:	e015      	b.n	80033e0 <UART_SetConfig+0xe4>
 80033b4:	2310      	movs	r3, #16
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	bf00      	nop
 80033ba:	e011      	b.n	80033e0 <UART_SetConfig+0xe4>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a67      	ldr	r2, [pc, #412]	; (8003560 <UART_SetConfig+0x264>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d102      	bne.n	80033cc <UART_SetConfig+0xd0>
 80033c6:	2300      	movs	r3, #0
 80033c8:	77fb      	strb	r3, [r7, #31]
 80033ca:	e009      	b.n	80033e0 <UART_SetConfig+0xe4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a64      	ldr	r2, [pc, #400]	; (8003564 <UART_SetConfig+0x268>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d102      	bne.n	80033dc <UART_SetConfig+0xe0>
 80033d6:	2300      	movs	r3, #0
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e001      	b.n	80033e0 <UART_SetConfig+0xe4>
 80033dc:	2310      	movs	r3, #16
 80033de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e8:	d15c      	bne.n	80034a4 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 80033ea:	7ffb      	ldrb	r3, [r7, #31]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d828      	bhi.n	8003442 <UART_SetConfig+0x146>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <UART_SetConfig+0xfc>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800341d 	.word	0x0800341d
 80033fc:	08003425 	.word	0x08003425
 8003400:	0800342d 	.word	0x0800342d
 8003404:	08003443 	.word	0x08003443
 8003408:	08003433 	.word	0x08003433
 800340c:	08003443 	.word	0x08003443
 8003410:	08003443 	.word	0x08003443
 8003414:	08003443 	.word	0x08003443
 8003418:	0800343b 	.word	0x0800343b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800341c:	f7ff fd22 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8003420:	61b8      	str	r0, [r7, #24]
        break;
 8003422:	e013      	b.n	800344c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003424:	f7ff fd40 	bl	8002ea8 <HAL_RCC_GetPCLK2Freq>
 8003428:	61b8      	str	r0, [r7, #24]
        break;
 800342a:	e00f      	b.n	800344c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800342c:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <UART_SetConfig+0x26c>)
 800342e:	61bb      	str	r3, [r7, #24]
        break;
 8003430:	e00c      	b.n	800344c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003432:	f7ff fca1 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8003436:	61b8      	str	r0, [r7, #24]
        break;
 8003438:	e008      	b.n	800344c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800343a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343e:	61bb      	str	r3, [r7, #24]
        break;
 8003440:	e004      	b.n	800344c <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	77bb      	strb	r3, [r7, #30]
        break;
 800344a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d074      	beq.n	800353c <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	005a      	lsls	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	441a      	add	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	b29b      	uxth	r3, r3
 8003468:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b0f      	cmp	r3, #15
 800346e:	d916      	bls.n	800349e <UART_SetConfig+0x1a2>
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003476:	d212      	bcs.n	800349e <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f023 030f 	bic.w	r3, r3, #15
 8003480:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	b29b      	uxth	r3, r3
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	b29a      	uxth	r2, r3
 800348e:	89fb      	ldrh	r3, [r7, #14]
 8003490:	4313      	orrs	r3, r2
 8003492:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	89fa      	ldrh	r2, [r7, #14]
 800349a:	60da      	str	r2, [r3, #12]
 800349c:	e04e      	b.n	800353c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	77bb      	strb	r3, [r7, #30]
 80034a2:	e04b      	b.n	800353c <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034a4:	7ffb      	ldrb	r3, [r7, #31]
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d827      	bhi.n	80034fa <UART_SetConfig+0x1fe>
 80034aa:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <UART_SetConfig+0x1b4>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034d5 	.word	0x080034d5
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034e5 	.word	0x080034e5
 80034bc:	080034fb 	.word	0x080034fb
 80034c0:	080034eb 	.word	0x080034eb
 80034c4:	080034fb 	.word	0x080034fb
 80034c8:	080034fb 	.word	0x080034fb
 80034cc:	080034fb 	.word	0x080034fb
 80034d0:	080034f3 	.word	0x080034f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d4:	f7ff fcc6 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 80034d8:	61b8      	str	r0, [r7, #24]
        break;
 80034da:	e013      	b.n	8003504 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034dc:	f7ff fce4 	bl	8002ea8 <HAL_RCC_GetPCLK2Freq>
 80034e0:	61b8      	str	r0, [r7, #24]
        break;
 80034e2:	e00f      	b.n	8003504 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e4:	4b20      	ldr	r3, [pc, #128]	; (8003568 <UART_SetConfig+0x26c>)
 80034e6:	61bb      	str	r3, [r7, #24]
        break;
 80034e8:	e00c      	b.n	8003504 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ea:	f7ff fc45 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 80034ee:	61b8      	str	r0, [r7, #24]
        break;
 80034f0:	e008      	b.n	8003504 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f6:	61bb      	str	r3, [r7, #24]
        break;
 80034f8:	e004      	b.n	8003504 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	77bb      	strb	r3, [r7, #30]
        break;
 8003502:	bf00      	nop
    }

    if (pclk != 0U)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d018      	beq.n	800353c <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	085a      	lsrs	r2, r3, #1
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	441a      	add	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	b29b      	uxth	r3, r3
 800351e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d908      	bls.n	8003538 <UART_SetConfig+0x23c>
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d204      	bcs.n	8003538 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	e001      	b.n	800353c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003548:	7fbb      	ldrb	r3, [r7, #30]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	efff69f3 	.word	0xefff69f3
 8003558:	40013800 	.word	0x40013800
 800355c:	40021000 	.word	0x40021000
 8003560:	40004400 	.word	0x40004400
 8003564:	40004800 	.word	0x40004800
 8003568:	007a1200 	.word	0x007a1200

0800356c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01a      	beq.n	8003682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366a:	d10a      	bne.n	8003682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036c0:	f7fd faa8 	bl	8000c14 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d10e      	bne.n	80036f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f82d 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e023      	b.n	800373a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d10e      	bne.n	800371e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f817 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e00d      	b.n	800373a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b09c      	sub	sp, #112	; 0x70
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003752:	e0a5      	b.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800375a:	f000 80a1 	beq.w	80038a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375e:	f7fd fa59 	bl	8000c14 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <UART_WaitOnFlagUntilTimeout+0x32>
 800376e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003770:	2b00      	cmp	r3, #0
 8003772:	d13e      	bne.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003784:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003788:	667b      	str	r3, [r7, #100]	; 0x64
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003794:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003798:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e6      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3308      	adds	r3, #8
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	663b      	str	r3, [r7, #96]	; 0x60
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3308      	adds	r3, #8
 80037c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80037c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e5      	bne.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e067      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d04f      	beq.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380e:	d147      	bne.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003818:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800382e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
 800383a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800383e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e6      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3308      	adds	r3, #8
 8003852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	613b      	str	r3, [r7, #16]
   return(result);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	66bb      	str	r3, [r7, #104]	; 0x68
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3308      	adds	r3, #8
 800386a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800386c:	623a      	str	r2, [r7, #32]
 800386e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	69f9      	ldr	r1, [r7, #28]
 8003872:	6a3a      	ldr	r2, [r7, #32]
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	61bb      	str	r3, [r7, #24]
   return(result);
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e5      	bne.n	800384c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e010      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4013      	ands	r3, r2
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	f43f af4a 	beq.w	8003754 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3770      	adds	r7, #112	; 0x70
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f001 fce5 	bl	80052aa <VL53L0X_get_offset_calibration_data_micro_meter>
 80038e0:	4603      	mov	r3, r0
 80038e2:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80038e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	218a      	movs	r1, #138	; 0x8a
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f004 fee8 	bl	80086e0 <VL53L0X_WrByte>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8003914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8003920:	b5b0      	push	{r4, r5, r7, lr}
 8003922:	b096      	sub	sp, #88	; 0x58
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003928:	2300      	movs	r3, #0
 800392a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800392e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003932:	2b00      	cmp	r3, #0
 8003934:	d107      	bne.n	8003946 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8003936:	2200      	movs	r2, #0
 8003938:	2188      	movs	r1, #136	; 0x88
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f004 fed0 	bl	80086e0 <VL53L0X_WrByte>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003954:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800395e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a9e      	ldr	r2, [pc, #632]	; (8003be0 <VL53L0X_DataInit+0x2c0>)
 8003966:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a9d      	ldr	r2, [pc, #628]	; (8003be4 <VL53L0X_DataInit+0x2c4>)
 800396e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003978:	f107 0310 	add.w	r3, r7, #16
 800397c:	4619      	mov	r1, r3
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fac2 	bl	8003f08 <VL53L0X_GetDeviceParameters>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800398a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800398e:	2b00      	cmp	r3, #0
 8003990:	d112      	bne.n	80039b8 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8003992:	2300      	movs	r3, #0
 8003994:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8003996:	2300      	movs	r3, #0
 8003998:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f103 0410 	add.w	r4, r3, #16
 80039a0:	f107 0510 	add.w	r5, r7, #16
 80039a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80039b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2264      	movs	r2, #100	; 0x64
 80039bc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80039c6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039d0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80039da:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80039e6:	2201      	movs	r2, #1
 80039e8:	2180      	movs	r1, #128	; 0x80
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f004 fe78 	bl	80086e0 <VL53L0X_WrByte>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80039fe:	2201      	movs	r2, #1
 8003a00:	21ff      	movs	r1, #255	; 0xff
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f004 fe6c 	bl	80086e0 <VL53L0X_WrByte>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2100      	movs	r1, #0
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f004 fe60 	bl	80086e0 <VL53L0X_WrByte>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8003a2e:	f107 030f 	add.w	r3, r7, #15
 8003a32:	461a      	mov	r2, r3
 8003a34:	2191      	movs	r1, #145	; 0x91
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f004 fed4 	bl	80087e4 <VL53L0X_RdByte>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003a52:	2201      	movs	r2, #1
 8003a54:	2100      	movs	r1, #0
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f004 fe42 	bl	80086e0 <VL53L0X_WrByte>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	21ff      	movs	r1, #255	; 0xff
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f004 fe36 	bl	80086e0 <VL53L0X_WrByte>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f004 fe2a 	bl	80086e0 <VL53L0X_WrByte>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	653b      	str	r3, [r7, #80]	; 0x50
 8003a9e:	e014      	b.n	8003aca <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8003aa0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d114      	bne.n	8003ad2 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2201      	movs	r2, #1
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fd51 	bl	8004558 <VL53L0X_SetLimitCheckEnable>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	653b      	str	r3, [r7, #80]	; 0x50
 8003aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	dde7      	ble.n	8003aa0 <VL53L0X_DataInit+0x180>
 8003ad0:	e000      	b.n	8003ad4 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8003ad2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8003ad4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003adc:	2200      	movs	r2, #0
 8003ade:	2102      	movs	r1, #2
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fd39 	bl	8004558 <VL53L0X_SetLimitCheckEnable>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003aec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d107      	bne.n	8003b04 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003af4:	2200      	movs	r2, #0
 8003af6:	2103      	movs	r1, #3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fd2d 	bl	8004558 <VL53L0X_SetLimitCheckEnable>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003b04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d107      	bne.n	8003b1c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2104      	movs	r1, #4
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fd21 	bl	8004558 <VL53L0X_SetLimitCheckEnable>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003b1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d107      	bne.n	8003b34 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003b24:	2200      	movs	r2, #0
 8003b26:	2105      	movs	r1, #5
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fd15 	bl	8004558 <VL53L0X_SetLimitCheckEnable>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003b34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d108      	bne.n	8003b4e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003b3c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8003b40:	2100      	movs	r1, #0
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fdb8 	bl	80046b8 <VL53L0X_SetLimitCheckValue>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003b4e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d108      	bne.n	8003b68 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fdab 	bl	80046b8 <VL53L0X_SetLimitCheckValue>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d108      	bne.n	8003b82 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003b70:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8003b74:	2102      	movs	r1, #2
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fd9e 	bl	80046b8 <VL53L0X_SetLimitCheckValue>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2103      	movs	r1, #3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fd92 	bl	80046b8 <VL53L0X_SetLimitCheckValue>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	22ff      	movs	r2, #255	; 0xff
 8003ba6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003baa:	22ff      	movs	r2, #255	; 0xff
 8003bac:	2101      	movs	r1, #1
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f004 fd96 	bl	80086e0 <VL53L0X_WrByte>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8003bc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d103      	bne.n	8003bd2 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8003bd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3758      	adds	r7, #88	; 0x58
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8003bde:	bf00      	nop
 8003be0:	00016b85 	.word	0x00016b85
 8003be4:	000970a4 	.word	0x000970a4

08003be8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003be8:	b5b0      	push	{r4, r5, r7, lr}
 8003bea:	b09e      	sub	sp, #120	; 0x78
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003bf6:	f107 031c 	add.w	r3, r7, #28
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f004 fed3 	bl	80089aa <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003c24:	2101      	movs	r1, #1
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f002 fa95 	bl	8006156 <VL53L0X_get_info_from_device>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003c38:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003c40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003c44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d80d      	bhi.n	8003c68 <VL53L0X_StaticInit+0x80>
 8003c4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d102      	bne.n	8003c5a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d806      	bhi.n	8003c68 <VL53L0X_StaticInit+0x80>
 8003c5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10e      	bne.n	8003c80 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d90b      	bls.n	8003c80 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003c68:	f107 0218 	add.w	r2, r7, #24
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4619      	mov	r1, r3
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f001 fd14 	bl	80056a0 <VL53L0X_perform_ref_spad_management>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003c7e:	e009      	b.n	8003c94 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003c80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c84:	461a      	mov	r2, r3
 8003c86:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f001 ff15 	bl	8005ab8 <VL53L0X_set_reference_spads>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003c94:	4b94      	ldr	r3, [pc, #592]	; (8003ee8 <VL53L0X_StaticInit+0x300>)
 8003c96:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003c98:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10f      	bne.n	8003cc0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003ca6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003caa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cba:	e001      	b.n	8003cc0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003cbc:	4b8a      	ldr	r3, [pc, #552]	; (8003ee8 <VL53L0X_StaticInit+0x300>)
 8003cbe:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003cc0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003cc8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f003 fde8 	bl	80078a0 <VL53L0X_load_tuning_settings>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003cd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f001 f90d 	bl	8004f08 <VL53L0X_SetGpioConfig>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cf4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d121      	bne.n	8003d40 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	21ff      	movs	r1, #255	; 0xff
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f004 fced 	bl	80086e0 <VL53L0X_WrByte>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003d0c:	f107 031a 	add.w	r3, r7, #26
 8003d10:	461a      	mov	r2, r3
 8003d12:	2184      	movs	r1, #132	; 0x84
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f004 fd8f 	bl	8008838 <VL53L0X_RdWord>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	21ff      	movs	r1, #255	; 0xff
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f004 fcd7 	bl	80086e0 <VL53L0X_WrByte>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d40:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003d48:	8b7b      	ldrh	r3, [r7, #26]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003d54:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d108      	bne.n	8003d6e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003d5c:	f107 031c 	add.w	r3, r7, #28
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8d0 	bl	8003f08 <VL53L0X_GetDeviceParameters>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003d6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d110      	bne.n	8003d98 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003d76:	f107 0319 	add.w	r3, r7, #25
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f9ae 	bl	80040de <VL53L0X_GetFractionEnable>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003d88:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d103      	bne.n	8003d98 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003d90:	7e7a      	ldrb	r2, [r7, #25]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003d98:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10e      	bne.n	8003dbe <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f103 0410 	add.w	r4, r3, #16
 8003da6:	f107 051c 	add.w	r5, r7, #28
 8003daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003dba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003dbe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d111      	bne.n	8003dea <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003dc6:	f107 0319 	add.w	r3, r7, #25
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2101      	movs	r1, #1
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f004 fd08 	bl	80087e4 <VL53L0X_RdByte>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003dda:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003de2:	7e7a      	ldrb	r2, [r7, #25]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003dea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d107      	bne.n	8003e02 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003df2:	2200      	movs	r2, #0
 8003df4:	2100      	movs	r1, #0
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f9e6 	bl	80041c8 <VL53L0X_SetSequenceStepEnable>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003e02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d107      	bne.n	8003e1a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f9da 	bl	80041c8 <VL53L0X_SetSequenceStepEnable>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003e1a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2203      	movs	r2, #3
 8003e26:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003e32:	f107 0313 	add.w	r3, r7, #19
 8003e36:	461a      	mov	r2, r3
 8003e38:	2100      	movs	r1, #0
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9ac 	bl	8004198 <VL53L0X_GetVcselPulsePeriod>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003e4e:	7cfa      	ldrb	r2, [r7, #19]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003e5e:	f107 0313 	add.w	r3, r7, #19
 8003e62:	461a      	mov	r2, r3
 8003e64:	2101      	movs	r1, #1
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f996 	bl	8004198 <VL53L0X_GetVcselPulsePeriod>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003e7a:	7cfa      	ldrb	r2, [r7, #19]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e82:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8003e8a:	f107 030c 	add.w	r3, r7, #12
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2103      	movs	r1, #3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f002 fee0 	bl	8006c58 <get_sequence_step_timeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003eae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8003eb6:	f107 030c 	add.w	r3, r7, #12
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2104      	movs	r1, #4
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f002 feca 	bl	8006c58 <get_sequence_step_timeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003eca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d103      	bne.n	8003eda <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003eda:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3770      	adds	r7, #112	; 0x70
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000014 	.word	0x20000014

08003eec <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8003ef4:	239d      	movs	r3, #157	; 0x9d
 8003ef6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8003ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8cc 	bl	80040b8 <VL53L0X_GetDeviceMode>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d107      	bne.n	8003f3c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	4619      	mov	r1, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa94 	bl	8004460 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2200      	movs	r2, #0
 8003f48:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d107      	bne.n	8003f62 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	3310      	adds	r3, #16
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 faca 	bl	80044f2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d107      	bne.n	8003f7a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	3314      	adds	r3, #20
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff fcaa 	bl	80038ca <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003f76:	4603      	mov	r3, r0
 8003f78:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d134      	bne.n	8003fec <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	e02a      	b.n	8003fde <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d12a      	bne.n	8003fe6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	b299      	uxth	r1, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	3308      	adds	r3, #8
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fbea 	bl	800477c <VL53L0X_GetLimitCheckValue>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	461a      	mov	r2, r3
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d117      	bne.n	8003fea <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	b299      	uxth	r1, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	3318      	adds	r3, #24
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fb51 	bl	8004670 <VL53L0X_GetLimitCheckEnable>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b05      	cmp	r3, #5
 8003fe2:	ddd1      	ble.n	8003f88 <VL53L0X_GetDeviceParameters+0x80>
 8003fe4:	e002      	b.n	8003fec <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003fea:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	333c      	adds	r3, #60	; 0x3c
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fc4c 	bl	8004898 <VL53L0X_GetWrapAroundCheckEnable>
 8004000:	4603      	mov	r3, r0
 8004002:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8004004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f895 	bl	8004142 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800401c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	2b15      	cmp	r3, #21
 800403c:	d832      	bhi.n	80040a4 <VL53L0X_SetDeviceMode+0x7c>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <VL53L0X_SetDeviceMode+0x1c>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	0800409d 	.word	0x0800409d
 8004048:	0800409d 	.word	0x0800409d
 800404c:	080040a5 	.word	0x080040a5
 8004050:	0800409d 	.word	0x0800409d
 8004054:	080040a5 	.word	0x080040a5
 8004058:	080040a5 	.word	0x080040a5
 800405c:	080040a5 	.word	0x080040a5
 8004060:	080040a5 	.word	0x080040a5
 8004064:	080040a5 	.word	0x080040a5
 8004068:	080040a5 	.word	0x080040a5
 800406c:	080040a5 	.word	0x080040a5
 8004070:	080040a5 	.word	0x080040a5
 8004074:	080040a5 	.word	0x080040a5
 8004078:	080040a5 	.word	0x080040a5
 800407c:	080040a5 	.word	0x080040a5
 8004080:	080040a5 	.word	0x080040a5
 8004084:	080040a5 	.word	0x080040a5
 8004088:	080040a5 	.word	0x080040a5
 800408c:	080040a5 	.word	0x080040a5
 8004090:	080040a5 	.word	0x080040a5
 8004094:	0800409d 	.word	0x0800409d
 8004098:	0800409d 	.word	0x0800409d
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	741a      	strb	r2, [r3, #16]
		break;
 80040a2:	e001      	b.n	80040a8 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80040a4:	23f8      	movs	r3, #248	; 0xf8
 80040a6:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80040a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7c1a      	ldrb	r2, [r3, #16]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80040ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	2109      	movs	r1, #9
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f004 fb77 	bl	80087e4 <VL53L0X_RdByte>
 80040f6:	4603      	mov	r3, r0
 80040f8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80040fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	b2da      	uxtb	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004110:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800412a:	6839      	ldr	r1, [r7, #0]
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f003 fa26 	bl	800757e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8004132:	4603      	mov	r3, r0
 8004134:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8004136:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f003 faf3 	bl	800773e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8004158:	4603      	mov	r3, r0
 800415a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800415c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	70fb      	strb	r3, [r7, #3]
 8004174:	4613      	mov	r3, r2
 8004176:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004178:	2300      	movs	r3, #0
 800417a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800417c:	78ba      	ldrb	r2, [r7, #2]
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f002 ff3b 	bl	8006ffe <VL53L0X_set_vcsel_pulse_period>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800418c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	460b      	mov	r3, r1
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80041aa:	7afb      	ldrb	r3, [r7, #11]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4619      	mov	r1, r3
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f003 f9ad 	bl	8007510 <VL53L0X_get_vcsel_pulse_period>
 80041b6:	4603      	mov	r3, r0
 80041b8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80041ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	70fb      	strb	r3, [r7, #3]
 80041d4:	4613      	mov	r3, r2
 80041d6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041d8:	2300      	movs	r3, #0
 80041da:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80041e4:	f107 030f 	add.w	r3, r7, #15
 80041e8:	461a      	mov	r2, r3
 80041ea:	2101      	movs	r1, #1
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f004 faf9 	bl	80087e4 <VL53L0X_RdByte>
 80041f2:	4603      	mov	r3, r0
 80041f4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80041fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d15a      	bne.n	80042b8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8004202:	78bb      	ldrb	r3, [r7, #2]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d12b      	bne.n	8004260 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	2b04      	cmp	r3, #4
 800420c:	d825      	bhi.n	800425a <VL53L0X_SetSequenceStepEnable+0x92>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004229 	.word	0x08004229
 8004218:	08004233 	.word	0x08004233
 800421c:	0800423d 	.word	0x0800423d
 8004220:	08004247 	.word	0x08004247
 8004224:	08004251 	.word	0x08004251
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004228:	7dbb      	ldrb	r3, [r7, #22]
 800422a:	f043 0310 	orr.w	r3, r3, #16
 800422e:	75bb      	strb	r3, [r7, #22]
				break;
 8004230:	e043      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8004232:	7dbb      	ldrb	r3, [r7, #22]
 8004234:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004238:	75bb      	strb	r3, [r7, #22]
				break;
 800423a:	e03e      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800423c:	7dbb      	ldrb	r3, [r7, #22]
 800423e:	f043 0304 	orr.w	r3, r3, #4
 8004242:	75bb      	strb	r3, [r7, #22]
				break;
 8004244:	e039      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8004246:	7dbb      	ldrb	r3, [r7, #22]
 8004248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800424c:	75bb      	strb	r3, [r7, #22]
				break;
 800424e:	e034      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004250:	7dbb      	ldrb	r3, [r7, #22]
 8004252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004256:	75bb      	strb	r3, [r7, #22]
				break;
 8004258:	e02f      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800425a:	23fc      	movs	r3, #252	; 0xfc
 800425c:	75fb      	strb	r3, [r7, #23]
 800425e:	e02c      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	2b04      	cmp	r3, #4
 8004264:	d825      	bhi.n	80042b2 <VL53L0X_SetSequenceStepEnable+0xea>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	08004281 	.word	0x08004281
 8004270:	0800428b 	.word	0x0800428b
 8004274:	08004295 	.word	0x08004295
 8004278:	0800429f 	.word	0x0800429f
 800427c:	080042a9 	.word	0x080042a9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004280:	7dbb      	ldrb	r3, [r7, #22]
 8004282:	f023 0310 	bic.w	r3, r3, #16
 8004286:	75bb      	strb	r3, [r7, #22]
				break;
 8004288:	e017      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800428a:	7dbb      	ldrb	r3, [r7, #22]
 800428c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004290:	75bb      	strb	r3, [r7, #22]
				break;
 8004292:	e012      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8004294:	7dbb      	ldrb	r3, [r7, #22]
 8004296:	f023 0304 	bic.w	r3, r3, #4
 800429a:	75bb      	strb	r3, [r7, #22]
				break;
 800429c:	e00d      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800429e:	7dbb      	ldrb	r3, [r7, #22]
 80042a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a4:	75bb      	strb	r3, [r7, #22]
				break;
 80042a6:	e008      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80042a8:	7dbb      	ldrb	r3, [r7, #22]
 80042aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ae:	75bb      	strb	r3, [r7, #22]
				break;
 80042b0:	e003      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80042b2:	23fc      	movs	r3, #252	; 0xfc
 80042b4:	75fb      	strb	r3, [r7, #23]
 80042b6:	e000      	b.n	80042ba <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80042b8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	7dba      	ldrb	r2, [r7, #22]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d01e      	beq.n	8004300 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80042c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80042ca:	7dbb      	ldrb	r3, [r7, #22]
 80042cc:	461a      	mov	r2, r3
 80042ce:	2101      	movs	r1, #1
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f004 fa05 	bl	80086e0 <VL53L0X_WrByte>
 80042d6:	4603      	mov	r3, r0
 80042d8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80042da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d103      	bne.n	80042ea <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7dba      	ldrb	r2, [r7, #22]
 80042e6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80042ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80042f8:	6939      	ldr	r1, [r7, #16]
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ff0e 	bl	800411c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004300:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	72fb      	strb	r3, [r7, #11]
 800431a:	4613      	mov	r3, r2
 800431c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004328:	7afb      	ldrb	r3, [r7, #11]
 800432a:	2b04      	cmp	r3, #4
 800432c:	d836      	bhi.n	800439c <sequence_step_enabled+0x90>
 800432e:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <sequence_step_enabled+0x28>)
 8004330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004334:	08004349 	.word	0x08004349
 8004338:	0800435b 	.word	0x0800435b
 800433c:	0800436d 	.word	0x0800436d
 8004340:	0800437f 	.word	0x0800437f
 8004344:	08004391 	.word	0x08004391
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004348:	7abb      	ldrb	r3, [r7, #10]
 800434a:	111b      	asrs	r3, r3, #4
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	b2da      	uxtb	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	701a      	strb	r2, [r3, #0]
		break;
 8004358:	e022      	b.n	80043a0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800435a:	7abb      	ldrb	r3, [r7, #10]
 800435c:	10db      	asrs	r3, r3, #3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	b2da      	uxtb	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	701a      	strb	r2, [r3, #0]
		break;
 800436a:	e019      	b.n	80043a0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800436c:	7abb      	ldrb	r3, [r7, #10]
 800436e:	109b      	asrs	r3, r3, #2
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	b2da      	uxtb	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	701a      	strb	r2, [r3, #0]
		break;
 800437c:	e010      	b.n	80043a0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800437e:	7abb      	ldrb	r3, [r7, #10]
 8004380:	119b      	asrs	r3, r3, #6
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	b2da      	uxtb	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	701a      	strb	r2, [r3, #0]
		break;
 800438e:	e007      	b.n	80043a0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004390:	7abb      	ldrb	r3, [r7, #10]
 8004392:	09db      	lsrs	r3, r3, #7
 8004394:	b2da      	uxtb	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	701a      	strb	r2, [r3, #0]
		break;
 800439a:	e001      	b.n	80043a0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800439c:	23fc      	movs	r3, #252	; 0xfc
 800439e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80043a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80043c2:	f107 030e 	add.w	r3, r7, #14
 80043c6:	461a      	mov	r2, r3
 80043c8:	2101      	movs	r1, #1
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f004 fa0a 	bl	80087e4 <VL53L0X_RdByte>
 80043d0:	4603      	mov	r3, r0
 80043d2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80043d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d107      	bne.n	80043ec <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80043dc:	7bba      	ldrb	r2, [r7, #14]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2100      	movs	r1, #0
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff ff92 	bl	800430c <sequence_step_enabled>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80043ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d108      	bne.n	8004406 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80043f4:	7bba      	ldrb	r2, [r7, #14]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	3302      	adds	r3, #2
 80043fa:	2101      	movs	r1, #1
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ff85 	bl	800430c <sequence_step_enabled>
 8004402:	4603      	mov	r3, r0
 8004404:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d108      	bne.n	8004420 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800440e:	7bba      	ldrb	r2, [r7, #14]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	3301      	adds	r3, #1
 8004414:	2102      	movs	r1, #2
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff ff78 	bl	800430c <sequence_step_enabled>
 800441c:	4603      	mov	r3, r0
 800441e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d108      	bne.n	800443a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004428:	7bba      	ldrb	r2, [r7, #14]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	3303      	adds	r3, #3
 800442e:	2103      	movs	r1, #3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff ff6b 	bl	800430c <sequence_step_enabled>
 8004436:	4603      	mov	r3, r0
 8004438:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800443a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d108      	bne.n	8004454 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8004442:	7bba      	ldrb	r2, [r7, #14]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	3304      	adds	r3, #4
 8004448:	2104      	movs	r1, #4
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ff5e 	bl	800430c <sequence_step_enabled>
 8004450:	4603      	mov	r3, r0
 8004452:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800446e:	f107 030c 	add.w	r3, r7, #12
 8004472:	461a      	mov	r2, r3
 8004474:	21f8      	movs	r1, #248	; 0xf8
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f004 f9de 	bl	8008838 <VL53L0X_RdWord>
 800447c:	4603      	mov	r3, r0
 800447e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d108      	bne.n	800449a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004488:	f107 0308 	add.w	r3, r7, #8
 800448c:	461a      	mov	r2, r3
 800448e:	2104      	movs	r1, #4
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f004 fa09 	bl	80088a8 <VL53L0X_RdDWord>
 8004496:	4603      	mov	r3, r0
 8004498:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800449a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10c      	bne.n	80044bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80044a2:	89bb      	ldrh	r3, [r7, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	89ba      	ldrh	r2, [r7, #12]
 80044ac:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80044bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7f1b      	ldrb	r3, [r3, #28]
 80044da:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	7bba      	ldrb	r2, [r7, #14]
 80044e0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80044e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004500:	f107 030e 	add.w	r3, r7, #14
 8004504:	461a      	mov	r2, r3
 8004506:	2120      	movs	r1, #32
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f004 f995 	bl	8008838 <VL53L0X_RdWord>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004512:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d118      	bne.n	800454c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800451a:	89fb      	ldrh	r3, [r7, #14]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	771a      	strb	r2, [r3, #28]
 8004532:	e00b      	b.n	800454c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004534:	89fb      	ldrh	r3, [r7, #14]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800454c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	807b      	strh	r3, [r7, #2]
 8004564:	4613      	mov	r3, r2
 8004566:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004568:	2300      	movs	r3, #0
 800456a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004578:	887b      	ldrh	r3, [r7, #2]
 800457a:	2b05      	cmp	r3, #5
 800457c:	d902      	bls.n	8004584 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800457e:	23fc      	movs	r3, #252	; 0xfc
 8004580:	75fb      	strb	r3, [r7, #23]
 8004582:	e05b      	b.n	800463c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004584:	787b      	ldrb	r3, [r7, #1]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8004592:	2301      	movs	r3, #1
 8004594:	73bb      	strb	r3, [r7, #14]
 8004596:	e00a      	b.n	80045ae <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004598:	887b      	ldrh	r3, [r7, #2]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	330c      	adds	r3, #12
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80045ae:	887b      	ldrh	r3, [r7, #2]
 80045b0:	2b05      	cmp	r3, #5
 80045b2:	d841      	bhi.n	8004638 <VL53L0X_SetLimitCheckEnable+0xe0>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <VL53L0X_SetLimitCheckEnable+0x64>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045d5 	.word	0x080045d5
 80045c0:	080045df 	.word	0x080045df
 80045c4:	080045f5 	.word	0x080045f5
 80045c8:	080045ff 	.word	0x080045ff
 80045cc:	08004609 	.word	0x08004609
 80045d0:	08004621 	.word	0x08004621

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	7bfa      	ldrb	r2, [r7, #15]
 80045d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80045dc:	e02e      	b.n	800463c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	2144      	movs	r1, #68	; 0x44
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f004 f89d 	bl	8008728 <VL53L0X_WrWord>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]

			break;
 80045f2:	e023      	b.n	800463c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80045fc:	e01e      	b.n	800463c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	7bfa      	ldrb	r2, [r7, #15]
 8004602:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004606:	e019      	b.n	800463c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004608:	7bbb      	ldrb	r3, [r7, #14]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800460e:	7b7b      	ldrb	r3, [r7, #13]
 8004610:	22fe      	movs	r2, #254	; 0xfe
 8004612:	2160      	movs	r1, #96	; 0x60
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f004 f8b1 	bl	800877c <VL53L0X_UpdateByte>
 800461a:	4603      	mov	r3, r0
 800461c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800461e:	e00d      	b.n	800463c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004620:	7bbb      	ldrb	r3, [r7, #14]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004626:	7b7b      	ldrb	r3, [r7, #13]
 8004628:	22ef      	movs	r2, #239	; 0xef
 800462a:	2160      	movs	r1, #96	; 0x60
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f004 f8a5 	bl	800877c <VL53L0X_UpdateByte>
 8004632:	4603      	mov	r3, r0
 8004634:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004636:	e001      	b.n	800463c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004638:	23fc      	movs	r3, #252	; 0xfc
 800463a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800463c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10f      	bne.n	8004664 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800464a:	887b      	ldrh	r3, [r7, #2]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004656:	e005      	b.n	8004664 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004658:	887b      	ldrh	r3, [r7, #2]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004664:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	460b      	mov	r3, r1
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800467e:	2300      	movs	r3, #0
 8004680:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004682:	897b      	ldrh	r3, [r7, #10]
 8004684:	2b05      	cmp	r3, #5
 8004686:	d905      	bls.n	8004694 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004688:	23fc      	movs	r3, #252	; 0xfc
 800468a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	e008      	b.n	80046a6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004694:	897b      	ldrh	r3, [r7, #10]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4413      	add	r3, r2
 800469a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800469e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	7dba      	ldrb	r2, [r7, #22]
 80046a4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80046a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	460b      	mov	r3, r1
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80046ca:	897b      	ldrh	r3, [r7, #10]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80046d6:	7dbb      	ldrb	r3, [r7, #22]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d107      	bne.n	80046ec <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80046dc:	897b      	ldrh	r3, [r7, #10]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	330c      	adds	r3, #12
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	e040      	b.n	800476e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80046ec:	897b      	ldrh	r3, [r7, #10]
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d830      	bhi.n	8004754 <VL53L0X_SetLimitCheckValue+0x9c>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <VL53L0X_SetLimitCheckValue+0x40>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	08004711 	.word	0x08004711
 80046fc:	08004719 	.word	0x08004719
 8004700:	0800472f 	.word	0x0800472f
 8004704:	08004737 	.word	0x08004737
 8004708:	0800473f 	.word	0x0800473f
 800470c:	0800473f 	.word	0x0800473f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004716:	e01f      	b.n	8004758 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800471c:	b29b      	uxth	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	2144      	movs	r1, #68	; 0x44
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f004 f800 	bl	8008728 <VL53L0X_WrWord>
 8004728:	4603      	mov	r3, r0
 800472a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800472c:	e014      	b.n	8004758 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004734:	e010      	b.n	8004758 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800473c:	e00c      	b.n	8004758 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004742:	b29b      	uxth	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	2164      	movs	r1, #100	; 0x64
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f003 ffed 	bl	8008728 <VL53L0X_WrWord>
 800474e:	4603      	mov	r3, r0
 8004750:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004752:	e001      	b.n	8004758 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004754:	23fc      	movs	r3, #252	; 0xfc
 8004756:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d106      	bne.n	800476e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004760:	897b      	ldrh	r3, [r7, #10]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	330c      	adds	r3, #12
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800476e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop

0800477c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	460b      	mov	r3, r1
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800478a:	2300      	movs	r3, #0
 800478c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	2b05      	cmp	r3, #5
 8004796:	d847      	bhi.n	8004828 <VL53L0X_GetLimitCheckValue+0xac>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <VL53L0X_GetLimitCheckValue+0x24>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047b9 	.word	0x080047b9
 80047a4:	080047c5 	.word	0x080047c5
 80047a8:	080047eb 	.word	0x080047eb
 80047ac:	080047f7 	.word	0x080047f7
 80047b0:	08004803 	.word	0x08004803
 80047b4:	08004803 	.word	0x08004803

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	77bb      	strb	r3, [r7, #30]
		break;
 80047c2:	e033      	b.n	800482c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80047c4:	f107 0316 	add.w	r3, r7, #22
 80047c8:	461a      	mov	r2, r3
 80047ca:	2144      	movs	r1, #68	; 0x44
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f004 f833 	bl	8008838 <VL53L0X_RdWord>
 80047d2:	4603      	mov	r3, r0
 80047d4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80047d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80047de:	8afb      	ldrh	r3, [r7, #22]
 80047e0:	025b      	lsls	r3, r3, #9
 80047e2:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80047e4:	2301      	movs	r3, #1
 80047e6:	77bb      	strb	r3, [r7, #30]
		break;
 80047e8:	e020      	b.n	800482c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	77bb      	strb	r3, [r7, #30]
		break;
 80047f4:	e01a      	b.n	800482c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	77bb      	strb	r3, [r7, #30]
		break;
 8004800:	e014      	b.n	800482c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004802:	f107 0316 	add.w	r3, r7, #22
 8004806:	461a      	mov	r2, r3
 8004808:	2164      	movs	r1, #100	; 0x64
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f004 f814 	bl	8008838 <VL53L0X_RdWord>
 8004810:	4603      	mov	r3, r0
 8004812:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004814:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800481c:	8afb      	ldrh	r3, [r7, #22]
 800481e:	025b      	lsls	r3, r3, #9
 8004820:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	77bb      	strb	r3, [r7, #30]
		break;
 8004826:	e001      	b.n	800482c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004828:	23fc      	movs	r3, #252	; 0xfc
 800482a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800482c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d12a      	bne.n	800488a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004834:	7fbb      	ldrb	r3, [r7, #30]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d124      	bne.n	8004884 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d110      	bne.n	8004862 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004840:	897b      	ldrh	r3, [r7, #10]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	330c      	adds	r3, #12
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004854:	897b      	ldrh	r3, [r7, #10]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004860:	e013      	b.n	800488a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004868:	897b      	ldrh	r3, [r7, #10]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	330c      	adds	r3, #12
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004876:	897b      	ldrh	r3, [r7, #10]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004882:	e002      	b.n	800488a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800488a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop

08004898 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80048a6:	f107 030e 	add.w	r3, r7, #14
 80048aa:	461a      	mov	r2, r3
 80048ac:	2101      	movs	r1, #1
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f003 ff98 	bl	80087e4 <VL53L0X_RdByte>
 80048b4:	4603      	mov	r3, r0
 80048b6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80048b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10e      	bne.n	80048de <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80048c0:	7bba      	ldrb	r2, [r7, #14]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80048c8:	7bbb      	ldrb	r3, [r7, #14]
 80048ca:	b25b      	sxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	da03      	bge.n	80048d8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2201      	movs	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e002      	b.n	80048de <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80048de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781a      	ldrb	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80048f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004908:	f107 030e 	add.w	r3, r7, #14
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fbd2 	bl	80040b8 <VL53L0X_GetDeviceMode>
 8004914:	4603      	mov	r3, r0
 8004916:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d107      	bne.n	8004930 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004920:	7bbb      	ldrb	r3, [r7, #14]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d104      	bne.n	8004930 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f898 	bl	8004a5c <VL53L0X_StartMeasurement>
 800492c:	4603      	mov	r3, r0
 800492e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f001 fb3f 	bl	8005fbc <VL53L0X_measurement_poll_for_completion>
 800493e:	4603      	mov	r3, r0
 8004940:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800494a:	7bbb      	ldrb	r3, [r7, #14]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d103      	bne.n	8004958 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2203      	movs	r2, #3
 8004954:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004958:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004970:	2300      	movs	r3, #0
 8004972:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8004974:	2301      	movs	r3, #1
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f001 fae1 	bl	8005f42 <VL53L0X_perform_ref_calibration>
 8004980:	4603      	mov	r3, r0
 8004982:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8004984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800499c:	2300      	movs	r3, #0
 800499e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80049a6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80049a8:	7dbb      	ldrb	r3, [r7, #22]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d005      	beq.n	80049ba <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80049ae:	7dbb      	ldrb	r3, [r7, #22]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d002      	beq.n	80049ba <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80049b4:	7dbb      	ldrb	r3, [r7, #22]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d147      	bne.n	8004a4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80049ba:	f107 030c 	add.w	r3, r7, #12
 80049be:	f107 0210 	add.w	r2, r7, #16
 80049c2:	2101      	movs	r1, #1
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fbc3 	bl	8005150 <VL53L0X_GetInterruptThresholds>
 80049ca:	4603      	mov	r3, r0
 80049cc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80049d4:	d803      	bhi.n	80049de <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80049d6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80049d8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80049dc:	d935      	bls.n	8004a4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80049de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d131      	bne.n	8004a4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d006      	beq.n	80049fa <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80049ec:	491a      	ldr	r1, [pc, #104]	; (8004a58 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f002 ff56 	bl	80078a0 <VL53L0X_load_tuning_settings>
 80049f4:	4603      	mov	r3, r0
 80049f6:	75fb      	strb	r3, [r7, #23]
 80049f8:	e027      	b.n	8004a4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80049fa:	2204      	movs	r2, #4
 80049fc:	21ff      	movs	r1, #255	; 0xff
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f003 fe6e 	bl	80086e0 <VL53L0X_WrByte>
 8004a04:	4603      	mov	r3, r0
 8004a06:	461a      	mov	r2, r3
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2170      	movs	r1, #112	; 0x70
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f003 fe64 	bl	80086e0 <VL53L0X_WrByte>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	7dfb      	ldrb	r3, [r7, #23]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004a22:	2200      	movs	r2, #0
 8004a24:	21ff      	movs	r1, #255	; 0xff
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f003 fe5a 	bl	80086e0 <VL53L0X_WrByte>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	461a      	mov	r2, r3
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004a36:	2200      	movs	r2, #0
 8004a38:	2180      	movs	r1, #128	; 0x80
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f003 fe50 	bl	80086e0 <VL53L0X_WrByte>
 8004a40:	4603      	mov	r3, r0
 8004a42:	461a      	mov	r2, r3
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000108 	.word	0x20000108

08004a5c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004a6c:	f107 030e 	add.w	r3, r7, #14
 8004a70:	4619      	mov	r1, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff fb20 	bl	80040b8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004a78:	2201      	movs	r2, #1
 8004a7a:	2180      	movs	r1, #128	; 0x80
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f003 fe2f 	bl	80086e0 <VL53L0X_WrByte>
 8004a82:	4603      	mov	r3, r0
 8004a84:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004a86:	2201      	movs	r2, #1
 8004a88:	21ff      	movs	r1, #255	; 0xff
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f003 fe28 	bl	80086e0 <VL53L0X_WrByte>
 8004a90:	4603      	mov	r3, r0
 8004a92:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004a94:	2200      	movs	r2, #0
 8004a96:	2100      	movs	r1, #0
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f003 fe21 	bl	80086e0 <VL53L0X_WrByte>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2191      	movs	r1, #145	; 0x91
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f003 fe17 	bl	80086e0 <VL53L0X_WrByte>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	2100      	movs	r1, #0
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f003 fe10 	bl	80086e0 <VL53L0X_WrByte>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	21ff      	movs	r1, #255	; 0xff
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f003 fe09 	bl	80086e0 <VL53L0X_WrByte>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2180      	movs	r1, #128	; 0x80
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f003 fe02 	bl	80086e0 <VL53L0X_WrByte>
 8004adc:	4603      	mov	r3, r0
 8004ade:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8004ae0:	7bbb      	ldrb	r3, [r7, #14]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d037      	beq.n	8004b56 <VL53L0X_StartMeasurement+0xfa>
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d04f      	beq.n	8004b8a <VL53L0X_StartMeasurement+0x12e>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d167      	bne.n	8004bbe <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8004aee:	2201      	movs	r2, #1
 8004af0:	2100      	movs	r1, #0
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f003 fdf4 	bl	80086e0 <VL53L0X_WrByte>
 8004af8:	4603      	mov	r3, r0
 8004afa:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8004b00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d15d      	bne.n	8004bc4 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8004b12:	f107 030d 	add.w	r3, r7, #13
 8004b16:	461a      	mov	r2, r3
 8004b18:	2100      	movs	r1, #0
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f003 fe62 	bl	80087e4 <VL53L0X_RdByte>
 8004b20:	4603      	mov	r3, r0
 8004b22:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	3301      	adds	r3, #1
 8004b28:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8004b2a:	7b7a      	ldrb	r2, [r7, #13]
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004b32:	7bfa      	ldrb	r2, [r7, #15]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8004b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b46:	d3e1      	bcc.n	8004b0c <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b4e:	d339      	bcc.n	8004bc4 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8004b50:	23f9      	movs	r3, #249	; 0xf9
 8004b52:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8004b54:	e036      	b.n	8004bc4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d105      	bne.n	8004b6a <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004b5e:	2101      	movs	r1, #1
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ff15 	bl	8004990 <VL53L0X_CheckAndLoadInterruptSettings>
 8004b66:	4603      	mov	r3, r0
 8004b68:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f003 fdb6 	bl	80086e0 <VL53L0X_WrByte>
 8004b74:	4603      	mov	r3, r0
 8004b76:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8004b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d123      	bne.n	8004bc8 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2204      	movs	r2, #4
 8004b84:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004b88:	e01e      	b.n	8004bc8 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004b92:	2101      	movs	r1, #1
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fefb 	bl	8004990 <VL53L0X_CheckAndLoadInterruptSettings>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f003 fd9c 	bl	80086e0 <VL53L0X_WrByte>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8004bac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004bbc:	e006      	b.n	8004bcc <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004bbe:	23f8      	movs	r3, #248	; 0xf8
 8004bc0:	75fb      	strb	r3, [r7, #23]
 8004bc2:	e004      	b.n	8004bce <VL53L0X_StartMeasurement+0x172>
		break;
 8004bc4:	bf00      	nop
 8004bc6:	e002      	b.n	8004bce <VL53L0X_StartMeasurement+0x172>
		break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <VL53L0X_StartMeasurement+0x172>
		break;
 8004bcc:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004bee:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8004bf0:	7bbb      	ldrb	r3, [r7, #14]
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d112      	bne.n	8004c1c <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004bf6:	f107 0308 	add.w	r3, r7, #8
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fb1d 	bl	800523c <VL53L0X_GetInterruptMaskStatus>
 8004c02:	4603      	mov	r3, r0
 8004c04:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d103      	bne.n	8004c14 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	e01c      	b.n	8004c4e <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	e018      	b.n	8004c4e <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004c1c:	f107 030d 	add.w	r3, r7, #13
 8004c20:	461a      	mov	r2, r3
 8004c22:	2114      	movs	r1, #20
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f003 fddd 	bl	80087e4 <VL53L0X_RdByte>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8004c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8004c36:	7b7b      	ldrb	r3, [r7, #13]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2201      	movs	r2, #1
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e002      	b.n	8004c4e <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004c5c:	b5b0      	push	{r4, r5, r7, lr}
 8004c5e:	b096      	sub	sp, #88	; 0x58
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004c6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c70:	230c      	movs	r3, #12
 8004c72:	2114      	movs	r1, #20
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f003 fd07 	bl	8008688 <VL53L0X_ReadMulti>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004c80:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f040 80d2 	bne.w	8004e2e <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004c96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004cb2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	025b      	lsls	r3, r3, #9
 8004cc8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cce:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004cd0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004ce6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cea:	025b      	lsls	r3, r3, #9
 8004cec:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004cf2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004d0e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004d10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8004d1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004d26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004d2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d30:	d047      	beq.n	8004dc2 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004d32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d34:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004d38:	fb02 f303 	mul.w	r3, r2, r3
 8004d3c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004d40:	4a58      	ldr	r2, [pc, #352]	; (8004ea4 <VL53L0X_GetRangingMeasurementData+0x248>)
 8004d42:	fb82 1203 	smull	r1, r2, r2, r3
 8004d46:	1192      	asrs	r2, r2, #6
 8004d48:	17db      	asrs	r3, r3, #31
 8004d4a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004d4c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	7f1b      	ldrb	r3, [r3, #28]
 8004d5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004d5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d02d      	beq.n	8004dc2 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004d66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d68:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004d6c:	fb02 f303 	mul.w	r3, r2, r3
 8004d70:	121b      	asrs	r3, r3, #8
 8004d72:	461a      	mov	r2, r3
				if ((SignalRate
 8004d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d10d      	bne.n	8004d96 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8004d7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d004      	beq.n	8004d8c <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8004d82:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8004d86:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004d8a:	e016      	b.n	8004dba <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8004d8c:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004d90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004d94:	e011      	b.n	8004dba <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004d96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d9c:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004da0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004da2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004da6:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004daa:	121b      	asrs	r3, r3, #8
 8004dac:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db0:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004db6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004dba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004dbe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004dc2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004dca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004dd6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	019b      	lsls	r3, r3, #6
 8004dde:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	75da      	strb	r2, [r3, #23]
 8004de4:	e006      	b.n	8004df4 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004dec:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2200      	movs	r2, #0
 8004df2:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004df4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004df8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004dfc:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f003 f9f0 	bl	80081f0 <VL53L0X_get_pal_range_status>
 8004e10:	4603      	mov	r3, r0
 8004e12:	461a      	mov	r2, r3
 8004e14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004e1e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004e26:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e2e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d12f      	bne.n	8004e96 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f107 040c 	add.w	r4, r7, #12
 8004e3c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e48:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004e50:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004e5e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004e64:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004e6a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004e70:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004e76:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004e7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004e86:	f107 050c 	add.w	r5, r7, #12
 8004e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e96:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3750      	adds	r7, #80	; 0x50
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	10624dd3 	.word	0x10624dd3

08004ea8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff f8b5 	bl	8004028 <VL53L0X_SetDeviceMode>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d104      	bne.n	8004ed4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fd16 	bl	80048fc <VL53L0X_PerformSingleMeasurement>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d105      	bne.n	8004ee8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004edc:	6839      	ldr	r1, [r7, #0]
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff febc 	bl	8004c5c <VL53L0X_GetRangingMeasurementData>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d105      	bne.n	8004efc <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f962 	bl	80051bc <VL53L0X_ClearInterruptMask>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	4608      	mov	r0, r1
 8004f12:	4611      	mov	r1, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	70fb      	strb	r3, [r7, #3]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	70bb      	strb	r3, [r7, #2]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004f2c:	23f6      	movs	r3, #246	; 0xf6
 8004f2e:	73fb      	strb	r3, [r7, #15]
 8004f30:	e107      	b.n	8005142 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004f32:	78bb      	ldrb	r3, [r7, #2]
 8004f34:	2b14      	cmp	r3, #20
 8004f36:	d110      	bne.n	8004f5a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004f38:	7e3b      	ldrb	r3, [r7, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004f3e:	2310      	movs	r3, #16
 8004f40:	73bb      	strb	r3, [r7, #14]
 8004f42:	e001      	b.n	8004f48 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004f48:	7bbb      	ldrb	r3, [r7, #14]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2184      	movs	r1, #132	; 0x84
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f003 fbc6 	bl	80086e0 <VL53L0X_WrByte>
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
 8004f58:	e0f3      	b.n	8005142 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004f5a:	78bb      	ldrb	r3, [r7, #2]
 8004f5c:	2b15      	cmp	r3, #21
 8004f5e:	f040 8097 	bne.w	8005090 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004f62:	2201      	movs	r2, #1
 8004f64:	21ff      	movs	r1, #255	; 0xff
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f003 fbba 	bl	80086e0 <VL53L0X_WrByte>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	461a      	mov	r2, r3
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004f76:	2200      	movs	r2, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f003 fbb0 	bl	80086e0 <VL53L0X_WrByte>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461a      	mov	r2, r3
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	21ff      	movs	r1, #255	; 0xff
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f003 fba6 	bl	80086e0 <VL53L0X_WrByte>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f003 fb9c 	bl	80086e0 <VL53L0X_WrByte>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461a      	mov	r2, r3
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	2185      	movs	r1, #133	; 0x85
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f003 fb92 	bl	80086e0 <VL53L0X_WrByte>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	21ff      	movs	r1, #255	; 0xff
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f003 fb88 	bl	80086e0 <VL53L0X_WrByte>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004fda:	2200      	movs	r2, #0
 8004fdc:	21cd      	movs	r1, #205	; 0xcd
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f003 fb7e 	bl	80086e0 <VL53L0X_WrByte>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004fee:	2211      	movs	r2, #17
 8004ff0:	21cc      	movs	r1, #204	; 0xcc
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f003 fb74 	bl	80086e0 <VL53L0X_WrByte>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005002:	2207      	movs	r2, #7
 8005004:	21ff      	movs	r1, #255	; 0xff
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f003 fb6a 	bl	80086e0 <VL53L0X_WrByte>
 800500c:	4603      	mov	r3, r0
 800500e:	461a      	mov	r2, r3
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	4313      	orrs	r3, r2
 8005014:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005016:	2200      	movs	r2, #0
 8005018:	21be      	movs	r1, #190	; 0xbe
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f003 fb60 	bl	80086e0 <VL53L0X_WrByte>
 8005020:	4603      	mov	r3, r0
 8005022:	461a      	mov	r2, r3
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	4313      	orrs	r3, r2
 8005028:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800502a:	2206      	movs	r2, #6
 800502c:	21ff      	movs	r1, #255	; 0xff
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f003 fb56 	bl	80086e0 <VL53L0X_WrByte>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	4313      	orrs	r3, r2
 800503c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800503e:	2209      	movs	r2, #9
 8005040:	21cc      	movs	r1, #204	; 0xcc
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f003 fb4c 	bl	80086e0 <VL53L0X_WrByte>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	4313      	orrs	r3, r2
 8005050:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005052:	2200      	movs	r2, #0
 8005054:	21ff      	movs	r1, #255	; 0xff
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f003 fb42 	bl	80086e0 <VL53L0X_WrByte>
 800505c:	4603      	mov	r3, r0
 800505e:	461a      	mov	r2, r3
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	4313      	orrs	r3, r2
 8005064:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005066:	2201      	movs	r2, #1
 8005068:	21ff      	movs	r1, #255	; 0xff
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f003 fb38 	bl	80086e0 <VL53L0X_WrByte>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	4313      	orrs	r3, r2
 8005078:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800507a:	2200      	movs	r2, #0
 800507c:	2100      	movs	r1, #0
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f003 fb2e 	bl	80086e0 <VL53L0X_WrByte>
 8005084:	4603      	mov	r3, r0
 8005086:	461a      	mov	r2, r3
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	4313      	orrs	r3, r2
 800508c:	73fb      	strb	r3, [r7, #15]
 800508e:	e058      	b.n	8005142 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8005090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d121      	bne.n	80050dc <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8005098:	787b      	ldrb	r3, [r7, #1]
 800509a:	2b04      	cmp	r3, #4
 800509c:	d81b      	bhi.n	80050d6 <VL53L0X_SetGpioConfig+0x1ce>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <VL53L0X_SetGpioConfig+0x19c>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050b9 	.word	0x080050b9
 80050a8:	080050bf 	.word	0x080050bf
 80050ac:	080050c5 	.word	0x080050c5
 80050b0:	080050cb 	.word	0x080050cb
 80050b4:	080050d1 	.word	0x080050d1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80050b8:	2300      	movs	r3, #0
 80050ba:	73bb      	strb	r3, [r7, #14]
				break;
 80050bc:	e00f      	b.n	80050de <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80050be:	2301      	movs	r3, #1
 80050c0:	73bb      	strb	r3, [r7, #14]
				break;
 80050c2:	e00c      	b.n	80050de <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80050c4:	2302      	movs	r3, #2
 80050c6:	73bb      	strb	r3, [r7, #14]
				break;
 80050c8:	e009      	b.n	80050de <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80050ca:	2303      	movs	r3, #3
 80050cc:	73bb      	strb	r3, [r7, #14]
				break;
 80050ce:	e006      	b.n	80050de <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80050d0:	2304      	movs	r3, #4
 80050d2:	73bb      	strb	r3, [r7, #14]
				break;
 80050d4:	e003      	b.n	80050de <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80050d6:	23f5      	movs	r3, #245	; 0xf5
 80050d8:	73fb      	strb	r3, [r7, #15]
 80050da:	e000      	b.n	80050de <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80050dc:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80050de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d107      	bne.n	80050f6 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80050e6:	7bbb      	ldrb	r3, [r7, #14]
 80050e8:	461a      	mov	r2, r3
 80050ea:	210a      	movs	r1, #10
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f003 faf7 	bl	80086e0 <VL53L0X_WrByte>
 80050f2:	4603      	mov	r3, r0
 80050f4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80050f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10f      	bne.n	800511e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80050fe:	7e3b      	ldrb	r3, [r7, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	73bb      	strb	r3, [r7, #14]
 8005108:	e001      	b.n	800510e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800510a:	2310      	movs	r3, #16
 800510c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800510e:	7bbb      	ldrb	r3, [r7, #14]
 8005110:	22ef      	movs	r2, #239	; 0xef
 8005112:	2184      	movs	r1, #132	; 0x84
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f003 fb31 	bl	800877c <VL53L0X_UpdateByte>
 800511a:	4603      	mov	r3, r0
 800511c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800511e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	787a      	ldrb	r2, [r7, #1]
 800512a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800512e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d105      	bne.n	8005142 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005136:	2100      	movs	r1, #0
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f83f 	bl	80051bc <VL53L0X_ClearInterruptMask>
 800513e:	4603      	mov	r3, r0
 8005140:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop

08005150 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	607a      	str	r2, [r7, #4]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	460b      	mov	r3, r1
 800515e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005160:	2300      	movs	r3, #0
 8005162:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005164:	f107 0314 	add.w	r3, r7, #20
 8005168:	461a      	mov	r2, r3
 800516a:	210e      	movs	r1, #14
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f003 fb63 	bl	8008838 <VL53L0X_RdWord>
 8005172:	4603      	mov	r3, r0
 8005174:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005176:	8abb      	ldrh	r3, [r7, #20]
 8005178:	045b      	lsls	r3, r3, #17
 800517a:	461a      	mov	r2, r3
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <VL53L0X_GetInterruptThresholds+0x68>)
 800517e:	4013      	ands	r3, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10f      	bne.n	80051ac <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800518c:	f107 0314 	add.w	r3, r7, #20
 8005190:	461a      	mov	r2, r3
 8005192:	210c      	movs	r1, #12
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f003 fb4f 	bl	8008838 <VL53L0X_RdWord>
 800519a:	4603      	mov	r3, r0
 800519c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800519e:	8abb      	ldrh	r3, [r7, #20]
 80051a0:	045b      	lsls	r3, r3, #17
 80051a2:	461a      	mov	r2, r3
 80051a4:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <VL53L0X_GetInterruptThresholds+0x68>)
 80051a6:	4013      	ands	r3, r2
		*pThresholdHigh =
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	1ffe0000 	.word	0x1ffe0000

080051bc <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80051ce:	2201      	movs	r2, #1
 80051d0:	210b      	movs	r1, #11
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f003 fa84 	bl	80086e0 <VL53L0X_WrByte>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80051dc:	2200      	movs	r2, #0
 80051de:	210b      	movs	r1, #11
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f003 fa7d 	bl	80086e0 <VL53L0X_WrByte>
 80051e6:	4603      	mov	r3, r0
 80051e8:	461a      	mov	r2, r3
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80051f0:	f107 030d 	add.w	r3, r7, #13
 80051f4:	461a      	mov	r2, r3
 80051f6:	2113      	movs	r1, #19
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f003 faf3 	bl	80087e4 <VL53L0X_RdByte>
 80051fe:	4603      	mov	r3, r0
 8005200:	461a      	mov	r2, r3
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	4313      	orrs	r3, r2
 8005206:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8005208:	7bbb      	ldrb	r3, [r7, #14]
 800520a:	3301      	adds	r3, #1
 800520c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800520e:	7b7b      	ldrb	r3, [r7, #13]
 8005210:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005214:	2b00      	cmp	r3, #0
 8005216:	d006      	beq.n	8005226 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8005218:	7bbb      	ldrb	r3, [r7, #14]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d803      	bhi.n	8005226 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800521e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0d3      	beq.n	80051ce <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8005226:	7bbb      	ldrb	r3, [r7, #14]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800522c:	23f4      	movs	r3, #244	; 0xf4
 800522e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800524a:	f107 030e 	add.w	r3, r7, #14
 800524e:	461a      	mov	r2, r3
 8005250:	2113      	movs	r1, #19
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f003 fac6 	bl	80087e4 <VL53L0X_RdByte>
 8005258:	4603      	mov	r3, r0
 800525a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	f003 0207 	and.w	r2, r3, #7
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8005266:	7bbb      	ldrb	r3, [r7, #14]
 8005268:	f003 0318 	and.w	r3, r3, #24
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005270:	23fa      	movs	r3, #250	; 0xfa
 8005272:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005274:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800528c:	2300      	movs	r3, #0
 800528e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fa03 	bl	80056a0 <VL53L0X_perform_ref_spad_management>
 800529a:	4603      	mov	r3, r0
 800529c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800529e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80052b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80052bc:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80052be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80052c4:	f107 0308 	add.w	r3, r7, #8
 80052c8:	461a      	mov	r2, r3
 80052ca:	2128      	movs	r1, #40	; 0x28
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f003 fab3 	bl	8008838 <VL53L0X_RdWord>
 80052d2:	4603      	mov	r3, r0
 80052d4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80052d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d11e      	bne.n	800531c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80052de:	893b      	ldrh	r3, [r7, #8]
 80052e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80052e8:	893b      	ldrh	r3, [r7, #8]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	dd0b      	ble.n	800530c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80052f4:	893a      	ldrh	r2, [r7, #8]
 80052f6:	897b      	ldrh	r3, [r7, #10]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	b21b      	sxth	r3, r3
 80052fe:	461a      	mov	r2, r3
					* 250;
 8005300:	23fa      	movs	r3, #250	; 0xfa
 8005302:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e007      	b.n	800531c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800530c:	893b      	ldrh	r3, [r7, #8]
 800530e:	b21b      	sxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	23fa      	movs	r3, #250	; 0xfa
 8005314:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800531c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005328:	b480      	push	{r7}
 800532a:	b08b      	sub	sp, #44	; 0x2c
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8005336:	2308      	movs	r3, #8
 8005338:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005344:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	fbb3 f2f2 	udiv	r2, r3, r2
 8005358:	69b9      	ldr	r1, [r7, #24]
 800535a:	fb01 f202 	mul.w	r2, r1, r2
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
 8005366:	e030      	b.n	80053ca <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	4413      	add	r3, r2
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	429a      	cmp	r2, r3
 800537c:	d11e      	bne.n	80053bc <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800537e:	7ffa      	ldrb	r2, [r7, #31]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	fa42 f303 	asr.w	r3, r2, r3
 8005386:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800538c:	e016      	b.n	80053bc <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800538e:	7ffb      	ldrb	r3, [r7, #31]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <get_next_good_spad+0x88>
				success = 1;
 8005398:	2301      	movs	r3, #1
 800539a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	fb02 f203 	mul.w	r2, r2, r3
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	4413      	add	r3, r2
 80053a8:	461a      	mov	r2, r3
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	601a      	str	r2, [r3, #0]
				break;
 80053ae:	e009      	b.n	80053c4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80053b0:	7ffb      	ldrb	r3, [r7, #31]
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	3301      	adds	r3, #1
 80053ba:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80053bc:	6a3a      	ldr	r2, [r7, #32]
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d3e4      	bcc.n	800538e <get_next_good_spad+0x66>
				coarseIndex++) {
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	3301      	adds	r3, #1
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80053ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d202      	bcs.n	80053d8 <get_next_good_spad+0xb0>
 80053d2:	7fbb      	ldrb	r3, [r7, #30]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0c7      	beq.n	8005368 <get_next_good_spad+0x40>
		}
	}
}
 80053d8:	bf00      	nop
 80053da:	372c      	adds	r7, #44	; 0x2c
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	099b      	lsrs	r3, r3, #6
 80053f4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80053f6:	4a07      	ldr	r2, [pc, #28]	; (8005414 <is_aperture+0x30>)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <is_aperture+0x22>
		isAperture = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8005406:	7bfb      	ldrb	r3, [r7, #15]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	200002c0 	.word	0x200002c0

08005418 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005418:	b480      	push	{r7}
 800541a:	b089      	sub	sp, #36	; 0x24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005424:	2300      	movs	r3, #0
 8005426:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005428:	2308      	movs	r3, #8
 800542a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	fbb3 f2f2 	udiv	r2, r3, r2
 800543e:	69b9      	ldr	r1, [r7, #24]
 8005440:	fb01 f202 	mul.w	r2, r1, r2
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005450:	23ce      	movs	r3, #206	; 0xce
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e010      	b.n	8005478 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	b25a      	sxtb	r2, r3
 8005460:	2101      	movs	r1, #1
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	fa01 f303 	lsl.w	r3, r1, r3
 8005468:	b25b      	sxtb	r3, r3
 800546a:	4313      	orrs	r3, r2
 800546c:	b259      	sxtb	r1, r3
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	4413      	add	r3, r2
 8005474:	b2ca      	uxtb	r2, r1
 8005476:	701a      	strb	r2, [r3, #0]

	return status;
 8005478:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3724      	adds	r7, #36	; 0x24
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005492:	2306      	movs	r3, #6
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	21b0      	movs	r1, #176	; 0xb0
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f003 f8c5 	bl	8008628 <VL53L0X_WriteMulti>
 800549e:	4603      	mov	r3, r0
 80054a0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80054a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80054b8:	2306      	movs	r3, #6
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	21b0      	movs	r1, #176	; 0xb0
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f003 f8e2 	bl	8008688 <VL53L0X_ReadMulti>
 80054c4:	4603      	mov	r3, r0
 80054c6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80054c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08c      	sub	sp, #48	; 0x30
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	607a      	str	r2, [r7, #4]
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	460b      	mov	r3, r1
 80054e2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80054ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ec:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80054ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80054f2:	2300      	movs	r3, #0
 80054f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f6:	e02b      	b.n	8005550 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80054f8:	f107 031c 	add.w	r3, r7, #28
 80054fc:	6a3a      	ldr	r2, [r7, #32]
 80054fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff ff11 	bl	8005328 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800550c:	d103      	bne.n	8005516 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800550e:	23ce      	movs	r3, #206	; 0xce
 8005510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005514:	e020      	b.n	8005558 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	461a      	mov	r2, r3
 800551a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551c:	4413      	add	r3, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff ff60 	bl	80053e4 <is_aperture>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	7afb      	ldrb	r3, [r7, #11]
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800552e:	23ce      	movs	r3, #206	; 0xce
 8005530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005534:	e010      	b.n	8005558 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800553a:	6a3a      	ldr	r2, [r7, #32]
 800553c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800553e:	6838      	ldr	r0, [r7, #0]
 8005540:	f7ff ff6a 	bl	8005418 <enable_spad_bit>
		currentSpad++;
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	3301      	adds	r3, #1
 8005548:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	3301      	adds	r3, #1
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005554:	429a      	cmp	r2, r3
 8005556:	d3cf      	bcc.n	80054f8 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555a:	6a3a      	ldr	r2, [r7, #32]
 800555c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800555e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff8d 	bl	8005488 <set_ref_spad_map>
 800556e:	4603      	mov	r3, r0
 8005570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005574:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005578:	2b00      	cmp	r3, #0
 800557a:	d121      	bne.n	80055c0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800557c:	f107 0314 	add.w	r3, r7, #20
 8005580:	4619      	mov	r1, r3
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff ff93 	bl	80054ae <get_ref_spad_map>
 8005588:	4603      	mov	r3, r0
 800558a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005592:	e011      	b.n	80055b8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	4413      	add	r3, r2
 800559a:	781a      	ldrb	r2, [r3, #0]
 800559c:	f107 0114 	add.w	r1, r7, #20
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	440b      	add	r3, r1
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d003      	beq.n	80055b2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80055aa:	23ce      	movs	r3, #206	; 0xce
 80055ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80055b0:	e006      	b.n	80055c0 <enable_ref_spads+0xec>
			}
			i++;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	3301      	adds	r3, #1
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80055b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	429a      	cmp	r2, r3
 80055be:	d3e9      	bcc.n	8005594 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80055c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3730      	adds	r7, #48	; 0x30
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80055e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80055ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d107      	bne.n	8005604 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80055f4:	22c0      	movs	r2, #192	; 0xc0
 80055f6:	2101      	movs	r1, #1
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f003 f871 	bl	80086e0 <VL53L0X_WrByte>
 80055fe:	4603      	mov	r3, r0
 8005600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005604:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005608:	2b00      	cmp	r3, #0
 800560a:	d108      	bne.n	800561e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800560c:	f107 0308 	add.w	r3, r7, #8
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fc48 	bl	8004ea8 <VL53L0X_PerformSingleRangingMeasurement>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800561e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005622:	2b00      	cmp	r3, #0
 8005624:	d107      	bne.n	8005636 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005626:	2201      	movs	r2, #1
 8005628:	21ff      	movs	r1, #255	; 0xff
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f003 f858 	bl	80086e0 <VL53L0X_WrByte>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8005636:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800563a:	2b00      	cmp	r3, #0
 800563c:	d107      	bne.n	800564e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	21b6      	movs	r1, #182	; 0xb6
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f003 f8f8 	bl	8008838 <VL53L0X_RdWord>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800564e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005652:	2b00      	cmp	r3, #0
 8005654:	d107      	bne.n	8005666 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005656:	2200      	movs	r2, #0
 8005658:	21ff      	movs	r1, #255	; 0xff
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f003 f840 	bl	80086e0 <VL53L0X_WrByte>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8005666:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800566a:	2b00      	cmp	r3, #0
 800566c:	d112      	bne.n	8005694 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800566e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005672:	461a      	mov	r2, r3
 8005674:	2101      	movs	r1, #1
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f003 f832 	bl	80086e0 <VL53L0X_WrByte>
 800567c:	4603      	mov	r3, r0
 800567e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005682:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005690:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8005694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005698:	4618      	mov	r0, r3
 800569a:	3728      	adds	r7, #40	; 0x28
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b09d      	sub	sp, #116	; 0x74
 80056a4:	af06      	add	r7, sp, #24
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80056b2:	23b4      	movs	r3, #180	; 0xb4
 80056b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80056b8:	2303      	movs	r3, #3
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80056bc:	232c      	movs	r3, #44	; 0x2c
 80056be:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80056cc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80056d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80056da:	2306      	movs	r3, #6
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8005704:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8005706:	2300      	movs	r3, #0
 8005708:	64bb      	str	r3, [r7, #72]	; 0x48
 800570a:	e009      	b.n	8005720 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005710:	4413      	add	r3, r2
 8005712:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005716:	2200      	movs	r2, #0
 8005718:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800571a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571c:	3301      	adds	r3, #1
 800571e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	429a      	cmp	r2, r3
 8005726:	d3f1      	bcc.n	800570c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005728:	2201      	movs	r2, #1
 800572a:	21ff      	movs	r1, #255	; 0xff
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f002 ffd7 	bl	80086e0 <VL53L0X_WrByte>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005738:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800573c:	2b00      	cmp	r3, #0
 800573e:	d107      	bne.n	8005750 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005740:	2200      	movs	r2, #0
 8005742:	214f      	movs	r1, #79	; 0x4f
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f002 ffcb 	bl	80086e0 <VL53L0X_WrByte>
 800574a:	4603      	mov	r3, r0
 800574c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005750:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005754:	2b00      	cmp	r3, #0
 8005756:	d107      	bne.n	8005768 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8005758:	222c      	movs	r2, #44	; 0x2c
 800575a:	214e      	movs	r1, #78	; 0x4e
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f002 ffbf 	bl	80086e0 <VL53L0X_WrByte>
 8005762:	4603      	mov	r3, r0
 8005764:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005768:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800576c:	2b00      	cmp	r3, #0
 800576e:	d107      	bne.n	8005780 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005770:	2200      	movs	r2, #0
 8005772:	21ff      	movs	r1, #255	; 0xff
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f002 ffb3 	bl	80086e0 <VL53L0X_WrByte>
 800577a:	4603      	mov	r3, r0
 800577c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005780:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8005788:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800578c:	461a      	mov	r2, r3
 800578e:	21b6      	movs	r1, #182	; 0xb6
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f002 ffa5 	bl	80086e0 <VL53L0X_WrByte>
 8005796:	4603      	mov	r3, r0
 8005798:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800579c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d107      	bne.n	80057b4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80057a4:	2200      	movs	r2, #0
 80057a6:	2180      	movs	r1, #128	; 0x80
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f002 ff99 	bl	80086e0 <VL53L0X_WrByte>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80057b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80057bc:	f107 0210 	add.w	r2, r7, #16
 80057c0:	f107 0111 	add.w	r1, r7, #17
 80057c4:	2300      	movs	r3, #0
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fbbb 	bl	8005f42 <VL53L0X_perform_ref_calibration>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80057d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d121      	bne.n	800581e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80057de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80057e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80057f6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80057fa:	f107 0218 	add.w	r2, r7, #24
 80057fe:	9204      	str	r2, [sp, #16]
 8005800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005802:	9203      	str	r2, [sp, #12]
 8005804:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005806:	9202      	str	r2, [sp, #8]
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	4623      	mov	r3, r4
 8005810:	4602      	mov	r2, r0
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff fe5e 	bl	80054d4 <enable_ref_spads>
 8005818:	4603      	mov	r3, r0
 800581a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800581e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005822:	2b00      	cmp	r3, #0
 8005824:	d174      	bne.n	8005910 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800582a:	f107 0312 	add.w	r3, r7, #18
 800582e:	4619      	mov	r1, r3
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7ff fecb 	bl	80055cc <perform_ref_signal_measurement>
 8005836:	4603      	mov	r3, r0
 8005838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800583c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005840:	2b00      	cmp	r3, #0
 8005842:	d161      	bne.n	8005908 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8005844:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005846:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005848:	429a      	cmp	r2, r3
 800584a:	d25d      	bcs.n	8005908 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800584c:	2300      	movs	r3, #0
 800584e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005850:	e009      	b.n	8005866 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005856:	4413      	add	r3, r2
 8005858:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005862:	3301      	adds	r3, #1
 8005864:	64bb      	str	r3, [r7, #72]	; 0x48
 8005866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	429a      	cmp	r2, r3
 800586c:	d3f1      	bcc.n	8005852 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800586e:	e002      	b.n	8005876 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005872:	3301      	adds	r3, #1
 8005874:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8005876:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800587a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800587c:	4413      	add	r3, r2
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fdb0 	bl	80053e4 <is_aperture>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800588a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	429a      	cmp	r2, r3
 8005890:	d3ee      	bcc.n	8005870 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8005892:	2301      	movs	r3, #1
 8005894:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8005896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005898:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80058a6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80058aa:	f107 0218 	add.w	r2, r7, #24
 80058ae:	9204      	str	r2, [sp, #16]
 80058b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b2:	9203      	str	r2, [sp, #12]
 80058b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058b6:	9202      	str	r2, [sp, #8]
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	4623      	mov	r3, r4
 80058c0:	4602      	mov	r2, r0
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff fe06 	bl	80054d4 <enable_ref_spads>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80058ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d11b      	bne.n	800590e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80058da:	f107 0312 	add.w	r3, r7, #18
 80058de:	4619      	mov	r1, r3
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff fe73 	bl	80055cc <perform_ref_signal_measurement>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80058ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10c      	bne.n	800590e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80058f4:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80058f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d208      	bcs.n	800590e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80058fc:	2301      	movs	r3, #1
 80058fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005906:	e002      	b.n	800590e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590c:	e000      	b.n	8005910 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800590e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005910:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005914:	2b00      	cmp	r3, #0
 8005916:	f040 80af 	bne.w	8005a78 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800591a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800591c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800591e:	429a      	cmp	r2, r3
 8005920:	f240 80aa 	bls.w	8005a78 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8005924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005926:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8005934:	f107 031c 	add.w	r3, r7, #28
 8005938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593a:	4618      	mov	r0, r3
 800593c:	f003 f82a 	bl	8008994 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005940:	8a7b      	ldrh	r3, [r7, #18]
 8005942:	461a      	mov	r2, r3
 8005944:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	bfb8      	it	lt
 800594c:	425b      	neglt	r3, r3
 800594e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8005950:	2300      	movs	r3, #0
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8005956:	e086      	b.n	8005a66 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800595e:	f107 0314 	add.w	r3, r7, #20
 8005962:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005966:	f7ff fcdf 	bl	8005328 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005970:	d103      	bne.n	800597a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005972:	23ce      	movs	r3, #206	; 0xce
 8005974:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8005978:	e07e      	b.n	8005a78 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800597a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4413      	add	r3, r2
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fd2e 	bl	80053e4 <is_aperture>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598e:	4293      	cmp	r3, r2
 8005990:	d003      	beq.n	800599a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8005998:	e06e      	b.n	8005a78 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800599a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800599c:	3301      	adds	r3, #1
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80059aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fd32 	bl	8005418 <enable_spad_bit>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80059ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10c      	bne.n	80059dc <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80059c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c4:	3301      	adds	r3, #1
 80059c6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80059ce:	4619      	mov	r1, r3
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff fd59 	bl	8005488 <set_ref_spad_map>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80059dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d146      	bne.n	8005a72 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80059e4:	f107 0312 	add.w	r3, r7, #18
 80059e8:	4619      	mov	r1, r3
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff fdee 	bl	80055cc <perform_ref_signal_measurement>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80059f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d13b      	bne.n	8005a76 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80059fe:	8a7b      	ldrh	r3, [r7, #18]
 8005a00:	461a      	mov	r2, r3
 8005a02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bfb8      	it	lt
 8005a0a:	425b      	neglt	r3, r3
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8005a0e:	8a7b      	ldrh	r3, [r7, #18]
 8005a10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d21c      	bcs.n	8005a50 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8005a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d914      	bls.n	8005a48 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8005a1e:	f107 031c 	add.w	r3, r7, #28
 8005a22:	4619      	mov	r1, r3
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fd2f 	bl	8005488 <set_ref_spad_map>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8005a36:	f107 011c 	add.w	r1, r7, #28
 8005a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f002 ffa9 	bl	8008994 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8005a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a44:	3b01      	subs	r3, #1
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4e:	e00a      	b.n	8005a66 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8005a5a:	f107 031c 	add.w	r3, r7, #28
 8005a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a60:	4618      	mov	r0, r3
 8005a62:	f002 ff97 	bl	8008994 <memcpy>
		while (!complete) {
 8005a66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f43f af74 	beq.w	8005958 <VL53L0X_perform_ref_spad_management+0x2b8>
 8005a70:	e002      	b.n	8005a78 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005a76:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d115      	bne.n	8005aac <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a84:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005a8c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8005aac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	375c      	adds	r7, #92	; 0x5c
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd90      	pop	{r4, r7, pc}

08005ab8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8005ab8:	b590      	push	{r4, r7, lr}
 8005aba:	b093      	sub	sp, #76	; 0x4c
 8005abc:	af06      	add	r7, sp, #24
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8005ad0:	23b4      	movs	r3, #180	; 0xb4
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8005ad6:	2306      	movs	r3, #6
 8005ad8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8005ada:	232c      	movs	r3, #44	; 0x2c
 8005adc:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ade:	2201      	movs	r2, #1
 8005ae0:	21ff      	movs	r1, #255	; 0xff
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f002 fdfc 	bl	80086e0 <VL53L0X_WrByte>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005aee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d107      	bne.n	8005b06 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8005af6:	2200      	movs	r2, #0
 8005af8:	214f      	movs	r1, #79	; 0x4f
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f002 fdf0 	bl	80086e0 <VL53L0X_WrByte>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005b06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d107      	bne.n	8005b1e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8005b0e:	222c      	movs	r2, #44	; 0x2c
 8005b10:	214e      	movs	r1, #78	; 0x4e
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f002 fde4 	bl	80086e0 <VL53L0X_WrByte>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005b1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d107      	bne.n	8005b36 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b26:	2200      	movs	r2, #0
 8005b28:	21ff      	movs	r1, #255	; 0xff
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f002 fdd8 	bl	80086e0 <VL53L0X_WrByte>
 8005b30:	4603      	mov	r3, r0
 8005b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005b36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8005b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b42:	461a      	mov	r2, r3
 8005b44:	21b6      	movs	r1, #182	; 0xb6
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f002 fdca 	bl	80086e0 <VL53L0X_WrByte>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8005b52:	2300      	movs	r3, #0
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
 8005b56:	e009      	b.n	8005b6c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005b62:	2200      	movs	r2, #0
 8005b64:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	3301      	adds	r3, #1
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d3f1      	bcc.n	8005b58 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8005b74:	79fb      	ldrb	r3, [r7, #7]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d011      	beq.n	8005b9e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005b7a:	e002      	b.n	8005b82 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	3301      	adds	r3, #1
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005b82:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	4413      	add	r3, r2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fc2a 	bl	80053e4 <is_aperture>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d103      	bne.n	8005b9e <VL53L0X_set_reference_spads+0xe6>
 8005b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d3ee      	bcc.n	8005b7c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8005baa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bae:	79f9      	ldrb	r1, [r7, #7]
 8005bb0:	f107 0214 	add.w	r2, r7, #20
 8005bb4:	9204      	str	r2, [sp, #16]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	9203      	str	r2, [sp, #12]
 8005bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bbc:	9202      	str	r2, [sp, #8]
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff fc83 	bl	80054d4 <enable_ref_spads>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8005bd4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10c      	bne.n	8005bf6 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	79fa      	ldrb	r2, [r7, #7]
 8005bf2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8005bf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3734      	adds	r7, #52	; 0x34
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd90      	pop	{r4, r7, pc}

08005c02 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	2100      	movs	r1, #0
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f002 fd5a 	bl	80086e0 <VL53L0X_WrByte>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f9bf 	bl	8005fbc <VL53L0X_measurement_poll_for_completion>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d105      	bne.n	8005c56 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff fab5 	bl	80051bc <VL53L0X_ClearInterruptMask>
 8005c52:	4603      	mov	r3, r0
 8005c54:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2100      	movs	r1, #0
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f002 fd3c 	bl	80086e0 <VL53L0X_WrByte>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	4608      	mov	r0, r1
 8005c82:	4611      	mov	r1, r2
 8005c84:	461a      	mov	r2, r3
 8005c86:	4603      	mov	r3, r0
 8005c88:	70fb      	strb	r3, [r7, #3]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	70bb      	strb	r3, [r7, #2]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	21ff      	movs	r1, #255	; 0xff
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f002 fd1e 	bl	80086e0 <VL53L0X_WrByte>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f002 fd14 	bl	80086e0 <VL53L0X_WrByte>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	21ff      	movs	r1, #255	; 0xff
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f002 fd0a 	bl	80086e0 <VL53L0X_WrByte>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01e      	beq.n	8005d1a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005cdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d009      	beq.n	8005cf8 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	21cb      	movs	r1, #203	; 0xcb
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f002 fd7b 	bl	80087e4 <VL53L0X_RdByte>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005cf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d02a      	beq.n	8005d56 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005d00:	f107 030e 	add.w	r3, r7, #14
 8005d04:	461a      	mov	r2, r3
 8005d06:	21ee      	movs	r1, #238	; 0xee
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f002 fd6b 	bl	80087e4 <VL53L0X_RdByte>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	461a      	mov	r2, r3
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	73fb      	strb	r3, [r7, #15]
 8005d18:	e01d      	b.n	8005d56 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005d1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005d22:	78bb      	ldrb	r3, [r7, #2]
 8005d24:	461a      	mov	r2, r3
 8005d26:	21cb      	movs	r1, #203	; 0xcb
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f002 fcd9 	bl	80086e0 <VL53L0X_WrByte>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	461a      	mov	r2, r3
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005d38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005d40:	787b      	ldrb	r3, [r7, #1]
 8005d42:	2280      	movs	r2, #128	; 0x80
 8005d44:	21ee      	movs	r1, #238	; 0xee
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f002 fd18 	bl	800877c <VL53L0X_UpdateByte>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005d56:	2201      	movs	r2, #1
 8005d58:	21ff      	movs	r1, #255	; 0xff
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f002 fcc0 	bl	80086e0 <VL53L0X_WrByte>
 8005d60:	4603      	mov	r3, r0
 8005d62:	461a      	mov	r2, r3
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f002 fcb6 	bl	80086e0 <VL53L0X_WrByte>
 8005d74:	4603      	mov	r3, r0
 8005d76:	461a      	mov	r2, r3
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005d7e:	2200      	movs	r2, #0
 8005d80:	21ff      	movs	r1, #255	; 0xff
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f002 fcac 	bl	80086e0 <VL53L0X_WrByte>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005d92:	7bbb      	ldrb	r3, [r7, #14]
 8005d94:	f023 0310 	bic.w	r3, r3, #16
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	701a      	strb	r2, [r3, #0]

	return Status;
 8005d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b08a      	sub	sp, #40	; 0x28
 8005dae:	af04      	add	r7, sp, #16
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	4611      	mov	r1, r2
 8005db6:	461a      	mov	r2, r3
 8005db8:	460b      	mov	r3, r1
 8005dba:	71fb      	strb	r3, [r7, #7]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005dd4:	79bb      	ldrb	r3, [r7, #6]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005de0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005de2:	2201      	movs	r2, #1
 8005de4:	2101      	movs	r1, #1
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f002 fc7a 	bl	80086e0 <VL53L0X_WrByte>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005df8:	2140      	movs	r1, #64	; 0x40
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff ff01 	bl	8005c02 <VL53L0X_perform_single_ref_calibration>
 8005e00:	4603      	mov	r3, r0
 8005e02:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d115      	bne.n	8005e38 <VL53L0X_perform_vhv_calibration+0x8e>
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d112      	bne.n	8005e38 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005e12:	7d39      	ldrb	r1, [r7, #20]
 8005e14:	7d7a      	ldrb	r2, [r7, #21]
 8005e16:	2300      	movs	r3, #0
 8005e18:	9303      	str	r3, [sp, #12]
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	9302      	str	r3, [sp, #8]
 8005e1e:	f107 0313 	add.w	r3, r7, #19
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7ff ff23 	bl	8005c78 <VL53L0X_ref_calibration_io>
 8005e32:	4603      	mov	r3, r0
 8005e34:	75fb      	strb	r3, [r7, #23]
 8005e36:	e002      	b.n	8005e3e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d112      	bne.n	8005e6c <VL53L0X_perform_vhv_calibration+0xc2>
 8005e46:	79bb      	ldrb	r3, [r7, #6]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00f      	beq.n	8005e6c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005e4c:	7dbb      	ldrb	r3, [r7, #22]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	2101      	movs	r1, #1
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f002 fc44 	bl	80086e0 <VL53L0X_WrByte>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d103      	bne.n	8005e6c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	7dba      	ldrb	r2, [r7, #22]
 8005e68:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005e6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af04      	add	r7, sp, #16
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4611      	mov	r1, r2
 8005e84:	461a      	mov	r2, r3
 8005e86:	460b      	mov	r3, r1
 8005e88:	71fb      	strb	r3, [r7, #7]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005e9e:	79bb      	ldrb	r3, [r7, #6]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005eaa:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005eac:	2202      	movs	r2, #2
 8005eae:	2101      	movs	r1, #1
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f002 fc15 	bl	80086e0 <VL53L0X_WrByte>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d105      	bne.n	8005ece <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff fe9c 	bl	8005c02 <VL53L0X_perform_single_ref_calibration>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005ece:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d115      	bne.n	8005f02 <VL53L0X_perform_phase_calibration+0x8a>
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d112      	bne.n	8005f02 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005edc:	7d39      	ldrb	r1, [r7, #20]
 8005ede:	7d7a      	ldrb	r2, [r7, #21]
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	9303      	str	r3, [sp, #12]
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	9302      	str	r3, [sp, #8]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	f107 0313 	add.w	r3, r7, #19
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff febe 	bl	8005c78 <VL53L0X_ref_calibration_io>
 8005efc:	4603      	mov	r3, r0
 8005efe:	75fb      	strb	r3, [r7, #23]
 8005f00:	e002      	b.n	8005f08 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d112      	bne.n	8005f36 <VL53L0X_perform_phase_calibration+0xbe>
 8005f10:	79bb      	ldrb	r3, [r7, #6]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00f      	beq.n	8005f36 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f16:	7dbb      	ldrb	r3, [r7, #22]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f002 fbdf 	bl	80086e0 <VL53L0X_WrByte>
 8005f22:	4603      	mov	r3, r0
 8005f24:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	7dba      	ldrb	r2, [r7, #22]
 8005f32:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005f36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b086      	sub	sp, #24
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f50:	2300      	movs	r3, #0
 8005f52:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005f5e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005f60:	78fa      	ldrb	r2, [r7, #3]
 8005f62:	2300      	movs	r3, #0
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff ff1f 	bl	8005daa <VL53L0X_perform_vhv_calibration>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d107      	bne.n	8005f88 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005f78:	78fa      	ldrb	r2, [r7, #3]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff ff7a 	bl	8005e78 <VL53L0X_perform_phase_calibration>
 8005f84:	4603      	mov	r3, r0
 8005f86:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10f      	bne.n	8005fb0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f90:	7dbb      	ldrb	r3, [r7, #22]
 8005f92:	461a      	mov	r2, r3
 8005f94:	2101      	movs	r1, #1
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f002 fba2 	bl	80086e0 <VL53L0X_WrByte>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d103      	bne.n	8005fb0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	7dba      	ldrb	r2, [r7, #22]
 8005fac:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005fd0:	f107 030f 	add.w	r3, r7, #15
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fe fdff 	bl	8004bda <VL53L0X_GetMeasurementDataReady>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d110      	bne.n	800600a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d00f      	beq.n	800600e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005ffa:	d302      	bcc.n	8006002 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005ffc:	23f9      	movs	r3, #249	; 0xf9
 8005ffe:	75fb      	strb	r3, [r7, #23]
			break;
 8006000:	e006      	b.n	8006010 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f002 fc8c 	bl	8008920 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006008:	e7e2      	b.n	8005fd0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800600e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006010:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	3301      	adds	r3, #1
 800602e:	b2db      	uxtb	r3, r3
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	4603      	mov	r3, r0
 800604a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	b2db      	uxtb	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8006074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006078:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800607a:	e002      	b.n	8006082 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	089b      	lsrs	r3, r3, #2
 8006080:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	429a      	cmp	r2, r3
 8006088:	d8f8      	bhi.n	800607c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800608a:	e017      	b.n	80060bc <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	4413      	add	r3, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	429a      	cmp	r2, r3
 8006096:	d30b      	bcc.n	80060b0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4413      	add	r3, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	4413      	add	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e002      	b.n	80060b6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	085b      	lsrs	r3, r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	089b      	lsrs	r3, r3, #2
 80060ba:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e4      	bne.n	800608c <VL53L0X_isqrt+0x24>
	}

	return res;
 80060c2:	68fb      	ldr	r3, [r7, #12]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060d8:	2300      	movs	r3, #0
 80060da:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80060dc:	2200      	movs	r2, #0
 80060de:	2183      	movs	r1, #131	; 0x83
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f002 fafd 	bl	80086e0 <VL53L0X_WrByte>
 80060e6:	4603      	mov	r3, r0
 80060e8:	461a      	mov	r2, r3
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80060f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11e      	bne.n	8006136 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80060fc:	f107 030f 	add.w	r3, r7, #15
 8006100:	461a      	mov	r2, r3
 8006102:	2183      	movs	r1, #131	; 0x83
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f002 fb6d 	bl	80087e4 <VL53L0X_RdByte>
 800610a:	4603      	mov	r3, r0
 800610c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <VL53L0X_device_read_strobe+0x5a>
 8006114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d106      	bne.n	800612a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	3301      	adds	r3, #1
 8006120:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006128:	d3e8      	bcc.n	80060fc <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006130:	d301      	bcc.n	8006136 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006132:	23f9      	movs	r3, #249	; 0xf9
 8006134:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006136:	2201      	movs	r2, #1
 8006138:	2183      	movs	r1, #131	; 0x83
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f002 fad0 	bl	80086e0 <VL53L0X_WrByte>
 8006140:	4603      	mov	r3, r0
 8006142:	461a      	mov	r2, r3
 8006144:	7dfb      	ldrb	r3, [r7, #23]
 8006146:	4313      	orrs	r3, r2
 8006148:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800614a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b098      	sub	sp, #96	; 0x60
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	460b      	mov	r3, r1
 8006160:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006162:	2300      	movs	r3, #0
 8006164:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800617c:	2300      	movs	r3, #0
 800617e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8006180:	2300      	movs	r3, #0
 8006182:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8006186:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800618a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800619e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80061a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061a6:	2b07      	cmp	r3, #7
 80061a8:	f000 8408 	beq.w	80069bc <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80061ac:	2201      	movs	r2, #1
 80061ae:	2180      	movs	r1, #128	; 0x80
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f002 fa95 	bl	80086e0 <VL53L0X_WrByte>
 80061b6:	4603      	mov	r3, r0
 80061b8:	461a      	mov	r2, r3
 80061ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061be:	4313      	orrs	r3, r2
 80061c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80061c4:	2201      	movs	r2, #1
 80061c6:	21ff      	movs	r1, #255	; 0xff
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f002 fa89 	bl	80086e0 <VL53L0X_WrByte>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80061dc:	2200      	movs	r2, #0
 80061de:	2100      	movs	r1, #0
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f002 fa7d 	bl	80086e0 <VL53L0X_WrByte>
 80061e6:	4603      	mov	r3, r0
 80061e8:	461a      	mov	r2, r3
 80061ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80061f4:	2206      	movs	r2, #6
 80061f6:	21ff      	movs	r1, #255	; 0xff
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f002 fa71 	bl	80086e0 <VL53L0X_WrByte>
 80061fe:	4603      	mov	r3, r0
 8006200:	461a      	mov	r2, r3
 8006202:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006206:	4313      	orrs	r3, r2
 8006208:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800620c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006210:	461a      	mov	r2, r3
 8006212:	2183      	movs	r1, #131	; 0x83
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f002 fae5 	bl	80087e4 <VL53L0X_RdByte>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006222:	4313      	orrs	r3, r2
 8006224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006228:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800622c:	f043 0304 	orr.w	r3, r3, #4
 8006230:	b2db      	uxtb	r3, r3
 8006232:	461a      	mov	r2, r3
 8006234:	2183      	movs	r1, #131	; 0x83
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f002 fa52 	bl	80086e0 <VL53L0X_WrByte>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006244:	4313      	orrs	r3, r2
 8006246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800624a:	2207      	movs	r2, #7
 800624c:	21ff      	movs	r1, #255	; 0xff
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f002 fa46 	bl	80086e0 <VL53L0X_WrByte>
 8006254:	4603      	mov	r3, r0
 8006256:	461a      	mov	r2, r3
 8006258:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800625c:	4313      	orrs	r3, r2
 800625e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006262:	2201      	movs	r2, #1
 8006264:	2181      	movs	r1, #129	; 0x81
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f002 fa3a 	bl	80086e0 <VL53L0X_WrByte>
 800626c:	4603      	mov	r3, r0
 800626e:	461a      	mov	r2, r3
 8006270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006274:	4313      	orrs	r3, r2
 8006276:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f002 fb50 	bl	8008920 <VL53L0X_PollingDelay>
 8006280:	4603      	mov	r3, r0
 8006282:	461a      	mov	r2, r3
 8006284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006288:	4313      	orrs	r3, r2
 800628a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800628e:	2201      	movs	r2, #1
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f002 fa24 	bl	80086e0 <VL53L0X_WrByte>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062a0:	4313      	orrs	r3, r2
 80062a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8098 	beq.w	80063e2 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80062b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062b6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f040 8091 	bne.w	80063e2 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80062c0:	226b      	movs	r2, #107	; 0x6b
 80062c2:	2194      	movs	r1, #148	; 0x94
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f002 fa0b 	bl	80086e0 <VL53L0X_WrByte>
 80062ca:	4603      	mov	r3, r0
 80062cc:	461a      	mov	r2, r3
 80062ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff fef9 	bl	80060d0 <VL53L0X_device_read_strobe>
 80062de:	4603      	mov	r3, r0
 80062e0:	461a      	mov	r2, r3
 80062e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80062ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062f0:	461a      	mov	r2, r3
 80062f2:	2190      	movs	r1, #144	; 0x90
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f002 fad7 	bl	80088a8 <VL53L0X_RdDWord>
 80062fa:	4603      	mov	r3, r0
 80062fc:	461a      	mov	r2, r3
 80062fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006302:	4313      	orrs	r3, r2
 8006304:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006312:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	0bdb      	lsrs	r3, r3, #15
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006324:	2224      	movs	r2, #36	; 0x24
 8006326:	2194      	movs	r1, #148	; 0x94
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f002 f9d9 	bl	80086e0 <VL53L0X_WrByte>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006336:	4313      	orrs	r3, r2
 8006338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff fec7 	bl	80060d0 <VL53L0X_device_read_strobe>
 8006342:	4603      	mov	r3, r0
 8006344:	461a      	mov	r2, r3
 8006346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800634a:	4313      	orrs	r3, r2
 800634c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006350:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006354:	461a      	mov	r2, r3
 8006356:	2190      	movs	r1, #144	; 0x90
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f002 faa5 	bl	80088a8 <VL53L0X_RdDWord>
 800635e:	4603      	mov	r3, r0
 8006360:	461a      	mov	r2, r3
 8006362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006366:	4313      	orrs	r3, r2
 8006368:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	0e1b      	lsrs	r3, r3, #24
 8006370:	b2db      	uxtb	r3, r3
 8006372:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	0c1b      	lsrs	r3, r3, #16
 8006378:	b2db      	uxtb	r3, r3
 800637a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	b2db      	uxtb	r3, r3
 8006382:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	b2db      	uxtb	r3, r3
 8006388:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800638a:	2225      	movs	r2, #37	; 0x25
 800638c:	2194      	movs	r1, #148	; 0x94
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f002 f9a6 	bl	80086e0 <VL53L0X_WrByte>
 8006394:	4603      	mov	r3, r0
 8006396:	461a      	mov	r2, r3
 8006398:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800639c:	4313      	orrs	r3, r2
 800639e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff fe94 	bl	80060d0 <VL53L0X_device_read_strobe>
 80063a8:	4603      	mov	r3, r0
 80063aa:	461a      	mov	r2, r3
 80063ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063ba:	461a      	mov	r2, r3
 80063bc:	2190      	movs	r1, #144	; 0x90
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f002 fa72 	bl	80088a8 <VL53L0X_RdDWord>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	0e1b      	lsrs	r3, r3, #24
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	0c1b      	lsrs	r3, r3, #16
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8189 	beq.w	8006700 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80063ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063f2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f040 8182 	bne.w	8006700 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80063fc:	2202      	movs	r2, #2
 80063fe:	2194      	movs	r1, #148	; 0x94
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f002 f96d 	bl	80086e0 <VL53L0X_WrByte>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800640e:	4313      	orrs	r3, r2
 8006410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff fe5b 	bl	80060d0 <VL53L0X_device_read_strobe>
 800641a:	4603      	mov	r3, r0
 800641c:	461a      	mov	r2, r3
 800641e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006422:	4313      	orrs	r3, r2
 8006424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006428:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800642c:	461a      	mov	r2, r3
 800642e:	2190      	movs	r1, #144	; 0x90
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f002 f9d7 	bl	80087e4 <VL53L0X_RdByte>
 8006436:	4603      	mov	r3, r0
 8006438:	461a      	mov	r2, r3
 800643a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800643e:	4313      	orrs	r3, r2
 8006440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006444:	227b      	movs	r2, #123	; 0x7b
 8006446:	2194      	movs	r1, #148	; 0x94
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f002 f949 	bl	80086e0 <VL53L0X_WrByte>
 800644e:	4603      	mov	r3, r0
 8006450:	461a      	mov	r2, r3
 8006452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006456:	4313      	orrs	r3, r2
 8006458:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fe37 	bl	80060d0 <VL53L0X_device_read_strobe>
 8006462:	4603      	mov	r3, r0
 8006464:	461a      	mov	r2, r3
 8006466:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800646a:	4313      	orrs	r3, r2
 800646c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006470:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8006474:	461a      	mov	r2, r3
 8006476:	2190      	movs	r1, #144	; 0x90
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f002 f9b3 	bl	80087e4 <VL53L0X_RdByte>
 800647e:	4603      	mov	r3, r0
 8006480:	461a      	mov	r2, r3
 8006482:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006486:	4313      	orrs	r3, r2
 8006488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800648c:	2277      	movs	r2, #119	; 0x77
 800648e:	2194      	movs	r1, #148	; 0x94
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f002 f925 	bl	80086e0 <VL53L0X_WrByte>
 8006496:	4603      	mov	r3, r0
 8006498:	461a      	mov	r2, r3
 800649a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800649e:	4313      	orrs	r3, r2
 80064a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff fe13 	bl	80060d0 <VL53L0X_device_read_strobe>
 80064aa:	4603      	mov	r3, r0
 80064ac:	461a      	mov	r2, r3
 80064ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064bc:	461a      	mov	r2, r3
 80064be:	2190      	movs	r1, #144	; 0x90
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f002 f9f1 	bl	80088a8 <VL53L0X_RdDWord>
 80064c6:	4603      	mov	r3, r0
 80064c8:	461a      	mov	r2, r3
 80064ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	0e5b      	lsrs	r3, r3, #25
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	0c9b      	lsrs	r3, r3, #18
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	0adb      	lsrs	r3, r3, #11
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	091b      	lsrs	r3, r3, #4
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006508:	b2db      	uxtb	r3, r3
 800650a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	b2db      	uxtb	r3, r3
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006518:	b2db      	uxtb	r3, r3
 800651a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800651e:	2278      	movs	r2, #120	; 0x78
 8006520:	2194      	movs	r1, #148	; 0x94
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f002 f8dc 	bl	80086e0 <VL53L0X_WrByte>
 8006528:	4603      	mov	r3, r0
 800652a:	461a      	mov	r2, r3
 800652c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006530:	4313      	orrs	r3, r2
 8006532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff fdca 	bl	80060d0 <VL53L0X_device_read_strobe>
 800653c:	4603      	mov	r3, r0
 800653e:	461a      	mov	r2, r3
 8006540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006544:	4313      	orrs	r3, r2
 8006546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800654a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800654e:	461a      	mov	r2, r3
 8006550:	2190      	movs	r1, #144	; 0x90
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f002 f9a8 	bl	80088a8 <VL53L0X_RdDWord>
 8006558:	4603      	mov	r3, r0
 800655a:	461a      	mov	r2, r3
 800655c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006560:	4313      	orrs	r3, r2
 8006562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	0f5b      	lsrs	r3, r3, #29
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006570:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006572:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006576:	4413      	add	r3, r2
 8006578:	b2db      	uxtb	r3, r3
 800657a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	0d9b      	lsrs	r3, r3, #22
 8006580:	b2db      	uxtb	r3, r3
 8006582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006586:	b2db      	uxtb	r3, r3
 8006588:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	0bdb      	lsrs	r3, r3, #15
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006594:	b2db      	uxtb	r3, r3
 8006596:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	0a1b      	lsrs	r3, r3, #8
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	085b      	lsrs	r3, r3, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	019b      	lsls	r3, r3, #6
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80065c6:	2279      	movs	r2, #121	; 0x79
 80065c8:	2194      	movs	r1, #148	; 0x94
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f002 f888 	bl	80086e0 <VL53L0X_WrByte>
 80065d0:	4603      	mov	r3, r0
 80065d2:	461a      	mov	r2, r3
 80065d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065d8:	4313      	orrs	r3, r2
 80065da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff fd76 	bl	80060d0 <VL53L0X_device_read_strobe>
 80065e4:	4603      	mov	r3, r0
 80065e6:	461a      	mov	r2, r3
 80065e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065ec:	4313      	orrs	r3, r2
 80065ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80065f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065f6:	461a      	mov	r2, r3
 80065f8:	2190      	movs	r1, #144	; 0x90
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f002 f954 	bl	80088a8 <VL53L0X_RdDWord>
 8006600:	4603      	mov	r3, r0
 8006602:	461a      	mov	r2, r3
 8006604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006608:	4313      	orrs	r3, r2
 800660a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	0e9b      	lsrs	r3, r3, #26
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006618:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800661a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800661e:	4413      	add	r3, r2
 8006620:	b2db      	uxtb	r3, r3
 8006622:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	0cdb      	lsrs	r3, r3, #19
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662e:	b2db      	uxtb	r3, r3
 8006630:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	0b1b      	lsrs	r3, r3, #12
 8006636:	b2db      	uxtb	r3, r3
 8006638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800663c:	b2db      	uxtb	r3, r3
 800663e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800664a:	b2db      	uxtb	r3, r3
 800664c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	b2db      	uxtb	r3, r3
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800665a:	b2db      	uxtb	r3, r3
 800665c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006660:	227a      	movs	r2, #122	; 0x7a
 8006662:	2194      	movs	r1, #148	; 0x94
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f002 f83b 	bl	80086e0 <VL53L0X_WrByte>
 800666a:	4603      	mov	r3, r0
 800666c:	461a      	mov	r2, r3
 800666e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006672:	4313      	orrs	r3, r2
 8006674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff fd29 	bl	80060d0 <VL53L0X_device_read_strobe>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006686:	4313      	orrs	r3, r2
 8006688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800668c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006690:	461a      	mov	r2, r3
 8006692:	2190      	movs	r1, #144	; 0x90
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f002 f907 	bl	80088a8 <VL53L0X_RdDWord>
 800669a:	4603      	mov	r3, r0
 800669c:	461a      	mov	r2, r3
 800669e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	0f9b      	lsrs	r3, r3, #30
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80066b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066b8:	4413      	add	r3, r2
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	0ddb      	lsrs	r3, r3, #23
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	0c1b      	lsrs	r3, r3, #16
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	0a5b      	lsrs	r3, r3, #9
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	089b      	lsrs	r3, r3, #2
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80066fa:	2300      	movs	r3, #0
 80066fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 80f1 	beq.w	80068ee <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800670c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006710:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006714:	2b00      	cmp	r3, #0
 8006716:	f040 80ea 	bne.w	80068ee <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800671a:	227b      	movs	r2, #123	; 0x7b
 800671c:	2194      	movs	r1, #148	; 0x94
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f001 ffde 	bl	80086e0 <VL53L0X_WrByte>
 8006724:	4603      	mov	r3, r0
 8006726:	461a      	mov	r2, r3
 8006728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800672c:	4313      	orrs	r3, r2
 800672e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fccc 	bl	80060d0 <VL53L0X_device_read_strobe>
 8006738:	4603      	mov	r3, r0
 800673a:	461a      	mov	r2, r3
 800673c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006740:	4313      	orrs	r3, r2
 8006742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800674a:	461a      	mov	r2, r3
 800674c:	2190      	movs	r1, #144	; 0x90
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f002 f8aa 	bl	80088a8 <VL53L0X_RdDWord>
 8006754:	4603      	mov	r3, r0
 8006756:	461a      	mov	r2, r3
 8006758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800675c:	4313      	orrs	r3, r2
 800675e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006762:	227c      	movs	r2, #124	; 0x7c
 8006764:	2194      	movs	r1, #148	; 0x94
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 ffba 	bl	80086e0 <VL53L0X_WrByte>
 800676c:	4603      	mov	r3, r0
 800676e:	461a      	mov	r2, r3
 8006770:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006774:	4313      	orrs	r3, r2
 8006776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff fca8 	bl	80060d0 <VL53L0X_device_read_strobe>
 8006780:	4603      	mov	r3, r0
 8006782:	461a      	mov	r2, r3
 8006784:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006788:	4313      	orrs	r3, r2
 800678a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800678e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006792:	461a      	mov	r2, r3
 8006794:	2190      	movs	r1, #144	; 0x90
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f002 f886 	bl	80088a8 <VL53L0X_RdDWord>
 800679c:	4603      	mov	r3, r0
 800679e:	461a      	mov	r2, r3
 80067a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80067aa:	2273      	movs	r2, #115	; 0x73
 80067ac:	2194      	movs	r1, #148	; 0x94
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 ff96 	bl	80086e0 <VL53L0X_WrByte>
 80067b4:	4603      	mov	r3, r0
 80067b6:	461a      	mov	r2, r3
 80067b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067bc:	4313      	orrs	r3, r2
 80067be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fc84 	bl	80060d0 <VL53L0X_device_read_strobe>
 80067c8:	4603      	mov	r3, r0
 80067ca:	461a      	mov	r2, r3
 80067cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80067d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067da:	461a      	mov	r2, r3
 80067dc:	2190      	movs	r1, #144	; 0x90
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f002 f862 	bl	80088a8 <VL53L0X_RdDWord>
 80067e4:	4603      	mov	r3, r0
 80067e6:	461a      	mov	r2, r3
 80067e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067ec:	4313      	orrs	r3, r2
 80067ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80067fa:	2274      	movs	r2, #116	; 0x74
 80067fc:	2194      	movs	r1, #148	; 0x94
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 ff6e 	bl	80086e0 <VL53L0X_WrByte>
 8006804:	4603      	mov	r3, r0
 8006806:	461a      	mov	r2, r3
 8006808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800680c:	4313      	orrs	r3, r2
 800680e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff fc5c 	bl	80060d0 <VL53L0X_device_read_strobe>
 8006818:	4603      	mov	r3, r0
 800681a:	461a      	mov	r2, r3
 800681c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006820:	4313      	orrs	r3, r2
 8006822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006826:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800682a:	461a      	mov	r2, r3
 800682c:	2190      	movs	r1, #144	; 0x90
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f002 f83a 	bl	80088a8 <VL53L0X_RdDWord>
 8006834:	4603      	mov	r3, r0
 8006836:	461a      	mov	r2, r3
 8006838:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800683c:	4313      	orrs	r3, r2
 800683e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006846:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006848:	4313      	orrs	r3, r2
 800684a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800684c:	2275      	movs	r2, #117	; 0x75
 800684e:	2194      	movs	r1, #148	; 0x94
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 ff45 	bl	80086e0 <VL53L0X_WrByte>
 8006856:	4603      	mov	r3, r0
 8006858:	461a      	mov	r2, r3
 800685a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800685e:	4313      	orrs	r3, r2
 8006860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff fc33 	bl	80060d0 <VL53L0X_device_read_strobe>
 800686a:	4603      	mov	r3, r0
 800686c:	461a      	mov	r2, r3
 800686e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006872:	4313      	orrs	r3, r2
 8006874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006878:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800687c:	461a      	mov	r2, r3
 800687e:	2190      	movs	r1, #144	; 0x90
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f002 f811 	bl	80088a8 <VL53L0X_RdDWord>
 8006886:	4603      	mov	r3, r0
 8006888:	461a      	mov	r2, r3
 800688a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800688e:	4313      	orrs	r3, r2
 8006890:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006898:	b29b      	uxth	r3, r3
 800689a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800689c:	2276      	movs	r2, #118	; 0x76
 800689e:	2194      	movs	r1, #148	; 0x94
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 ff1d 	bl	80086e0 <VL53L0X_WrByte>
 80068a6:	4603      	mov	r3, r0
 80068a8:	461a      	mov	r2, r3
 80068aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068ae:	4313      	orrs	r3, r2
 80068b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff fc0b 	bl	80060d0 <VL53L0X_device_read_strobe>
 80068ba:	4603      	mov	r3, r0
 80068bc:	461a      	mov	r2, r3
 80068be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80068c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068cc:	461a      	mov	r2, r3
 80068ce:	2190      	movs	r1, #144	; 0x90
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 ffe9 	bl	80088a8 <VL53L0X_RdDWord>
 80068d6:	4603      	mov	r3, r0
 80068d8:	461a      	mov	r2, r3
 80068da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068de:	4313      	orrs	r3, r2
 80068e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80068e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068ea:	4313      	orrs	r3, r2
 80068ec:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80068ee:	2200      	movs	r2, #0
 80068f0:	2181      	movs	r1, #129	; 0x81
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 fef4 	bl	80086e0 <VL53L0X_WrByte>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006900:	4313      	orrs	r3, r2
 8006902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006906:	2206      	movs	r2, #6
 8006908:	21ff      	movs	r1, #255	; 0xff
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fee8 	bl	80086e0 <VL53L0X_WrByte>
 8006910:	4603      	mov	r3, r0
 8006912:	461a      	mov	r2, r3
 8006914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006918:	4313      	orrs	r3, r2
 800691a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800691e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006922:	461a      	mov	r2, r3
 8006924:	2183      	movs	r1, #131	; 0x83
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 ff5c 	bl	80087e4 <VL53L0X_RdByte>
 800692c:	4603      	mov	r3, r0
 800692e:	461a      	mov	r2, r3
 8006930:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006934:	4313      	orrs	r3, r2
 8006936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800693a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800693e:	f023 0304 	bic.w	r3, r3, #4
 8006942:	b2db      	uxtb	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	2183      	movs	r1, #131	; 0x83
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 fec9 	bl	80086e0 <VL53L0X_WrByte>
 800694e:	4603      	mov	r3, r0
 8006950:	461a      	mov	r2, r3
 8006952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006956:	4313      	orrs	r3, r2
 8006958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800695c:	2201      	movs	r2, #1
 800695e:	21ff      	movs	r1, #255	; 0xff
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 febd 	bl	80086e0 <VL53L0X_WrByte>
 8006966:	4603      	mov	r3, r0
 8006968:	461a      	mov	r2, r3
 800696a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800696e:	4313      	orrs	r3, r2
 8006970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006974:	2201      	movs	r2, #1
 8006976:	2100      	movs	r1, #0
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 feb1 	bl	80086e0 <VL53L0X_WrByte>
 800697e:	4603      	mov	r3, r0
 8006980:	461a      	mov	r2, r3
 8006982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006986:	4313      	orrs	r3, r2
 8006988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800698c:	2200      	movs	r2, #0
 800698e:	21ff      	movs	r1, #255	; 0xff
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 fea5 	bl	80086e0 <VL53L0X_WrByte>
 8006996:	4603      	mov	r3, r0
 8006998:	461a      	mov	r2, r3
 800699a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800699e:	4313      	orrs	r3, r2
 80069a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80069a4:	2200      	movs	r2, #0
 80069a6:	2180      	movs	r1, #128	; 0x80
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 fe99 	bl	80086e0 <VL53L0X_WrByte>
 80069ae:	4603      	mov	r3, r0
 80069b0:	461a      	mov	r2, r3
 80069b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80069bc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f040 808f 	bne.w	8006ae4 <VL53L0X_get_info_from_device+0x98e>
 80069c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069ca:	2b07      	cmp	r3, #7
 80069cc:	f000 808a 	beq.w	8006ae4 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d024      	beq.n	8006a24 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80069da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069de:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d11e      	bne.n	8006a24 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80069ec:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80069f6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80069fa:	2300      	movs	r3, #0
 80069fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069fe:	e00e      	b.n	8006a1e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8006a00:	f107 0208 	add.w	r2, r7, #8
 8006a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a06:	4413      	add	r3, r2
 8006a08:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006a14:	460a      	mov	r2, r1
 8006a16:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a20:	2b05      	cmp	r3, #5
 8006a22:	dded      	ble.n	8006a00 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d018      	beq.n	8006a60 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006a2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a32:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d112      	bne.n	8006a60 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a3a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a44:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	33f3      	adds	r3, #243	; 0xf3
 8006a52:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006a54:	f107 0310 	add.w	r3, r7, #16
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a5c:	f001 ffce 	bl	80089fc <strcpy>

		}

		if (((option & 4) == 4) &&
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d030      	beq.n	8006acc <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a6e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d12a      	bne.n	8006acc <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a88:	025b      	lsls	r3, r3, #9
 8006a8a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a90:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8006a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d011      	beq.n	8006ac4 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8006aa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006aae:	fb02 f303 	mul.w	r3, r2, r3
 8006ab2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8006ab4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8006ab8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006abc:	425b      	negs	r3, r3
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8006ac4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006acc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8006ada:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ae4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3760      	adds	r7, #96	; 0x60
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006af0:	b490      	push	{r4, r7}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006afc:	f240 6377 	movw	r3, #1655	; 0x677
 8006b00:	f04f 0400 	mov.w	r4, #0
 8006b04:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8006b08:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006b0c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	fb02 f303 	mul.w	r3, r2, r3
 8006b1c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc90      	pop	{r4, r7}
 8006b28:	4770      	bx	lr

08006b2a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b087      	sub	sp, #28
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d017      	beq.n	8006b74 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006b4a:	e005      	b.n	8006b58 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	085b      	lsrs	r3, r3, #1
 8006b50:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006b52:	89fb      	ldrh	r3, [r7, #14]
 8006b54:	3301      	adds	r3, #1
 8006b56:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f4      	bne.n	8006b4c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006b62:	89fb      	ldrh	r3, [r7, #14]
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006b70:	4413      	add	r3, r2
 8006b72:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006b74:	8afb      	ldrh	r3, [r7, #22]

}
 8006b76:	4618      	mov	r0, r3
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	4603      	mov	r3, r0
 8006b8a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006b94:	88fa      	ldrh	r2, [r7, #6]
 8006b96:	0a12      	lsrs	r2, r2, #8
 8006b98:	b292      	uxth	r2, r2
 8006b9a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff ff92 	bl	8006af0 <VL53L0X_calc_macro_period_ps>
 8006bcc:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006bd4:	4a0a      	ldr	r2, [pc, #40]	; (8006c00 <VL53L0X_calc_timeout_mclks+0x50>)
 8006bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bda:	099b      	lsrs	r3, r3, #6
 8006bdc:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006be4:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	441a      	add	r2, r3
	timeout_period_mclks =
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf4:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	10624dd3 	.word	0x10624dd3

08006c04 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	807b      	strh	r3, [r7, #2]
 8006c10:	4613      	mov	r3, r2
 8006c12:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006c18:	787b      	ldrb	r3, [r7, #1]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff ff67 	bl	8006af0 <VL53L0X_calc_macro_period_ps>
 8006c22:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <VL53L0X_calc_timeout_us+0x50>)
 8006c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c30:	099b      	lsrs	r3, r3, #6
 8006c32:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006c34:	887b      	ldrh	r3, [r7, #2]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	fb02 f303 	mul.w	r3, r2, r3
 8006c3c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8006c40:	4a04      	ldr	r2, [pc, #16]	; (8006c54 <VL53L0X_calc_timeout_us+0x50>)
 8006c42:	fba2 2303 	umull	r2, r3, r2, r3
 8006c46:	099b      	lsrs	r3, r3, #6
 8006c48:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006c4a:	697b      	ldr	r3, [r7, #20]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	10624dd3 	.word	0x10624dd3

08006c58 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08c      	sub	sp, #48	; 0x30
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	460b      	mov	r3, r1
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <get_sequence_step_timeout+0x38>
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d002      	beq.n	8006c90 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006c8a:	7afb      	ldrb	r3, [r7, #11]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d128      	bne.n	8006ce2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006c90:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006c94:	461a      	mov	r2, r3
 8006c96:	2100      	movs	r1, #0
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f7fd fa7d 	bl	8004198 <VL53L0X_GetVcselPulsePeriod>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006ca4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d109      	bne.n	8006cc0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006cac:	f107 0320 	add.w	r3, r7, #32
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	2146      	movs	r1, #70	; 0x46
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f001 fd95 	bl	80087e4 <VL53L0X_RdByte>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006cc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff ff5b 	bl	8006b82 <VL53L0X_decode_timeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006cd0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006cd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff ff93 	bl	8006c04 <VL53L0X_calc_timeout_us>
 8006cde:	62b8      	str	r0, [r7, #40]	; 0x28
 8006ce0:	e092      	b.n	8006e08 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006ce2:	7afb      	ldrb	r3, [r7, #11]
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d135      	bne.n	8006d54 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ce8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006cec:	461a      	mov	r2, r3
 8006cee:	2100      	movs	r1, #0
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f7fd fa51 	bl	8004198 <VL53L0X_GetVcselPulsePeriod>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006cfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f040 8081 	bne.w	8006e08 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006d06:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7fd fa42 	bl	8004198 <VL53L0X_GetVcselPulsePeriod>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006d1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006d22:	f107 031e 	add.w	r3, r7, #30
 8006d26:	461a      	mov	r2, r3
 8006d28:	2151      	movs	r1, #81	; 0x51
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f001 fd84 	bl	8008838 <VL53L0X_RdWord>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006d36:	8bfb      	ldrh	r3, [r7, #30]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff ff22 	bl	8006b82 <VL53L0X_decode_timeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006d42:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006d46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d48:	4619      	mov	r1, r3
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7ff ff5a 	bl	8006c04 <VL53L0X_calc_timeout_us>
 8006d50:	62b8      	str	r0, [r7, #40]	; 0x28
 8006d52:	e059      	b.n	8006e08 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d156      	bne.n	8006e08 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006d5a:	f107 0314 	add.w	r3, r7, #20
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7fd fb25 	bl	80043b0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01d      	beq.n	8006dac <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006d70:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006d74:	461a      	mov	r2, r3
 8006d76:	2100      	movs	r1, #0
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f7fd fa0d 	bl	8004198 <VL53L0X_GetVcselPulsePeriod>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006d84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10f      	bne.n	8006dac <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006d8c:	f107 031e 	add.w	r3, r7, #30
 8006d90:	461a      	mov	r2, r3
 8006d92:	2151      	movs	r1, #81	; 0x51
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f001 fd4f 	bl	8008838 <VL53L0X_RdWord>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006da0:	8bfb      	ldrh	r3, [r7, #30]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff feed 	bl	8006b82 <VL53L0X_decode_timeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006dac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006db4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006db8:	461a      	mov	r2, r3
 8006dba:	2101      	movs	r1, #1
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7fd f9eb 	bl	8004198 <VL53L0X_GetVcselPulsePeriod>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006dc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10f      	bne.n	8006df0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006dd0:	f107 031c 	add.w	r3, r7, #28
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	2171      	movs	r1, #113	; 0x71
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f001 fd2d 	bl	8008838 <VL53L0X_RdWord>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006de4:	8bbb      	ldrh	r3, [r7, #28]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff fecb 	bl	8006b82 <VL53L0X_decode_timeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006df0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006df2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006df8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006dfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff feff 	bl	8006c04 <VL53L0X_calc_timeout_us>
 8006e06:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e0c:	601a      	str	r2, [r3, #0]

	return Status;
 8006e0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3730      	adds	r7, #48	; 0x30
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b08a      	sub	sp, #40	; 0x28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	460b      	mov	r3, r1
 8006e24:	607a      	str	r2, [r7, #4]
 8006e26:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <set_sequence_step_timeout+0x26>
 8006e34:	7afb      	ldrb	r3, [r7, #11]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d002      	beq.n	8006e40 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d138      	bne.n	8006eb2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e40:	f107 031b 	add.w	r3, r7, #27
 8006e44:	461a      	mov	r2, r3
 8006e46:	2100      	movs	r1, #0
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7fd f9a5 	bl	8004198 <VL53L0X_GetVcselPulsePeriod>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006e54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d11a      	bne.n	8006e92 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006e5c:	7efb      	ldrb	r3, [r7, #27]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff fea4 	bl	8006bb0 <VL53L0X_calc_timeout_mclks>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006e6c:	8bbb      	ldrh	r3, [r7, #28]
 8006e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e72:	d903      	bls.n	8006e7c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006e74:	23ff      	movs	r3, #255	; 0xff
 8006e76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e7a:	e004      	b.n	8006e86 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006e7c:	8bbb      	ldrh	r3, [r7, #28]
 8006e7e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006e80:	3b01      	subs	r3, #1
 8006e82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006e86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006e92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f040 80ab 	bne.w	8006ff2 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	2146      	movs	r1, #70	; 0x46
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f001 fc1b 	bl	80086e0 <VL53L0X_WrByte>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006eb0:	e09f      	b.n	8006ff2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006eb2:	7afb      	ldrb	r3, [r7, #11]
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d135      	bne.n	8006f24 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006eb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d11b      	bne.n	8006ef8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ec0:	f107 031b 	add.w	r3, r7, #27
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f7fd f965 	bl	8004198 <VL53L0X_GetVcselPulsePeriod>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006ed4:	7efb      	ldrb	r3, [r7, #27]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff fe68 	bl	8006bb0 <VL53L0X_calc_timeout_mclks>
 8006ee0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006ee2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff fe1f 	bl	8006b2a <VL53L0X_encode_timeout>
 8006eec:	4603      	mov	r3, r0
 8006eee:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006ef0:	8b3a      	ldrh	r2, [r7, #24]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d108      	bne.n	8006f12 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006f00:	8b3b      	ldrh	r3, [r7, #24]
 8006f02:	461a      	mov	r2, r3
 8006f04:	2151      	movs	r1, #81	; 0x51
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f001 fc0e 	bl	8008728 <VL53L0X_WrWord>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006f12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d16b      	bne.n	8006ff2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006f22:	e066      	b.n	8006ff2 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006f24:	7afb      	ldrb	r3, [r7, #11]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d160      	bne.n	8006fec <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006f2a:	f107 0310 	add.w	r3, r7, #16
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7fd fa3d 	bl	80043b0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006f3a:	7cfb      	ldrb	r3, [r7, #19]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01d      	beq.n	8006f7c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f40:	f107 031b 	add.w	r3, r7, #27
 8006f44:	461a      	mov	r2, r3
 8006f46:	2100      	movs	r1, #0
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7fd f925 	bl	8004198 <VL53L0X_GetVcselPulsePeriod>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006f54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10f      	bne.n	8006f7c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006f5c:	f107 0318 	add.w	r3, r7, #24
 8006f60:	461a      	mov	r2, r3
 8006f62:	2151      	movs	r1, #81	; 0x51
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f001 fc67 	bl	8008838 <VL53L0X_RdWord>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006f70:	8b3b      	ldrh	r3, [r7, #24]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fe05 	bl	8006b82 <VL53L0X_decode_timeout>
 8006f78:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006f7a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006f7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d109      	bne.n	8006f98 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f84:	f107 031b 	add.w	r3, r7, #27
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7fd f903 	bl	8004198 <VL53L0X_GetVcselPulsePeriod>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006f98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d128      	bne.n	8006ff2 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006fa0:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7ff fe02 	bl	8006bb0 <VL53L0X_calc_timeout_mclks>
 8006fac:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fb0:	6a3a      	ldr	r2, [r7, #32]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8006fb6:	6a38      	ldr	r0, [r7, #32]
 8006fb8:	f7ff fdb7 	bl	8006b2a <VL53L0X_encode_timeout>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8006fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d108      	bne.n	8006fda <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006fc8:	8bfb      	ldrh	r3, [r7, #30]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	2171      	movs	r1, #113	; 0x71
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f001 fbaa 	bl	8008728 <VL53L0X_WrWord>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006fda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d107      	bne.n	8006ff2 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006fea:	e002      	b.n	8006ff2 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006fec:	23fc      	movs	r3, #252	; 0xfc
 8006fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006ff2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3728      	adds	r7, #40	; 0x28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b08a      	sub	sp, #40	; 0x28
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
 800700a:	4613      	mov	r3, r2
 800700c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800700e:	2300      	movs	r3, #0
 8007010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8007014:	230c      	movs	r3, #12
 8007016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800701a:	2312      	movs	r3, #18
 800701c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8007020:	2308      	movs	r3, #8
 8007022:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8007026:	230e      	movs	r3, #14
 8007028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8007030:	78bb      	ldrb	r3, [r7, #2]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800703c:	23fc      	movs	r3, #252	; 0xfc
 800703e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007042:	e020      	b.n	8007086 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10d      	bne.n	8007066 <VL53L0X_set_vcsel_pulse_period+0x68>
 800704a:	78ba      	ldrb	r2, [r7, #2]
 800704c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007050:	429a      	cmp	r2, r3
 8007052:	d304      	bcc.n	800705e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8007054:	78ba      	ldrb	r2, [r7, #2]
 8007056:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800705a:	429a      	cmp	r2, r3
 800705c:	d903      	bls.n	8007066 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800705e:	23fc      	movs	r3, #252	; 0xfc
 8007060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007064:	e00f      	b.n	8007086 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8007066:	78fb      	ldrb	r3, [r7, #3]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d10c      	bne.n	8007086 <VL53L0X_set_vcsel_pulse_period+0x88>
 800706c:	78ba      	ldrb	r2, [r7, #2]
 800706e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007072:	429a      	cmp	r2, r3
 8007074:	d304      	bcc.n	8007080 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8007076:	78ba      	ldrb	r2, [r7, #2]
 8007078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800707c:	429a      	cmp	r2, r3
 800707e:	d902      	bls.n	8007086 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007080:	23fc      	movs	r3, #252	; 0xfc
 8007082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8007086:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800708e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007092:	e239      	b.n	8007508 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8007094:	78fb      	ldrb	r3, [r7, #3]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d150      	bne.n	800713c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800709a:	78bb      	ldrb	r3, [r7, #2]
 800709c:	2b0c      	cmp	r3, #12
 800709e:	d110      	bne.n	80070c2 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80070a0:	2218      	movs	r2, #24
 80070a2:	2157      	movs	r1, #87	; 0x57
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 fb1b 	bl	80086e0 <VL53L0X_WrByte>
 80070aa:	4603      	mov	r3, r0
 80070ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80070b0:	2208      	movs	r2, #8
 80070b2:	2156      	movs	r1, #86	; 0x56
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fb13 	bl	80086e0 <VL53L0X_WrByte>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070c0:	e17f      	b.n	80073c2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80070c2:	78bb      	ldrb	r3, [r7, #2]
 80070c4:	2b0e      	cmp	r3, #14
 80070c6:	d110      	bne.n	80070ea <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80070c8:	2230      	movs	r2, #48	; 0x30
 80070ca:	2157      	movs	r1, #87	; 0x57
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 fb07 	bl	80086e0 <VL53L0X_WrByte>
 80070d2:	4603      	mov	r3, r0
 80070d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80070d8:	2208      	movs	r2, #8
 80070da:	2156      	movs	r1, #86	; 0x56
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 faff 	bl	80086e0 <VL53L0X_WrByte>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070e8:	e16b      	b.n	80073c2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80070ea:	78bb      	ldrb	r3, [r7, #2]
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	d110      	bne.n	8007112 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80070f0:	2240      	movs	r2, #64	; 0x40
 80070f2:	2157      	movs	r1, #87	; 0x57
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 faf3 	bl	80086e0 <VL53L0X_WrByte>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8007100:	2208      	movs	r2, #8
 8007102:	2156      	movs	r1, #86	; 0x56
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 faeb 	bl	80086e0 <VL53L0X_WrByte>
 800710a:	4603      	mov	r3, r0
 800710c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007110:	e157      	b.n	80073c2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8007112:	78bb      	ldrb	r3, [r7, #2]
 8007114:	2b12      	cmp	r3, #18
 8007116:	f040 8154 	bne.w	80073c2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800711a:	2250      	movs	r2, #80	; 0x50
 800711c:	2157      	movs	r1, #87	; 0x57
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 fade 	bl	80086e0 <VL53L0X_WrByte>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800712a:	2208      	movs	r2, #8
 800712c:	2156      	movs	r1, #86	; 0x56
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 fad6 	bl	80086e0 <VL53L0X_WrByte>
 8007134:	4603      	mov	r3, r0
 8007136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800713a:	e142      	b.n	80073c2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	2b01      	cmp	r3, #1
 8007140:	f040 813f 	bne.w	80073c2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8007144:	78bb      	ldrb	r3, [r7, #2]
 8007146:	2b08      	cmp	r3, #8
 8007148:	d14c      	bne.n	80071e4 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800714a:	2210      	movs	r2, #16
 800714c:	2148      	movs	r1, #72	; 0x48
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fac6 	bl	80086e0 <VL53L0X_WrByte>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800715a:	2208      	movs	r2, #8
 800715c:	2147      	movs	r1, #71	; 0x47
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 fabe 	bl	80086e0 <VL53L0X_WrByte>
 8007164:	4603      	mov	r3, r0
 8007166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800716a:	2202      	movs	r2, #2
 800716c:	2132      	movs	r1, #50	; 0x32
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 fab6 	bl	80086e0 <VL53L0X_WrByte>
 8007174:	4603      	mov	r3, r0
 8007176:	461a      	mov	r2, r3
 8007178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800717c:	4313      	orrs	r3, r2
 800717e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8007182:	220c      	movs	r2, #12
 8007184:	2130      	movs	r1, #48	; 0x30
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 faaa 	bl	80086e0 <VL53L0X_WrByte>
 800718c:	4603      	mov	r3, r0
 800718e:	461a      	mov	r2, r3
 8007190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007194:	4313      	orrs	r3, r2
 8007196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800719a:	2201      	movs	r2, #1
 800719c:	21ff      	movs	r1, #255	; 0xff
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fa9e 	bl	80086e0 <VL53L0X_WrByte>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ac:	4313      	orrs	r3, r2
 80071ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80071b2:	2230      	movs	r2, #48	; 0x30
 80071b4:	2130      	movs	r1, #48	; 0x30
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 fa92 	bl	80086e0 <VL53L0X_WrByte>
 80071bc:	4603      	mov	r3, r0
 80071be:	461a      	mov	r2, r3
 80071c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c4:	4313      	orrs	r3, r2
 80071c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80071ca:	2200      	movs	r2, #0
 80071cc:	21ff      	movs	r1, #255	; 0xff
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 fa86 	bl	80086e0 <VL53L0X_WrByte>
 80071d4:	4603      	mov	r3, r0
 80071d6:	461a      	mov	r2, r3
 80071d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071dc:	4313      	orrs	r3, r2
 80071de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071e2:	e0ee      	b.n	80073c2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80071e4:	78bb      	ldrb	r3, [r7, #2]
 80071e6:	2b0a      	cmp	r3, #10
 80071e8:	d14c      	bne.n	8007284 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80071ea:	2228      	movs	r2, #40	; 0x28
 80071ec:	2148      	movs	r1, #72	; 0x48
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fa76 	bl	80086e0 <VL53L0X_WrByte>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80071fa:	2208      	movs	r2, #8
 80071fc:	2147      	movs	r1, #71	; 0x47
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 fa6e 	bl	80086e0 <VL53L0X_WrByte>
 8007204:	4603      	mov	r3, r0
 8007206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800720a:	2203      	movs	r2, #3
 800720c:	2132      	movs	r1, #50	; 0x32
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fa66 	bl	80086e0 <VL53L0X_WrByte>
 8007214:	4603      	mov	r3, r0
 8007216:	461a      	mov	r2, r3
 8007218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800721c:	4313      	orrs	r3, r2
 800721e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007222:	2209      	movs	r2, #9
 8007224:	2130      	movs	r1, #48	; 0x30
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fa5a 	bl	80086e0 <VL53L0X_WrByte>
 800722c:	4603      	mov	r3, r0
 800722e:	461a      	mov	r2, r3
 8007230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007234:	4313      	orrs	r3, r2
 8007236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800723a:	2201      	movs	r2, #1
 800723c:	21ff      	movs	r1, #255	; 0xff
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fa4e 	bl	80086e0 <VL53L0X_WrByte>
 8007244:	4603      	mov	r3, r0
 8007246:	461a      	mov	r2, r3
 8007248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800724c:	4313      	orrs	r3, r2
 800724e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007252:	2220      	movs	r2, #32
 8007254:	2130      	movs	r1, #48	; 0x30
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 fa42 	bl	80086e0 <VL53L0X_WrByte>
 800725c:	4603      	mov	r3, r0
 800725e:	461a      	mov	r2, r3
 8007260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007264:	4313      	orrs	r3, r2
 8007266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800726a:	2200      	movs	r2, #0
 800726c:	21ff      	movs	r1, #255	; 0xff
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 fa36 	bl	80086e0 <VL53L0X_WrByte>
 8007274:	4603      	mov	r3, r0
 8007276:	461a      	mov	r2, r3
 8007278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800727c:	4313      	orrs	r3, r2
 800727e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007282:	e09e      	b.n	80073c2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8007284:	78bb      	ldrb	r3, [r7, #2]
 8007286:	2b0c      	cmp	r3, #12
 8007288:	d14c      	bne.n	8007324 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800728a:	2238      	movs	r2, #56	; 0x38
 800728c:	2148      	movs	r1, #72	; 0x48
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 fa26 	bl	80086e0 <VL53L0X_WrByte>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800729a:	2208      	movs	r2, #8
 800729c:	2147      	movs	r1, #71	; 0x47
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f001 fa1e 	bl	80086e0 <VL53L0X_WrByte>
 80072a4:	4603      	mov	r3, r0
 80072a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80072aa:	2203      	movs	r2, #3
 80072ac:	2132      	movs	r1, #50	; 0x32
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f001 fa16 	bl	80086e0 <VL53L0X_WrByte>
 80072b4:	4603      	mov	r3, r0
 80072b6:	461a      	mov	r2, r3
 80072b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072bc:	4313      	orrs	r3, r2
 80072be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80072c2:	2208      	movs	r2, #8
 80072c4:	2130      	movs	r1, #48	; 0x30
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 fa0a 	bl	80086e0 <VL53L0X_WrByte>
 80072cc:	4603      	mov	r3, r0
 80072ce:	461a      	mov	r2, r3
 80072d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80072da:	2201      	movs	r2, #1
 80072dc:	21ff      	movs	r1, #255	; 0xff
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 f9fe 	bl	80086e0 <VL53L0X_WrByte>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461a      	mov	r2, r3
 80072e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ec:	4313      	orrs	r3, r2
 80072ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80072f2:	2220      	movs	r2, #32
 80072f4:	2130      	movs	r1, #48	; 0x30
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 f9f2 	bl	80086e0 <VL53L0X_WrByte>
 80072fc:	4603      	mov	r3, r0
 80072fe:	461a      	mov	r2, r3
 8007300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007304:	4313      	orrs	r3, r2
 8007306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800730a:	2200      	movs	r2, #0
 800730c:	21ff      	movs	r1, #255	; 0xff
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 f9e6 	bl	80086e0 <VL53L0X_WrByte>
 8007314:	4603      	mov	r3, r0
 8007316:	461a      	mov	r2, r3
 8007318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800731c:	4313      	orrs	r3, r2
 800731e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007322:	e04e      	b.n	80073c2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007324:	78bb      	ldrb	r3, [r7, #2]
 8007326:	2b0e      	cmp	r3, #14
 8007328:	d14b      	bne.n	80073c2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800732a:	2248      	movs	r2, #72	; 0x48
 800732c:	2148      	movs	r1, #72	; 0x48
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 f9d6 	bl	80086e0 <VL53L0X_WrByte>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800733a:	2208      	movs	r2, #8
 800733c:	2147      	movs	r1, #71	; 0x47
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 f9ce 	bl	80086e0 <VL53L0X_WrByte>
 8007344:	4603      	mov	r3, r0
 8007346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800734a:	2203      	movs	r2, #3
 800734c:	2132      	movs	r1, #50	; 0x32
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 f9c6 	bl	80086e0 <VL53L0X_WrByte>
 8007354:	4603      	mov	r3, r0
 8007356:	461a      	mov	r2, r3
 8007358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800735c:	4313      	orrs	r3, r2
 800735e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007362:	2207      	movs	r2, #7
 8007364:	2130      	movs	r1, #48	; 0x30
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f9ba 	bl	80086e0 <VL53L0X_WrByte>
 800736c:	4603      	mov	r3, r0
 800736e:	461a      	mov	r2, r3
 8007370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007374:	4313      	orrs	r3, r2
 8007376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800737a:	2201      	movs	r2, #1
 800737c:	21ff      	movs	r1, #255	; 0xff
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 f9ae 	bl	80086e0 <VL53L0X_WrByte>
 8007384:	4603      	mov	r3, r0
 8007386:	461a      	mov	r2, r3
 8007388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800738c:	4313      	orrs	r3, r2
 800738e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007392:	2220      	movs	r2, #32
 8007394:	2130      	movs	r1, #48	; 0x30
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 f9a2 	bl	80086e0 <VL53L0X_WrByte>
 800739c:	4603      	mov	r3, r0
 800739e:	461a      	mov	r2, r3
 80073a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073a4:	4313      	orrs	r3, r2
 80073a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80073aa:	2200      	movs	r2, #0
 80073ac:	21ff      	movs	r1, #255	; 0xff
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 f996 	bl	80086e0 <VL53L0X_WrByte>
 80073b4:	4603      	mov	r3, r0
 80073b6:	461a      	mov	r2, r3
 80073b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073bc:	4313      	orrs	r3, r2
 80073be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80073c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d17f      	bne.n	80074ca <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80073ca:	78bb      	ldrb	r3, [r7, #2]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe fe38 	bl	8006042 <VL53L0X_encode_vcsel_period>
 80073d2:	4603      	mov	r3, r0
 80073d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d045      	beq.n	800746e <VL53L0X_set_vcsel_pulse_period+0x470>
 80073e2:	e06e      	b.n	80074c2 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80073e4:	f107 0314 	add.w	r3, r7, #20
 80073e8:	461a      	mov	r2, r3
 80073ea:	2103      	movs	r1, #3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fc33 	bl	8006c58 <get_sequence_step_timeout>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80073f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8007400:	f107 0310 	add.w	r3, r7, #16
 8007404:	461a      	mov	r2, r3
 8007406:	2102      	movs	r1, #2
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff fc25 	bl	8006c58 <get_sequence_step_timeout>
 800740e:	4603      	mov	r3, r0
 8007410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007414:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007418:	2b00      	cmp	r3, #0
 800741a:	d109      	bne.n	8007430 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800741c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007420:	461a      	mov	r2, r3
 8007422:	2150      	movs	r1, #80	; 0x50
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 f95b 	bl	80086e0 <VL53L0X_WrByte>
 800742a:	4603      	mov	r3, r0
 800742c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007430:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007434:	2b00      	cmp	r3, #0
 8007436:	d108      	bne.n	800744a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	461a      	mov	r2, r3
 800743c:	2103      	movs	r1, #3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff fceb 	bl	8006e1a <set_sequence_step_timeout>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800744a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800744e:	2b00      	cmp	r3, #0
 8007450:	d108      	bne.n	8007464 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	461a      	mov	r2, r3
 8007456:	2102      	movs	r1, #2
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff fcde 	bl	8006e1a <set_sequence_step_timeout>
 800745e:	4603      	mov	r3, r0
 8007460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	78ba      	ldrb	r2, [r7, #2]
 8007468:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800746c:	e02e      	b.n	80074cc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800746e:	f107 0318 	add.w	r3, r7, #24
 8007472:	461a      	mov	r2, r3
 8007474:	2104      	movs	r1, #4
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff fbee 	bl	8006c58 <get_sequence_step_timeout>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007482:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800748a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800748e:	461a      	mov	r2, r3
 8007490:	2170      	movs	r1, #112	; 0x70
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f001 f924 	bl	80086e0 <VL53L0X_WrByte>
 8007498:	4603      	mov	r3, r0
 800749a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800749e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d108      	bne.n	80074b8 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	461a      	mov	r2, r3
 80074aa:	2104      	movs	r1, #4
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff fcb4 	bl	8006e1a <set_sequence_step_timeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	78ba      	ldrb	r2, [r7, #2]
 80074bc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80074c0:	e004      	b.n	80074cc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80074c2:	23fc      	movs	r3, #252	; 0xfc
 80074c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074c8:	e000      	b.n	80074cc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80074ca:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80074cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d109      	bne.n	80074e8 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80074da:	69f9      	ldr	r1, [r7, #28]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fc fe1d 	bl	800411c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80074e2:	4603      	mov	r3, r0
 80074e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80074e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d109      	bne.n	8007504 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80074f0:	f107 010f 	add.w	r1, r7, #15
 80074f4:	2301      	movs	r3, #1
 80074f6:	2200      	movs	r2, #0
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7fe fcbd 	bl	8005e78 <VL53L0X_perform_phase_calibration>
 80074fe:	4603      	mov	r3, r0
 8007500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007504:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007508:	4618      	mov	r0, r3
 800750a:	3728      	adds	r7, #40	; 0x28
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	460b      	mov	r3, r1
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800751e:	2300      	movs	r3, #0
 8007520:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007522:	7afb      	ldrb	r3, [r7, #11]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007528:	2b01      	cmp	r3, #1
 800752a:	d00a      	beq.n	8007542 <VL53L0X_get_vcsel_pulse_period+0x32>
 800752c:	e013      	b.n	8007556 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800752e:	f107 0316 	add.w	r3, r7, #22
 8007532:	461a      	mov	r2, r3
 8007534:	2150      	movs	r1, #80	; 0x50
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f001 f954 	bl	80087e4 <VL53L0X_RdByte>
 800753c:	4603      	mov	r3, r0
 800753e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007540:	e00b      	b.n	800755a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007542:	f107 0316 	add.w	r3, r7, #22
 8007546:	461a      	mov	r2, r3
 8007548:	2170      	movs	r1, #112	; 0x70
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f001 f94a 	bl	80087e4 <VL53L0X_RdByte>
 8007550:	4603      	mov	r3, r0
 8007552:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007554:	e001      	b.n	800755a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007556:	23fc      	movs	r3, #252	; 0xfc
 8007558:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800755a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d107      	bne.n	8007572 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007562:	7dbb      	ldrb	r3, [r7, #22]
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe fd59 	bl	800601c <VL53L0X_decode_vcsel_period>
 800756a:	4603      	mov	r3, r0
 800756c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	701a      	strb	r2, [r3, #0]

	return Status;
 8007572:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b092      	sub	sp, #72	; 0x48
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007588:	2300      	movs	r3, #0
 800758a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800758e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007592:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007594:	f240 7376 	movw	r3, #1910	; 0x776
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800759a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800759e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80075a0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80075a4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80075a6:	f240 234e 	movw	r3, #590	; 0x24e
 80075aa:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80075ac:	f240 23b2 	movw	r3, #690	; 0x2b2
 80075b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80075b2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80075b6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80075b8:	f240 2326 	movw	r3, #550	; 0x226
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80075c2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80075c6:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d205      	bcs.n	80075e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075d4:	23fc      	movs	r3, #252	; 0xfc
 80075d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80075da:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80075de:	e0aa      	b.n	8007736 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80075e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80075ec:	f107 0314 	add.w	r3, r7, #20
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7fc fedc 	bl	80043b0 <VL53L0X_GetSequenceStepEnables>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80075fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007602:	2b00      	cmp	r3, #0
 8007604:	d15b      	bne.n	80076be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007606:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007608:	2b00      	cmp	r3, #0
 800760a:	d105      	bne.n	8007618 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800760c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800760e:	2b00      	cmp	r3, #0
 8007610:	d102      	bne.n	8007618 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8007612:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007614:	2b00      	cmp	r3, #0
 8007616:	d052      	beq.n	80076be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007618:	f107 0310 	add.w	r3, r7, #16
 800761c:	461a      	mov	r2, r3
 800761e:	2102      	movs	r1, #2
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fb19 	bl	8006c58 <get_sequence_step_timeout>
 8007626:	4603      	mov	r3, r0
 8007628:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800762c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007634:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007638:	e07d      	b.n	8007736 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800763a:	7d3b      	ldrb	r3, [r7, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00f      	beq.n	8007660 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007640:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007644:	4413      	add	r3, r2
 8007646:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800764c:	429a      	cmp	r2, r3
 800764e:	d204      	bcs.n	800765a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8007650:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	643b      	str	r3, [r7, #64]	; 0x40
 8007658:	e002      	b.n	8007660 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800765a:	23fc      	movs	r3, #252	; 0xfc
 800765c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007660:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8007668:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800766c:	e063      	b.n	8007736 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800766e:	7dbb      	ldrb	r3, [r7, #22]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d011      	beq.n	8007698 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	4413      	add	r3, r2
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007682:	429a      	cmp	r2, r3
 8007684:	d204      	bcs.n	8007690 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	643b      	str	r3, [r7, #64]	; 0x40
 800768e:	e016      	b.n	80076be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007690:	23fc      	movs	r3, #252	; 0xfc
 8007692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007696:	e012      	b.n	80076be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007698:	7d7b      	ldrb	r3, [r7, #21]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00f      	beq.n	80076be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076a2:	4413      	add	r3, r2
 80076a4:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d204      	bcs.n	80076b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80076ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	643b      	str	r3, [r7, #64]	; 0x40
 80076b6:	e002      	b.n	80076be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076b8:	23fc      	movs	r3, #252	; 0xfc
 80076ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80076be:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80076c6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80076ca:	e034      	b.n	8007736 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d019      	beq.n	8007706 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80076d2:	f107 030c 	add.w	r3, r7, #12
 80076d6:	461a      	mov	r2, r3
 80076d8:	2103      	movs	r1, #3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff fabc 	bl	8006c58 <get_sequence_step_timeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ea:	4413      	add	r3, r2
 80076ec:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d204      	bcs.n	8007700 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80076f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	643b      	str	r3, [r7, #64]	; 0x40
 80076fe:	e002      	b.n	8007706 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007700:	23fc      	movs	r3, #252	; 0xfc
 8007702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007706:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800770a:	2b00      	cmp	r3, #0
 800770c:	d111      	bne.n	8007732 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800770e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00e      	beq.n	8007732 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007714:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800771c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800771e:	2104      	movs	r1, #4
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff fb7a 	bl	8006e1a <set_sequence_step_timeout>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007732:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007736:	4618      	mov	r0, r3
 8007738:	3748      	adds	r7, #72	; 0x48
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b090      	sub	sp, #64	; 0x40
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007748:	2300      	movs	r3, #0
 800774a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800774e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007752:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007754:	f240 7376 	movw	r3, #1910	; 0x776
 8007758:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800775a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007760:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007764:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007766:	f240 234e 	movw	r3, #590	; 0x24e
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800776c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007772:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007778:	f240 2326 	movw	r3, #550	; 0x226
 800777c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8007782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007786:	441a      	add	r2, r3
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800778c:	f107 0318 	add.w	r3, r7, #24
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7fc fe0c 	bl	80043b0 <VL53L0X_GetSequenceStepEnables>
 8007798:	4603      	mov	r3, r0
 800779a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800779e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80077a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077aa:	e075      	b.n	8007898 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80077ac:	7e3b      	ldrb	r3, [r7, #24]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80077b2:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80077b8:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d030      	beq.n	8007820 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80077be:	f107 0310 	add.w	r3, r7, #16
 80077c2:	461a      	mov	r2, r3
 80077c4:	2102      	movs	r1, #2
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fa46 	bl	8006c58 <get_sequence_step_timeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80077d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d122      	bne.n	8007820 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80077da:	7e3b      	ldrb	r3, [r7, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d007      	beq.n	80077f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80077e4:	6939      	ldr	r1, [r7, #16]
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80077ea:	441a      	add	r2, r3
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80077f0:	7ebb      	ldrb	r3, [r7, #26]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d009      	beq.n	800780a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80077fa:	6939      	ldr	r1, [r7, #16]
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	440b      	add	r3, r1
 8007800:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007802:	441a      	add	r2, r3
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	e00a      	b.n	8007820 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800780a:	7e7b      	ldrb	r3, [r7, #25]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d007      	beq.n	8007820 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007814:	6939      	ldr	r1, [r7, #16]
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800781a:	441a      	add	r2, r3
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007820:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007824:	2b00      	cmp	r3, #0
 8007826:	d114      	bne.n	8007852 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007828:	7efb      	ldrb	r3, [r7, #27]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d011      	beq.n	8007852 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800782e:	f107 030c 	add.w	r3, r7, #12
 8007832:	461a      	mov	r2, r3
 8007834:	2103      	movs	r1, #3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff fa0e 	bl	8006c58 <get_sequence_step_timeout>
 800783c:	4603      	mov	r3, r0
 800783e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007846:	68f9      	ldr	r1, [r7, #12]
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800784c:	441a      	add	r2, r3
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007852:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007856:	2b00      	cmp	r3, #0
 8007858:	d114      	bne.n	8007884 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800785a:	7f3b      	ldrb	r3, [r7, #28]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d011      	beq.n	8007884 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8007860:	f107 0314 	add.w	r3, r7, #20
 8007864:	461a      	mov	r2, r3
 8007866:	2104      	movs	r1, #4
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff f9f5 	bl	8006c58 <get_sequence_step_timeout>
 800786e:	4603      	mov	r3, r0
 8007870:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007878:	6979      	ldr	r1, [r7, #20]
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800787e:	441a      	add	r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007884:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007888:	2b00      	cmp	r3, #0
 800788a:	d103      	bne.n	8007894 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007894:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007898:	4618      	mov	r0, r3
 800789a:	3740      	adds	r7, #64	; 0x40
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078aa:	2300      	movs	r3, #0
 80078ac:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80078ae:	2300      	movs	r3, #0
 80078b0:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80078b2:	e0c6      	b.n	8007a42 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	4413      	add	r3, r2
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	74fb      	strb	r3, [r7, #19]
		Index++;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	3301      	adds	r3, #1
 80078c2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80078c4:	7cfb      	ldrb	r3, [r7, #19]
 80078c6:	2bff      	cmp	r3, #255	; 0xff
 80078c8:	f040 808d 	bne.w	80079e6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	4413      	add	r3, r2
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	747b      	strb	r3, [r7, #17]
			Index++;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	3301      	adds	r3, #1
 80078da:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80078dc:	7c7b      	ldrb	r3, [r7, #17]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d87e      	bhi.n	80079e0 <VL53L0X_load_tuning_settings+0x140>
 80078e2:	a201      	add	r2, pc, #4	; (adr r2, 80078e8 <VL53L0X_load_tuning_settings+0x48>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	080078f9 	.word	0x080078f9
 80078ec:	08007933 	.word	0x08007933
 80078f0:	0800796d 	.word	0x0800796d
 80078f4:	080079a7 	.word	0x080079a7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	4413      	add	r3, r2
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	743b      	strb	r3, [r7, #16]
				Index++;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	3301      	adds	r3, #1
 8007906:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	4413      	add	r3, r2
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	3301      	adds	r3, #1
 8007916:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007918:	7c3b      	ldrb	r3, [r7, #16]
 800791a:	b29b      	uxth	r3, r3
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	b29a      	uxth	r2, r3
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	b29b      	uxth	r3, r3
 8007924:	4413      	add	r3, r2
 8007926:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	89ba      	ldrh	r2, [r7, #12]
 800792c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8007930:	e087      	b.n	8007a42 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	4413      	add	r3, r2
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	743b      	strb	r3, [r7, #16]
				Index++;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	3301      	adds	r3, #1
 8007940:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	4413      	add	r3, r2
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	3301      	adds	r3, #1
 8007950:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007952:	7c3b      	ldrb	r3, [r7, #16]
 8007954:	b29b      	uxth	r3, r3
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	b29a      	uxth	r2, r3
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	b29b      	uxth	r3, r3
 800795e:	4413      	add	r3, r2
 8007960:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	89ba      	ldrh	r2, [r7, #12]
 8007966:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800796a:	e06a      	b.n	8007a42 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	4413      	add	r3, r2
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	743b      	strb	r3, [r7, #16]
				Index++;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	3301      	adds	r3, #1
 800797a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	4413      	add	r3, r2
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	3301      	adds	r3, #1
 800798a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800798c:	7c3b      	ldrb	r3, [r7, #16]
 800798e:	b29b      	uxth	r3, r3
 8007990:	021b      	lsls	r3, r3, #8
 8007992:	b29a      	uxth	r2, r3
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	b29b      	uxth	r3, r3
 8007998:	4413      	add	r3, r2
 800799a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	89ba      	ldrh	r2, [r7, #12]
 80079a0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80079a4:	e04d      	b.n	8007a42 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	4413      	add	r3, r2
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	743b      	strb	r3, [r7, #16]
				Index++;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	3301      	adds	r3, #1
 80079b4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	4413      	add	r3, r2
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	73fb      	strb	r3, [r7, #15]
				Index++;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	3301      	adds	r3, #1
 80079c4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80079c6:	7c3b      	ldrb	r3, [r7, #16]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	021b      	lsls	r3, r3, #8
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	4413      	add	r3, r2
 80079d4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	89ba      	ldrh	r2, [r7, #12]
 80079da:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80079de:	e030      	b.n	8007a42 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079e0:	23fc      	movs	r3, #252	; 0xfc
 80079e2:	77fb      	strb	r3, [r7, #31]
 80079e4:	e02d      	b.n	8007a42 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80079e6:	7cfb      	ldrb	r3, [r7, #19]
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	d828      	bhi.n	8007a3e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4413      	add	r3, r2
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	74bb      	strb	r3, [r7, #18]
			Index++;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	3301      	adds	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80079fc:	2300      	movs	r3, #0
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	e00f      	b.n	8007a22 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	4413      	add	r3, r2
 8007a08:	7819      	ldrb	r1, [r3, #0]
 8007a0a:	f107 0208 	add.w	r2, r7, #8
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	4413      	add	r3, r2
 8007a12:	460a      	mov	r2, r1
 8007a14:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	7cfb      	ldrb	r3, [r7, #19]
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	dbeb      	blt.n	8007a02 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007a2a:	7cfb      	ldrb	r3, [r7, #19]
 8007a2c:	f107 0208 	add.w	r2, r7, #8
 8007a30:	7cb9      	ldrb	r1, [r7, #18]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fdf8 	bl	8008628 <VL53L0X_WriteMulti>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	77fb      	strb	r3, [r7, #31]
 8007a3c:	e001      	b.n	8007a42 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a3e:	23fc      	movs	r3, #252	; 0xfc
 8007a40:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	4413      	add	r3, r2
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d004      	beq.n	8007a58 <VL53L0X_load_tuning_settings+0x1b8>
 8007a4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f43f af2e 	beq.w	80078b4 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3720      	adds	r7, #32
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a70:	2300      	movs	r3, #0
 8007a72:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007a7a:	f107 0313 	add.w	r3, r7, #19
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f7fc fd21 	bl	80044c8 <VL53L0X_GetXTalkCompensationEnable>
 8007a86:	4603      	mov	r3, r0
 8007a88:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8007a8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d111      	bne.n	8007ab6 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007a92:	7cfb      	ldrb	r3, [r7, #19]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00e      	beq.n	8007ab6 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	8a9b      	ldrh	r3, [r3, #20]
 8007aa2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	fb02 f303 	mul.w	r3, r2, r3
 8007aaa:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	3380      	adds	r3, #128	; 0x80
 8007ab0:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007ab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b086      	sub	sp, #24
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8007ada:	f107 0310 	add.w	r3, r7, #16
 8007ade:	461a      	mov	r2, r3
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff ffbe 	bl	8007a64 <VL53L0X_get_total_xtalk_rate>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007aec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d105      	bne.n	8007b00 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	441a      	add	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	601a      	str	r2, [r3, #0]

	return Status;
 8007b00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b09a      	sub	sp, #104	; 0x68
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007b1a:	2312      	movs	r3, #18
 8007b1c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8007b1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b22:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007b24:	2342      	movs	r3, #66	; 0x42
 8007b26:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007b28:	2306      	movs	r3, #6
 8007b2a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007b2c:	2307      	movs	r3, #7
 8007b2e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b30:	2300      	movs	r3, #0
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8007b3c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007b44:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b4a:	fb02 f303 	mul.w	r3, r2, r3
 8007b4e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8007b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b52:	3380      	adds	r3, #128	; 0x80
 8007b54:	0a1b      	lsrs	r3, r3, #8
 8007b56:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b5c:	fb02 f303 	mul.w	r3, r2, r3
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01b      	beq.n	8007ba4 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	029b      	lsls	r3, r3, #10
 8007b70:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b78:	4413      	add	r3, r2
 8007b7a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007b7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b84:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007b86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b88:	4613      	mov	r3, r2
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	4413      	add	r3, r2
 8007b8e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b94:	fb02 f303 	mul.w	r3, r2, r3
 8007b98:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b9c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007ba0:	0c1b      	lsrs	r3, r3, #16
 8007ba2:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ba8:	fb02 f303 	mul.w	r3, r2, r3
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007bb4:	0c1b      	lsrs	r3, r3, #16
 8007bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bbc:	fb02 f303 	mul.w	r3, r2, r3
 8007bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007bc8:	0c1b      	lsrs	r3, r3, #16
 8007bca:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bce:	085a      	lsrs	r2, r3, #1
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	441a      	add	r2, r3
 8007bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bda:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007be0:	fb02 f303 	mul.w	r3, r2, r3
 8007be4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bec:	d302      	bcc.n	8007bf4 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8007bee:	4b55      	ldr	r3, [pc, #340]	; (8007d44 <VL53L0X_calc_dmax+0x238>)
 8007bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8007bf2:	e016      	b.n	8007c22 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf6:	085a      	lsrs	r2, r3, #1
 8007bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bfa:	441a      	add	r2, r3
 8007bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c02:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c08:	fb02 f303 	mul.w	r3, r2, r3
 8007c0c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c1c:	fb02 f303 	mul.w	r3, r2, r3
 8007c20:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c24:	039b      	lsls	r3, r3, #14
 8007c26:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007c2a:	4a47      	ldr	r2, [pc, #284]	; (8007d48 <VL53L0X_calc_dmax+0x23c>)
 8007c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c30:	099b      	lsrs	r3, r3, #6
 8007c32:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c38:	fb02 f303 	mul.w	r3, r2, r3
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c42:	fb02 f303 	mul.w	r3, r2, r3
 8007c46:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	091b      	lsrs	r3, r3, #4
 8007c4e:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	4413      	add	r3, r2
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c6a:	0b9b      	lsrs	r3, r3, #14
 8007c6c:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c72:	4413      	add	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c78:	085b      	lsrs	r3, r3, #1
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c88:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	039b      	lsls	r3, r3, #14
 8007c8e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	4413      	add	r3, r2
 8007c98:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca2:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ca8:	fb02 f303 	mul.w	r3, r2, r3
 8007cac:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007cb4:	4a24      	ldr	r2, [pc, #144]	; (8007d48 <VL53L0X_calc_dmax+0x23c>)
 8007cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cba:	099b      	lsrs	r3, r3, #6
 8007cbc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007cca:	4a1f      	ldr	r2, [pc, #124]	; (8007d48 <VL53L0X_calc_dmax+0x23c>)
 8007ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd0:	099b      	lsrs	r3, r3, #6
 8007cd2:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cd6:	3380      	adds	r3, #128	; 0x80
 8007cd8:	0a1b      	lsrs	r3, r3, #8
 8007cda:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d008      	beq.n	8007cf4 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	085a      	lsrs	r2, r3, #1
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce8:	441a      	add	r2, r3
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cf2:	e001      	b.n	8007cf8 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007cf8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007cfa:	f7fe f9b5 	bl	8006068 <VL53L0X_isqrt>
 8007cfe:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d008      	beq.n	8007d18 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	085a      	lsrs	r2, r3, #1
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0c:	441a      	add	r2, r3
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d16:	e001      	b.n	8007d1c <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007d1c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007d1e:	f7fe f9a3 	bl	8006068 <VL53L0X_isqrt>
 8007d22:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007d24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d902      	bls.n	8007d38 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8007d32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d36:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007d38:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3768      	adds	r7, #104	; 0x68
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	fff00000 	.word	0xfff00000
 8007d48:	10624dd3 	.word	0x10624dd3

08007d4c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b0b4      	sub	sp, #208	; 0xd0
 8007d50:	af04      	add	r7, sp, #16
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007d5a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007d62:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007d6a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8007d6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007d72:	f241 235c 	movw	r3, #4700	; 0x125c
 8007d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007d7a:	4b9e      	ldr	r3, [pc, #632]	; (8007ff4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007d80:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007d84:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007d86:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d92:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007d94:	4b98      	ldr	r3, [pc, #608]	; (8007ff8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8007d96:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d9c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007d9e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007da2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8007da4:	f240 6377 	movw	r3, #1655	; 0x677
 8007da8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dbe:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007dcc:	f107 0310 	add.w	r3, r7, #16
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	68b9      	ldr	r1, [r7, #8]
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7ff fe74 	bl	8007ac2 <VL53L0X_get_total_signal_rate>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	461a      	mov	r2, r3
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7ff fe3b 	bl	8007a64 <VL53L0X_get_total_xtalk_rate>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e02:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007e18:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d902      	bls.n	8007e28 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007e28:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d168      	bne.n	8007f02 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007e36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007e40:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007e44:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007e48:	461a      	mov	r2, r3
 8007e4a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7fe feae 	bl	8006bb0 <VL53L0X_calc_timeout_mclks>
 8007e54:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8007e66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007e6a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f7fe fe9b 	bl	8006bb0 <VL53L0X_calc_timeout_mclks>
 8007e7a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8007e82:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d102      	bne.n	8007e90 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007e90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e94:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007e96:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007e9a:	fb02 f303 	mul.w	r3, r2, r3
 8007e9e:	02db      	lsls	r3, r3, #11
 8007ea0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007ea4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ea8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007eac:	4a53      	ldr	r2, [pc, #332]	; (8007ffc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007eae:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb2:	099b      	lsrs	r3, r3, #6
 8007eb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ebc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ebe:	fb02 f303 	mul.w	r3, r2, r3
 8007ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007ec6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ece:	4a4b      	ldr	r2, [pc, #300]	; (8007ffc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed4:	099b      	lsrs	r3, r3, #6
 8007ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	3380      	adds	r3, #128	; 0x80
 8007ede:	0a1b      	lsrs	r3, r3, #8
 8007ee0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ee8:	fb02 f303 	mul.w	r3, r2, r3
 8007eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007ef0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ef4:	3380      	adds	r3, #128	; 0x80
 8007ef6:	0a1b      	lsrs	r3, r3, #8
 8007ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	021b      	lsls	r3, r3, #8
 8007f00:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007f02:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8007f0a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007f0e:	e165      	b.n	80081dc <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8007f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10c      	bne.n	8007f30 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f1c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f24:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	e153      	b.n	80081d8 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8007f30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d102      	bne.n	8007f3e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f42:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f46:	041a      	lsls	r2, r3, #16
 8007f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007f52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d902      	bls.n	8007f62 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007f62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f66:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007f6a:	fb02 f303 	mul.w	r3, r2, r3
 8007f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007f72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007f76:	4613      	mov	r3, r2
 8007f78:	005b      	lsls	r3, r3, #1
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe f872 	bl	8006068 <VL53L0X_isqrt>
 8007f84:	4603      	mov	r3, r0
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	891b      	ldrh	r3, [r3, #8]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f92:	fb02 f303 	mul.w	r3, r2, r3
 8007f96:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f9a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007f9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fa0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007fa2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007fa4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007fa8:	4a14      	ldr	r2, [pc, #80]	; (8007ffc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007faa:	fba2 2303 	umull	r2, r3, r2, r3
 8007fae:	099b      	lsrs	r3, r3, #6
 8007fb0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8007fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fb4:	041b      	lsls	r3, r3, #16
 8007fb6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007fba:	4a10      	ldr	r2, [pc, #64]	; (8007ffc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc0:	099b      	lsrs	r3, r3, #6
 8007fc2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bfb8      	it	lt
 8007fd6:	425b      	neglt	r3, r3
 8007fd8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	7e1b      	ldrb	r3, [r3, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8007fe8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ff0:	e035      	b.n	800805e <VL53L0X_calc_sigma_estimate+0x312>
 8007ff2:	bf00      	nop
 8007ff4:	028f87ae 	.word	0x028f87ae
 8007ff8:	0006999a 	.word	0x0006999a
 8007ffc:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008002:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008006:	fbb2 f3f3 	udiv	r3, r2, r3
 800800a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008010:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008018:	fb02 f303 	mul.w	r3, r2, r3
 800801c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008020:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008024:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008026:	4413      	add	r3, r2
 8008028:	0c1b      	lsrs	r3, r3, #16
 800802a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800802e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008032:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800803a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800803e:	085b      	lsrs	r3, r3, #1
 8008040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008048:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800804c:	fb02 f303 	mul.w	r3, r2, r3
 8008050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008054:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008058:	0b9b      	lsrs	r3, r3, #14
 800805a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800805e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008064:	fb02 f303 	mul.w	r3, r2, r3
 8008068:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008070:	0c1b      	lsrs	r3, r3, #16
 8008072:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008078:	fb02 f303 	mul.w	r3, r2, r3
 800807c:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800807e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800808a:	0c1b      	lsrs	r3, r3, #16
 800808c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800808e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008092:	fb02 f303 	mul.w	r3, r2, r3
 8008096:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	4413      	add	r3, r2
 800809e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80080a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080a2:	f7fd ffe1 	bl	8006068 <VL53L0X_isqrt>
 80080a6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	041b      	lsls	r3, r3, #16
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	3332      	adds	r3, #50	; 0x32
 80080b2:	4a4c      	ldr	r2, [pc, #304]	; (80081e4 <VL53L0X_calc_sigma_estimate+0x498>)
 80080b4:	fba2 2303 	umull	r2, r3, r2, r3
 80080b8:	095a      	lsrs	r2, r3, #5
 80080ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80080c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080c8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80080cc:	fb02 f303 	mul.w	r3, r2, r3
 80080d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80080d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080d8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80080dc:	3308      	adds	r3, #8
 80080de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80080e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080e6:	4a40      	ldr	r2, [pc, #256]	; (80081e8 <VL53L0X_calc_sigma_estimate+0x49c>)
 80080e8:	fba2 2303 	umull	r2, r3, r2, r3
 80080ec:	0b5b      	lsrs	r3, r3, #13
 80080ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80080f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d902      	bls.n	8008102 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80080fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008102:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008106:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800810a:	4413      	add	r3, r2
 800810c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008110:	4a36      	ldr	r2, [pc, #216]	; (80081ec <VL53L0X_calc_sigma_estimate+0x4a0>)
 8008112:	fba2 2303 	umull	r2, r3, r2, r3
 8008116:	099b      	lsrs	r3, r3, #6
 8008118:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800811e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008122:	441a      	add	r2, r3
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800812a:	4618      	mov	r0, r3
 800812c:	f7fd ff9c 	bl	8006068 <VL53L0X_isqrt>
 8008130:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	021b      	lsls	r3, r3, #8
 8008136:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800813e:	4a2b      	ldr	r2, [pc, #172]	; (80081ec <VL53L0X_calc_sigma_estimate+0x4a0>)
 8008140:	fba2 2303 	umull	r2, r3, r2, r3
 8008144:	099b      	lsrs	r3, r3, #6
 8008146:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800814c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008150:	fb02 f303 	mul.w	r3, r2, r3
 8008154:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	fb02 f303 	mul.w	r3, r2, r3
 800815e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008164:	4413      	add	r3, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7fd ff7e 	bl	8006068 <VL53L0X_isqrt>
 800816c:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008174:	fb02 f303 	mul.w	r3, r2, r3
 8008178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800817c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800817e:	2b00      	cmp	r3, #0
 8008180:	d009      	beq.n	8008196 <VL53L0X_calc_sigma_estimate+0x44a>
 8008182:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <VL53L0X_calc_sigma_estimate+0x44a>
 800818a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800818e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008192:	429a      	cmp	r2, r3
 8008194:	d903      	bls.n	800819e <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8008196:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800819a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80081a4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80081b0:	6939      	ldr	r1, [r7, #16]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	9303      	str	r3, [sp, #12]
 80081b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80081ba:	9302      	str	r3, [sp, #8]
 80081bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f7ff fc9d 	bl	8007b0c <VL53L0X_calc_dmax>
 80081d2:	4603      	mov	r3, r0
 80081d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081d8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80081dc:	4618      	mov	r0, r3
 80081de:	37c0      	adds	r7, #192	; 0xc0
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	51eb851f 	.word	0x51eb851f
 80081e8:	d1b71759 	.word	0xd1b71759
 80081ec:	10624dd3 	.word	0x10624dd3

080081f0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b090      	sub	sp, #64	; 0x40
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	607a      	str	r2, [r7, #4]
 80081fa:	461a      	mov	r2, r3
 80081fc:	460b      	mov	r3, r1
 80081fe:	72fb      	strb	r3, [r7, #11]
 8008200:	4613      	mov	r3, r2
 8008202:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008204:	2300      	movs	r3, #0
 8008206:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008242:	7afb      	ldrb	r3, [r7, #11]
 8008244:	10db      	asrs	r3, r3, #3
 8008246:	b2db      	uxtb	r3, r3
 8008248:	f003 030f 	and.w	r3, r3, #15
 800824c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008250:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008254:	2b00      	cmp	r3, #0
 8008256:	d017      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
 8008258:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800825c:	2b05      	cmp	r3, #5
 800825e:	d013      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008260:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008264:	2b07      	cmp	r3, #7
 8008266:	d00f      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008268:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800826c:	2b0c      	cmp	r3, #12
 800826e:	d00b      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008270:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008274:	2b0d      	cmp	r3, #13
 8008276:	d007      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008278:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800827c:	2b0e      	cmp	r3, #14
 800827e:	d003      	beq.n	8008288 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008280:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008284:	2b0f      	cmp	r3, #15
 8008286:	d103      	bne.n	8008290 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008288:	2301      	movs	r3, #1
 800828a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800828e:	e002      	b.n	8008296 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008296:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800829e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80082a2:	461a      	mov	r2, r3
 80082a4:	2100      	movs	r1, #0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7fc f9e2 	bl	8004670 <VL53L0X_GetLimitCheckEnable>
 80082ac:	4603      	mov	r3, r0
 80082ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80082b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d02e      	beq.n	8008318 <VL53L0X_get_pal_range_status+0x128>
 80082ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d12a      	bne.n	8008318 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80082c2:	f107 0310 	add.w	r3, r7, #16
 80082c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80082ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff fd3d 	bl	8007d4c <VL53L0X_calc_sigma_estimate>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80082d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d103      	bne.n	80082e8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80082e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d113      	bne.n	8008318 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80082f0:	f107 0320 	add.w	r3, r7, #32
 80082f4:	461a      	mov	r2, r3
 80082f6:	2100      	movs	r1, #0
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7fc fa3f 	bl	800477c <VL53L0X_GetLimitCheckValue>
 80082fe:	4603      	mov	r3, r0
 8008300:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d006      	beq.n	8008318 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800830a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800830e:	429a      	cmp	r2, r3
 8008310:	d902      	bls.n	8008318 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008318:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800831c:	2b00      	cmp	r3, #0
 800831e:	d109      	bne.n	8008334 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008320:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008324:	461a      	mov	r2, r3
 8008326:	2102      	movs	r1, #2
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7fc f9a1 	bl	8004670 <VL53L0X_GetLimitCheckEnable>
 800832e:	4603      	mov	r3, r0
 8008330:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008334:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008338:	2b00      	cmp	r3, #0
 800833a:	d044      	beq.n	80083c6 <VL53L0X_get_pal_range_status+0x1d6>
 800833c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008340:	2b00      	cmp	r3, #0
 8008342:	d140      	bne.n	80083c6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008344:	f107 031c 	add.w	r3, r7, #28
 8008348:	461a      	mov	r2, r3
 800834a:	2102      	movs	r1, #2
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7fc fa15 	bl	800477c <VL53L0X_GetLimitCheckValue>
 8008352:	4603      	mov	r3, r0
 8008354:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008358:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800835c:	2b00      	cmp	r3, #0
 800835e:	d107      	bne.n	8008370 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008360:	2201      	movs	r2, #1
 8008362:	21ff      	movs	r1, #255	; 0xff
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 f9bb 	bl	80086e0 <VL53L0X_WrByte>
 800836a:	4603      	mov	r3, r0
 800836c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008370:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008374:	2b00      	cmp	r3, #0
 8008376:	d109      	bne.n	800838c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008378:	f107 0316 	add.w	r3, r7, #22
 800837c:	461a      	mov	r2, r3
 800837e:	21b6      	movs	r1, #182	; 0xb6
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 fa59 	bl	8008838 <VL53L0X_RdWord>
 8008386:	4603      	mov	r3, r0
 8008388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800838c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008390:	2b00      	cmp	r3, #0
 8008392:	d107      	bne.n	80083a4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008394:	2200      	movs	r2, #0
 8008396:	21ff      	movs	r1, #255	; 0xff
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 f9a1 	bl	80086e0 <VL53L0X_WrByte>
 800839e:	4603      	mov	r3, r0
 80083a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80083a4:	8afb      	ldrh	r3, [r7, #22]
 80083a6:	025b      	lsls	r3, r3, #9
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ae:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d006      	beq.n	80083c6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80083b8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80083ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083bc:	429a      	cmp	r2, r3
 80083be:	d902      	bls.n	80083c6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80083c0:	2301      	movs	r3, #1
 80083c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80083c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d109      	bne.n	80083e2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80083ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083d2:	461a      	mov	r2, r3
 80083d4:	2103      	movs	r1, #3
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f7fc f94a 	bl	8004670 <VL53L0X_GetLimitCheckEnable>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80083e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d023      	beq.n	8008432 <VL53L0X_get_pal_range_status+0x242>
 80083ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d11f      	bne.n	8008432 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80083f2:	893b      	ldrh	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d102      	bne.n	80083fe <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
 80083fc:	e005      	b.n	800840a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	021a      	lsls	r2, r3, #8
 8008402:	893b      	ldrh	r3, [r7, #8]
 8008404:	fbb2 f3f3 	udiv	r3, r2, r3
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800840a:	f107 0318 	add.w	r3, r7, #24
 800840e:	461a      	mov	r2, r3
 8008410:	2103      	movs	r1, #3
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f7fc f9b2 	bl	800477c <VL53L0X_GetLimitCheckValue>
 8008418:	4603      	mov	r3, r0
 800841a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d006      	beq.n	8008432 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008424:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008428:	429a      	cmp	r2, r3
 800842a:	d202      	bcs.n	8008432 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800842c:	2301      	movs	r3, #1
 800842e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008432:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008436:	2b00      	cmp	r3, #0
 8008438:	d14a      	bne.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800843a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800843e:	2b01      	cmp	r3, #1
 8008440:	d103      	bne.n	800844a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008444:	22ff      	movs	r2, #255	; 0xff
 8008446:	701a      	strb	r2, [r3, #0]
 8008448:	e042      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800844a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800844e:	2b01      	cmp	r3, #1
 8008450:	d007      	beq.n	8008462 <VL53L0X_get_pal_range_status+0x272>
 8008452:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008456:	2b02      	cmp	r3, #2
 8008458:	d003      	beq.n	8008462 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800845a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800845e:	2b03      	cmp	r3, #3
 8008460:	d103      	bne.n	800846a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008464:	2205      	movs	r2, #5
 8008466:	701a      	strb	r2, [r3, #0]
 8008468:	e032      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800846a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800846e:	2b06      	cmp	r3, #6
 8008470:	d003      	beq.n	800847a <VL53L0X_get_pal_range_status+0x28a>
 8008472:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008476:	2b09      	cmp	r3, #9
 8008478:	d103      	bne.n	8008482 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800847a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847c:	2204      	movs	r2, #4
 800847e:	701a      	strb	r2, [r3, #0]
 8008480:	e026      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8008482:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008486:	2b08      	cmp	r3, #8
 8008488:	d007      	beq.n	800849a <VL53L0X_get_pal_range_status+0x2aa>
 800848a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800848e:	2b0a      	cmp	r3, #10
 8008490:	d003      	beq.n	800849a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8008492:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008496:	2b01      	cmp	r3, #1
 8008498:	d103      	bne.n	80084a2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800849a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849c:	2203      	movs	r2, #3
 800849e:	701a      	strb	r2, [r3, #0]
 80084a0:	e016      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80084a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d003      	beq.n	80084b2 <VL53L0X_get_pal_range_status+0x2c2>
 80084aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d103      	bne.n	80084ba <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80084b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b4:	2202      	movs	r2, #2
 80084b6:	701a      	strb	r2, [r3, #0]
 80084b8:	e00a      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80084ba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d103      	bne.n	80084ca <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80084c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c4:	2201      	movs	r2, #1
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	e002      	b.n	80084d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80084ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084cc:	2200      	movs	r2, #0
 80084ce:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80084d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80084d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084da:	2200      	movs	r2, #0
 80084dc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80084de:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80084e2:	461a      	mov	r2, r3
 80084e4:	2101      	movs	r1, #1
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7fc f8c2 	bl	8004670 <VL53L0X_GetLimitCheckEnable>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80084f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d14f      	bne.n	800859a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80084fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <VL53L0X_get_pal_range_status+0x31a>
 8008502:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008506:	2b01      	cmp	r3, #1
 8008508:	d103      	bne.n	8008512 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800850a:	2301      	movs	r3, #1
 800850c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008510:	e002      	b.n	8008518 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800851e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008522:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008526:	2b04      	cmp	r3, #4
 8008528:	d003      	beq.n	8008532 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800852a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008538:	e002      	b.n	8008540 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008546:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800854a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <VL53L0X_get_pal_range_status+0x36a>
 8008552:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008556:	2b01      	cmp	r3, #1
 8008558:	d103      	bne.n	8008562 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800855a:	2301      	movs	r3, #1
 800855c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008560:	e002      	b.n	8008568 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800856e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008572:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <VL53L0X_get_pal_range_status+0x392>
 800857a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800857e:	2b01      	cmp	r3, #1
 8008580:	d103      	bne.n	800858a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8008582:	2301      	movs	r3, #1
 8008584:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008588:	e002      	b.n	8008590 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008596:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800859a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800859e:	4618      	mov	r0, r3
 80085a0:	3740      	adds	r7, #64	; 0x40
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b088      	sub	sp, #32
 80085aa:	af02      	add	r7, sp, #8
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	60b9      	str	r1, [r7, #8]
 80085b0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	330a      	adds	r3, #10
 80085b6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80085c4:	b299      	uxth	r1, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	4613      	mov	r3, r2
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	f7f8 fedb 	bl	800138c <HAL_I2C_Master_Transmit>
 80085d6:	4603      	mov	r3, r0
 80085d8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80085da:	693b      	ldr	r3, [r7, #16]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	330a      	adds	r3, #10
 80085f4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8008602:	f043 0301 	orr.w	r3, r3, #1
 8008606:	b2db      	uxtb	r3, r3
 8008608:	b299      	uxth	r1, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	b29a      	uxth	r2, r3
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	4613      	mov	r3, r2
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	f7f8 ffad 	bl	8001574 <HAL_I2C_Master_Receive>
 800861a:	4603      	mov	r3, r0
 800861c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800861e:	693b      	ldr	r3, [r7, #16]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	607a      	str	r2, [r7, #4]
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	460b      	mov	r3, r1
 8008636:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008638:	2300      	movs	r3, #0
 800863a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b3f      	cmp	r3, #63	; 0x3f
 8008640:	d902      	bls.n	8008648 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8008642:	f06f 0303 	mvn.w	r3, #3
 8008646:	e016      	b.n	8008676 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008648:	4a0d      	ldr	r2, [pc, #52]	; (8008680 <VL53L0X_WriteMulti+0x58>)
 800864a:	7afb      	ldrb	r3, [r7, #11]
 800864c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	480c      	ldr	r0, [pc, #48]	; (8008684 <VL53L0X_WriteMulti+0x5c>)
 8008654:	f000 f99e 	bl	8008994 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	3301      	adds	r3, #1
 800865c:	461a      	mov	r2, r3
 800865e:	4908      	ldr	r1, [pc, #32]	; (8008680 <VL53L0X_WriteMulti+0x58>)
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff ffa0 	bl	80085a6 <_I2CWrite>
 8008666:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800866e:	23ec      	movs	r3, #236	; 0xec
 8008670:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	200007d0 	.word	0x200007d0
 8008684:	200007d1 	.word	0x200007d1

08008688 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	607a      	str	r2, [r7, #4]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	460b      	mov	r3, r1
 8008696:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008698:	2300      	movs	r3, #0
 800869a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800869c:	f107 030b 	add.w	r3, r7, #11
 80086a0:	2201      	movs	r2, #1
 80086a2:	4619      	mov	r1, r3
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7ff ff7e 	bl	80085a6 <_I2CWrite>
 80086aa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80086b2:	23ec      	movs	r3, #236	; 0xec
 80086b4:	75fb      	strb	r3, [r7, #23]
        goto done;
 80086b6:	e00c      	b.n	80086d2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff ff91 	bl	80085e4 <_I2CRead>
 80086c2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80086ca:	23ec      	movs	r3, #236	; 0xec
 80086cc:	75fb      	strb	r3, [r7, #23]
 80086ce:	e000      	b.n	80086d2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 80086d0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80086d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
 80086ec:	4613      	mov	r3, r2
 80086ee:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80086f4:	4a0b      	ldr	r2, [pc, #44]	; (8008724 <VL53L0X_WrByte+0x44>)
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80086fa:	4a0a      	ldr	r2, [pc, #40]	; (8008724 <VL53L0X_WrByte+0x44>)
 80086fc:	78bb      	ldrb	r3, [r7, #2]
 80086fe:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008700:	2202      	movs	r2, #2
 8008702:	4908      	ldr	r1, [pc, #32]	; (8008724 <VL53L0X_WrByte+0x44>)
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff4e 	bl	80085a6 <_I2CWrite>
 800870a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008712:	23ec      	movs	r3, #236	; 0xec
 8008714:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008716:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	200007d0 	.word	0x200007d0

08008728 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
 8008734:	4613      	mov	r3, r2
 8008736:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800873c:	4a0e      	ldr	r2, [pc, #56]	; (8008778 <VL53L0X_WrWord+0x50>)
 800873e:	78fb      	ldrb	r3, [r7, #3]
 8008740:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008742:	883b      	ldrh	r3, [r7, #0]
 8008744:	0a1b      	lsrs	r3, r3, #8
 8008746:	b29b      	uxth	r3, r3
 8008748:	b2da      	uxtb	r2, r3
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <VL53L0X_WrWord+0x50>)
 800874c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800874e:	883b      	ldrh	r3, [r7, #0]
 8008750:	b2da      	uxtb	r2, r3
 8008752:	4b09      	ldr	r3, [pc, #36]	; (8008778 <VL53L0X_WrWord+0x50>)
 8008754:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008756:	2203      	movs	r2, #3
 8008758:	4907      	ldr	r1, [pc, #28]	; (8008778 <VL53L0X_WrWord+0x50>)
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff ff23 	bl	80085a6 <_I2CWrite>
 8008760:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008768:	23ec      	movs	r3, #236	; 0xec
 800876a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800876c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	200007d0 	.word	0x200007d0

0800877c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	4608      	mov	r0, r1
 8008786:	4611      	mov	r1, r2
 8008788:	461a      	mov	r2, r3
 800878a:	4603      	mov	r3, r0
 800878c:	70fb      	strb	r3, [r7, #3]
 800878e:	460b      	mov	r3, r1
 8008790:	70bb      	strb	r3, [r7, #2]
 8008792:	4613      	mov	r3, r2
 8008794:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800879a:	f107 020e 	add.w	r2, r7, #14
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f81e 	bl	80087e4 <VL53L0X_RdByte>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80087ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d110      	bne.n	80087d6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80087b4:	7bba      	ldrb	r2, [r7, #14]
 80087b6:	78bb      	ldrb	r3, [r7, #2]
 80087b8:	4013      	ands	r3, r2
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	787b      	ldrb	r3, [r7, #1]
 80087be:	4313      	orrs	r3, r2
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80087c4:	7bba      	ldrb	r2, [r7, #14]
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff ff88 	bl	80086e0 <VL53L0X_WrByte>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]
 80087d4:	e000      	b.n	80087d8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80087d6:	bf00      	nop
done:
    return Status;
 80087d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	460b      	mov	r3, r1
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80087f6:	f107 030b 	add.w	r3, r7, #11
 80087fa:	2201      	movs	r2, #1
 80087fc:	4619      	mov	r1, r3
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7ff fed1 	bl	80085a6 <_I2CWrite>
 8008804:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800880c:	23ec      	movs	r3, #236	; 0xec
 800880e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008810:	e00c      	b.n	800882c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008812:	2201      	movs	r2, #1
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7ff fee4 	bl	80085e4 <_I2CRead>
 800881c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008824:	23ec      	movs	r3, #236	; 0xec
 8008826:	75fb      	strb	r3, [r7, #23]
 8008828:	e000      	b.n	800882c <VL53L0X_RdByte+0x48>
    }
done:
 800882a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800882c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	460b      	mov	r3, r1
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008846:	2300      	movs	r3, #0
 8008848:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800884a:	f107 030b 	add.w	r3, r7, #11
 800884e:	2201      	movs	r2, #1
 8008850:	4619      	mov	r1, r3
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fea7 	bl	80085a6 <_I2CWrite>
 8008858:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008860:	23ec      	movs	r3, #236	; 0xec
 8008862:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008864:	e017      	b.n	8008896 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008866:	2202      	movs	r2, #2
 8008868:	490e      	ldr	r1, [pc, #56]	; (80088a4 <VL53L0X_RdWord+0x6c>)
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7ff feba 	bl	80085e4 <_I2CRead>
 8008870:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008878:	23ec      	movs	r3, #236	; 0xec
 800887a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800887c:	e00b      	b.n	8008896 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800887e:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <VL53L0X_RdWord+0x6c>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	021b      	lsls	r3, r3, #8
 8008886:	b29a      	uxth	r2, r3
 8008888:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <VL53L0X_RdWord+0x6c>)
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	b29b      	uxth	r3, r3
 800888e:	4413      	add	r3, r2
 8008890:	b29a      	uxth	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8008896:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	200007d0 	.word	0x200007d0

080088a8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	460b      	mov	r3, r1
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80088ba:	f107 030b 	add.w	r3, r7, #11
 80088be:	2201      	movs	r2, #1
 80088c0:	4619      	mov	r1, r3
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7ff fe6f 	bl	80085a6 <_I2CWrite>
 80088c8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80088d0:	23ec      	movs	r3, #236	; 0xec
 80088d2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80088d4:	e01b      	b.n	800890e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80088d6:	2204      	movs	r2, #4
 80088d8:	4910      	ldr	r1, [pc, #64]	; (800891c <VL53L0X_RdDWord+0x74>)
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7ff fe82 	bl	80085e4 <_I2CRead>
 80088e0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80088e8:	23ec      	movs	r3, #236	; 0xec
 80088ea:	75fb      	strb	r3, [r7, #23]
        goto done;
 80088ec:	e00f      	b.n	800890e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80088ee:	4b0b      	ldr	r3, [pc, #44]	; (800891c <VL53L0X_RdDWord+0x74>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	061a      	lsls	r2, r3, #24
 80088f4:	4b09      	ldr	r3, [pc, #36]	; (800891c <VL53L0X_RdDWord+0x74>)
 80088f6:	785b      	ldrb	r3, [r3, #1]
 80088f8:	041b      	lsls	r3, r3, #16
 80088fa:	441a      	add	r2, r3
 80088fc:	4b07      	ldr	r3, [pc, #28]	; (800891c <VL53L0X_RdDWord+0x74>)
 80088fe:	789b      	ldrb	r3, [r3, #2]
 8008900:	021b      	lsls	r3, r3, #8
 8008902:	4413      	add	r3, r2
 8008904:	4a05      	ldr	r2, [pc, #20]	; (800891c <VL53L0X_RdDWord+0x74>)
 8008906:	78d2      	ldrb	r2, [r2, #3]
 8008908:	441a      	add	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800890e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	200007d0 	.word	0x200007d0

08008920 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800892c:	2002      	movs	r0, #2
 800892e:	f7f8 f97d 	bl	8000c2c <HAL_Delay>
    return status;
 8008932:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <__errno>:
 8008940:	4b01      	ldr	r3, [pc, #4]	; (8008948 <__errno+0x8>)
 8008942:	6818      	ldr	r0, [r3, #0]
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	200002d0 	.word	0x200002d0

0800894c <__libc_init_array>:
 800894c:	b570      	push	{r4, r5, r6, lr}
 800894e:	4e0d      	ldr	r6, [pc, #52]	; (8008984 <__libc_init_array+0x38>)
 8008950:	4c0d      	ldr	r4, [pc, #52]	; (8008988 <__libc_init_array+0x3c>)
 8008952:	1ba4      	subs	r4, r4, r6
 8008954:	10a4      	asrs	r4, r4, #2
 8008956:	2500      	movs	r5, #0
 8008958:	42a5      	cmp	r5, r4
 800895a:	d109      	bne.n	8008970 <__libc_init_array+0x24>
 800895c:	4e0b      	ldr	r6, [pc, #44]	; (800898c <__libc_init_array+0x40>)
 800895e:	4c0c      	ldr	r4, [pc, #48]	; (8008990 <__libc_init_array+0x44>)
 8008960:	f000 fc30 	bl	80091c4 <_init>
 8008964:	1ba4      	subs	r4, r4, r6
 8008966:	10a4      	asrs	r4, r4, #2
 8008968:	2500      	movs	r5, #0
 800896a:	42a5      	cmp	r5, r4
 800896c:	d105      	bne.n	800897a <__libc_init_array+0x2e>
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008974:	4798      	blx	r3
 8008976:	3501      	adds	r5, #1
 8008978:	e7ee      	b.n	8008958 <__libc_init_array+0xc>
 800897a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800897e:	4798      	blx	r3
 8008980:	3501      	adds	r5, #1
 8008982:	e7f2      	b.n	800896a <__libc_init_array+0x1e>
 8008984:	080092a4 	.word	0x080092a4
 8008988:	080092a4 	.word	0x080092a4
 800898c:	080092a4 	.word	0x080092a4
 8008990:	080092a8 	.word	0x080092a8

08008994 <memcpy>:
 8008994:	b510      	push	{r4, lr}
 8008996:	1e43      	subs	r3, r0, #1
 8008998:	440a      	add	r2, r1
 800899a:	4291      	cmp	r1, r2
 800899c:	d100      	bne.n	80089a0 <memcpy+0xc>
 800899e:	bd10      	pop	{r4, pc}
 80089a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089a8:	e7f7      	b.n	800899a <memcpy+0x6>

080089aa <memset>:
 80089aa:	4402      	add	r2, r0
 80089ac:	4603      	mov	r3, r0
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d100      	bne.n	80089b4 <memset+0xa>
 80089b2:	4770      	bx	lr
 80089b4:	f803 1b01 	strb.w	r1, [r3], #1
 80089b8:	e7f9      	b.n	80089ae <memset+0x4>
	...

080089bc <siprintf>:
 80089bc:	b40e      	push	{r1, r2, r3}
 80089be:	b500      	push	{lr}
 80089c0:	b09c      	sub	sp, #112	; 0x70
 80089c2:	ab1d      	add	r3, sp, #116	; 0x74
 80089c4:	9002      	str	r0, [sp, #8]
 80089c6:	9006      	str	r0, [sp, #24]
 80089c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089cc:	4809      	ldr	r0, [pc, #36]	; (80089f4 <siprintf+0x38>)
 80089ce:	9107      	str	r1, [sp, #28]
 80089d0:	9104      	str	r1, [sp, #16]
 80089d2:	4909      	ldr	r1, [pc, #36]	; (80089f8 <siprintf+0x3c>)
 80089d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d8:	9105      	str	r1, [sp, #20]
 80089da:	6800      	ldr	r0, [r0, #0]
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	a902      	add	r1, sp, #8
 80089e0:	f000 f86e 	bl	8008ac0 <_svfiprintf_r>
 80089e4:	9b02      	ldr	r3, [sp, #8]
 80089e6:	2200      	movs	r2, #0
 80089e8:	701a      	strb	r2, [r3, #0]
 80089ea:	b01c      	add	sp, #112	; 0x70
 80089ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80089f0:	b003      	add	sp, #12
 80089f2:	4770      	bx	lr
 80089f4:	200002d0 	.word	0x200002d0
 80089f8:	ffff0208 	.word	0xffff0208

080089fc <strcpy>:
 80089fc:	4603      	mov	r3, r0
 80089fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a02:	f803 2b01 	strb.w	r2, [r3], #1
 8008a06:	2a00      	cmp	r2, #0
 8008a08:	d1f9      	bne.n	80089fe <strcpy+0x2>
 8008a0a:	4770      	bx	lr

08008a0c <__ssputs_r>:
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	688e      	ldr	r6, [r1, #8]
 8008a12:	429e      	cmp	r6, r3
 8008a14:	4682      	mov	sl, r0
 8008a16:	460c      	mov	r4, r1
 8008a18:	4690      	mov	r8, r2
 8008a1a:	4699      	mov	r9, r3
 8008a1c:	d837      	bhi.n	8008a8e <__ssputs_r+0x82>
 8008a1e:	898a      	ldrh	r2, [r1, #12]
 8008a20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a24:	d031      	beq.n	8008a8a <__ssputs_r+0x7e>
 8008a26:	6825      	ldr	r5, [r4, #0]
 8008a28:	6909      	ldr	r1, [r1, #16]
 8008a2a:	1a6f      	subs	r7, r5, r1
 8008a2c:	6965      	ldr	r5, [r4, #20]
 8008a2e:	2302      	movs	r3, #2
 8008a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a34:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a38:	f109 0301 	add.w	r3, r9, #1
 8008a3c:	443b      	add	r3, r7
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	bf38      	it	cc
 8008a42:	461d      	movcc	r5, r3
 8008a44:	0553      	lsls	r3, r2, #21
 8008a46:	d530      	bpl.n	8008aaa <__ssputs_r+0x9e>
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f000 fb21 	bl	8009090 <_malloc_r>
 8008a4e:	4606      	mov	r6, r0
 8008a50:	b950      	cbnz	r0, 8008a68 <__ssputs_r+0x5c>
 8008a52:	230c      	movs	r3, #12
 8008a54:	f8ca 3000 	str.w	r3, [sl]
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a68:	463a      	mov	r2, r7
 8008a6a:	6921      	ldr	r1, [r4, #16]
 8008a6c:	f7ff ff92 	bl	8008994 <memcpy>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	6126      	str	r6, [r4, #16]
 8008a7e:	6165      	str	r5, [r4, #20]
 8008a80:	443e      	add	r6, r7
 8008a82:	1bed      	subs	r5, r5, r7
 8008a84:	6026      	str	r6, [r4, #0]
 8008a86:	60a5      	str	r5, [r4, #8]
 8008a88:	464e      	mov	r6, r9
 8008a8a:	454e      	cmp	r6, r9
 8008a8c:	d900      	bls.n	8008a90 <__ssputs_r+0x84>
 8008a8e:	464e      	mov	r6, r9
 8008a90:	4632      	mov	r2, r6
 8008a92:	4641      	mov	r1, r8
 8008a94:	6820      	ldr	r0, [r4, #0]
 8008a96:	f000 fa93 	bl	8008fc0 <memmove>
 8008a9a:	68a3      	ldr	r3, [r4, #8]
 8008a9c:	1b9b      	subs	r3, r3, r6
 8008a9e:	60a3      	str	r3, [r4, #8]
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	441e      	add	r6, r3
 8008aa4:	6026      	str	r6, [r4, #0]
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e7dc      	b.n	8008a64 <__ssputs_r+0x58>
 8008aaa:	462a      	mov	r2, r5
 8008aac:	f000 fb4a 	bl	8009144 <_realloc_r>
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d1e2      	bne.n	8008a7c <__ssputs_r+0x70>
 8008ab6:	6921      	ldr	r1, [r4, #16]
 8008ab8:	4650      	mov	r0, sl
 8008aba:	f000 fa9b 	bl	8008ff4 <_free_r>
 8008abe:	e7c8      	b.n	8008a52 <__ssputs_r+0x46>

08008ac0 <_svfiprintf_r>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	461d      	mov	r5, r3
 8008ac6:	898b      	ldrh	r3, [r1, #12]
 8008ac8:	061f      	lsls	r7, r3, #24
 8008aca:	b09d      	sub	sp, #116	; 0x74
 8008acc:	4680      	mov	r8, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	4616      	mov	r6, r2
 8008ad2:	d50f      	bpl.n	8008af4 <_svfiprintf_r+0x34>
 8008ad4:	690b      	ldr	r3, [r1, #16]
 8008ad6:	b96b      	cbnz	r3, 8008af4 <_svfiprintf_r+0x34>
 8008ad8:	2140      	movs	r1, #64	; 0x40
 8008ada:	f000 fad9 	bl	8009090 <_malloc_r>
 8008ade:	6020      	str	r0, [r4, #0]
 8008ae0:	6120      	str	r0, [r4, #16]
 8008ae2:	b928      	cbnz	r0, 8008af0 <_svfiprintf_r+0x30>
 8008ae4:	230c      	movs	r3, #12
 8008ae6:	f8c8 3000 	str.w	r3, [r8]
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aee:	e0c8      	b.n	8008c82 <_svfiprintf_r+0x1c2>
 8008af0:	2340      	movs	r3, #64	; 0x40
 8008af2:	6163      	str	r3, [r4, #20]
 8008af4:	2300      	movs	r3, #0
 8008af6:	9309      	str	r3, [sp, #36]	; 0x24
 8008af8:	2320      	movs	r3, #32
 8008afa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008afe:	2330      	movs	r3, #48	; 0x30
 8008b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b04:	9503      	str	r5, [sp, #12]
 8008b06:	f04f 0b01 	mov.w	fp, #1
 8008b0a:	4637      	mov	r7, r6
 8008b0c:	463d      	mov	r5, r7
 8008b0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b12:	b10b      	cbz	r3, 8008b18 <_svfiprintf_r+0x58>
 8008b14:	2b25      	cmp	r3, #37	; 0x25
 8008b16:	d13e      	bne.n	8008b96 <_svfiprintf_r+0xd6>
 8008b18:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b1c:	d00b      	beq.n	8008b36 <_svfiprintf_r+0x76>
 8008b1e:	4653      	mov	r3, sl
 8008b20:	4632      	mov	r2, r6
 8008b22:	4621      	mov	r1, r4
 8008b24:	4640      	mov	r0, r8
 8008b26:	f7ff ff71 	bl	8008a0c <__ssputs_r>
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f000 80a4 	beq.w	8008c78 <_svfiprintf_r+0x1b8>
 8008b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b32:	4453      	add	r3, sl
 8008b34:	9309      	str	r3, [sp, #36]	; 0x24
 8008b36:	783b      	ldrb	r3, [r7, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 809d 	beq.w	8008c78 <_svfiprintf_r+0x1b8>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b48:	9304      	str	r3, [sp, #16]
 8008b4a:	9307      	str	r3, [sp, #28]
 8008b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b50:	931a      	str	r3, [sp, #104]	; 0x68
 8008b52:	462f      	mov	r7, r5
 8008b54:	2205      	movs	r2, #5
 8008b56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008b5a:	4850      	ldr	r0, [pc, #320]	; (8008c9c <_svfiprintf_r+0x1dc>)
 8008b5c:	f7f7 fb38 	bl	80001d0 <memchr>
 8008b60:	9b04      	ldr	r3, [sp, #16]
 8008b62:	b9d0      	cbnz	r0, 8008b9a <_svfiprintf_r+0xda>
 8008b64:	06d9      	lsls	r1, r3, #27
 8008b66:	bf44      	itt	mi
 8008b68:	2220      	movmi	r2, #32
 8008b6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b6e:	071a      	lsls	r2, r3, #28
 8008b70:	bf44      	itt	mi
 8008b72:	222b      	movmi	r2, #43	; 0x2b
 8008b74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b78:	782a      	ldrb	r2, [r5, #0]
 8008b7a:	2a2a      	cmp	r2, #42	; 0x2a
 8008b7c:	d015      	beq.n	8008baa <_svfiprintf_r+0xea>
 8008b7e:	9a07      	ldr	r2, [sp, #28]
 8008b80:	462f      	mov	r7, r5
 8008b82:	2000      	movs	r0, #0
 8008b84:	250a      	movs	r5, #10
 8008b86:	4639      	mov	r1, r7
 8008b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b8c:	3b30      	subs	r3, #48	; 0x30
 8008b8e:	2b09      	cmp	r3, #9
 8008b90:	d94d      	bls.n	8008c2e <_svfiprintf_r+0x16e>
 8008b92:	b1b8      	cbz	r0, 8008bc4 <_svfiprintf_r+0x104>
 8008b94:	e00f      	b.n	8008bb6 <_svfiprintf_r+0xf6>
 8008b96:	462f      	mov	r7, r5
 8008b98:	e7b8      	b.n	8008b0c <_svfiprintf_r+0x4c>
 8008b9a:	4a40      	ldr	r2, [pc, #256]	; (8008c9c <_svfiprintf_r+0x1dc>)
 8008b9c:	1a80      	subs	r0, r0, r2
 8008b9e:	fa0b f000 	lsl.w	r0, fp, r0
 8008ba2:	4318      	orrs	r0, r3
 8008ba4:	9004      	str	r0, [sp, #16]
 8008ba6:	463d      	mov	r5, r7
 8008ba8:	e7d3      	b.n	8008b52 <_svfiprintf_r+0x92>
 8008baa:	9a03      	ldr	r2, [sp, #12]
 8008bac:	1d11      	adds	r1, r2, #4
 8008bae:	6812      	ldr	r2, [r2, #0]
 8008bb0:	9103      	str	r1, [sp, #12]
 8008bb2:	2a00      	cmp	r2, #0
 8008bb4:	db01      	blt.n	8008bba <_svfiprintf_r+0xfa>
 8008bb6:	9207      	str	r2, [sp, #28]
 8008bb8:	e004      	b.n	8008bc4 <_svfiprintf_r+0x104>
 8008bba:	4252      	negs	r2, r2
 8008bbc:	f043 0302 	orr.w	r3, r3, #2
 8008bc0:	9207      	str	r2, [sp, #28]
 8008bc2:	9304      	str	r3, [sp, #16]
 8008bc4:	783b      	ldrb	r3, [r7, #0]
 8008bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc8:	d10c      	bne.n	8008be4 <_svfiprintf_r+0x124>
 8008bca:	787b      	ldrb	r3, [r7, #1]
 8008bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8008bce:	d133      	bne.n	8008c38 <_svfiprintf_r+0x178>
 8008bd0:	9b03      	ldr	r3, [sp, #12]
 8008bd2:	1d1a      	adds	r2, r3, #4
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	9203      	str	r2, [sp, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	bfb8      	it	lt
 8008bdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008be0:	3702      	adds	r7, #2
 8008be2:	9305      	str	r3, [sp, #20]
 8008be4:	4d2e      	ldr	r5, [pc, #184]	; (8008ca0 <_svfiprintf_r+0x1e0>)
 8008be6:	7839      	ldrb	r1, [r7, #0]
 8008be8:	2203      	movs	r2, #3
 8008bea:	4628      	mov	r0, r5
 8008bec:	f7f7 faf0 	bl	80001d0 <memchr>
 8008bf0:	b138      	cbz	r0, 8008c02 <_svfiprintf_r+0x142>
 8008bf2:	2340      	movs	r3, #64	; 0x40
 8008bf4:	1b40      	subs	r0, r0, r5
 8008bf6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	4303      	orrs	r3, r0
 8008bfe:	3701      	adds	r7, #1
 8008c00:	9304      	str	r3, [sp, #16]
 8008c02:	7839      	ldrb	r1, [r7, #0]
 8008c04:	4827      	ldr	r0, [pc, #156]	; (8008ca4 <_svfiprintf_r+0x1e4>)
 8008c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c0a:	2206      	movs	r2, #6
 8008c0c:	1c7e      	adds	r6, r7, #1
 8008c0e:	f7f7 fadf 	bl	80001d0 <memchr>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d038      	beq.n	8008c88 <_svfiprintf_r+0x1c8>
 8008c16:	4b24      	ldr	r3, [pc, #144]	; (8008ca8 <_svfiprintf_r+0x1e8>)
 8008c18:	bb13      	cbnz	r3, 8008c60 <_svfiprintf_r+0x1a0>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	3307      	adds	r3, #7
 8008c1e:	f023 0307 	bic.w	r3, r3, #7
 8008c22:	3308      	adds	r3, #8
 8008c24:	9303      	str	r3, [sp, #12]
 8008c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c28:	444b      	add	r3, r9
 8008c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c2c:	e76d      	b.n	8008b0a <_svfiprintf_r+0x4a>
 8008c2e:	fb05 3202 	mla	r2, r5, r2, r3
 8008c32:	2001      	movs	r0, #1
 8008c34:	460f      	mov	r7, r1
 8008c36:	e7a6      	b.n	8008b86 <_svfiprintf_r+0xc6>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	3701      	adds	r7, #1
 8008c3c:	9305      	str	r3, [sp, #20]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	250a      	movs	r5, #10
 8008c42:	4638      	mov	r0, r7
 8008c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c48:	3a30      	subs	r2, #48	; 0x30
 8008c4a:	2a09      	cmp	r2, #9
 8008c4c:	d903      	bls.n	8008c56 <_svfiprintf_r+0x196>
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0c8      	beq.n	8008be4 <_svfiprintf_r+0x124>
 8008c52:	9105      	str	r1, [sp, #20]
 8008c54:	e7c6      	b.n	8008be4 <_svfiprintf_r+0x124>
 8008c56:	fb05 2101 	mla	r1, r5, r1, r2
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	e7f0      	b.n	8008c42 <_svfiprintf_r+0x182>
 8008c60:	ab03      	add	r3, sp, #12
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	4622      	mov	r2, r4
 8008c66:	4b11      	ldr	r3, [pc, #68]	; (8008cac <_svfiprintf_r+0x1ec>)
 8008c68:	a904      	add	r1, sp, #16
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	f3af 8000 	nop.w
 8008c70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008c74:	4681      	mov	r9, r0
 8008c76:	d1d6      	bne.n	8008c26 <_svfiprintf_r+0x166>
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	065b      	lsls	r3, r3, #25
 8008c7c:	f53f af35 	bmi.w	8008aea <_svfiprintf_r+0x2a>
 8008c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c82:	b01d      	add	sp, #116	; 0x74
 8008c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c88:	ab03      	add	r3, sp, #12
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	4b07      	ldr	r3, [pc, #28]	; (8008cac <_svfiprintf_r+0x1ec>)
 8008c90:	a904      	add	r1, sp, #16
 8008c92:	4640      	mov	r0, r8
 8008c94:	f000 f882 	bl	8008d9c <_printf_i>
 8008c98:	e7ea      	b.n	8008c70 <_svfiprintf_r+0x1b0>
 8008c9a:	bf00      	nop
 8008c9c:	08009270 	.word	0x08009270
 8008ca0:	08009276 	.word	0x08009276
 8008ca4:	0800927a 	.word	0x0800927a
 8008ca8:	00000000 	.word	0x00000000
 8008cac:	08008a0d 	.word	0x08008a0d

08008cb0 <_printf_common>:
 8008cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb4:	4691      	mov	r9, r2
 8008cb6:	461f      	mov	r7, r3
 8008cb8:	688a      	ldr	r2, [r1, #8]
 8008cba:	690b      	ldr	r3, [r1, #16]
 8008cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	bfb8      	it	lt
 8008cc4:	4613      	movlt	r3, r2
 8008cc6:	f8c9 3000 	str.w	r3, [r9]
 8008cca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cce:	4606      	mov	r6, r0
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	b112      	cbz	r2, 8008cda <_printf_common+0x2a>
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	f8c9 3000 	str.w	r3, [r9]
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	0699      	lsls	r1, r3, #26
 8008cde:	bf42      	ittt	mi
 8008ce0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ce4:	3302      	addmi	r3, #2
 8008ce6:	f8c9 3000 	strmi.w	r3, [r9]
 8008cea:	6825      	ldr	r5, [r4, #0]
 8008cec:	f015 0506 	ands.w	r5, r5, #6
 8008cf0:	d107      	bne.n	8008d02 <_printf_common+0x52>
 8008cf2:	f104 0a19 	add.w	sl, r4, #25
 8008cf6:	68e3      	ldr	r3, [r4, #12]
 8008cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8008cfc:	1a9b      	subs	r3, r3, r2
 8008cfe:	42ab      	cmp	r3, r5
 8008d00:	dc28      	bgt.n	8008d54 <_printf_common+0xa4>
 8008d02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d06:	6822      	ldr	r2, [r4, #0]
 8008d08:	3300      	adds	r3, #0
 8008d0a:	bf18      	it	ne
 8008d0c:	2301      	movne	r3, #1
 8008d0e:	0692      	lsls	r2, r2, #26
 8008d10:	d42d      	bmi.n	8008d6e <_printf_common+0xbe>
 8008d12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d16:	4639      	mov	r1, r7
 8008d18:	4630      	mov	r0, r6
 8008d1a:	47c0      	blx	r8
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d020      	beq.n	8008d62 <_printf_common+0xb2>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	68e5      	ldr	r5, [r4, #12]
 8008d24:	f8d9 2000 	ldr.w	r2, [r9]
 8008d28:	f003 0306 	and.w	r3, r3, #6
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	bf08      	it	eq
 8008d30:	1aad      	subeq	r5, r5, r2
 8008d32:	68a3      	ldr	r3, [r4, #8]
 8008d34:	6922      	ldr	r2, [r4, #16]
 8008d36:	bf0c      	ite	eq
 8008d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d3c:	2500      	movne	r5, #0
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	bfc4      	itt	gt
 8008d42:	1a9b      	subgt	r3, r3, r2
 8008d44:	18ed      	addgt	r5, r5, r3
 8008d46:	f04f 0900 	mov.w	r9, #0
 8008d4a:	341a      	adds	r4, #26
 8008d4c:	454d      	cmp	r5, r9
 8008d4e:	d11a      	bne.n	8008d86 <_printf_common+0xd6>
 8008d50:	2000      	movs	r0, #0
 8008d52:	e008      	b.n	8008d66 <_printf_common+0xb6>
 8008d54:	2301      	movs	r3, #1
 8008d56:	4652      	mov	r2, sl
 8008d58:	4639      	mov	r1, r7
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	47c0      	blx	r8
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d103      	bne.n	8008d6a <_printf_common+0xba>
 8008d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6a:	3501      	adds	r5, #1
 8008d6c:	e7c3      	b.n	8008cf6 <_printf_common+0x46>
 8008d6e:	18e1      	adds	r1, r4, r3
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	2030      	movs	r0, #48	; 0x30
 8008d74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d78:	4422      	add	r2, r4
 8008d7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d82:	3302      	adds	r3, #2
 8008d84:	e7c5      	b.n	8008d12 <_printf_common+0x62>
 8008d86:	2301      	movs	r3, #1
 8008d88:	4622      	mov	r2, r4
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	47c0      	blx	r8
 8008d90:	3001      	adds	r0, #1
 8008d92:	d0e6      	beq.n	8008d62 <_printf_common+0xb2>
 8008d94:	f109 0901 	add.w	r9, r9, #1
 8008d98:	e7d8      	b.n	8008d4c <_printf_common+0x9c>
	...

08008d9c <_printf_i>:
 8008d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008da0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008da4:	460c      	mov	r4, r1
 8008da6:	7e09      	ldrb	r1, [r1, #24]
 8008da8:	b085      	sub	sp, #20
 8008daa:	296e      	cmp	r1, #110	; 0x6e
 8008dac:	4617      	mov	r7, r2
 8008dae:	4606      	mov	r6, r0
 8008db0:	4698      	mov	r8, r3
 8008db2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008db4:	f000 80b3 	beq.w	8008f1e <_printf_i+0x182>
 8008db8:	d822      	bhi.n	8008e00 <_printf_i+0x64>
 8008dba:	2963      	cmp	r1, #99	; 0x63
 8008dbc:	d036      	beq.n	8008e2c <_printf_i+0x90>
 8008dbe:	d80a      	bhi.n	8008dd6 <_printf_i+0x3a>
 8008dc0:	2900      	cmp	r1, #0
 8008dc2:	f000 80b9 	beq.w	8008f38 <_printf_i+0x19c>
 8008dc6:	2958      	cmp	r1, #88	; 0x58
 8008dc8:	f000 8083 	beq.w	8008ed2 <_printf_i+0x136>
 8008dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008dd4:	e032      	b.n	8008e3c <_printf_i+0xa0>
 8008dd6:	2964      	cmp	r1, #100	; 0x64
 8008dd8:	d001      	beq.n	8008dde <_printf_i+0x42>
 8008dda:	2969      	cmp	r1, #105	; 0x69
 8008ddc:	d1f6      	bne.n	8008dcc <_printf_i+0x30>
 8008dde:	6820      	ldr	r0, [r4, #0]
 8008de0:	6813      	ldr	r3, [r2, #0]
 8008de2:	0605      	lsls	r5, r0, #24
 8008de4:	f103 0104 	add.w	r1, r3, #4
 8008de8:	d52a      	bpl.n	8008e40 <_printf_i+0xa4>
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6011      	str	r1, [r2, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	da03      	bge.n	8008dfa <_printf_i+0x5e>
 8008df2:	222d      	movs	r2, #45	; 0x2d
 8008df4:	425b      	negs	r3, r3
 8008df6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008dfa:	486f      	ldr	r0, [pc, #444]	; (8008fb8 <_printf_i+0x21c>)
 8008dfc:	220a      	movs	r2, #10
 8008dfe:	e039      	b.n	8008e74 <_printf_i+0xd8>
 8008e00:	2973      	cmp	r1, #115	; 0x73
 8008e02:	f000 809d 	beq.w	8008f40 <_printf_i+0x1a4>
 8008e06:	d808      	bhi.n	8008e1a <_printf_i+0x7e>
 8008e08:	296f      	cmp	r1, #111	; 0x6f
 8008e0a:	d020      	beq.n	8008e4e <_printf_i+0xb2>
 8008e0c:	2970      	cmp	r1, #112	; 0x70
 8008e0e:	d1dd      	bne.n	8008dcc <_printf_i+0x30>
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	f043 0320 	orr.w	r3, r3, #32
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	e003      	b.n	8008e22 <_printf_i+0x86>
 8008e1a:	2975      	cmp	r1, #117	; 0x75
 8008e1c:	d017      	beq.n	8008e4e <_printf_i+0xb2>
 8008e1e:	2978      	cmp	r1, #120	; 0x78
 8008e20:	d1d4      	bne.n	8008dcc <_printf_i+0x30>
 8008e22:	2378      	movs	r3, #120	; 0x78
 8008e24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e28:	4864      	ldr	r0, [pc, #400]	; (8008fbc <_printf_i+0x220>)
 8008e2a:	e055      	b.n	8008ed8 <_printf_i+0x13c>
 8008e2c:	6813      	ldr	r3, [r2, #0]
 8008e2e:	1d19      	adds	r1, r3, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6011      	str	r1, [r2, #0]
 8008e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e08c      	b.n	8008f5a <_printf_i+0x1be>
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6011      	str	r1, [r2, #0]
 8008e44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e48:	bf18      	it	ne
 8008e4a:	b21b      	sxthne	r3, r3
 8008e4c:	e7cf      	b.n	8008dee <_printf_i+0x52>
 8008e4e:	6813      	ldr	r3, [r2, #0]
 8008e50:	6825      	ldr	r5, [r4, #0]
 8008e52:	1d18      	adds	r0, r3, #4
 8008e54:	6010      	str	r0, [r2, #0]
 8008e56:	0628      	lsls	r0, r5, #24
 8008e58:	d501      	bpl.n	8008e5e <_printf_i+0xc2>
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	e002      	b.n	8008e64 <_printf_i+0xc8>
 8008e5e:	0668      	lsls	r0, r5, #25
 8008e60:	d5fb      	bpl.n	8008e5a <_printf_i+0xbe>
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	4854      	ldr	r0, [pc, #336]	; (8008fb8 <_printf_i+0x21c>)
 8008e66:	296f      	cmp	r1, #111	; 0x6f
 8008e68:	bf14      	ite	ne
 8008e6a:	220a      	movne	r2, #10
 8008e6c:	2208      	moveq	r2, #8
 8008e6e:	2100      	movs	r1, #0
 8008e70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e74:	6865      	ldr	r5, [r4, #4]
 8008e76:	60a5      	str	r5, [r4, #8]
 8008e78:	2d00      	cmp	r5, #0
 8008e7a:	f2c0 8095 	blt.w	8008fa8 <_printf_i+0x20c>
 8008e7e:	6821      	ldr	r1, [r4, #0]
 8008e80:	f021 0104 	bic.w	r1, r1, #4
 8008e84:	6021      	str	r1, [r4, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d13d      	bne.n	8008f06 <_printf_i+0x16a>
 8008e8a:	2d00      	cmp	r5, #0
 8008e8c:	f040 808e 	bne.w	8008fac <_printf_i+0x210>
 8008e90:	4665      	mov	r5, ip
 8008e92:	2a08      	cmp	r2, #8
 8008e94:	d10b      	bne.n	8008eae <_printf_i+0x112>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	07db      	lsls	r3, r3, #31
 8008e9a:	d508      	bpl.n	8008eae <_printf_i+0x112>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	6862      	ldr	r2, [r4, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	bfde      	ittt	le
 8008ea4:	2330      	movle	r3, #48	; 0x30
 8008ea6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008eaa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008eae:	ebac 0305 	sub.w	r3, ip, r5
 8008eb2:	6123      	str	r3, [r4, #16]
 8008eb4:	f8cd 8000 	str.w	r8, [sp]
 8008eb8:	463b      	mov	r3, r7
 8008eba:	aa03      	add	r2, sp, #12
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f7ff fef6 	bl	8008cb0 <_printf_common>
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d14d      	bne.n	8008f64 <_printf_i+0x1c8>
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ecc:	b005      	add	sp, #20
 8008ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ed2:	4839      	ldr	r0, [pc, #228]	; (8008fb8 <_printf_i+0x21c>)
 8008ed4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ed8:	6813      	ldr	r3, [r2, #0]
 8008eda:	6821      	ldr	r1, [r4, #0]
 8008edc:	1d1d      	adds	r5, r3, #4
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6015      	str	r5, [r2, #0]
 8008ee2:	060a      	lsls	r2, r1, #24
 8008ee4:	d50b      	bpl.n	8008efe <_printf_i+0x162>
 8008ee6:	07ca      	lsls	r2, r1, #31
 8008ee8:	bf44      	itt	mi
 8008eea:	f041 0120 	orrmi.w	r1, r1, #32
 8008eee:	6021      	strmi	r1, [r4, #0]
 8008ef0:	b91b      	cbnz	r3, 8008efa <_printf_i+0x15e>
 8008ef2:	6822      	ldr	r2, [r4, #0]
 8008ef4:	f022 0220 	bic.w	r2, r2, #32
 8008ef8:	6022      	str	r2, [r4, #0]
 8008efa:	2210      	movs	r2, #16
 8008efc:	e7b7      	b.n	8008e6e <_printf_i+0xd2>
 8008efe:	064d      	lsls	r5, r1, #25
 8008f00:	bf48      	it	mi
 8008f02:	b29b      	uxthmi	r3, r3
 8008f04:	e7ef      	b.n	8008ee6 <_printf_i+0x14a>
 8008f06:	4665      	mov	r5, ip
 8008f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f0c:	fb02 3311 	mls	r3, r2, r1, r3
 8008f10:	5cc3      	ldrb	r3, [r0, r3]
 8008f12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f16:	460b      	mov	r3, r1
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	d1f5      	bne.n	8008f08 <_printf_i+0x16c>
 8008f1c:	e7b9      	b.n	8008e92 <_printf_i+0xf6>
 8008f1e:	6813      	ldr	r3, [r2, #0]
 8008f20:	6825      	ldr	r5, [r4, #0]
 8008f22:	6961      	ldr	r1, [r4, #20]
 8008f24:	1d18      	adds	r0, r3, #4
 8008f26:	6010      	str	r0, [r2, #0]
 8008f28:	0628      	lsls	r0, r5, #24
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	d501      	bpl.n	8008f32 <_printf_i+0x196>
 8008f2e:	6019      	str	r1, [r3, #0]
 8008f30:	e002      	b.n	8008f38 <_printf_i+0x19c>
 8008f32:	066a      	lsls	r2, r5, #25
 8008f34:	d5fb      	bpl.n	8008f2e <_printf_i+0x192>
 8008f36:	8019      	strh	r1, [r3, #0]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	6123      	str	r3, [r4, #16]
 8008f3c:	4665      	mov	r5, ip
 8008f3e:	e7b9      	b.n	8008eb4 <_printf_i+0x118>
 8008f40:	6813      	ldr	r3, [r2, #0]
 8008f42:	1d19      	adds	r1, r3, #4
 8008f44:	6011      	str	r1, [r2, #0]
 8008f46:	681d      	ldr	r5, [r3, #0]
 8008f48:	6862      	ldr	r2, [r4, #4]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	f7f7 f93f 	bl	80001d0 <memchr>
 8008f52:	b108      	cbz	r0, 8008f58 <_printf_i+0x1bc>
 8008f54:	1b40      	subs	r0, r0, r5
 8008f56:	6060      	str	r0, [r4, #4]
 8008f58:	6863      	ldr	r3, [r4, #4]
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f62:	e7a7      	b.n	8008eb4 <_printf_i+0x118>
 8008f64:	6923      	ldr	r3, [r4, #16]
 8008f66:	462a      	mov	r2, r5
 8008f68:	4639      	mov	r1, r7
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	47c0      	blx	r8
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d0aa      	beq.n	8008ec8 <_printf_i+0x12c>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	079b      	lsls	r3, r3, #30
 8008f76:	d413      	bmi.n	8008fa0 <_printf_i+0x204>
 8008f78:	68e0      	ldr	r0, [r4, #12]
 8008f7a:	9b03      	ldr	r3, [sp, #12]
 8008f7c:	4298      	cmp	r0, r3
 8008f7e:	bfb8      	it	lt
 8008f80:	4618      	movlt	r0, r3
 8008f82:	e7a3      	b.n	8008ecc <_printf_i+0x130>
 8008f84:	2301      	movs	r3, #1
 8008f86:	464a      	mov	r2, r9
 8008f88:	4639      	mov	r1, r7
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	47c0      	blx	r8
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d09a      	beq.n	8008ec8 <_printf_i+0x12c>
 8008f92:	3501      	adds	r5, #1
 8008f94:	68e3      	ldr	r3, [r4, #12]
 8008f96:	9a03      	ldr	r2, [sp, #12]
 8008f98:	1a9b      	subs	r3, r3, r2
 8008f9a:	42ab      	cmp	r3, r5
 8008f9c:	dcf2      	bgt.n	8008f84 <_printf_i+0x1e8>
 8008f9e:	e7eb      	b.n	8008f78 <_printf_i+0x1dc>
 8008fa0:	2500      	movs	r5, #0
 8008fa2:	f104 0919 	add.w	r9, r4, #25
 8008fa6:	e7f5      	b.n	8008f94 <_printf_i+0x1f8>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1ac      	bne.n	8008f06 <_printf_i+0x16a>
 8008fac:	7803      	ldrb	r3, [r0, #0]
 8008fae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb6:	e76c      	b.n	8008e92 <_printf_i+0xf6>
 8008fb8:	08009281 	.word	0x08009281
 8008fbc:	08009292 	.word	0x08009292

08008fc0 <memmove>:
 8008fc0:	4288      	cmp	r0, r1
 8008fc2:	b510      	push	{r4, lr}
 8008fc4:	eb01 0302 	add.w	r3, r1, r2
 8008fc8:	d807      	bhi.n	8008fda <memmove+0x1a>
 8008fca:	1e42      	subs	r2, r0, #1
 8008fcc:	4299      	cmp	r1, r3
 8008fce:	d00a      	beq.n	8008fe6 <memmove+0x26>
 8008fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fd4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008fd8:	e7f8      	b.n	8008fcc <memmove+0xc>
 8008fda:	4283      	cmp	r3, r0
 8008fdc:	d9f5      	bls.n	8008fca <memmove+0xa>
 8008fde:	1881      	adds	r1, r0, r2
 8008fe0:	1ad2      	subs	r2, r2, r3
 8008fe2:	42d3      	cmn	r3, r2
 8008fe4:	d100      	bne.n	8008fe8 <memmove+0x28>
 8008fe6:	bd10      	pop	{r4, pc}
 8008fe8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008ff0:	e7f7      	b.n	8008fe2 <memmove+0x22>
	...

08008ff4 <_free_r>:
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	2900      	cmp	r1, #0
 8008ffa:	d045      	beq.n	8009088 <_free_r+0x94>
 8008ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009000:	1f0c      	subs	r4, r1, #4
 8009002:	2b00      	cmp	r3, #0
 8009004:	bfb8      	it	lt
 8009006:	18e4      	addlt	r4, r4, r3
 8009008:	f000 f8d2 	bl	80091b0 <__malloc_lock>
 800900c:	4a1f      	ldr	r2, [pc, #124]	; (800908c <_free_r+0x98>)
 800900e:	6813      	ldr	r3, [r2, #0]
 8009010:	4610      	mov	r0, r2
 8009012:	b933      	cbnz	r3, 8009022 <_free_r+0x2e>
 8009014:	6063      	str	r3, [r4, #4]
 8009016:	6014      	str	r4, [r2, #0]
 8009018:	4628      	mov	r0, r5
 800901a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800901e:	f000 b8c8 	b.w	80091b2 <__malloc_unlock>
 8009022:	42a3      	cmp	r3, r4
 8009024:	d90c      	bls.n	8009040 <_free_r+0x4c>
 8009026:	6821      	ldr	r1, [r4, #0]
 8009028:	1862      	adds	r2, r4, r1
 800902a:	4293      	cmp	r3, r2
 800902c:	bf04      	itt	eq
 800902e:	681a      	ldreq	r2, [r3, #0]
 8009030:	685b      	ldreq	r3, [r3, #4]
 8009032:	6063      	str	r3, [r4, #4]
 8009034:	bf04      	itt	eq
 8009036:	1852      	addeq	r2, r2, r1
 8009038:	6022      	streq	r2, [r4, #0]
 800903a:	6004      	str	r4, [r0, #0]
 800903c:	e7ec      	b.n	8009018 <_free_r+0x24>
 800903e:	4613      	mov	r3, r2
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	b10a      	cbz	r2, 8009048 <_free_r+0x54>
 8009044:	42a2      	cmp	r2, r4
 8009046:	d9fa      	bls.n	800903e <_free_r+0x4a>
 8009048:	6819      	ldr	r1, [r3, #0]
 800904a:	1858      	adds	r0, r3, r1
 800904c:	42a0      	cmp	r0, r4
 800904e:	d10b      	bne.n	8009068 <_free_r+0x74>
 8009050:	6820      	ldr	r0, [r4, #0]
 8009052:	4401      	add	r1, r0
 8009054:	1858      	adds	r0, r3, r1
 8009056:	4282      	cmp	r2, r0
 8009058:	6019      	str	r1, [r3, #0]
 800905a:	d1dd      	bne.n	8009018 <_free_r+0x24>
 800905c:	6810      	ldr	r0, [r2, #0]
 800905e:	6852      	ldr	r2, [r2, #4]
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	4401      	add	r1, r0
 8009064:	6019      	str	r1, [r3, #0]
 8009066:	e7d7      	b.n	8009018 <_free_r+0x24>
 8009068:	d902      	bls.n	8009070 <_free_r+0x7c>
 800906a:	230c      	movs	r3, #12
 800906c:	602b      	str	r3, [r5, #0]
 800906e:	e7d3      	b.n	8009018 <_free_r+0x24>
 8009070:	6820      	ldr	r0, [r4, #0]
 8009072:	1821      	adds	r1, r4, r0
 8009074:	428a      	cmp	r2, r1
 8009076:	bf04      	itt	eq
 8009078:	6811      	ldreq	r1, [r2, #0]
 800907a:	6852      	ldreq	r2, [r2, #4]
 800907c:	6062      	str	r2, [r4, #4]
 800907e:	bf04      	itt	eq
 8009080:	1809      	addeq	r1, r1, r0
 8009082:	6021      	streq	r1, [r4, #0]
 8009084:	605c      	str	r4, [r3, #4]
 8009086:	e7c7      	b.n	8009018 <_free_r+0x24>
 8009088:	bd38      	pop	{r3, r4, r5, pc}
 800908a:	bf00      	nop
 800908c:	20000354 	.word	0x20000354

08009090 <_malloc_r>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	1ccd      	adds	r5, r1, #3
 8009094:	f025 0503 	bic.w	r5, r5, #3
 8009098:	3508      	adds	r5, #8
 800909a:	2d0c      	cmp	r5, #12
 800909c:	bf38      	it	cc
 800909e:	250c      	movcc	r5, #12
 80090a0:	2d00      	cmp	r5, #0
 80090a2:	4606      	mov	r6, r0
 80090a4:	db01      	blt.n	80090aa <_malloc_r+0x1a>
 80090a6:	42a9      	cmp	r1, r5
 80090a8:	d903      	bls.n	80090b2 <_malloc_r+0x22>
 80090aa:	230c      	movs	r3, #12
 80090ac:	6033      	str	r3, [r6, #0]
 80090ae:	2000      	movs	r0, #0
 80090b0:	bd70      	pop	{r4, r5, r6, pc}
 80090b2:	f000 f87d 	bl	80091b0 <__malloc_lock>
 80090b6:	4a21      	ldr	r2, [pc, #132]	; (800913c <_malloc_r+0xac>)
 80090b8:	6814      	ldr	r4, [r2, #0]
 80090ba:	4621      	mov	r1, r4
 80090bc:	b991      	cbnz	r1, 80090e4 <_malloc_r+0x54>
 80090be:	4c20      	ldr	r4, [pc, #128]	; (8009140 <_malloc_r+0xb0>)
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	b91b      	cbnz	r3, 80090cc <_malloc_r+0x3c>
 80090c4:	4630      	mov	r0, r6
 80090c6:	f000 f863 	bl	8009190 <_sbrk_r>
 80090ca:	6020      	str	r0, [r4, #0]
 80090cc:	4629      	mov	r1, r5
 80090ce:	4630      	mov	r0, r6
 80090d0:	f000 f85e 	bl	8009190 <_sbrk_r>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d124      	bne.n	8009122 <_malloc_r+0x92>
 80090d8:	230c      	movs	r3, #12
 80090da:	6033      	str	r3, [r6, #0]
 80090dc:	4630      	mov	r0, r6
 80090de:	f000 f868 	bl	80091b2 <__malloc_unlock>
 80090e2:	e7e4      	b.n	80090ae <_malloc_r+0x1e>
 80090e4:	680b      	ldr	r3, [r1, #0]
 80090e6:	1b5b      	subs	r3, r3, r5
 80090e8:	d418      	bmi.n	800911c <_malloc_r+0x8c>
 80090ea:	2b0b      	cmp	r3, #11
 80090ec:	d90f      	bls.n	800910e <_malloc_r+0x7e>
 80090ee:	600b      	str	r3, [r1, #0]
 80090f0:	50cd      	str	r5, [r1, r3]
 80090f2:	18cc      	adds	r4, r1, r3
 80090f4:	4630      	mov	r0, r6
 80090f6:	f000 f85c 	bl	80091b2 <__malloc_unlock>
 80090fa:	f104 000b 	add.w	r0, r4, #11
 80090fe:	1d23      	adds	r3, r4, #4
 8009100:	f020 0007 	bic.w	r0, r0, #7
 8009104:	1ac3      	subs	r3, r0, r3
 8009106:	d0d3      	beq.n	80090b0 <_malloc_r+0x20>
 8009108:	425a      	negs	r2, r3
 800910a:	50e2      	str	r2, [r4, r3]
 800910c:	e7d0      	b.n	80090b0 <_malloc_r+0x20>
 800910e:	428c      	cmp	r4, r1
 8009110:	684b      	ldr	r3, [r1, #4]
 8009112:	bf16      	itet	ne
 8009114:	6063      	strne	r3, [r4, #4]
 8009116:	6013      	streq	r3, [r2, #0]
 8009118:	460c      	movne	r4, r1
 800911a:	e7eb      	b.n	80090f4 <_malloc_r+0x64>
 800911c:	460c      	mov	r4, r1
 800911e:	6849      	ldr	r1, [r1, #4]
 8009120:	e7cc      	b.n	80090bc <_malloc_r+0x2c>
 8009122:	1cc4      	adds	r4, r0, #3
 8009124:	f024 0403 	bic.w	r4, r4, #3
 8009128:	42a0      	cmp	r0, r4
 800912a:	d005      	beq.n	8009138 <_malloc_r+0xa8>
 800912c:	1a21      	subs	r1, r4, r0
 800912e:	4630      	mov	r0, r6
 8009130:	f000 f82e 	bl	8009190 <_sbrk_r>
 8009134:	3001      	adds	r0, #1
 8009136:	d0cf      	beq.n	80090d8 <_malloc_r+0x48>
 8009138:	6025      	str	r5, [r4, #0]
 800913a:	e7db      	b.n	80090f4 <_malloc_r+0x64>
 800913c:	20000354 	.word	0x20000354
 8009140:	20000358 	.word	0x20000358

08009144 <_realloc_r>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	4607      	mov	r7, r0
 8009148:	4614      	mov	r4, r2
 800914a:	460e      	mov	r6, r1
 800914c:	b921      	cbnz	r1, 8009158 <_realloc_r+0x14>
 800914e:	4611      	mov	r1, r2
 8009150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009154:	f7ff bf9c 	b.w	8009090 <_malloc_r>
 8009158:	b922      	cbnz	r2, 8009164 <_realloc_r+0x20>
 800915a:	f7ff ff4b 	bl	8008ff4 <_free_r>
 800915e:	4625      	mov	r5, r4
 8009160:	4628      	mov	r0, r5
 8009162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009164:	f000 f826 	bl	80091b4 <_malloc_usable_size_r>
 8009168:	42a0      	cmp	r0, r4
 800916a:	d20f      	bcs.n	800918c <_realloc_r+0x48>
 800916c:	4621      	mov	r1, r4
 800916e:	4638      	mov	r0, r7
 8009170:	f7ff ff8e 	bl	8009090 <_malloc_r>
 8009174:	4605      	mov	r5, r0
 8009176:	2800      	cmp	r0, #0
 8009178:	d0f2      	beq.n	8009160 <_realloc_r+0x1c>
 800917a:	4631      	mov	r1, r6
 800917c:	4622      	mov	r2, r4
 800917e:	f7ff fc09 	bl	8008994 <memcpy>
 8009182:	4631      	mov	r1, r6
 8009184:	4638      	mov	r0, r7
 8009186:	f7ff ff35 	bl	8008ff4 <_free_r>
 800918a:	e7e9      	b.n	8009160 <_realloc_r+0x1c>
 800918c:	4635      	mov	r5, r6
 800918e:	e7e7      	b.n	8009160 <_realloc_r+0x1c>

08009190 <_sbrk_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4c06      	ldr	r4, [pc, #24]	; (80091ac <_sbrk_r+0x1c>)
 8009194:	2300      	movs	r3, #0
 8009196:	4605      	mov	r5, r0
 8009198:	4608      	mov	r0, r1
 800919a:	6023      	str	r3, [r4, #0]
 800919c:	f7f7 fc6e 	bl	8000a7c <_sbrk>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_sbrk_r+0x1a>
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_sbrk_r+0x1a>
 80091a8:	602b      	str	r3, [r5, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	20000810 	.word	0x20000810

080091b0 <__malloc_lock>:
 80091b0:	4770      	bx	lr

080091b2 <__malloc_unlock>:
 80091b2:	4770      	bx	lr

080091b4 <_malloc_usable_size_r>:
 80091b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b8:	1f18      	subs	r0, r3, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	bfbc      	itt	lt
 80091be:	580b      	ldrlt	r3, [r1, r0]
 80091c0:	18c0      	addlt	r0, r0, r3
 80091c2:	4770      	bx	lr

080091c4 <_init>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	bf00      	nop
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr

080091d0 <_fini>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	bf00      	nop
 80091d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d6:	bc08      	pop	{r3}
 80091d8:	469e      	mov	lr, r3
 80091da:	4770      	bx	lr
