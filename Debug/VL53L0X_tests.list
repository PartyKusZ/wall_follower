
VL53L0X_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8bc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800ea48  0800ea48  0001ea48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed68  0800ed68  000204a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ed68  0800ed68  000204a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ed68  0800ed68  000204a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed68  0800ed68  0001ed68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed6c  0800ed6c  0001ed6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a8  20000000  0800ed70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  200004a8  0800f218  000204a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  0800f218  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023011  00000000  00000000  000204d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b68  00000000  00000000  000434e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016e8  00000000  00000000  00047058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001540  00000000  00000000  00048740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f473  00000000  00000000  00049c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016a88  00000000  00000000  000690f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000add7c  00000000  00000000  0007fb7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d8f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c8c  00000000  00000000  0012d974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200004a8 	.word	0x200004a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ea2c 	.word	0x0800ea2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200004ac 	.word	0x200004ac
 80001c4:	0800ea2c 	.word	0x0800ea2c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <circular_buffer_init>:
#include "circular_buffer.h"

void circular_buffer_init(circular_buffer_t *buffer){
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0; i < BUFFER_SIZE; ++i) {
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e007      	b.n	8000bfe <circular_buffer_init+0x1e>
		buffer->buffer[i] = 0;
 8000bee:	7bfa      	ldrb	r2, [r7, #15]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint8_t i = 0; i < BUFFER_SIZE; ++i) {
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	2b0e      	cmp	r3, #14
 8000c02:	d9f4      	bls.n	8000bee <circular_buffer_init+0xe>
	}
	buffer->head = 0;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	779a      	strb	r2, [r3, #30]
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <circular_buffer_push>:

void circular_buffer_push(circular_buffer_t *buffer, uint16_t new_data){
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
	buffer->buffer[buffer->head] = new_data;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7f9b      	ldrb	r3, [r3, #30]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	887a      	ldrh	r2, [r7, #2]
 8000c2e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7f9b      	ldrb	r3, [r3, #30]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <circular_buffer_push+0x48>)
 8000c3a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c3e:	4413      	add	r3, r2
 8000c40:	10d9      	asrs	r1, r3, #3
 8000c42:	17d3      	asrs	r3, r2, #31
 8000c44:	1ac9      	subs	r1, r1, r3
 8000c46:	460b      	mov	r3, r1
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	1a5b      	subs	r3, r3, r1
 8000c4c:	1ad1      	subs	r1, r2, r3
 8000c4e:	b2ca      	uxtb	r2, r1
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	779a      	strb	r2, [r3, #30]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	88888889 	.word	0x88888889

08000c64 <circular_buffer_get_data>:

uint16_t* circular_buffer_get_data(circular_buffer_t *buffer){
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	return buffer->buffer;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	0000      	movs	r0, r0
 8000c7c:	0000      	movs	r0, r0
	...

08000c80 <distance_data_processing_get_distance>:
#include "distance_data_processing.h"

float distance_data_processing_get_distance(uint16_t dist_0, uint16_t dist_1){
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	80fb      	strh	r3, [r7, #6]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	80bb      	strh	r3, [r7, #4]

	return abs(((dist_0 - dist_1) * X1) - (2 * X1 * dist_0)) / sqrt(pow(dist_0 - dist_1, 2) + 4 * pow(X1,2));
 8000c90:	88fa      	ldrh	r2, [r7, #6]
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fbf0 	bl	800047c <__aeabi_i2d>
 8000c9c:	a32e      	add	r3, pc, #184	; (adr r3, 8000d58 <distance_data_processing_get_distance+0xd8>)
 8000c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca2:	f7ff fc55 	bl	8000550 <__aeabi_dmul>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	460c      	mov	r4, r1
 8000caa:	4625      	mov	r5, r4
 8000cac:	461c      	mov	r4, r3
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fbe3 	bl	800047c <__aeabi_i2d>
 8000cb6:	a32a      	add	r3, pc, #168	; (adr r3, 8000d60 <distance_data_processing_get_distance+0xe0>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f7ff fc48 	bl	8000550 <__aeabi_dmul>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	4629      	mov	r1, r5
 8000cc8:	f7ff fa8a 	bl	80001e0 <__aeabi_dsub>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	460c      	mov	r4, r1
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	4621      	mov	r1, r4
 8000cd4:	f7ff feec 	bl	8000ab0 <__aeabi_d2iz>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fbcb 	bl	800047c <__aeabi_i2d>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	88fa      	ldrh	r2, [r7, #6]
 8000cec:	88bb      	ldrh	r3, [r7, #4]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fbc3 	bl	800047c <__aeabi_i2d>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8000d50 <distance_data_processing_get_distance+0xd0>
 8000cfe:	ec43 2b10 	vmov	d0, r2, r3
 8000d02:	f00c fde1 	bl	800d8c8 <pow>
 8000d06:	ec51 0b10 	vmov	r0, r1, d0
 8000d0a:	a317      	add	r3, pc, #92	; (adr r3, 8000d68 <distance_data_processing_get_distance+0xe8>)
 8000d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d10:	f7ff fa68 	bl	80001e4 <__adddf3>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	ec43 2b17 	vmov	d7, r2, r3
 8000d1c:	eeb0 0a47 	vmov.f32	s0, s14
 8000d20:	eef0 0a67 	vmov.f32	s1, s15
 8000d24:	f00c ff40 	bl	800dba8 <sqrt>
 8000d28:	ec53 2b10 	vmov	r2, r3, d0
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	4629      	mov	r1, r5
 8000d30:	f7ff fd38 	bl	80007a4 <__aeabi_ddiv>
 8000d34:	4603      	mov	r3, r0
 8000d36:	460c      	mov	r4, r1
 8000d38:	4618      	mov	r0, r3
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	f7ff ff00 	bl	8000b40 <__aeabi_d2f>
 8000d40:	4603      	mov	r3, r0
 8000d42:	ee07 3a90 	vmov	s15, r3


}
 8000d46:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d50:	00000000 	.word	0x00000000
 8000d54:	40000000 	.word	0x40000000
 8000d58:	66666666 	.word	0x66666666
 8000d5c:	40296666 	.word	0x40296666
 8000d60:	66666666 	.word	0x66666666
 8000d64:	40396666 	.word	0x40396666
 8000d68:	ae147ae1 	.word	0xae147ae1
 8000d6c:	40842947 	.word	0x40842947

08000d70 <distance_sensors_init>:

const uint8_t addresses[3] = {ADDR_SENSOR_0, ADDR_SENSOR_1, ADDR_SENSOR_2};
GPIO_TypeDef *port[3] = {TOF_XSHUT_0_GPIO_Port, TOF_XSHUT_1_GPIO_Port, TOF_XSHUT_2_GPIO_Port};
const uint16_t pin[3] = {TOF_XSHUT_0_Pin, TOF_XSHUT_1_Pin, TOF_XSHUT_2_Pin} ;

void distance_sensors_init(distance_sensors_t *distance_sensors, I2C_HandleTypeDef *hi2c){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i < 3; ++i){
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e018      	b.n	8000db2 <distance_sensors_init+0x42>
		distance_sensors->sensors[i] = &distance_sensors->vl53l0x[i];
 8000d80:	7bfa      	ldrb	r2, [r7, #15]
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000d88:	fb01 f202 	mul.w	r2, r1, r2
 8000d8c:	3250      	adds	r2, #80	; 0x50
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	440a      	add	r2, r1
 8000d92:	3204      	adds	r2, #4
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	605a      	str	r2, [r3, #4]
		distance_sensors->data_ready[i] = 0;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(uint8_t i = 0; i < 3; ++i){
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	3301      	adds	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d9e3      	bls.n	8000d80 <distance_sensors_init+0x10>

	}

	for(uint8_t i = 0; i < 3; ++i){
 8000db8:	2300      	movs	r3, #0
 8000dba:	73bb      	strb	r3, [r7, #14]
 8000dbc:	e016      	b.n	8000dec <distance_sensors_init+0x7c>
		distance_sensors->sensors[i]->I2cHandle = hi2c;
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		distance_sensors->sensors[i]->I2cDevAddr = 0x52;
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2252      	movs	r2, #82	; 0x52
 8000de2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	for(uint8_t i = 0; i < 3; ++i){
 8000de6:	7bbb      	ldrb	r3, [r7, #14]
 8000de8:	3301      	adds	r3, #1
 8000dea:	73bb      	strb	r3, [r7, #14]
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d9e5      	bls.n	8000dbe <distance_sensors_init+0x4e>
	}

	for(uint8_t i = 0; i < 3; ++i){
 8000df2:	2300      	movs	r3, #0
 8000df4:	737b      	strb	r3, [r7, #13]
 8000df6:	e011      	b.n	8000e1c <distance_sensors_init+0xac>
		HAL_GPIO_WritePin(port[i], pin[i], GPIO_PIN_RESET);
 8000df8:	7b7b      	ldrb	r3, [r7, #13]
 8000dfa:	4a87      	ldr	r2, [pc, #540]	; (8001018 <distance_sensors_init+0x2a8>)
 8000dfc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e00:	7b7b      	ldrb	r3, [r7, #13]
 8000e02:	4a86      	ldr	r2, [pc, #536]	; (800101c <distance_sensors_init+0x2ac>)
 8000e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f001 fe58 	bl	8002ac0 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8000e10:	2014      	movs	r0, #20
 8000e12:	f001 fb09 	bl	8002428 <HAL_Delay>
	for(uint8_t i = 0; i < 3; ++i){
 8000e16:	7b7b      	ldrb	r3, [r7, #13]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	737b      	strb	r3, [r7, #13]
 8000e1c:	7b7b      	ldrb	r3, [r7, #13]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d9ea      	bls.n	8000df8 <distance_sensors_init+0x88>
	}

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000e22:	2006      	movs	r0, #6
 8000e24:	f001 fc49 	bl	80026ba <HAL_NVIC_DisableIRQ>
 	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000e28:	2028      	movs	r0, #40	; 0x28
 8000e2a:	f001 fc46 	bl	80026ba <HAL_NVIC_DisableIRQ>
 	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000e2e:	2007      	movs	r0, #7
 8000e30:	f001 fc43 	bl	80026ba <HAL_NVIC_DisableIRQ>

 	for(uint8_t i = 0; i < 3; ++i){
 8000e34:	2300      	movs	r3, #0
 8000e36:	733b      	strb	r3, [r7, #12]
 8000e38:	e0dd      	b.n	8000ff6 <distance_sensors_init+0x286>
 		HAL_GPIO_WritePin(port[i], pin[i], GPIO_PIN_SET);
 8000e3a:	7b3b      	ldrb	r3, [r7, #12]
 8000e3c:	4a76      	ldr	r2, [pc, #472]	; (8001018 <distance_sensors_init+0x2a8>)
 8000e3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e42:	7b3b      	ldrb	r3, [r7, #12]
 8000e44:	4a75      	ldr	r2, [pc, #468]	; (800101c <distance_sensors_init+0x2ac>)
 8000e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f001 fe37 	bl	8002ac0 <HAL_GPIO_WritePin>
 		HAL_Delay(20);
 8000e52:	2014      	movs	r0, #20
 8000e54:	f001 fae8 	bl	8002428 <HAL_Delay>
 		VL53L0X_WaitDeviceBooted(distance_sensors->sensors[i]);
 8000e58:	7b3b      	ldrb	r3, [r7, #12]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f006 f8dc 	bl	8007024 <VL53L0X_WaitDeviceBooted>
 		VL53L0X_DataInit(distance_sensors->sensors[i]);
 8000e6c:	7b3b      	ldrb	r3, [r7, #12]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 fdec 	bl	8006a58 <VL53L0X_DataInit>
 		VL53L0X_SetDeviceAddress(distance_sensors->sensors[i],addresses[i]);
 8000e80:	7b3b      	ldrb	r3, [r7, #12]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	6858      	ldr	r0, [r3, #4]
 8000e8e:	7b3b      	ldrb	r3, [r7, #12]
 8000e90:	4a63      	ldr	r2, [pc, #396]	; (8001020 <distance_sensors_init+0x2b0>)
 8000e92:	5cd3      	ldrb	r3, [r2, r3]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f005 fdc7 	bl	8006a28 <VL53L0X_SetDeviceAddress>
 		distance_sensors->sensors[i]->I2cDevAddr = addresses[i];
 8000e9a:	7b3a      	ldrb	r2, [r7, #12]
 8000e9c:	7b3b      	ldrb	r3, [r7, #12]
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	495d      	ldr	r1, [pc, #372]	; (8001020 <distance_sensors_init+0x2b0>)
 8000eac:	5c8a      	ldrb	r2, [r1, r2]
 8000eae:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 		VL53L0X_WaitDeviceBooted(distance_sensors->sensors[i]);
 8000eb2:	7b3b      	ldrb	r3, [r7, #12]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f006 f8af 	bl	8007024 <VL53L0X_WaitDeviceBooted>
 		VL53L0X_StaticInit(distance_sensors->sensors[i]);
 8000ec6:	7b3b      	ldrb	r3, [r7, #12]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f005 ff23 	bl	8006d20 <VL53L0X_StaticInit>
		VL53L0X_PerformRefCalibration(distance_sensors->sensors[i], &distance_sensors->VhvSettings, &distance_sensors->PhaseCal);
 8000eda:	7b3b      	ldrb	r3, [r7, #12]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	6858      	ldr	r0, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f203 5119 	addw	r1, r3, #1305	; 0x519
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f203 531a 	addw	r3, r3, #1306	; 0x51a
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f006 fdd1 	bl	8007a9c <VL53L0X_PerformRefCalibration>
		VL53L0X_PerformRefSpadManagement(distance_sensors->sensors[i], &distance_sensors->refSpadCount, &distance_sensors->isApertureSpads);
 8000efa:	7b3b      	ldrb	r3, [r7, #12]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	6858      	ldr	r0, [r3, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f203 5114 	addw	r1, r3, #1300	; 0x514
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8000f14:	461a      	mov	r2, r3
 8000f16:	f007 fa4f 	bl	80083b8 <VL53L0X_PerformRefSpadManagement>
		VL53L0X_SetDeviceMode(distance_sensors->sensors[i], VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8000f1a:	7b3b      	ldrb	r3, [r7, #12]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f006 f918 	bl	8007160 <VL53L0X_SetDeviceMode>

		VL53L0X_SetLimitCheckEnable(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000f30:	7b3b      	ldrb	r3, [r7, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f006 fba4 	bl	8007690 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckEnable(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000f48:	7b3b      	ldrb	r3, [r7, #12]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f006 fb98 	bl	8007690 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckValue(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000f60:	7b3b      	ldrb	r3, [r7, #12]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f641 1299 	movw	r2, #6553	; 0x1999
 8000f72:	2101      	movs	r1, #1
 8000f74:	4618      	mov	r0, r3
 8000f76:	f006 fc3b 	bl	80077f0 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetLimitCheckValue(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000f7a:	7b3b      	ldrb	r3, [r7, #12]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f006 fc2e 	bl	80077f0 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(distance_sensors->sensors[i], 33000);
 8000f94:	7b3b      	ldrb	r3, [r7, #12]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 f954 	bl	8007254 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		VL53L0X_SetVcselPulsePeriod(distance_sensors->sensors[i], VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000fac:	7b3b      	ldrb	r3, [r7, #12]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2212      	movs	r2, #18
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 f96e 	bl	80072a0 <VL53L0X_SetVcselPulsePeriod>
		VL53L0X_SetVcselPulsePeriod(distance_sensors->sensors[i], VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000fc4:	7b3b      	ldrb	r3, [r7, #12]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	220e      	movs	r2, #14
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f006 f962 	bl	80072a0 <VL53L0X_SetVcselPulsePeriod>

		VL53L0X_StartMeasurement(distance_sensors->sensors[i]);
 8000fdc:	7b3b      	ldrb	r3, [r7, #12]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 fdd2 	bl	8007b94 <VL53L0X_StartMeasurement>
 	for(uint8_t i = 0; i < 3; ++i){
 8000ff0:	7b3b      	ldrb	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	7b3b      	ldrb	r3, [r7, #12]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	f67f af1e 	bls.w	8000e3a <distance_sensors_init+0xca>
 	}



	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ffe:	2006      	movs	r0, #6
 8001000:	f001 fb4d 	bl	800269e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001004:	2028      	movs	r0, #40	; 0x28
 8001006:	f001 fb4a 	bl	800269e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800100a:	2007      	movs	r0, #7
 800100c:	f001 fb47 	bl	800269e <HAL_NVIC_EnableIRQ>

}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	0800ea70 	.word	0x0800ea70
 8001020:	0800ea6c 	.word	0x0800ea6c

08001024 <distance_sensors_is_data_ready>:

uint8_t distance_sensors_is_data_ready(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
	return distance_sensors->data_ready[num_of_sensor];
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 800103a:	b2db      	uxtb	r3, r3
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <distance_sensors_cleer_interrupt>:

void distance_sensors_cleer_interrupt(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
	distance_sensors->data_ready[num_of_sensor] = 0;
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <distance_sensors_set_interrupt>:

void distance_sensors_set_interrupt(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
	distance_sensors->data_ready[num_of_sensor] = 1;
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <distance_sensors_get_distance>:

uint16_t distance_sensors_get_distance(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_GetRangingMeasurementData(distance_sensors->sensors[num_of_sensor], &distance_sensors->ranging_data[num_of_sensor]);
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	6858      	ldr	r0, [r3, #4]
 80010aa:	78fa      	ldrb	r2, [r7, #3]
 80010ac:	4613      	mov	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f006 fe6b 	bl	8007d94 <VL53L0X_GetRangingMeasurementData>
	VL53L0X_ClearInterruptMask(distance_sensors->sensors[num_of_sensor], VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2104      	movs	r1, #4
 80010ce:	4618      	mov	r0, r3
 80010d0:	f007 f910 	bl	80082f4 <VL53L0X_ClearInterruptMask>
	return distance_sensors->ranging_data[num_of_sensor].RangeMilliMeter;
 80010d4:	78fa      	ldrb	r2, [r7, #3]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	1a9b      	subs	r3, r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	3308      	adds	r3, #8
 80010e4:	881b      	ldrh	r3, [r3, #0]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <filter_moving_averange>:
#include "filter_moving_averange.h"
uint16_t filter_moving_averange(uint16_t *data, uint8_t size){
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	70fb      	strb	r3, [r7, #3]
	uint32_t sum = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < size; ++i){
 80010fe:	2300      	movs	r3, #0
 8001100:	72fb      	strb	r3, [r7, #11]
 8001102:	e00b      	b.n	800111c <filter_moving_averange+0x2e>
		sum += data[i];
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < size; ++i){
 8001116:	7afb      	ldrb	r3, [r7, #11]
 8001118:	3301      	adds	r3, #1
 800111a:	72fb      	strb	r3, [r7, #11]
 800111c:	7afa      	ldrb	r2, [r7, #11]
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3ef      	bcc.n	8001104 <filter_moving_averange+0x16>
	}

	return sum / size;
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	fbb2 f3f3 	udiv	r3, r2, r3
 800112c:	b29b      	uxth	r3, r3

}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001142:	f001 f90b 	bl	800235c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001146:	f000 f8ef 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114a:	f000 faa7 	bl	800169c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800114e:	f000 fa71 	bl	8001634 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001152:	f000 f941 	bl	80013d8 <MX_I2C1_Init>
  MX_TIM16_Init();
 8001156:	f000 f97d 	bl	8001454 <MX_TIM16_Init>
  MX_TIM17_Init();
 800115a:	f000 f9f3 	bl	8001544 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   distance_sensors_init(&distance_sensors, &hi2c1);
 800115e:	4966      	ldr	r1, [pc, #408]	; (80012f8 <main+0x1bc>)
 8001160:	4866      	ldr	r0, [pc, #408]	; (80012fc <main+0x1c0>)
 8001162:	f7ff fe05 	bl	8000d70 <distance_sensors_init>
   circular_buffer_init(&buffer[0]);
 8001166:	4866      	ldr	r0, [pc, #408]	; (8001300 <main+0x1c4>)
 8001168:	f7ff fd3a 	bl	8000be0 <circular_buffer_init>
   circular_buffer_init(&buffer[1]);
 800116c:	4865      	ldr	r0, [pc, #404]	; (8001304 <main+0x1c8>)
 800116e:	f7ff fd37 	bl	8000be0 <circular_buffer_init>
   circular_buffer_init(&buffer[2]);
 8001172:	4865      	ldr	r0, [pc, #404]	; (8001308 <main+0x1cc>)
 8001174:	f7ff fd34 	bl	8000be0 <circular_buffer_init>
   pid_init(&pid);
 8001178:	4864      	ldr	r0, [pc, #400]	; (800130c <main+0x1d0>)
 800117a:	f000 fc3d 	bl	80019f8 <pid_init>
   remote_controller_init(&remote_controller, &huart2);
 800117e:	4964      	ldr	r1, [pc, #400]	; (8001310 <main+0x1d4>)
 8001180:	4864      	ldr	r0, [pc, #400]	; (8001314 <main+0x1d8>)
 8001182:	f000 fcfc 	bl	8001b7e <remote_controller_init>
   motors_init(&htim16, &htim17);
 8001186:	4964      	ldr	r1, [pc, #400]	; (8001318 <main+0x1dc>)
 8001188:	4864      	ldr	r0, [pc, #400]	; (800131c <main+0x1e0>)
 800118a:	f000 fb79 	bl	8001880 <motors_init>
   robot_controller_init();
 800118e:	f000 fe91 	bl	8001eb4 <robot_controller_init>

   uint16_t distances[3];
   int16_t pid_out = 0 ;
 8001192:	2300      	movs	r3, #0
 8001194:	80fb      	strh	r3, [r7, #6]
   //motors_set_speed(LEFT_MOTOR, 50);
//   motors_set_direction(RIGHT_MOTOR, GO_FORWARD);
//   motors_set_direction(LEFT_MOTOR, GO_FORWARD);
   //x = sprintf((char*)tab, "L 1: %i\n",distance_sensors_get_distance(&distance_sensors, 0));
   		//HAL_UART_Transmit(&huart2, tab, x, 100);
   HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 8001196:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <main+0x1d8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2201      	movs	r2, #1
 800119c:	4960      	ldr	r1, [pc, #384]	; (8001320 <main+0x1e4>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 fb44 	bl	800582c <HAL_UART_Receive_IT>
//   uint8_t tab[20];
//   uint16_t x;

  while (1){

	  if(distance_sensors_is_data_ready(&distance_sensors, 0)){
 80011a4:	2100      	movs	r1, #0
 80011a6:	4855      	ldr	r0, [pc, #340]	; (80012fc <main+0x1c0>)
 80011a8:	f7ff ff3c 	bl	8001024 <distance_sensors_is_data_ready>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00c      	beq.n	80011cc <main+0x90>
		  circular_buffer_push(&buffer[0], distance_sensors_get_distance(&distance_sensors, 0));
 80011b2:	2100      	movs	r1, #0
 80011b4:	4851      	ldr	r0, [pc, #324]	; (80012fc <main+0x1c0>)
 80011b6:	f7ff ff6b 	bl	8001090 <distance_sensors_get_distance>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4619      	mov	r1, r3
 80011be:	4850      	ldr	r0, [pc, #320]	; (8001300 <main+0x1c4>)
 80011c0:	f7ff fd2a 	bl	8000c18 <circular_buffer_push>
		  distance_sensors_cleer_interrupt(&distance_sensors, 0);
 80011c4:	2100      	movs	r1, #0
 80011c6:	484d      	ldr	r0, [pc, #308]	; (80012fc <main+0x1c0>)
 80011c8:	f7ff ff3e 	bl	8001048 <distance_sensors_cleer_interrupt>
	  }

	  if(distance_sensors_is_data_ready(&distance_sensors, 1)){
 80011cc:	2101      	movs	r1, #1
 80011ce:	484b      	ldr	r0, [pc, #300]	; (80012fc <main+0x1c0>)
 80011d0:	f7ff ff28 	bl	8001024 <distance_sensors_is_data_ready>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00c      	beq.n	80011f4 <main+0xb8>
		  circular_buffer_push(&buffer[1], distance_sensors_get_distance(&distance_sensors, 1));
 80011da:	2101      	movs	r1, #1
 80011dc:	4847      	ldr	r0, [pc, #284]	; (80012fc <main+0x1c0>)
 80011de:	f7ff ff57 	bl	8001090 <distance_sensors_get_distance>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4619      	mov	r1, r3
 80011e6:	4847      	ldr	r0, [pc, #284]	; (8001304 <main+0x1c8>)
 80011e8:	f7ff fd16 	bl	8000c18 <circular_buffer_push>
	 	  distance_sensors_cleer_interrupt(&distance_sensors, 1);
 80011ec:	2101      	movs	r1, #1
 80011ee:	4843      	ldr	r0, [pc, #268]	; (80012fc <main+0x1c0>)
 80011f0:	f7ff ff2a 	bl	8001048 <distance_sensors_cleer_interrupt>

	  }

	  if(distance_sensors_is_data_ready(&distance_sensors, 2)){
 80011f4:	2102      	movs	r1, #2
 80011f6:	4841      	ldr	r0, [pc, #260]	; (80012fc <main+0x1c0>)
 80011f8:	f7ff ff14 	bl	8001024 <distance_sensors_is_data_ready>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00c      	beq.n	800121c <main+0xe0>
		  circular_buffer_push(&buffer[2], distance_sensors_get_distance(&distance_sensors, 2));
 8001202:	2102      	movs	r1, #2
 8001204:	483d      	ldr	r0, [pc, #244]	; (80012fc <main+0x1c0>)
 8001206:	f7ff ff43 	bl	8001090 <distance_sensors_get_distance>
 800120a:	4603      	mov	r3, r0
 800120c:	4619      	mov	r1, r3
 800120e:	483e      	ldr	r0, [pc, #248]	; (8001308 <main+0x1cc>)
 8001210:	f7ff fd02 	bl	8000c18 <circular_buffer_push>
		  distance_sensors_cleer_interrupt(&distance_sensors, 2);
 8001214:	2102      	movs	r1, #2
 8001216:	4839      	ldr	r0, [pc, #228]	; (80012fc <main+0x1c0>)
 8001218:	f7ff ff16 	bl	8001048 <distance_sensors_cleer_interrupt>
	  }
	  if(remote_controller_is_data_ready(&remote_controller)){
 800121c:	483d      	ldr	r0, [pc, #244]	; (8001314 <main+0x1d8>)
 800121e:	f000 fcf6 	bl	8001c0e <remote_controller_is_data_ready>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <main+0x106>
		  remote_controller_parser(&remote_controller);
 8001228:	483a      	ldr	r0, [pc, #232]	; (8001314 <main+0x1d8>)
 800122a:	f000 fd6f 	bl	8001d0c <remote_controller_parser>
		  remote_controller_celar_interrupt(&remote_controller);
 800122e:	4839      	ldr	r0, [pc, #228]	; (8001314 <main+0x1d8>)
 8001230:	f000 fcfa 	bl	8001c28 <remote_controller_celar_interrupt>
		  HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 8001234:	4b37      	ldr	r3, [pc, #220]	; (8001314 <main+0x1d8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2201      	movs	r2, #1
 800123a:	4939      	ldr	r1, [pc, #228]	; (8001320 <main+0x1e4>)
 800123c:	4618      	mov	r0, r3
 800123e:	f004 faf5 	bl	800582c <HAL_UART_Receive_IT>
	  }
	  distances[0] = filter_moving_averange(circular_buffer_get_data(&buffer[0]), BUFFER_SIZE);
 8001242:	482f      	ldr	r0, [pc, #188]	; (8001300 <main+0x1c4>)
 8001244:	f7ff fd0e 	bl	8000c64 <circular_buffer_get_data>
 8001248:	4603      	mov	r3, r0
 800124a:	210f      	movs	r1, #15
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff4e 	bl	80010ee <filter_moving_averange>
 8001252:	4603      	mov	r3, r0
 8001254:	803b      	strh	r3, [r7, #0]
	  distances[1] = filter_moving_averange(circular_buffer_get_data(&buffer[1]), BUFFER_SIZE);
 8001256:	482b      	ldr	r0, [pc, #172]	; (8001304 <main+0x1c8>)
 8001258:	f7ff fd04 	bl	8000c64 <circular_buffer_get_data>
 800125c:	4603      	mov	r3, r0
 800125e:	210f      	movs	r1, #15
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff44 	bl	80010ee <filter_moving_averange>
 8001266:	4603      	mov	r3, r0
 8001268:	807b      	strh	r3, [r7, #2]
	  distances[2] = filter_moving_averange(circular_buffer_get_data(&buffer[2]), BUFFER_SIZE);
 800126a:	4827      	ldr	r0, [pc, #156]	; (8001308 <main+0x1cc>)
 800126c:	f7ff fcfa 	bl	8000c64 <circular_buffer_get_data>
 8001270:	4603      	mov	r3, r0
 8001272:	210f      	movs	r1, #15
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff3a 	bl	80010ee <filter_moving_averange>
 800127a:	4603      	mov	r3, r0
 800127c:	80bb      	strh	r3, [r7, #4]
	  pid_set_params(&pid, remote_controller.kp, remote_controller.ki, remote_controller.kd, 100);
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <main+0x1d8>)
 8001280:	edd3 7a04 	vldr	s15, [r3, #16]
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <main+0x1d8>)
 8001286:	ed93 7a05 	vldr	s14, [r3, #20]
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <main+0x1d8>)
 800128c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001290:	eddf 1a24 	vldr	s3, [pc, #144]	; 8001324 <main+0x1e8>
 8001294:	eeb0 1a66 	vmov.f32	s2, s13
 8001298:	eef0 0a47 	vmov.f32	s1, s14
 800129c:	eeb0 0a67 	vmov.f32	s0, s15
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <main+0x1d0>)
 80012a2:	f000 fbcb 	bl	8001a3c <pid_set_params>
	  pid_out = pid_calculate(&pid, 200, distance_data_processing_get_distance(distances[1], distances[0]));
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	883a      	ldrh	r2, [r7, #0]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fce7 	bl	8000c80 <distance_data_processing_get_distance>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
 80012b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ba:	ee17 3a90 	vmov	r3, s15
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	21c8      	movs	r1, #200	; 0xc8
 80012c4:	4811      	ldr	r0, [pc, #68]	; (800130c <main+0x1d0>)
 80012c6:	f000 fbd7 	bl	8001a78 <pid_calculate>
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
	  if(remote_controller.robot_state){
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <main+0x1d8>)
 80012d0:	7fdb      	ldrb	r3, [r3, #31]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <main+0x1aa>
		  robot_controller(pid_out, distances[2]);
 80012d6:	88ba      	ldrh	r2, [r7, #4]
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fdfc 	bl	8001edc <robot_controller>
 80012e4:	e75e      	b.n	80011a4 <main+0x68>
	  }else{
		  motors_set_speed(LEFT_MOTOR, 0);
 80012e6:	2100      	movs	r1, #0
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 fafd 	bl	80018e8 <motors_set_speed>
		  motors_set_speed(RIGHT_MOTOR, 0);
 80012ee:	2100      	movs	r1, #0
 80012f0:	2001      	movs	r0, #1
 80012f2:	f000 faf9 	bl	80018e8 <motors_set_speed>
	  if(distance_sensors_is_data_ready(&distance_sensors, 0)){
 80012f6:	e755      	b.n	80011a4 <main+0x68>
 80012f8:	200004e8 	.word	0x200004e8
 80012fc:	20000604 	.word	0x20000604
 8001300:	200005a4 	.word	0x200005a4
 8001304:	200005c4 	.word	0x200005c4
 8001308:	200005e4 	.word	0x200005e4
 800130c:	200004d0 	.word	0x200004d0
 8001310:	20000b20 	.word	0x20000b20
 8001314:	20000580 	.word	0x20000580
 8001318:	20000534 	.word	0x20000534
 800131c:	20000ba4 	.word	0x20000ba4
 8001320:	20000584 	.word	0x20000584
 8001324:	42c80000 	.word	0x42c80000

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b096      	sub	sp, #88	; 0x58
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001332:	2228      	movs	r2, #40	; 0x28
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f00a fbd9 	bl	800baee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135c:	2302      	movs	r3, #2
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001364:	2310      	movs	r3, #16
 8001366:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001368:	2302      	movs	r3, #2
 800136a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800136c:	2300      	movs	r3, #0
 800136e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001370:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001374:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800137a:	4618      	mov	r0, r3
 800137c:	f002 f8d2 	bl	8003524 <HAL_RCC_OscConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001386:	f000 fa73 	bl	8001870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138a:	230f      	movs	r3, #15
 800138c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138e:	2302      	movs	r3, #2
 8001390:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	2102      	movs	r1, #2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 ffc4 	bl	8004334 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013b2:	f000 fa5d 	bl	8001870 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013b6:	2320      	movs	r3, #32
 80013b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 f9ed 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80013cc:	f000 fa50 	bl	8001870 <Error_Handler>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3758      	adds	r7, #88	; 0x58
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_I2C1_Init+0x74>)
 80013de:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <MX_I2C1_Init+0x78>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_I2C1_Init+0x74>)
 80013e4:	f240 220b 	movw	r2, #523	; 0x20b
 80013e8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_I2C1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_I2C1_Init+0x74>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_I2C1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_I2C1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_I2C1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_I2C1_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_I2C1_Init+0x74>)
 8001416:	f001 fb83 	bl	8002b20 <HAL_I2C_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001420:	f000 fa26 	bl	8001870 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001424:	2100      	movs	r1, #0
 8001426:	4809      	ldr	r0, [pc, #36]	; (800144c <MX_I2C1_Init+0x74>)
 8001428:	f001 ffe4 	bl	80033f4 <HAL_I2CEx_ConfigAnalogFilter>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001432:	f000 fa1d 	bl	8001870 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001436:	2100      	movs	r1, #0
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_I2C1_Init+0x74>)
 800143a:	f002 f826 	bl	800348a <HAL_I2CEx_ConfigDigitalFilter>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001444:	f000 fa14 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200004e8 	.word	0x200004e8
 8001450:	40005400 	.word	0x40005400

08001454 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b092      	sub	sp, #72	; 0x48
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800145a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800146e:	463b      	mov	r3, r7
 8001470:	222c      	movs	r2, #44	; 0x2c
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f00a fb3a 	bl	800baee <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800147a:	4b30      	ldr	r3, [pc, #192]	; (800153c <MX_TIM16_Init+0xe8>)
 800147c:	4a30      	ldr	r2, [pc, #192]	; (8001540 <MX_TIM16_Init+0xec>)
 800147e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9;
 8001480:	4b2e      	ldr	r3, [pc, #184]	; (800153c <MX_TIM16_Init+0xe8>)
 8001482:	2209      	movs	r2, #9
 8001484:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <MX_TIM16_Init+0xe8>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <MX_TIM16_Init+0xe8>)
 800148e:	2263      	movs	r2, #99	; 0x63
 8001490:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <MX_TIM16_Init+0xe8>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <MX_TIM16_Init+0xe8>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <MX_TIM16_Init+0xe8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014a4:	4825      	ldr	r0, [pc, #148]	; (800153c <MX_TIM16_Init+0xe8>)
 80014a6:	f003 faa1 	bl	80049ec <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80014b0:	f000 f9de 	bl	8001870 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80014b4:	4821      	ldr	r0, [pc, #132]	; (800153c <MX_TIM16_Init+0xe8>)
 80014b6:	f003 fb4d 	bl	8004b54 <HAL_TIM_PWM_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80014c0:	f000 f9d6 	bl	8001870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c4:	2360      	movs	r3, #96	; 0x60
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014cc:	2300      	movs	r3, #0
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	4814      	ldr	r0, [pc, #80]	; (800153c <MX_TIM16_Init+0xe8>)
 80014ea:	f003 fc81 	bl	8004df0 <HAL_TIM_PWM_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 80014f4:	f000 f9bc 	bl	8001870 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800150c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001510:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800151a:	463b      	mov	r3, r7
 800151c:	4619      	mov	r1, r3
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <MX_TIM16_Init+0xe8>)
 8001520:	f004 f8be 	bl	80056a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800152a:	f000 f9a1 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <MX_TIM16_Init+0xe8>)
 8001530:	f000 fdae 	bl	8002090 <HAL_TIM_MspPostInit>

}
 8001534:	bf00      	nop
 8001536:	3748      	adds	r7, #72	; 0x48
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000ba4 	.word	0x20000ba4
 8001540:	40014400 	.word	0x40014400

08001544 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b092      	sub	sp, #72	; 0x48
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800154a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
 800155a:	615a      	str	r2, [r3, #20]
 800155c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800155e:	463b      	mov	r3, r7
 8001560:	222c      	movs	r2, #44	; 0x2c
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f00a fac2 	bl	800baee <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <MX_TIM17_Init+0xe8>)
 800156c:	4a30      	ldr	r2, [pc, #192]	; (8001630 <MX_TIM17_Init+0xec>)
 800156e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 9;
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <MX_TIM17_Init+0xe8>)
 8001572:	2209      	movs	r2, #9
 8001574:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <MX_TIM17_Init+0xe8>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <MX_TIM17_Init+0xe8>)
 800157e:	2263      	movs	r2, #99	; 0x63
 8001580:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <MX_TIM17_Init+0xe8>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <MX_TIM17_Init+0xe8>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <MX_TIM17_Init+0xe8>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001594:	4825      	ldr	r0, [pc, #148]	; (800162c <MX_TIM17_Init+0xe8>)
 8001596:	f003 fa29 	bl	80049ec <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80015a0:	f000 f966 	bl	8001870 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80015a4:	4821      	ldr	r0, [pc, #132]	; (800162c <MX_TIM17_Init+0xe8>)
 80015a6:	f003 fad5 	bl	8004b54 <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80015b0:	f000 f95e 	bl	8001870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4814      	ldr	r0, [pc, #80]	; (800162c <MX_TIM17_Init+0xe8>)
 80015da:	f003 fc09 	bl	8004df0 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 80015e4:	f000 f944 	bl	8001870 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800160a:	463b      	mov	r3, r7
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM17_Init+0xe8>)
 8001610:	f004 f846 	bl	80056a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 800161a:	f000 f929 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM17_Init+0xe8>)
 8001620:	f000 fd36 	bl	8002090 <HAL_TIM_MspPostInit>

}
 8001624:	bf00      	nop
 8001626:	3748      	adds	r7, #72	; 0x48
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000534 	.word	0x20000534
 8001630:	40014800 	.word	0x40014800

08001634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_USART2_UART_Init+0x60>)
 800163a:	4a17      	ldr	r2, [pc, #92]	; (8001698 <MX_USART2_UART_Init+0x64>)
 800163c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <MX_USART2_UART_Init+0x60>)
 8001640:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MX_USART2_UART_Init+0x60>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_USART2_UART_Init+0x60>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_USART2_UART_Init+0x60>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_USART2_UART_Init+0x60>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <MX_USART2_UART_Init+0x60>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_USART2_UART_Init+0x60>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_USART2_UART_Init+0x60>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_USART2_UART_Init+0x60>)
 8001672:	2208      	movs	r2, #8
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_USART2_UART_Init+0x60>)
 8001678:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800167c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_USART2_UART_Init+0x60>)
 8001680:	f004 f886 	bl	8005790 <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800168a:	f000 f8f1 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000b20 	.word	0x20000b20
 8001698:	40004400 	.word	0x40004400

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <MX_GPIO_Init+0x124>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4a42      	ldr	r2, [pc, #264]	; (80017c0 <MX_GPIO_Init+0x124>)
 80016b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016bc:	6153      	str	r3, [r2, #20]
 80016be:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <MX_GPIO_Init+0x124>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <MX_GPIO_Init+0x124>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a3c      	ldr	r2, [pc, #240]	; (80017c0 <MX_GPIO_Init+0x124>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	6153      	str	r3, [r2, #20]
 80016d6:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <MX_GPIO_Init+0x124>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <MX_GPIO_Init+0x124>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a36      	ldr	r2, [pc, #216]	; (80017c0 <MX_GPIO_Init+0x124>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <MX_GPIO_Init+0x124>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SILNIK_P_2_Pin|TOF_XSHUT_2_Pin|SILNIK_L_2_Pin|SILNIK_L_1_Pin
 80016fa:	2200      	movs	r2, #0
 80016fc:	f241 7190 	movw	r1, #6032	; 0x1790
 8001700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001704:	f001 f9dc 	bl	8002ac0 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_1_Pin|TOF_XSHUT_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SILNIK_P_1_GPIO_Port, SILNIK_P_1_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2108      	movs	r1, #8
 800170c:	482d      	ldr	r0, [pc, #180]	; (80017c4 <MX_GPIO_Init+0x128>)
 800170e:	f001 f9d7 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SILNIK_P_2_Pin TOF_XSHUT_2_Pin SILNIK_L_2_Pin SILNIK_L_1_Pin
                           TOF_XSHUT_1_Pin TOF_XSHUT_0_Pin */
  GPIO_InitStruct.Pin = SILNIK_P_2_Pin|TOF_XSHUT_2_Pin|SILNIK_L_2_Pin|SILNIK_L_1_Pin
 8001712:	f241 7390 	movw	r3, #6032	; 0x1790
 8001716:	60fb      	str	r3, [r7, #12]
                          |TOF_XSHUT_1_Pin|TOF_XSHUT_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4619      	mov	r1, r3
 800172a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172e:	f001 f855 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_INT_0_Pin TOF_INT_2_Pin */
  GPIO_InitStruct.Pin = TOF_INT_0_Pin|TOF_INT_2_Pin;
 8001732:	2303      	movs	r3, #3
 8001734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001736:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800173a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4619      	mov	r1, r3
 8001746:	481f      	ldr	r0, [pc, #124]	; (80017c4 <MX_GPIO_Init+0x128>)
 8001748:	f001 f848 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_1_Pin */
  GPIO_InitStruct.Pin = TOF_INT_1_Pin;
 800174c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001752:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_1_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4619      	mov	r1, r3
 8001762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001766:	f001 f839 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SILNIK_P_1_Pin */
  GPIO_InitStruct.Pin = SILNIK_P_1_Pin;
 800176a:	2308      	movs	r3, #8
 800176c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SILNIK_P_1_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	4619      	mov	r1, r3
 8001780:	4810      	ldr	r0, [pc, #64]	; (80017c4 <MX_GPIO_Init+0x128>)
 8001782:	f001 f82b 	bl	80027dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2006      	movs	r0, #6
 800178c:	f000 ff6b 	bl	8002666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001790:	2006      	movs	r0, #6
 8001792:	f000 ff84 	bl	800269e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2007      	movs	r0, #7
 800179c:	f000 ff63 	bl	8002666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017a0:	2007      	movs	r0, #7
 80017a2:	f000 ff7c 	bl	800269e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2028      	movs	r0, #40	; 0x28
 80017ac:	f000 ff5b 	bl	8002666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017b0:	2028      	movs	r0, #40	; 0x28
 80017b2:	f000 ff74 	bl	800269e <HAL_NVIC_EnableIRQ>

}
 80017b6:	bf00      	nop
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	48000400 	.word	0x48000400

080017c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOF_INT_0_Pin)
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d103      	bne.n	80017e0 <HAL_GPIO_EXTI_Callback+0x18>
	{
//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
		distance_sensors_set_interrupt(&distance_sensors, 0);
 80017d8:	2100      	movs	r1, #0
 80017da:	480b      	ldr	r0, [pc, #44]	; (8001808 <HAL_GPIO_EXTI_Callback+0x40>)
 80017dc:	f7ff fc46 	bl	800106c <distance_sensors_set_interrupt>

	}

	if(GPIO_Pin == TOF_INT_1_Pin)
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017e6:	d103      	bne.n	80017f0 <HAL_GPIO_EXTI_Callback+0x28>
		{
	//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
	//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
		distance_sensors_set_interrupt(&distance_sensors, 1);
 80017e8:	2101      	movs	r1, #1
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <HAL_GPIO_EXTI_Callback+0x40>)
 80017ec:	f7ff fc3e 	bl	800106c <distance_sensors_set_interrupt>

		}
	if(GPIO_Pin == TOF_INT_2_Pin)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d103      	bne.n	80017fe <HAL_GPIO_EXTI_Callback+0x36>
			{
		//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
		//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
			distance_sensors_set_interrupt(&distance_sensors, 2);
 80017f6:	2102      	movs	r1, #2
 80017f8:	4803      	ldr	r0, [pc, #12]	; (8001808 <HAL_GPIO_EXTI_Callback+0x40>)
 80017fa:	f7ff fc37 	bl	800106c <distance_sensors_set_interrupt>

			}
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000604 	.word	0x20000604

0800180c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

	if(huart->Instance == remote_controller.uart->Instance){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <HAL_UART_RxCpltCallback+0x5c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d11d      	bne.n	800185e <HAL_UART_RxCpltCallback+0x52>
		remote_controller.data[remote_controller.buf_counter++] = remote_controller.one_byte;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_UART_RxCpltCallback+0x5c>)
 8001824:	795b      	ldrb	r3, [r3, #5]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	b2d1      	uxtb	r1, r2
 800182a:	4a0f      	ldr	r2, [pc, #60]	; (8001868 <HAL_UART_RxCpltCallback+0x5c>)
 800182c:	7151      	strb	r1, [r2, #5]
 800182e:	4619      	mov	r1, r3
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_UART_RxCpltCallback+0x5c>)
 8001832:	791a      	ldrb	r2, [r3, #4]
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_UART_RxCpltCallback+0x5c>)
 8001836:	440b      	add	r3, r1
 8001838:	719a      	strb	r2, [r3, #6]
		if(remote_controller.one_byte != '\n'){
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_UART_RxCpltCallback+0x5c>)
 800183c:	791b      	ldrb	r3, [r3, #4]
 800183e:	2b0a      	cmp	r3, #10
 8001840:	d007      	beq.n	8001852 <HAL_UART_RxCpltCallback+0x46>
			HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_UART_RxCpltCallback+0x5c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2201      	movs	r2, #1
 8001848:	4908      	ldr	r1, [pc, #32]	; (800186c <HAL_UART_RxCpltCallback+0x60>)
 800184a:	4618      	mov	r0, r3
 800184c:	f003 ffee 	bl	800582c <HAL_UART_Receive_IT>
			remote_controller.buf_counter = 0;
		}
	}


}
 8001850:	e005      	b.n	800185e <HAL_UART_RxCpltCallback+0x52>
			remote_controller_set_interrupt(&remote_controller);
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_UART_RxCpltCallback+0x5c>)
 8001854:	f000 f9cd 	bl	8001bf2 <remote_controller_set_interrupt>
			remote_controller.buf_counter = 0;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_UART_RxCpltCallback+0x5c>)
 800185a:	2200      	movs	r2, #0
 800185c:	715a      	strb	r2, [r3, #5]
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000580 	.word	0x20000580
 800186c:	20000584 	.word	0x20000584

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <motors_init>:

TIM_HandleTypeDef *timer_left_motor;
TIM_HandleTypeDef *timer_right_motor;


void motors_init(TIM_HandleTypeDef *timer_1, TIM_HandleTypeDef *timer_2){
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
	timer_left_motor = timer_1;
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <motors_init+0x60>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6013      	str	r3, [r2, #0]
	timer_right_motor = timer_2;
 8001890:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <motors_init+0x64>)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(timer_left_motor);
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <motors_init+0x60>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f003 f8fe 	bl	8004a9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(timer_right_motor);
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <motors_init+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 f8f9 	bl	8004a9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(timer_left_motor, TIM_CHANNEL_1);
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <motors_init+0x60>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 f9b1 	bl	8004c18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer_right_motor, TIM_CHANNEL_1);
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <motors_init+0x64>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 f9ab 	bl	8004c18 <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(timer_left_motor, TIM_CHANNEL_1, 0);
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <motors_init+0x60>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, 0);
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <motors_init+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000bf4 	.word	0x20000bf4
 80018e4:	20000bf0 	.word	0x20000bf0

080018e8 <motors_set_speed>:


void motors_set_speed(motors_t motor, int16_t speed){
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	460a      	mov	r2, r1
 80018f2:	71fb      	strb	r3, [r7, #7]
 80018f4:	4613      	mov	r3, r2
 80018f6:	80bb      	strh	r3, [r7, #4]
	if(speed < 0){
 80018f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da02      	bge.n	8001906 <motors_set_speed+0x1e>
		speed = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	80bb      	strh	r3, [r7, #4]
 8001904:	e005      	b.n	8001912 <motors_set_speed+0x2a>
	}else if(speed > 100){
 8001906:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	dd01      	ble.n	8001912 <motors_set_speed+0x2a>
		speed = 100;
 800190e:	2364      	movs	r3, #100	; 0x64
 8001910:	80bb      	strh	r3, [r7, #4]
	}

	if(motor == LEFT_MOTOR){
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d106      	bne.n	8001926 <motors_set_speed+0x3e>
		__HAL_TIM_SetCompare(timer_left_motor, TIM_CHANNEL_1, speed);
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <motors_set_speed+0x5c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001922:	635a      	str	r2, [r3, #52]	; 0x34
	}else if(motor == RIGHT_MOTOR){
		__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, speed);
	}
}
 8001924:	e008      	b.n	8001938 <motors_set_speed+0x50>
	}else if(motor == RIGHT_MOTOR){
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <motors_set_speed+0x50>
		__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, speed);
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <motors_set_speed+0x60>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001936:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	20000bf4 	.word	0x20000bf4
 8001948:	20000bf0 	.word	0x20000bf0

0800194c <motors_set_direction>:

void motors_set_direction(motors_t motor, motors_t direction){
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	460a      	mov	r2, r1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	4613      	mov	r3, r2
 800195a:	71bb      	strb	r3, [r7, #6]
	if(motor == LEFT_MOTOR){
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d123      	bne.n	80019aa <motors_set_direction+0x5e>
		if(direction == GO_FORWARD){
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d10e      	bne.n	8001986 <motors_set_direction+0x3a>
			HAL_GPIO_WritePin(SILNIK_L_1_GPIO_Port, SILNIK_L_1_Pin, GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f001 f8a5 	bl	8002ac0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SILNIK_L_2_GPIO_Port, SILNIK_L_2_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f001 f89e 	bl	8002ac0 <HAL_GPIO_WritePin>
		}else if(direction == GO_BACKWARDS){
			HAL_GPIO_WritePin(SILNIK_P_1_GPIO_Port, SILNIK_P_1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(SILNIK_P_2_GPIO_Port, SILNIK_P_2_Pin, GPIO_PIN_SET);
		}
	}
}
 8001984:	e031      	b.n	80019ea <motors_set_direction+0x9e>
		}else if(direction == GO_BACKWARDS){
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d12e      	bne.n	80019ea <motors_set_direction+0x9e>
			HAL_GPIO_WritePin(SILNIK_L_1_GPIO_Port, SILNIK_L_1_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f001 f893 	bl	8002ac0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SILNIK_L_2_GPIO_Port, SILNIK_L_2_Pin, GPIO_PIN_SET);
 800199a:	2201      	movs	r2, #1
 800199c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f001 f88c 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 80019a8:	e01f      	b.n	80019ea <motors_set_direction+0x9e>
	}else if(motor == RIGHT_MOTOR){
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d11c      	bne.n	80019ea <motors_set_direction+0x9e>
		if(direction == GO_FORWARD){
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d10b      	bne.n	80019ce <motors_set_direction+0x82>
			HAL_GPIO_WritePin(SILNIK_P_1_GPIO_Port, SILNIK_P_1_Pin, GPIO_PIN_SET);
 80019b6:	2201      	movs	r2, #1
 80019b8:	2108      	movs	r1, #8
 80019ba:	480e      	ldr	r0, [pc, #56]	; (80019f4 <motors_set_direction+0xa8>)
 80019bc:	f001 f880 	bl	8002ac0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SILNIK_P_2_GPIO_Port, SILNIK_P_2_Pin, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2110      	movs	r1, #16
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c8:	f001 f87a 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 80019cc:	e00d      	b.n	80019ea <motors_set_direction+0x9e>
		}else if(direction == GO_BACKWARDS){
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d10a      	bne.n	80019ea <motors_set_direction+0x9e>
			HAL_GPIO_WritePin(SILNIK_P_1_GPIO_Port, SILNIK_P_1_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2108      	movs	r1, #8
 80019d8:	4806      	ldr	r0, [pc, #24]	; (80019f4 <motors_set_direction+0xa8>)
 80019da:	f001 f871 	bl	8002ac0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SILNIK_P_2_GPIO_Port, SILNIK_P_2_Pin, GPIO_PIN_SET);
 80019de:	2201      	movs	r2, #1
 80019e0:	2110      	movs	r1, #16
 80019e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e6:	f001 f86b 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	48000400 	.word	0x48000400

080019f8 <pid_init>:
#include "pid.h"

void pid_init(_pid_t *pid){
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	pid->kp = 0.0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
	pid->ki = 0.0;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
	pid->kd = 0.0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
	pid->error_sum = 0.0;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
	pid->error_prev = 0.0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
	pid->windup_limit = 0.0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	615a      	str	r2, [r3, #20]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <pid_set_params>:

void pid_set_params(_pid_t *pid, float kp, float ki, float kd, float windup_limit) {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6178      	str	r0, [r7, #20]
 8001a44:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a48:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a4c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001a50:	edc7 1a01 	vstr	s3, [r7, #4]

	pid->kp = kp;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	609a      	str	r2, [r3, #8]
	pid->windup_limit = windup_limit;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	615a      	str	r2, [r3, #20]
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <pid_calculate>:


int16_t pid_calculate(_pid_t *pid, uint16_t setpoint, uint16_t process_val){
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	803b      	strh	r3, [r7, #0]
	int16_t error;
	float p_term;
	float i_term;
	float d_term;

	error = setpoint - process_val;
 8001a88:	887a      	ldrh	r2, [r7, #2]
 8001a8a:	883b      	ldrh	r3, [r7, #0]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	827b      	strh	r3, [r7, #18]
	pid->error_sum += error;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	edc3 7a03 	vstr	s15, [r3, #12]

	p_term = (float)(pid->kp * error);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	ed93 7a00 	vldr	s14, [r3]
 8001ab4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac4:	edc7 7a03 	vstr	s15, [r7, #12]
	i_term = (float)(pid->ki * pid->error_sum);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad8:	edc7 7a05 	vstr	s15, [r7, #20]
	d_term = (float)(pid->kd * (error - pid->error_prev));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ae2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001af4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afc:	edc7 7a02 	vstr	s15, [r7, #8]


	if(i_term >= pid->windup_limit){
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b06:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b12:	db03      	blt.n	8001b1c <pid_calculate+0xa4>
		i_term = pid->windup_limit;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e012      	b.n	8001b42 <pid_calculate+0xca>
	}else if(i_term <= -pid->windup_limit){
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b22:	eef1 7a67 	vneg.f32	s15, s15
 8001b26:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d806      	bhi.n	8001b42 <pid_calculate+0xca>
		i_term = -pid->windup_limit;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b3a:	eef1 7a67 	vneg.f32	s15, s15
 8001b3e:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	pid->error_prev = error;
 8001b42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	edc3 7a04 	vstr	s15, [r3, #16]

	return (int16_t)(p_term + i_term + d_term);
 8001b54:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6c:	ee17 3a90 	vmov	r3, s15
 8001b70:	b21b      	sxth	r3, r3

}
 8001b72:	4618      	mov	r0, r3
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <remote_controller_init>:
#include "remote_controller.h"

void remote_controller_init(remote_controller_t *controller, UART_HandleTypeDef *uart){
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
	controller->uart = uart;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	601a      	str	r2, [r3, #0]
	controller->one_byte = 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	711a      	strb	r2, [r3, #4]
	controller->buf_counter = 0;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	715a      	strb	r2, [r3, #5]
    memset(controller->data,0,BUF_SIZE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3306      	adds	r3, #6
 8001b9e:	220a      	movs	r2, #10
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f009 ffa3 	bl	800baee <memset>
	controller->kp = 0.0f;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
	controller->ki = 0.0f;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
	controller->kd = 0.0f;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
	controller->dist_from_wall = 0;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	839a      	strh	r2, [r3, #28]
	controller->free_drive = 0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	779a      	strb	r2, [r3, #30]
	controller->robot_state = 0;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	77da      	strb	r2, [r3, #31]
	controller->pwm_l = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2020 	strb.w	r2, [r3, #32]
	controller->pwm_r = 0;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	controller->speed = 0;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <remote_controller_set_interrupt>:
void remote_controller_set_interrupt(remote_controller_t *controller){
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
	controller->interrupt = 1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <remote_controller_is_data_ready>:
uint8_t remote_controller_is_data_ready(remote_controller_t *controller){
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
	return controller->interrupt;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <remote_controller_celar_interrupt>:
void remote_controller_celar_interrupt(remote_controller_t *controller){
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	controller->interrupt = 0;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <str_to_num>:

uint16_t str_to_num(uint8_t *data){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	uint8_t str_to_num[10];
	uint8_t j = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i = 3; i != '\n'; ++i,++j ){
 8001c50:	2303      	movs	r3, #3
 8001c52:	75bb      	strb	r3, [r7, #22]
 8001c54:	e00f      	b.n	8001c76 <str_to_num+0x32>
		str_to_num[j] = data[i];
 8001c56:	7dbb      	ldrb	r3, [r7, #22]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	441a      	add	r2, r3
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	7812      	ldrb	r2, [r2, #0]
 8001c60:	f107 0118 	add.w	r1, r7, #24
 8001c64:	440b      	add	r3, r1
 8001c66:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 3; i != '\n'; ++i,++j ){
 8001c6a:	7dbb      	ldrb	r3, [r7, #22]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	75bb      	strb	r3, [r7, #22]
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	3301      	adds	r3, #1
 8001c74:	75fb      	strb	r3, [r7, #23]
 8001c76:	7dbb      	ldrb	r3, [r7, #22]
 8001c78:	2b0a      	cmp	r3, #10
 8001c7a:	d1ec      	bne.n	8001c56 <str_to_num+0x12>
	}
	str_to_num[++j] = '\0';
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	f107 0218 	add.w	r2, r7, #24
 8001c88:	4413      	add	r3, r2
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f803 2c0c 	strb.w	r2, [r3, #-12]


	return (atoi((char *)str_to_num));
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4618      	mov	r0, r3
 8001c96:	f009 fef1 	bl	800ba7c <atoi>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	b29b      	uxth	r3, r3
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <str_to_num_f>:

float str_to_num_f(uint8_t *data){
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
	uint8_t str_to_num[10];
	uint8_t j = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i = 3; i != '\n'; ++i,++j ){
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	75bb      	strb	r3, [r7, #22]
 8001cb6:	e00f      	b.n	8001cd8 <str_to_num_f+0x32>
		str_to_num[j] = data[i];
 8001cb8:	7dbb      	ldrb	r3, [r7, #22]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	441a      	add	r2, r3
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	f107 0118 	add.w	r1, r7, #24
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 3; i != '\n'; ++i,++j ){
 8001ccc:	7dbb      	ldrb	r3, [r7, #22]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	75bb      	strb	r3, [r7, #22]
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	75fb      	strb	r3, [r7, #23]
 8001cd8:	7dbb      	ldrb	r3, [r7, #22]
 8001cda:	2b0a      	cmp	r3, #10
 8001cdc:	d1ec      	bne.n	8001cb8 <str_to_num_f+0x12>
	}
	str_to_num[++j] = '\0';
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	75fb      	strb	r3, [r7, #23]
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	f107 0218 	add.w	r2, r7, #24
 8001cea:	4413      	add	r3, r2
 8001cec:	2200      	movs	r2, #0
 8001cee:	f803 2c0c 	strb.w	r2, [r3, #-12]


	return (atoff((char *)str_to_num));
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f009 febd 	bl	800ba76 <atoff>
 8001cfc:	eef0 7a40 	vmov.f32	s15, s0
}
 8001d00:	eeb0 0a67 	vmov.f32	s0, s15
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <remote_controller_parser>:

void remote_controller_parser(remote_controller_t *controller){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

	if(!strncmp((char *) controller->data,"kp",2)){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3306      	adds	r3, #6
 8001d18:	2202      	movs	r2, #2
 8001d1a:	495d      	ldr	r1, [pc, #372]	; (8001e90 <remote_controller_parser+0x184>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f009 fef6 	bl	800bb0e <strncmp>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10a      	bne.n	8001d3e <remote_controller_parser+0x32>
		controller->kp = str_to_num_f(controller->data);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3306      	adds	r3, #6
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ffba 	bl	8001ca6 <str_to_num_f>
 8001d32:	eef0 7a40 	vmov.f32	s15, s0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	edc3 7a04 	vstr	s15, [r3, #16]
		controller->pwm_r = str_to_num(controller->data);
	}else if(!strncmp((char *) controller->data,"sp",2)){ //pwm r
		controller->speed = str_to_num(controller->data); //speed
	}

}
 8001d3c:	e0a3      	b.n	8001e86 <remote_controller_parser+0x17a>
	}else if(!strncmp((char *) controller->data,"ki",2)){
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3306      	adds	r3, #6
 8001d42:	2202      	movs	r2, #2
 8001d44:	4953      	ldr	r1, [pc, #332]	; (8001e94 <remote_controller_parser+0x188>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f009 fee1 	bl	800bb0e <strncmp>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10a      	bne.n	8001d68 <remote_controller_parser+0x5c>
		controller->ki = str_to_num_f(controller->data);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3306      	adds	r3, #6
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ffa5 	bl	8001ca6 <str_to_num_f>
 8001d5c:	eef0 7a40 	vmov.f32	s15, s0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001d66:	e08e      	b.n	8001e86 <remote_controller_parser+0x17a>
	}else if(!strncmp((char *) controller->data,"kd",2)){
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3306      	adds	r3, #6
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	494a      	ldr	r1, [pc, #296]	; (8001e98 <remote_controller_parser+0x18c>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f009 fecc 	bl	800bb0e <strncmp>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10a      	bne.n	8001d92 <remote_controller_parser+0x86>
		controller->kd = str_to_num_f(controller->data);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3306      	adds	r3, #6
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff90 	bl	8001ca6 <str_to_num_f>
 8001d86:	eef0 7a40 	vmov.f32	s15, s0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001d90:	e079      	b.n	8001e86 <remote_controller_parser+0x17a>
	}else if(!strncmp((char *) controller->data,"dw",2)){ //dist from wall
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3306      	adds	r3, #6
 8001d96:	2202      	movs	r2, #2
 8001d98:	4940      	ldr	r1, [pc, #256]	; (8001e9c <remote_controller_parser+0x190>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f009 feb7 	bl	800bb0e <strncmp>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <remote_controller_parser+0xae>
		controller->dist_from_wall = str_to_num(controller->data);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3306      	adds	r3, #6
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff4a 	bl	8001c44 <str_to_num>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	839a      	strh	r2, [r3, #28]
}
 8001db8:	e065      	b.n	8001e86 <remote_controller_parser+0x17a>
	}else if(!strncmp((char *) controller->data,"fd",2)){ //free drive
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3306      	adds	r3, #6
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <remote_controller_parser+0x194>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f009 fea3 	bl	800bb0e <strncmp>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <remote_controller_parser+0xd6>
		controller->free_drive = str_to_num(controller->data);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3306      	adds	r3, #6
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff36 	bl	8001c44 <str_to_num>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	779a      	strb	r2, [r3, #30]
}
 8001de0:	e051      	b.n	8001e86 <remote_controller_parser+0x17a>
	}else if(!strncmp((char *) controller->data,"rs",2)){ //robot state
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3306      	adds	r3, #6
 8001de6:	2202      	movs	r2, #2
 8001de8:	492e      	ldr	r1, [pc, #184]	; (8001ea4 <remote_controller_parser+0x198>)
 8001dea:	4618      	mov	r0, r3
 8001dec:	f009 fe8f 	bl	800bb0e <strncmp>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <remote_controller_parser+0xfe>
		controller->robot_state = str_to_num(controller->data);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3306      	adds	r3, #6
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff22 	bl	8001c44 <str_to_num>
 8001e00:	4603      	mov	r3, r0
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	77da      	strb	r2, [r3, #31]
}
 8001e08:	e03d      	b.n	8001e86 <remote_controller_parser+0x17a>
	}else if(!strncmp((char *) controller->data,"pl",2)){ //pwm l
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3306      	adds	r3, #6
 8001e0e:	2202      	movs	r2, #2
 8001e10:	4925      	ldr	r1, [pc, #148]	; (8001ea8 <remote_controller_parser+0x19c>)
 8001e12:	4618      	mov	r0, r3
 8001e14:	f009 fe7b 	bl	800bb0e <strncmp>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10a      	bne.n	8001e34 <remote_controller_parser+0x128>
		controller->pwm_l = str_to_num(controller->data);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3306      	adds	r3, #6
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff0e 	bl	8001c44 <str_to_num>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001e32:	e028      	b.n	8001e86 <remote_controller_parser+0x17a>
	}else if(!strncmp((char *) controller->data,"pr",2)){ //pwm r
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3306      	adds	r3, #6
 8001e38:	2202      	movs	r2, #2
 8001e3a:	491c      	ldr	r1, [pc, #112]	; (8001eac <remote_controller_parser+0x1a0>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f009 fe66 	bl	800bb0e <strncmp>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10a      	bne.n	8001e5e <remote_controller_parser+0x152>
		controller->pwm_r = str_to_num(controller->data);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3306      	adds	r3, #6
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fef9 	bl	8001c44 <str_to_num>
 8001e52:	4603      	mov	r3, r0
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001e5c:	e013      	b.n	8001e86 <remote_controller_parser+0x17a>
	}else if(!strncmp((char *) controller->data,"sp",2)){ //pwm r
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3306      	adds	r3, #6
 8001e62:	2202      	movs	r2, #2
 8001e64:	4912      	ldr	r1, [pc, #72]	; (8001eb0 <remote_controller_parser+0x1a4>)
 8001e66:	4618      	mov	r0, r3
 8001e68:	f009 fe51 	bl	800bb0e <strncmp>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <remote_controller_parser+0x17a>
		controller->speed = str_to_num(controller->data); //speed
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3306      	adds	r3, #6
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fee4 	bl	8001c44 <str_to_num>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	0800ea48 	.word	0x0800ea48
 8001e94:	0800ea4c 	.word	0x0800ea4c
 8001e98:	0800ea50 	.word	0x0800ea50
 8001e9c:	0800ea54 	.word	0x0800ea54
 8001ea0:	0800ea58 	.word	0x0800ea58
 8001ea4:	0800ea5c 	.word	0x0800ea5c
 8001ea8:	0800ea60 	.word	0x0800ea60
 8001eac:	0800ea64 	.word	0x0800ea64
 8001eb0:	0800ea68 	.word	0x0800ea68

08001eb4 <robot_controller_init>:

#include "robot_controller.h"

void robot_controller_init(){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	motors_set_speed(LEFT_MOTOR, DEFAULT_SPEED);
 8001eb8:	2132      	movs	r1, #50	; 0x32
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff fd14 	bl	80018e8 <motors_set_speed>
	motors_set_speed(RIGHT_MOTOR, DEFAULT_SPEED);
 8001ec0:	2132      	movs	r1, #50	; 0x32
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f7ff fd10 	bl	80018e8 <motors_set_speed>
	motors_set_direction(LEFT_MOTOR, GO_FORWARD);
 8001ec8:	2102      	movs	r1, #2
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fd3e 	bl	800194c <motors_set_direction>
	motors_set_direction(RIGHT_MOTOR, GO_FORWARD);
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f7ff fd3a 	bl	800194c <motors_set_direction>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}

08001edc <robot_controller>:

void robot_controller(int16_t pid_out, uint16_t front_distance){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	80fb      	strh	r3, [r7, #6]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	80bb      	strh	r3, [r7, #4]

	if(pid_out > 0){
 8001eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	dd11      	ble.n	8001f18 <robot_controller+0x3c>
		motors_set_speed(RIGHT_MOTOR, DEFAULT_SPEED + pid_out);
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	3332      	adds	r3, #50	; 0x32
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	4619      	mov	r1, r3
 8001efe:	2001      	movs	r0, #1
 8001f00:	f7ff fcf2 	bl	80018e8 <motors_set_speed>
		motors_set_speed(LEFT_MOTOR, DEFAULT_SPEED - pid_out);
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4619      	mov	r1, r3
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff fce9 	bl	80018e8 <motors_set_speed>
 8001f16:	e010      	b.n	8001f3a <robot_controller+0x5e>
	}else{
		motors_set_speed(LEFT_MOTOR, DEFAULT_SPEED - pid_out);
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	4619      	mov	r1, r3
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff fcdf 	bl	80018e8 <motors_set_speed>
		motors_set_speed(RIGHT_MOTOR, DEFAULT_SPEED + pid_out);
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	3332      	adds	r3, #50	; 0x32
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	4619      	mov	r1, r3
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff fcd7 	bl	80018e8 <motors_set_speed>

	}
	if(front_distance < SAFETY_DISTANCE){
 8001f3a:	88bb      	ldrh	r3, [r7, #4]
 8001f3c:	2b63      	cmp	r3, #99	; 0x63
 8001f3e:	d807      	bhi.n	8001f50 <robot_controller+0x74>
		motors_set_speed(LEFT_MOTOR, 0);
 8001f40:	2100      	movs	r1, #0
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7ff fcd0 	bl	80018e8 <motors_set_speed>
	    motors_set_speed(RIGHT_MOTOR, 0);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff fccc 	bl	80018e8 <motors_set_speed>
	}
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_MspInit+0x44>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <HAL_MspInit+0x44>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6193      	str	r3, [r2, #24]
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_MspInit+0x44>)
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_MspInit+0x44>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <HAL_MspInit+0x44>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	61d3      	str	r3, [r2, #28]
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_MspInit+0x44>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_I2C_MspInit+0x7c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d127      	bne.n	8002012 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_I2C_MspInit+0x80>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4a16      	ldr	r2, [pc, #88]	; (8002020 <HAL_I2C_MspInit+0x80>)
 8001fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fcc:	6153      	str	r3, [r2, #20]
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_I2C_MspInit+0x80>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fda:	23c0      	movs	r3, #192	; 0xc0
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fde:	2312      	movs	r3, #18
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fea:	2304      	movs	r3, #4
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480b      	ldr	r0, [pc, #44]	; (8002024 <HAL_I2C_MspInit+0x84>)
 8001ff6:	f000 fbf1 	bl	80027dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_I2C_MspInit+0x80>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_I2C_MspInit+0x80>)
 8002000:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002004:	61d3      	str	r3, [r2, #28]
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_I2C_MspInit+0x80>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40005400 	.word	0x40005400
 8002020:	40021000 	.word	0x40021000
 8002024:	48000400 	.word	0x48000400

08002028 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a13      	ldr	r2, [pc, #76]	; (8002084 <HAL_TIM_Base_MspInit+0x5c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d10c      	bne.n	8002054 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800203a:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_TIM_Base_MspInit+0x60>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <HAL_TIM_Base_MspInit+0x60>)
 8002040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002044:	6193      	str	r3, [r2, #24]
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_TIM_Base_MspInit+0x60>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002052:	e010      	b.n	8002076 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0c      	ldr	r2, [pc, #48]	; (800208c <HAL_TIM_Base_MspInit+0x64>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10b      	bne.n	8002076 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_TIM_Base_MspInit+0x60>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_TIM_Base_MspInit+0x60>)
 8002064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002068:	6193      	str	r3, [r2, #24]
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <HAL_TIM_Base_MspInit+0x60>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40014400 	.word	0x40014400
 8002088:	40021000 	.word	0x40021000
 800208c:	40014800 	.word	0x40014800

08002090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_TIM_MspPostInit+0xa8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d11c      	bne.n	80020ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_TIM_MspPostInit+0xac>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	4a21      	ldr	r2, [pc, #132]	; (800213c <HAL_TIM_MspPostInit+0xac>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6153      	str	r3, [r2, #20]
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <HAL_TIM_MspPostInit+0xac>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 80020ca:	2310      	movs	r3, #16
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80020da:	2301      	movs	r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	4816      	ldr	r0, [pc, #88]	; (8002140 <HAL_TIM_MspPostInit+0xb0>)
 80020e6:	f000 fb79 	bl	80027dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80020ea:	e020      	b.n	800212e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM17)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <HAL_TIM_MspPostInit+0xb4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d11b      	bne.n	800212e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_TIM_MspPostInit+0xac>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_TIM_MspPostInit+0xac>)
 80020fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002100:	6153      	str	r3, [r2, #20]
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_TIM_MspPostInit+0xac>)
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_P_Pin;
 800210e:	2320      	movs	r3, #32
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800211e:	230a      	movs	r3, #10
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_P_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <HAL_TIM_MspPostInit+0xb0>)
 800212a:	f000 fb57 	bl	80027dc <HAL_GPIO_Init>
}
 800212e:	bf00      	nop
 8002130:	3728      	adds	r7, #40	; 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40014400 	.word	0x40014400
 800213c:	40021000 	.word	0x40021000
 8002140:	48000400 	.word	0x48000400
 8002144:	40014800 	.word	0x40014800

08002148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <HAL_UART_MspInit+0x8c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d130      	bne.n	80021cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800216a:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_UART_MspInit+0x90>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <HAL_UART_MspInit+0x90>)
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <HAL_UART_MspInit+0x90>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_UART_MspInit+0x90>)
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <HAL_UART_MspInit+0x90>)
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	6153      	str	r3, [r2, #20]
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_UART_MspInit+0x90>)
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800219a:	230c      	movs	r3, #12
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021aa:	2307      	movs	r3, #7
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b8:	f000 fb10 	bl	80027dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	2026      	movs	r0, #38	; 0x26
 80021c2:	f000 fa50 	bl	8002666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021c6:	2026      	movs	r0, #38	; 0x26
 80021c8:	f000 fa69 	bl	800269e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40004400 	.word	0x40004400
 80021d8:	40021000 	.word	0x40021000

080021dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <HardFault_Handler+0x4>

080021f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <MemManage_Handler+0x4>

080021f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <BusFault_Handler+0x4>

080021fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <UsageFault_Handler+0x4>

08002202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002230:	f000 f8da 	bl	80023e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}

08002238 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800223c:	2001      	movs	r0, #1
 800223e:	f000 fc57 	bl	8002af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}

08002246 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800224a:	2002      	movs	r0, #2
 800224c:	f000 fc50 	bl	8002af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <USART2_IRQHandler+0x10>)
 800225a:	f003 fb35 	bl	80058c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000b20 	.word	0x20000b20

08002268 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800226c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002270:	f000 fc3e 	bl	8002af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <_sbrk+0x5c>)
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <_sbrk+0x60>)
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <_sbrk+0x64>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <_sbrk+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d207      	bcs.n	80022b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a8:	f009 fbec 	bl	800ba84 <__errno>
 80022ac:	4602      	mov	r2, r0
 80022ae:	230c      	movs	r3, #12
 80022b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022b6:	e009      	b.n	80022cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <_sbrk+0x64>)
 80022c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20003000 	.word	0x20003000
 80022d8:	00000400 	.word	0x00000400
 80022dc:	200004c4 	.word	0x200004c4
 80022e0:	20000c40 	.word	0x20000c40

080022e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <SystemInit+0x20>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <SystemInit+0x20>)
 80022f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002340 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <LoopForever+0x6>)
  ldr r1, =_edata
 800230e:	490e      	ldr	r1, [pc, #56]	; (8002348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002310:	4a0e      	ldr	r2, [pc, #56]	; (800234c <LoopForever+0xe>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002324:	4c0b      	ldr	r4, [pc, #44]	; (8002354 <LoopForever+0x16>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002332:	f7ff ffd7 	bl	80022e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002336:	f009 fbab 	bl	800ba90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800233a:	f7fe feff 	bl	800113c <main>

0800233e <LoopForever>:

LoopForever:
    b LoopForever
 800233e:	e7fe      	b.n	800233e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002340:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002348:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 800234c:	0800ed70 	.word	0x0800ed70
  ldr r2, =_sbss
 8002350:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 8002354:	20000c40 	.word	0x20000c40

08002358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC1_2_IRQHandler>
	...

0800235c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_Init+0x28>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_Init+0x28>)
 8002366:	f043 0310 	orr.w	r3, r3, #16
 800236a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236c:	2003      	movs	r0, #3
 800236e:	f000 f96f 	bl	8002650 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002372:	2000      	movs	r0, #0
 8002374:	f000 f808 	bl	8002388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002378:	f7ff fdee 	bl	8001f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40022000 	.word	0x40022000

08002388 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_InitTick+0x54>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_InitTick+0x58>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239e:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f995 	bl	80026d6 <HAL_SYSTICK_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00e      	b.n	80023d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b0f      	cmp	r3, #15
 80023ba:	d80a      	bhi.n	80023d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023bc:	2200      	movs	r2, #0
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023c4:	f000 f94f 	bl	8002666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c8:	4a06      	ldr	r2, [pc, #24]	; (80023e4 <HAL_InitTick+0x5c>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e000      	b.n	80023d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	2000000c 	.word	0x2000000c
 80023e0:	20000014 	.word	0x20000014
 80023e4:	20000010 	.word	0x20000010

080023e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_IncTick+0x20>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_IncTick+0x24>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_IncTick+0x24>)
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000014 	.word	0x20000014
 800240c:	20000bf8 	.word	0x20000bf8

08002410 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return uwTick;  
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_GetTick+0x14>)
 8002416:	681b      	ldr	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000bf8 	.word	0x20000bf8

08002428 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff ffee 	bl	8002410 <HAL_GetTick>
 8002434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002440:	d005      	beq.n	800244e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_Delay+0x40>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800244e:	bf00      	nop
 8002450:	f7ff ffde 	bl	8002410 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	d8f7      	bhi.n	8002450 <HAL_Delay+0x28>
  {
  }
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000014 	.word	0x20000014

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db10      	blt.n	8002540 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4909      	ldr	r1, [pc, #36]	; (800254c <__NVIC_DisableIRQ+0x40>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	3320      	adds	r3, #32
 8002534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800253c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	2b00      	cmp	r3, #0
 8002562:	db0a      	blt.n	800257a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	490c      	ldr	r1, [pc, #48]	; (800259c <__NVIC_SetPriority+0x4c>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	440b      	add	r3, r1
 8002574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002578:	e00a      	b.n	8002590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4908      	ldr	r1, [pc, #32]	; (80025a0 <__NVIC_SetPriority+0x50>)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	3b04      	subs	r3, #4
 8002588:	0112      	lsls	r2, r2, #4
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	440b      	add	r3, r1
 800258e:	761a      	strb	r2, [r3, #24]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f1c3 0307 	rsb	r3, r3, #7
 80025be:	2b04      	cmp	r3, #4
 80025c0:	bf28      	it	cs
 80025c2:	2304      	movcs	r3, #4
 80025c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d902      	bls.n	80025d4 <NVIC_EncodePriority+0x30>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3b03      	subs	r3, #3
 80025d2:	e000      	b.n	80025d6 <NVIC_EncodePriority+0x32>
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	401a      	ands	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43d9      	mvns	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	4313      	orrs	r3, r2
         );
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800261c:	d301      	bcc.n	8002622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261e:	2301      	movs	r3, #1
 8002620:	e00f      	b.n	8002642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <SysTick_Config+0x40>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800262a:	210f      	movs	r1, #15
 800262c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002630:	f7ff ff8e 	bl	8002550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <SysTick_Config+0x40>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <SysTick_Config+0x40>)
 800263c:	2207      	movs	r2, #7
 800263e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	e000e010 	.word	0xe000e010

08002650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff07 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002678:	f7ff ff1c 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 800267c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	6978      	ldr	r0, [r7, #20]
 8002684:	f7ff ff8e 	bl	80025a4 <NVIC_EncodePriority>
 8002688:	4602      	mov	r2, r0
 800268a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff5d 	bl	8002550 <__NVIC_SetPriority>
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff0f 	bl	80024d0 <__NVIC_EnableIRQ>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff1f 	bl	800250c <__NVIC_DisableIRQ>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ff94 	bl	800260c <SysTick_Config>
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d008      	beq.n	8002712 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e020      	b.n	8002754 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 020e 	bic.w	r2, r2, #14
 8002720:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	2101      	movs	r1, #1
 800273c:	fa01 f202 	lsl.w	r2, r1, r2
 8002740:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002772:	2b02      	cmp	r3, #2
 8002774:	d005      	beq.n	8002782 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2204      	movs	r2, #4
 800277a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e027      	b.n	80027d2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 020e 	bic.w	r2, r2, #14
 8002790:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	2101      	movs	r1, #1
 80027ac:	fa01 f202 	lsl.w	r2, r1, r2
 80027b0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
    } 
  }
  return status;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ea:	e14e      	b.n	8002a8a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2101      	movs	r1, #1
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8140 	beq.w	8002a84 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d005      	beq.n	800281c <HAL_GPIO_Init+0x40>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d130      	bne.n	800287e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2203      	movs	r2, #3
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002852:	2201      	movs	r2, #1
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f003 0201 	and.w	r2, r3, #1
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b03      	cmp	r3, #3
 8002888:	d017      	beq.n	80028ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d123      	bne.n	800290e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	220f      	movs	r2, #15
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	6939      	ldr	r1, [r7, #16]
 800290a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0203 	and.w	r2, r3, #3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 809a 	beq.w	8002a84 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002950:	4b55      	ldr	r3, [pc, #340]	; (8002aa8 <HAL_GPIO_Init+0x2cc>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a54      	ldr	r2, [pc, #336]	; (8002aa8 <HAL_GPIO_Init+0x2cc>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6193      	str	r3, [r2, #24]
 800295c:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <HAL_GPIO_Init+0x2cc>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002968:	4a50      	ldr	r2, [pc, #320]	; (8002aac <HAL_GPIO_Init+0x2d0>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002992:	d013      	beq.n	80029bc <HAL_GPIO_Init+0x1e0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a46      	ldr	r2, [pc, #280]	; (8002ab0 <HAL_GPIO_Init+0x2d4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00d      	beq.n	80029b8 <HAL_GPIO_Init+0x1dc>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a45      	ldr	r2, [pc, #276]	; (8002ab4 <HAL_GPIO_Init+0x2d8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <HAL_GPIO_Init+0x1d8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a44      	ldr	r2, [pc, #272]	; (8002ab8 <HAL_GPIO_Init+0x2dc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_GPIO_Init+0x1d4>
 80029ac:	2303      	movs	r3, #3
 80029ae:	e006      	b.n	80029be <HAL_GPIO_Init+0x1e2>
 80029b0:	2305      	movs	r3, #5
 80029b2:	e004      	b.n	80029be <HAL_GPIO_Init+0x1e2>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e002      	b.n	80029be <HAL_GPIO_Init+0x1e2>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_GPIO_Init+0x1e2>
 80029bc:	2300      	movs	r3, #0
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	f002 0203 	and.w	r2, r2, #3
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	4093      	lsls	r3, r2
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ce:	4937      	ldr	r1, [pc, #220]	; (8002aac <HAL_GPIO_Init+0x2d0>)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029dc:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a00:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a06:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a2a:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a30:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a54:	4a19      	ldr	r2, [pc, #100]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a7e:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3301      	adds	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f47f aea9 	bne.w	80027ec <HAL_GPIO_Init+0x10>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	48000400 	.word	0x48000400
 8002ab4:	48000800 	.word	0x48000800
 8002ab8:	48000c00 	.word	0x48000c00
 8002abc:	40010400 	.word	0x40010400

08002ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad0:	787b      	ldrb	r3, [r7, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002adc:	e002      	b.n	8002ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fe5a 	bl	80017c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e081      	b.n	8002c36 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fa2a 	bl	8001fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	e006      	b.n	8002ba8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ba6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d104      	bne.n	8002bba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69d9      	ldr	r1, [r3, #28]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1a      	ldr	r2, [r3, #32]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	817b      	strh	r3, [r7, #10]
 8002c50:	4613      	mov	r3, r2
 8002c52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	f040 80da 	bne.w	8002e16 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_I2C_Master_Transmit+0x30>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e0d3      	b.n	8002e18 <HAL_I2C_Master_Transmit+0x1d8>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c78:	f7ff fbca 	bl	8002410 <HAL_GetTick>
 8002c7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2319      	movs	r3, #25
 8002c84:	2201      	movs	r2, #1
 8002c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f9e6 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e0be      	b.n	8002e18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2221      	movs	r2, #33	; 0x21
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	893a      	ldrh	r2, [r7, #8]
 8002cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2bff      	cmp	r3, #255	; 0xff
 8002cca:	d90e      	bls.n	8002cea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	22ff      	movs	r2, #255	; 0xff
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fb58 	bl	8003398 <I2C_TransferConfig>
 8002ce8:	e06c      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	8979      	ldrh	r1, [r7, #10]
 8002cfc:	4b48      	ldr	r3, [pc, #288]	; (8002e20 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fb47 	bl	8003398 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d0a:	e05b      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	6a39      	ldr	r1, [r7, #32]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f9e3 	bl	80030dc <I2C_WaitOnTXISFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e07b      	b.n	8002e18 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d034      	beq.n	8002dc4 <HAL_I2C_Master_Transmit+0x184>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d130      	bne.n	8002dc4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f975 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e04d      	b.n	8002e18 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2bff      	cmp	r3, #255	; 0xff
 8002d84:	d90e      	bls.n	8002da4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	22ff      	movs	r2, #255	; 0xff
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	2300      	movs	r3, #0
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fafb 	bl	8003398 <I2C_TransferConfig>
 8002da2:	e00f      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	8979      	ldrh	r1, [r7, #10]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 faea 	bl	8003398 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d19e      	bne.n	8002d0c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f9c2 	bl	800315c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e01a      	b.n	8002e18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2220      	movs	r2, #32
 8002de8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_I2C_Master_Transmit+0x1e4>)
 8002df6:	400b      	ands	r3, r1
 8002df8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
  }
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	80002000 	.word	0x80002000
 8002e24:	fe00e800 	.word	0xfe00e800

08002e28 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	461a      	mov	r2, r3
 8002e34:	460b      	mov	r3, r1
 8002e36:	817b      	strh	r3, [r7, #10]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	f040 80db 	bne.w	8003000 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_I2C_Master_Receive+0x30>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0d4      	b.n	8003002 <HAL_I2C_Master_Receive+0x1da>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e60:	f7ff fad6 	bl	8002410 <HAL_GetTick>
 8002e64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2319      	movs	r3, #25
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f8f2 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0bf      	b.n	8003002 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2222      	movs	r2, #34	; 0x22
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	893a      	ldrh	r2, [r7, #8]
 8002ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2bff      	cmp	r3, #255	; 0xff
 8002eb2:	d90e      	bls.n	8002ed2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	22ff      	movs	r2, #255	; 0xff
 8002eb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	8979      	ldrh	r1, [r7, #10]
 8002ec2:	4b52      	ldr	r3, [pc, #328]	; (800300c <HAL_I2C_Master_Receive+0x1e4>)
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fa64 	bl	8003398 <I2C_TransferConfig>
 8002ed0:	e06d      	b.n	8002fae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	8979      	ldrh	r1, [r7, #10]
 8002ee4:	4b49      	ldr	r3, [pc, #292]	; (800300c <HAL_I2C_Master_Receive+0x1e4>)
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa53 	bl	8003398 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ef2:	e05c      	b.n	8002fae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	6a39      	ldr	r1, [r7, #32]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f96b 	bl	80031d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e07c      	b.n	8003002 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d034      	beq.n	8002fae <HAL_I2C_Master_Receive+0x186>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d130      	bne.n	8002fae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2200      	movs	r2, #0
 8002f54:	2180      	movs	r1, #128	; 0x80
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f880 	bl	800305c <I2C_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e04d      	b.n	8003002 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2bff      	cmp	r3, #255	; 0xff
 8002f6e:	d90e      	bls.n	8002f8e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	22ff      	movs	r2, #255	; 0xff
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	8979      	ldrh	r1, [r7, #10]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fa06 	bl	8003398 <I2C_TransferConfig>
 8002f8c:	e00f      	b.n	8002fae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	8979      	ldrh	r1, [r7, #10]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f9f5 	bl	8003398 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d19d      	bne.n	8002ef4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	6a39      	ldr	r1, [r7, #32]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f8cd 	bl	800315c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e01a      	b.n	8003002 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_I2C_Master_Receive+0x1e8>)
 8002fe0:	400b      	ands	r3, r1
 8002fe2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	80002400 	.word	0x80002400
 8003010:	fe00e800 	.word	0xfe00e800

08003014 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d103      	bne.n	8003032 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d007      	beq.n	8003050 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	619a      	str	r2, [r3, #24]
  }
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306c:	e022      	b.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003074:	d01e      	beq.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7ff f9cb 	bl	8002410 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d113      	bne.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e00f      	b.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4013      	ands	r3, r2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d0cd      	beq.n	800306e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030e8:	e02c      	b.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f8dc 	bl	80032ac <I2C_IsAcknowledgeFailed>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e02a      	b.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003104:	d01e      	beq.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003106:	f7ff f983 	bl	8002410 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	429a      	cmp	r2, r3
 8003114:	d302      	bcc.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d113      	bne.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e007      	b.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b02      	cmp	r3, #2
 8003150:	d1cb      	bne.n	80030ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003168:	e028      	b.n	80031bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f89c 	bl	80032ac <I2C_IsAcknowledgeFailed>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e026      	b.n	80031cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7ff f947 	bl	8002410 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d113      	bne.n	80031bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e007      	b.n	80031cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d1cf      	bne.n	800316a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031e0:	e055      	b.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f860 	bl	80032ac <I2C_IsAcknowledgeFailed>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e053      	b.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b20      	cmp	r3, #32
 8003202:	d129      	bne.n	8003258 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d105      	bne.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e03f      	b.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2220      	movs	r2, #32
 8003224:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003232:	400b      	ands	r3, r1
 8003234:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e022      	b.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003258:	f7ff f8da 	bl	8002410 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	429a      	cmp	r2, r3
 8003266:	d302      	bcc.n	800326e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e007      	b.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d1a2      	bne.n	80031e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	fe00e800 	.word	0xfe00e800

080032ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d161      	bne.n	800338a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032d4:	d02b      	beq.n	800332e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e4:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032e6:	e022      	b.n	800332e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ee:	d01e      	beq.n	800332e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f0:	f7ff f88e 	bl	8002410 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d302      	bcc.n	8003306 <I2C_IsAcknowledgeFailed+0x5a>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d113      	bne.n	800332e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f043 0220 	orr.w	r2, r3, #32
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e02e      	b.n	800338c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b20      	cmp	r3, #32
 800333a:	d1d5      	bne.n	80032e8 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2210      	movs	r2, #16
 8003342:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2220      	movs	r2, #32
 800334a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7ff fe61 	bl	8003014 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <I2C_IsAcknowledgeFailed+0xe8>)
 800335e:	400b      	ands	r3, r1
 8003360:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f043 0204 	orr.w	r2, r3, #4
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	fe00e800 	.word	0xfe00e800

08003398 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	817b      	strh	r3, [r7, #10]
 80033a6:	4613      	mov	r3, r2
 80033a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	0d5b      	lsrs	r3, r3, #21
 80033b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <I2C_TransferConfig+0x58>)
 80033ba:	430b      	orrs	r3, r1
 80033bc:	43db      	mvns	r3, r3
 80033be:	ea02 0103 	and.w	r1, r2, r3
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033c8:	7a7b      	ldrb	r3, [r7, #9]
 80033ca:	041b      	lsls	r3, r3, #16
 80033cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	431a      	orrs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	03ff63ff 	.word	0x03ff63ff

080033f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b20      	cmp	r3, #32
 8003408:	d138      	bne.n	800347c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003414:	2302      	movs	r3, #2
 8003416:	e032      	b.n	800347e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	; 0x24
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003446:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6819      	ldr	r1, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800348a:	b480      	push	{r7}
 800348c:	b085      	sub	sp, #20
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b20      	cmp	r3, #32
 800349e:	d139      	bne.n	8003514 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e033      	b.n	8003516 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2224      	movs	r2, #36	; 0x24
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800352a:	af00      	add	r7, sp, #0
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f000 bef4 	b.w	8004326 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 816a 	beq.w	8003822 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800354e:	4bb3      	ldr	r3, [pc, #716]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b04      	cmp	r3, #4
 8003558:	d00c      	beq.n	8003574 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800355a:	4bb0      	ldr	r3, [pc, #704]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b08      	cmp	r3, #8
 8003564:	d159      	bne.n	800361a <HAL_RCC_OscConfig+0xf6>
 8003566:	4bad      	ldr	r3, [pc, #692]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003572:	d152      	bne.n	800361a <HAL_RCC_OscConfig+0xf6>
 8003574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003578:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003588:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_RCC_OscConfig+0x82>
 80035a0:	4b9e      	ldr	r3, [pc, #632]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0xae>
 80035a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035aa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80035ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80035c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80035ce:	4b93      	ldr	r3, [pc, #588]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035d6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80035da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80035de:	fa92 f2a2 	rbit	r2, r2
 80035e2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80035e6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80035ea:	fab2 f282 	clz	r2, r2
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	f042 0220 	orr.w	r2, r2, #32
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	f002 021f 	and.w	r2, r2, #31
 80035fa:	2101      	movs	r1, #1
 80035fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 810c 	beq.w	8003820 <HAL_RCC_OscConfig+0x2fc>
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 8106 	bne.w	8003820 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f000 be86 	b.w	8004326 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800361a:	1d3b      	adds	r3, r7, #4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003624:	d106      	bne.n	8003634 <HAL_RCC_OscConfig+0x110>
 8003626:	4b7d      	ldr	r3, [pc, #500]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7c      	ldr	r2, [pc, #496]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e030      	b.n	8003696 <HAL_RCC_OscConfig+0x172>
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10c      	bne.n	8003658 <HAL_RCC_OscConfig+0x134>
 800363e:	4b77      	ldr	r3, [pc, #476]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a76      	ldr	r2, [pc, #472]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b74      	ldr	r3, [pc, #464]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a73      	ldr	r2, [pc, #460]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e01e      	b.n	8003696 <HAL_RCC_OscConfig+0x172>
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003662:	d10c      	bne.n	800367e <HAL_RCC_OscConfig+0x15a>
 8003664:	4b6d      	ldr	r3, [pc, #436]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6c      	ldr	r2, [pc, #432]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 800366a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b6a      	ldr	r3, [pc, #424]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a69      	ldr	r2, [pc, #420]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e00b      	b.n	8003696 <HAL_RCC_OscConfig+0x172>
 800367e:	4b67      	ldr	r3, [pc, #412]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a66      	ldr	r2, [pc, #408]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b64      	ldr	r3, [pc, #400]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a63      	ldr	r2, [pc, #396]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003696:	4b61      	ldr	r3, [pc, #388]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	f023 020f 	bic.w	r2, r3, #15
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	495d      	ldr	r1, [pc, #372]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d059      	beq.n	8003768 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fe feac 	bl	8002410 <HAL_GetTick>
 80036b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036be:	f7fe fea7 	bl	8002410 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d902      	bls.n	80036d4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	f000 be29 	b.w	8004326 <HAL_RCC_OscConfig+0xe02>
 80036d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80036e8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ec:	fab3 f383 	clz	r3, r3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d102      	bne.n	8003706 <HAL_RCC_OscConfig+0x1e2>
 8003700:	4b46      	ldr	r3, [pc, #280]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x20e>
 8003706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800370a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800371a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800371e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003722:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800372e:	4b3b      	ldr	r3, [pc, #236]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003736:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800373a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800373e:	fa92 f2a2 	rbit	r2, r2
 8003742:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003746:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800374a:	fab2 f282 	clz	r2, r2
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f042 0220 	orr.w	r2, r2, #32
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	f002 021f 	and.w	r2, r2, #31
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0ab      	beq.n	80036be <HAL_RCC_OscConfig+0x19a>
 8003766:	e05c      	b.n	8003822 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe fe52 	bl	8002410 <HAL_GetTick>
 800376c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003770:	e00a      	b.n	8003788 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003772:	f7fe fe4d 	bl	8002410 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d902      	bls.n	8003788 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	f000 bdcf 	b.w	8004326 <HAL_RCC_OscConfig+0xe02>
 8003788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800378c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800379c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d102      	bne.n	80037ba <HAL_RCC_OscConfig+0x296>
 80037b4:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	e015      	b.n	80037e6 <HAL_RCC_OscConfig+0x2c2>
 80037ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037be:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80037c6:	fa93 f3a3 	rbit	r3, r3
 80037ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80037ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80037d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80037e2:	4b0e      	ldr	r3, [pc, #56]	; (800381c <HAL_RCC_OscConfig+0x2f8>)
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037ea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80037ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80037f2:	fa92 f2a2 	rbit	r2, r2
 80037f6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80037fa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80037fe:	fab2 f282 	clz	r2, r2
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	f042 0220 	orr.w	r2, r2, #32
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	f002 021f 	and.w	r2, r2, #31
 800380e:	2101      	movs	r1, #1
 8003810:	fa01 f202 	lsl.w	r2, r1, r2
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ab      	bne.n	8003772 <HAL_RCC_OscConfig+0x24e>
 800381a:	e002      	b.n	8003822 <HAL_RCC_OscConfig+0x2fe>
 800381c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 816f 	beq.w	8003b10 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003832:	4bd0      	ldr	r3, [pc, #832]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800383e:	4bcd      	ldr	r3, [pc, #820]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b08      	cmp	r3, #8
 8003848:	d16c      	bne.n	8003924 <HAL_RCC_OscConfig+0x400>
 800384a:	4bca      	ldr	r3, [pc, #808]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d166      	bne.n	8003924 <HAL_RCC_OscConfig+0x400>
 8003856:	2302      	movs	r3, #2
 8003858:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003868:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386c:	fab3 f383 	clz	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d102      	bne.n	8003886 <HAL_RCC_OscConfig+0x362>
 8003880:	4bbc      	ldr	r3, [pc, #752]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	e013      	b.n	80038ae <HAL_RCC_OscConfig+0x38a>
 8003886:	2302      	movs	r3, #2
 8003888:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003898:	2302      	movs	r3, #2
 800389a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800389e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80038aa:	4bb2      	ldr	r3, [pc, #712]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	2202      	movs	r2, #2
 80038b0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80038b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80038b8:	fa92 f2a2 	rbit	r2, r2
 80038bc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80038c0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80038c4:	fab2 f282 	clz	r2, r2
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	f042 0220 	orr.w	r2, r2, #32
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	f002 021f 	and.w	r2, r2, #31
 80038d4:	2101      	movs	r1, #1
 80038d6:	fa01 f202 	lsl.w	r2, r1, r2
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <HAL_RCC_OscConfig+0x3cc>
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d002      	beq.n	80038f0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f000 bd1b 	b.w	8004326 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f0:	4ba0      	ldr	r3, [pc, #640]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	21f8      	movs	r1, #248	; 0xf8
 8003900:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003908:	fa91 f1a1 	rbit	r1, r1
 800390c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003910:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003914:	fab1 f181 	clz	r1, r1
 8003918:	b2c9      	uxtb	r1, r1
 800391a:	408b      	lsls	r3, r1
 800391c:	4995      	ldr	r1, [pc, #596]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	e0f5      	b.n	8003b10 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8085 	beq.w	8003a3a <HAL_RCC_OscConfig+0x516>
 8003930:	2301      	movs	r3, #1
 8003932:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003942:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003950:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	461a      	mov	r2, r3
 8003958:	2301      	movs	r3, #1
 800395a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fe fd58 	bl	8002410 <HAL_GetTick>
 8003960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003966:	f7fe fd53 	bl	8002410 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d902      	bls.n	800397c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	f000 bcd5 	b.w	8004326 <HAL_RCC_OscConfig+0xe02>
 800397c:	2302      	movs	r3, #2
 800397e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800398e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d102      	bne.n	80039ac <HAL_RCC_OscConfig+0x488>
 80039a6:	4b73      	ldr	r3, [pc, #460]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	e013      	b.n	80039d4 <HAL_RCC_OscConfig+0x4b0>
 80039ac:	2302      	movs	r3, #2
 80039ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80039be:	2302      	movs	r3, #2
 80039c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80039c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80039d0:	4b68      	ldr	r3, [pc, #416]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	2202      	movs	r2, #2
 80039d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80039da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80039de:	fa92 f2a2 	rbit	r2, r2
 80039e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80039e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80039ea:	fab2 f282 	clz	r2, r2
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	f042 0220 	orr.w	r2, r2, #32
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	f002 021f 	and.w	r2, r2, #31
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0af      	beq.n	8003966 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b5b      	ldr	r3, [pc, #364]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	21f8      	movs	r1, #248	; 0xf8
 8003a16:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003a1e:	fa91 f1a1 	rbit	r1, r1
 8003a22:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003a26:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003a2a:	fab1 f181 	clz	r1, r1
 8003a2e:	b2c9      	uxtb	r1, r1
 8003a30:	408b      	lsls	r3, r1
 8003a32:	4950      	ldr	r1, [pc, #320]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
 8003a38:	e06a      	b.n	8003b10 <HAL_RCC_OscConfig+0x5ec>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a44:	fa93 f3a3 	rbit	r3, r3
 8003a48:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003a4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a50:	fab3 f383 	clz	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	461a      	mov	r2, r3
 8003a62:	2300      	movs	r3, #0
 8003a64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fe fcd3 	bl	8002410 <HAL_GetTick>
 8003a6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a70:	f7fe fcce 	bl	8002410 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d902      	bls.n	8003a86 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	f000 bc50 	b.w	8004326 <HAL_RCC_OscConfig+0xe02>
 8003a86:	2302      	movs	r3, #2
 8003a88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a90:	fa93 f3a3 	rbit	r3, r3
 8003a94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x592>
 8003ab0:	4b30      	ldr	r3, [pc, #192]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	e013      	b.n	8003ade <HAL_RCC_OscConfig+0x5ba>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ace:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ada:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <HAL_RCC_OscConfig+0x650>)
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003ae4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ae8:	fa92 f2a2 	rbit	r2, r2
 8003aec:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003af0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003af4:	fab2 f282 	clz	r2, r2
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	f042 0220 	orr.w	r2, r2, #32
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	f002 021f 	and.w	r2, r2, #31
 8003b04:	2101      	movs	r1, #1
 8003b06:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1af      	bne.n	8003a70 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80da 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d069      	beq.n	8003bfe <HAL_RCC_OscConfig+0x6da>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_OscConfig+0x654>)
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2301      	movs	r3, #1
 8003b52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b54:	f7fe fc5c 	bl	8002410 <HAL_GetTick>
 8003b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5c:	e00e      	b.n	8003b7c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5e:	f7fe fc57 	bl	8002410 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d906      	bls.n	8003b7c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e3d9      	b.n	8004326 <HAL_RCC_OscConfig+0xe02>
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	10908120 	.word	0x10908120
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b92:	2202      	movs	r2, #2
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	fa93 f2a3 	rbit	r2, r3
 8003ba0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003baa:	2202      	movs	r2, #2
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	fa93 f2a3 	rbit	r2, r3
 8003bb8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003bbc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bbe:	4ba5      	ldr	r3, [pc, #660]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	6019      	str	r1, [r3, #0]
 8003bca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	fa93 f1a3 	rbit	r1, r3
 8003bd4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003bd8:	6019      	str	r1, [r3, #0]
  return result;
 8003bda:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0b0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x63a>
 8003bfc:	e06a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7b0>
 8003bfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	fa93 f2a3 	rbit	r2, r3
 8003c10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c14:	601a      	str	r2, [r3, #0]
  return result;
 8003c16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c1a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c1c:	fab3 f383 	clz	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	4b8c      	ldr	r3, [pc, #560]	; (8003e58 <HAL_RCC_OscConfig+0x934>)
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c30:	f7fe fbee 	bl	8002410 <HAL_GetTick>
 8003c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	e009      	b.n	8003c4e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3a:	f7fe fbe9 	bl	8002410 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e36b      	b.n	8004326 <HAL_RCC_OscConfig+0xe02>
 8003c4e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c52:	2202      	movs	r2, #2
 8003c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	fa93 f2a3 	rbit	r2, r3
 8003c60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	fa93 f2a3 	rbit	r2, r3
 8003c78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c82:	2202      	movs	r2, #2
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	fa93 f2a3 	rbit	r2, r3
 8003c90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c96:	4b6f      	ldr	r3, [pc, #444]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	6019      	str	r1, [r3, #0]
 8003ca2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	fa93 f1a3 	rbit	r1, r3
 8003cac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003cb0:	6019      	str	r1, [r3, #0]
  return result;
 8003cb2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	fab3 f383 	clz	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	2101      	movs	r1, #1
 8003cca:	fa01 f303 	lsl.w	r3, r1, r3
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1b2      	bne.n	8003c3a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd4:	1d3b      	adds	r3, r7, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8158 	beq.w	8003f94 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cea:	4b5a      	ldr	r3, [pc, #360]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d112      	bne.n	8003d1c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	4b57      	ldr	r3, [pc, #348]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	4a56      	ldr	r2, [pc, #344]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d00:	61d3      	str	r3, [r2, #28]
 8003d02:	4b54      	ldr	r3, [pc, #336]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f107 0308 	add.w	r3, r7, #8
 8003d14:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	4b4f      	ldr	r3, [pc, #316]	; (8003e5c <HAL_RCC_OscConfig+0x938>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d11a      	bne.n	8003d5e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d28:	4b4c      	ldr	r3, [pc, #304]	; (8003e5c <HAL_RCC_OscConfig+0x938>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a4b      	ldr	r2, [pc, #300]	; (8003e5c <HAL_RCC_OscConfig+0x938>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d32:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d34:	f7fe fb6c 	bl	8002410 <HAL_GetTick>
 8003d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	e009      	b.n	8003d52 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fe fb67 	bl	8002410 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e2e9      	b.n	8004326 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b42      	ldr	r3, [pc, #264]	; (8003e5c <HAL_RCC_OscConfig+0x938>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ef      	beq.n	8003d3e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d106      	bne.n	8003d76 <HAL_RCC_OscConfig+0x852>
 8003d68:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	4a39      	ldr	r2, [pc, #228]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6213      	str	r3, [r2, #32]
 8003d74:	e02f      	b.n	8003dd6 <HAL_RCC_OscConfig+0x8b2>
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCC_OscConfig+0x876>
 8003d80:	4b34      	ldr	r3, [pc, #208]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	4a33      	ldr	r2, [pc, #204]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6213      	str	r3, [r2, #32]
 8003d8c:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4a30      	ldr	r2, [pc, #192]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003d92:	f023 0304 	bic.w	r3, r3, #4
 8003d96:	6213      	str	r3, [r2, #32]
 8003d98:	e01d      	b.n	8003dd6 <HAL_RCC_OscConfig+0x8b2>
 8003d9a:	1d3b      	adds	r3, r7, #4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCC_OscConfig+0x89a>
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	4a2a      	ldr	r2, [pc, #168]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	6213      	str	r3, [r2, #32]
 8003db0:	4b28      	ldr	r3, [pc, #160]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	4a27      	ldr	r2, [pc, #156]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6213      	str	r3, [r2, #32]
 8003dbc:	e00b      	b.n	8003dd6 <HAL_RCC_OscConfig+0x8b2>
 8003dbe:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4a24      	ldr	r2, [pc, #144]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6213      	str	r3, [r2, #32]
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003dd0:	f023 0304 	bic.w	r3, r3, #4
 8003dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d06b      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de0:	f7fe fb16 	bl	8002410 <HAL_GetTick>
 8003de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	e00b      	b.n	8003e02 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fe fb11 	bl	8002410 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e291      	b.n	8004326 <HAL_RCC_OscConfig+0xe02>
 8003e02:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e06:	2202      	movs	r2, #2
 8003e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	fa93 f2a3 	rbit	r2, r3
 8003e14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003e1e:	2202      	movs	r2, #2
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	fa93 f2a3 	rbit	r2, r3
 8003e2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e30:	601a      	str	r2, [r3, #0]
  return result;
 8003e32:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCC_OscConfig+0x93c>
 8003e4c:	4b01      	ldr	r3, [pc, #4]	; (8003e54 <HAL_RCC_OscConfig+0x930>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	e014      	b.n	8003e7c <HAL_RCC_OscConfig+0x958>
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
 8003e58:	10908120 	.word	0x10908120
 8003e5c:	40007000 	.word	0x40007000
 8003e60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e64:	2202      	movs	r2, #2
 8003e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	fa93 f2a3 	rbit	r2, r3
 8003e72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	4bbb      	ldr	r3, [pc, #748]	; (8004168 <HAL_RCC_OscConfig+0xc44>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e80:	2102      	movs	r1, #2
 8003e82:	6011      	str	r1, [r2, #0]
 8003e84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	fa92 f1a2 	rbit	r1, r2
 8003e8e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e92:	6011      	str	r1, [r2, #0]
  return result;
 8003e94:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	fab2 f282 	clz	r2, r2
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	f002 021f 	and.w	r2, r2, #31
 8003eaa:	2101      	movs	r1, #1
 8003eac:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d099      	beq.n	8003dea <HAL_RCC_OscConfig+0x8c6>
 8003eb6:	e063      	b.n	8003f80 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb8:	f7fe faaa 	bl	8002410 <HAL_GetTick>
 8003ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec0:	e00b      	b.n	8003eda <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7fe faa5 	bl	8002410 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e225      	b.n	8004326 <HAL_RCC_OscConfig+0xe02>
 8003eda:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ede:	2202      	movs	r2, #2
 8003ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	fa93 f2a3 	rbit	r2, r3
 8003eec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	fa93 f2a3 	rbit	r2, r3
 8003f04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f08:	601a      	str	r2, [r3, #0]
  return result;
 8003f0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f10:	fab3 f383 	clz	r3, r3
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f043 0302 	orr.w	r3, r3, #2
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d102      	bne.n	8003f2a <HAL_RCC_OscConfig+0xa06>
 8003f24:	4b90      	ldr	r3, [pc, #576]	; (8004168 <HAL_RCC_OscConfig+0xc44>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	e00d      	b.n	8003f46 <HAL_RCC_OscConfig+0xa22>
 8003f2a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f2e:	2202      	movs	r2, #2
 8003f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	fa93 f2a3 	rbit	r2, r3
 8003f3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	4b89      	ldr	r3, [pc, #548]	; (8004168 <HAL_RCC_OscConfig+0xc44>)
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	6011      	str	r1, [r2, #0]
 8003f4e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	fa92 f1a2 	rbit	r1, r2
 8003f58:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f5c:	6011      	str	r1, [r2, #0]
  return result;
 8003f5e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	fab2 f282 	clz	r2, r2
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	f002 021f 	and.w	r2, r2, #31
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1a0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f80:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d105      	bne.n	8003f94 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f88:	4b77      	ldr	r3, [pc, #476]	; (8004168 <HAL_RCC_OscConfig+0xc44>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	4a76      	ldr	r2, [pc, #472]	; (8004168 <HAL_RCC_OscConfig+0xc44>)
 8003f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 81c2 	beq.w	8004324 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa0:	4b71      	ldr	r3, [pc, #452]	; (8004168 <HAL_RCC_OscConfig+0xc44>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	f000 819c 	beq.w	80042e6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fae:	1d3b      	adds	r3, r7, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	f040 8114 	bne.w	80041e2 <HAL_RCC_OscConfig+0xcbe>
 8003fba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003fbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	fa93 f2a3 	rbit	r2, r3
 8003fce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003fd2:	601a      	str	r2, [r3, #0]
  return result;
 8003fd4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003fd8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fe4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	461a      	mov	r2, r3
 8003fec:	2300      	movs	r3, #0
 8003fee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fe fa0e 	bl	8002410 <HAL_GetTick>
 8003ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff8:	e009      	b.n	800400e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffa:	f7fe fa09 	bl	8002410 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e18b      	b.n	8004326 <HAL_RCC_OscConfig+0xe02>
 800400e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004012:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	fa93 f2a3 	rbit	r2, r3
 8004022:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004026:	601a      	str	r2, [r3, #0]
  return result;
 8004028:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800402c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d102      	bne.n	8004048 <HAL_RCC_OscConfig+0xb24>
 8004042:	4b49      	ldr	r3, [pc, #292]	; (8004168 <HAL_RCC_OscConfig+0xc44>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	e01b      	b.n	8004080 <HAL_RCC_OscConfig+0xb5c>
 8004048:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800404c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	fa93 f2a3 	rbit	r2, r3
 800405c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	fa93 f2a3 	rbit	r2, r3
 8004076:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <HAL_RCC_OscConfig+0xc44>)
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004084:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004088:	6011      	str	r1, [r2, #0]
 800408a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	fa92 f1a2 	rbit	r1, r2
 8004094:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004098:	6011      	str	r1, [r2, #0]
  return result;
 800409a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	fab2 f282 	clz	r2, r2
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	f042 0220 	orr.w	r2, r2, #32
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	f002 021f 	and.w	r2, r2, #31
 80040b0:	2101      	movs	r1, #1
 80040b2:	fa01 f202 	lsl.w	r2, r1, r2
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d19e      	bne.n	8003ffa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040bc:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <HAL_RCC_OscConfig+0xc44>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040c4:	1d3b      	adds	r3, r7, #4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040ca:	1d3b      	adds	r3, r7, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	4925      	ldr	r1, [pc, #148]	; (8004168 <HAL_RCC_OscConfig+0xc44>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
 80040d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	fa93 f2a3 	rbit	r2, r3
 80040ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040f0:	601a      	str	r2, [r3, #0]
  return result;
 80040f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040f6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004102:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	461a      	mov	r2, r3
 800410a:	2301      	movs	r3, #1
 800410c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7fe f97f 	bl	8002410 <HAL_GetTick>
 8004112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004116:	e009      	b.n	800412c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004118:	f7fe f97a 	bl	8002410 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e0fc      	b.n	8004326 <HAL_RCC_OscConfig+0xe02>
 800412c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	fa93 f2a3 	rbit	r2, r3
 8004140:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004144:	601a      	str	r2, [r3, #0]
  return result;
 8004146:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800414a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800414c:	fab3 f383 	clz	r3, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d105      	bne.n	800416c <HAL_RCC_OscConfig+0xc48>
 8004160:	4b01      	ldr	r3, [pc, #4]	; (8004168 <HAL_RCC_OscConfig+0xc44>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	e01e      	b.n	80041a4 <HAL_RCC_OscConfig+0xc80>
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
 800416c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	fa93 f2a3 	rbit	r2, r3
 8004180:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800418a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	fa93 f2a3 	rbit	r2, r3
 800419a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	4b63      	ldr	r3, [pc, #396]	; (8004330 <HAL_RCC_OscConfig+0xe0c>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041ac:	6011      	str	r1, [r2, #0]
 80041ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	fa92 f1a2 	rbit	r1, r2
 80041b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80041bc:	6011      	str	r1, [r2, #0]
  return result;
 80041be:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	fab2 f282 	clz	r2, r2
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	f042 0220 	orr.w	r2, r2, #32
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	f002 021f 	and.w	r2, r2, #31
 80041d4:	2101      	movs	r1, #1
 80041d6:	fa01 f202 	lsl.w	r2, r1, r2
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d09b      	beq.n	8004118 <HAL_RCC_OscConfig+0xbf4>
 80041e0:	e0a0      	b.n	8004324 <HAL_RCC_OscConfig+0xe00>
 80041e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	fa93 f2a3 	rbit	r2, r3
 80041f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041fa:	601a      	str	r2, [r3, #0]
  return result;
 80041fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004200:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800420c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	461a      	mov	r2, r3
 8004214:	2300      	movs	r3, #0
 8004216:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fe f8fa 	bl	8002410 <HAL_GetTick>
 800421c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004220:	e009      	b.n	8004236 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004222:	f7fe f8f5 	bl	8002410 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e077      	b.n	8004326 <HAL_RCC_OscConfig+0xe02>
 8004236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800423a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800423e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	fa93 f2a3 	rbit	r2, r3
 800424a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800424e:	601a      	str	r2, [r3, #0]
  return result;
 8004250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004254:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	d102      	bne.n	8004270 <HAL_RCC_OscConfig+0xd4c>
 800426a:	4b31      	ldr	r3, [pc, #196]	; (8004330 <HAL_RCC_OscConfig+0xe0c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	e01b      	b.n	80042a8 <HAL_RCC_OscConfig+0xd84>
 8004270:	f107 0320 	add.w	r3, r7, #32
 8004274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	f107 0320 	add.w	r3, r7, #32
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	fa93 f2a3 	rbit	r2, r3
 8004284:	f107 031c 	add.w	r3, r7, #28
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f107 0318 	add.w	r3, r7, #24
 800428e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f107 0318 	add.w	r3, r7, #24
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f107 0314 	add.w	r3, r7, #20
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	4b22      	ldr	r3, [pc, #136]	; (8004330 <HAL_RCC_OscConfig+0xe0c>)
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f107 0210 	add.w	r2, r7, #16
 80042ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042b0:	6011      	str	r1, [r2, #0]
 80042b2:	f107 0210 	add.w	r2, r7, #16
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	fa92 f1a2 	rbit	r1, r2
 80042bc:	f107 020c 	add.w	r2, r7, #12
 80042c0:	6011      	str	r1, [r2, #0]
  return result;
 80042c2:	f107 020c 	add.w	r2, r7, #12
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	fab2 f282 	clz	r2, r2
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	f042 0220 	orr.w	r2, r2, #32
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	f002 021f 	and.w	r2, r2, #31
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f202 	lsl.w	r2, r1, r2
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d19e      	bne.n	8004222 <HAL_RCC_OscConfig+0xcfe>
 80042e4:	e01e      	b.n	8004324 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e018      	b.n	8004326 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <HAL_RCC_OscConfig+0xe0c>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004304:	1d3b      	adds	r3, r7, #4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	429a      	cmp	r2, r3
 800430c:	d108      	bne.n	8004320 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800430e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004312:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004316:	1d3b      	adds	r3, r7, #4
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000

08004334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b09e      	sub	sp, #120	; 0x78
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e162      	b.n	8004612 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800434c:	4b90      	ldr	r3, [pc, #576]	; (8004590 <HAL_RCC_ClockConfig+0x25c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d910      	bls.n	800437c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b8d      	ldr	r3, [pc, #564]	; (8004590 <HAL_RCC_ClockConfig+0x25c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 0207 	bic.w	r2, r3, #7
 8004362:	498b      	ldr	r1, [pc, #556]	; (8004590 <HAL_RCC_ClockConfig+0x25c>)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b89      	ldr	r3, [pc, #548]	; (8004590 <HAL_RCC_ClockConfig+0x25c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e14a      	b.n	8004612 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004388:	4b82      	ldr	r3, [pc, #520]	; (8004594 <HAL_RCC_ClockConfig+0x260>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	497f      	ldr	r1, [pc, #508]	; (8004594 <HAL_RCC_ClockConfig+0x260>)
 8004396:	4313      	orrs	r3, r2
 8004398:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 80dc 	beq.w	8004560 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d13c      	bne.n	800442a <HAL_RCC_ClockConfig+0xf6>
 80043b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043b8:	fa93 f3a3 	rbit	r3, r3
 80043bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c0:	fab3 f383 	clz	r3, r3
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d102      	bne.n	80043da <HAL_RCC_ClockConfig+0xa6>
 80043d4:	4b6f      	ldr	r3, [pc, #444]	; (8004594 <HAL_RCC_ClockConfig+0x260>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	e00f      	b.n	80043fa <HAL_RCC_ClockConfig+0xc6>
 80043da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	667b      	str	r3, [r7, #100]	; 0x64
 80043e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043ec:	663b      	str	r3, [r7, #96]	; 0x60
 80043ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f6:	4b67      	ldr	r3, [pc, #412]	; (8004594 <HAL_RCC_ClockConfig+0x260>)
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004402:	fa92 f2a2 	rbit	r2, r2
 8004406:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004408:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800440a:	fab2 f282 	clz	r2, r2
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	f042 0220 	orr.w	r2, r2, #32
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	f002 021f 	and.w	r2, r2, #31
 800441a:	2101      	movs	r1, #1
 800441c:	fa01 f202 	lsl.w	r2, r1, r2
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d17b      	bne.n	800451e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e0f3      	b.n	8004612 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d13c      	bne.n	80044ac <HAL_RCC_ClockConfig+0x178>
 8004432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004436:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800443a:	fa93 f3a3 	rbit	r3, r3
 800443e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d102      	bne.n	800445c <HAL_RCC_ClockConfig+0x128>
 8004456:	4b4f      	ldr	r3, [pc, #316]	; (8004594 <HAL_RCC_ClockConfig+0x260>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	e00f      	b.n	800447c <HAL_RCC_ClockConfig+0x148>
 800445c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004460:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	647b      	str	r3, [r7, #68]	; 0x44
 800446a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800446e:	643b      	str	r3, [r7, #64]	; 0x40
 8004470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004472:	fa93 f3a3 	rbit	r3, r3
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004478:	4b46      	ldr	r3, [pc, #280]	; (8004594 <HAL_RCC_ClockConfig+0x260>)
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004480:	63ba      	str	r2, [r7, #56]	; 0x38
 8004482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004484:	fa92 f2a2 	rbit	r2, r2
 8004488:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800448a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800448c:	fab2 f282 	clz	r2, r2
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	f042 0220 	orr.w	r2, r2, #32
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	f002 021f 	and.w	r2, r2, #31
 800449c:	2101      	movs	r1, #1
 800449e:	fa01 f202 	lsl.w	r2, r1, r2
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d13a      	bne.n	800451e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0b2      	b.n	8004612 <HAL_RCC_ClockConfig+0x2de>
 80044ac:	2302      	movs	r3, #2
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	fa93 f3a3 	rbit	r3, r3
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d102      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x1a0>
 80044ce:	4b31      	ldr	r3, [pc, #196]	; (8004594 <HAL_RCC_ClockConfig+0x260>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	e00d      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1bc>
 80044d4:	2302      	movs	r3, #2
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
 80044e0:	2302      	movs	r3, #2
 80044e2:	623b      	str	r3, [r7, #32]
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	fa93 f3a3 	rbit	r3, r3
 80044ea:	61fb      	str	r3, [r7, #28]
 80044ec:	4b29      	ldr	r3, [pc, #164]	; (8004594 <HAL_RCC_ClockConfig+0x260>)
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2202      	movs	r2, #2
 80044f2:	61ba      	str	r2, [r7, #24]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	fa92 f2a2 	rbit	r2, r2
 80044fa:	617a      	str	r2, [r7, #20]
  return result;
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	fab2 f282 	clz	r2, r2
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	f042 0220 	orr.w	r2, r2, #32
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	f002 021f 	and.w	r2, r2, #31
 800450e:	2101      	movs	r1, #1
 8004510:	fa01 f202 	lsl.w	r2, r1, r2
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e079      	b.n	8004612 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451e:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_RCC_ClockConfig+0x260>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f023 0203 	bic.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	491a      	ldr	r1, [pc, #104]	; (8004594 <HAL_RCC_ClockConfig+0x260>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004530:	f7fd ff6e 	bl	8002410 <HAL_GetTick>
 8004534:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	e00a      	b.n	800454e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004538:	f7fd ff6a 	bl	8002410 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	; 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e061      	b.n	8004612 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	4b11      	ldr	r3, [pc, #68]	; (8004594 <HAL_RCC_ClockConfig+0x260>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 020c 	and.w	r2, r3, #12
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	429a      	cmp	r2, r3
 800455e:	d1eb      	bne.n	8004538 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_ClockConfig+0x25c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d214      	bcs.n	8004598 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <HAL_RCC_ClockConfig+0x25c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 0207 	bic.w	r2, r3, #7
 8004576:	4906      	ldr	r1, [pc, #24]	; (8004590 <HAL_RCC_ClockConfig+0x25c>)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	4313      	orrs	r3, r2
 800457c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457e:	4b04      	ldr	r3, [pc, #16]	; (8004590 <HAL_RCC_ClockConfig+0x25c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d005      	beq.n	8004598 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e040      	b.n	8004612 <HAL_RCC_ClockConfig+0x2de>
 8004590:	40022000 	.word	0x40022000
 8004594:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a4:	4b1d      	ldr	r3, [pc, #116]	; (800461c <HAL_RCC_ClockConfig+0x2e8>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	491a      	ldr	r1, [pc, #104]	; (800461c <HAL_RCC_ClockConfig+0x2e8>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c2:	4b16      	ldr	r3, [pc, #88]	; (800461c <HAL_RCC_ClockConfig+0x2e8>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4912      	ldr	r1, [pc, #72]	; (800461c <HAL_RCC_ClockConfig+0x2e8>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80045d6:	f000 f829 	bl	800462c <HAL_RCC_GetSysClockFreq>
 80045da:	4601      	mov	r1, r0
 80045dc:	4b0f      	ldr	r3, [pc, #60]	; (800461c <HAL_RCC_ClockConfig+0x2e8>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e4:	22f0      	movs	r2, #240	; 0xf0
 80045e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	fa92 f2a2 	rbit	r2, r2
 80045ee:	60fa      	str	r2, [r7, #12]
  return result;
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	fab2 f282 	clz	r2, r2
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	40d3      	lsrs	r3, r2
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x2ec>)
 80045fc:	5cd3      	ldrb	r3, [r2, r3]
 80045fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004602:	4a08      	ldr	r2, [pc, #32]	; (8004624 <HAL_RCC_ClockConfig+0x2f0>)
 8004604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004606:	4b08      	ldr	r3, [pc, #32]	; (8004628 <HAL_RCC_ClockConfig+0x2f4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fd febc 	bl	8002388 <HAL_InitTick>
  
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3778      	adds	r7, #120	; 0x78
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000
 8004620:	0800ea78 	.word	0x0800ea78
 8004624:	2000000c 	.word	0x2000000c
 8004628:	20000010 	.word	0x20000010

0800462c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	b08b      	sub	sp, #44	; 0x2c
 8004630:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	2300      	movs	r3, #0
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004646:	4b29      	ldr	r3, [pc, #164]	; (80046ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b04      	cmp	r3, #4
 8004654:	d002      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x30>
 8004656:	2b08      	cmp	r3, #8
 8004658:	d003      	beq.n	8004662 <HAL_RCC_GetSysClockFreq+0x36>
 800465a:	e03c      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800465c:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800465e:	623b      	str	r3, [r7, #32]
      break;
 8004660:	e03c      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004668:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800466c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	fa92 f2a2 	rbit	r2, r2
 8004674:	607a      	str	r2, [r7, #4]
  return result;
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	fab2 f282 	clz	r2, r2
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	40d3      	lsrs	r3, r2
 8004680:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004682:	5cd3      	ldrb	r3, [r2, r3]
 8004684:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004686:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	220f      	movs	r2, #15
 8004690:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	fa92 f2a2 	rbit	r2, r2
 8004698:	60fa      	str	r2, [r7, #12]
  return result;
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	fab2 f282 	clz	r2, r2
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	40d3      	lsrs	r3, r2
 80046a4:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046a6:	5cd3      	ldrb	r3, [r2, r3]
 80046a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046b4:	4a0e      	ldr	r2, [pc, #56]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
 80046c4:	e004      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4a0c      	ldr	r2, [pc, #48]	; (80046fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	623b      	str	r3, [r7, #32]
      break;
 80046d4:	e002      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046d8:	623b      	str	r3, [r7, #32]
      break;
 80046da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046dc:	6a3b      	ldr	r3, [r7, #32]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	372c      	adds	r7, #44	; 0x2c
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000
 80046f0:	007a1200 	.word	0x007a1200
 80046f4:	0800ea90 	.word	0x0800ea90
 80046f8:	0800eaa0 	.word	0x0800eaa0
 80046fc:	003d0900 	.word	0x003d0900

08004700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004704:	4b03      	ldr	r3, [pc, #12]	; (8004714 <HAL_RCC_GetHCLKFreq+0x14>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	2000000c 	.word	0x2000000c

08004718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800471e:	f7ff ffef 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004722:	4601      	mov	r1, r0
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800472c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004730:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	fa92 f2a2 	rbit	r2, r2
 8004738:	603a      	str	r2, [r7, #0]
  return result;
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	fab2 f282 	clz	r2, r2
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	40d3      	lsrs	r3, r2
 8004744:	4a04      	ldr	r2, [pc, #16]	; (8004758 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004746:	5cd3      	ldrb	r3, [r2, r3]
 8004748:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40021000 	.word	0x40021000
 8004758:	0800ea88 	.word	0x0800ea88

0800475c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004762:	f7ff ffcd 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004766:	4601      	mov	r1, r0
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004770:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004774:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	fa92 f2a2 	rbit	r2, r2
 800477c:	603a      	str	r2, [r7, #0]
  return result;
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	fab2 f282 	clz	r2, r2
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	40d3      	lsrs	r3, r2
 8004788:	4a04      	ldr	r2, [pc, #16]	; (800479c <HAL_RCC_GetPCLK2Freq+0x40>)
 800478a:	5cd3      	ldrb	r3, [r2, r3]
 800478c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000
 800479c:	0800ea88 	.word	0x0800ea88

080047a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b092      	sub	sp, #72	; 0x48
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80cd 	beq.w	800495e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c4:	4b86      	ldr	r3, [pc, #536]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10e      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d0:	4b83      	ldr	r3, [pc, #524]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	4a82      	ldr	r2, [pc, #520]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047da:	61d3      	str	r3, [r2, #28]
 80047dc:	4b80      	ldr	r3, [pc, #512]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ee:	4b7d      	ldr	r3, [pc, #500]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d118      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047fa:	4b7a      	ldr	r3, [pc, #488]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a79      	ldr	r2, [pc, #484]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004804:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004806:	f7fd fe03 	bl	8002410 <HAL_GetTick>
 800480a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	e008      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480e:	f7fd fdff 	bl	8002410 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b64      	cmp	r3, #100	; 0x64
 800481a:	d901      	bls.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e0db      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004820:	4b70      	ldr	r3, [pc, #448]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800482c:	4b6c      	ldr	r3, [pc, #432]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004834:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d07d      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004846:	429a      	cmp	r2, r3
 8004848:	d076      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800484a:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004858:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004864:	fab3 f383 	clz	r3, r3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	4b5e      	ldr	r3, [pc, #376]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	461a      	mov	r2, r3
 8004874:	2301      	movs	r3, #1
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800487c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004888:	fab3 f383 	clz	r3, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	4b55      	ldr	r3, [pc, #340]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	461a      	mov	r2, r3
 8004898:	2300      	movs	r3, #0
 800489a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800489c:	4a50      	ldr	r2, [pc, #320]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800489e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d045      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fd fdb0 	bl	8002410 <HAL_GetTick>
 80048b0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b2:	e00a      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fd fdac 	bl	8002410 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e086      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80048ca:	2302      	movs	r3, #2
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
 80048d6:	2302      	movs	r3, #2
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	fa93 f3a3 	rbit	r3, r3
 80048e0:	61fb      	str	r3, [r7, #28]
  return result;
 80048e2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	fab3 f383 	clz	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f043 0302 	orr.w	r3, r3, #2
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d102      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80048f8:	4b39      	ldr	r3, [pc, #228]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	e007      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80048fe:	2302      	movs	r3, #2
 8004900:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	fa93 f3a3 	rbit	r3, r3
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	4b35      	ldr	r3, [pc, #212]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2202      	movs	r2, #2
 8004910:	613a      	str	r2, [r7, #16]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	fa92 f2a2 	rbit	r2, r2
 8004918:	60fa      	str	r2, [r7, #12]
  return result;
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	fab2 f282 	clz	r2, r2
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	f002 021f 	and.w	r2, r2, #31
 800492c:	2101      	movs	r1, #1
 800492e:	fa01 f202 	lsl.w	r2, r1, r2
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0bd      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004938:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4926      	ldr	r1, [pc, #152]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004946:	4313      	orrs	r3, r2
 8004948:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800494a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800494e:	2b01      	cmp	r3, #1
 8004950:	d105      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004952:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4a22      	ldr	r2, [pc, #136]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800496a:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	f023 0203 	bic.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	491a      	ldr	r1, [pc, #104]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004978:	4313      	orrs	r3, r2
 800497a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004988:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	f023 0210 	bic.w	r2, r3, #16
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4912      	ldr	r1, [pc, #72]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004996:	4313      	orrs	r3, r2
 8004998:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049a6:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	490b      	ldr	r1, [pc, #44]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	4903      	ldr	r1, [pc, #12]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3748      	adds	r7, #72	; 0x48
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40007000 	.word	0x40007000
 80049e8:	10908100 	.word	0x10908100

080049ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e049      	b.n	8004a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fd fb08 	bl	8002028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f000 faf4 	bl	8005018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d001      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e040      	b.n	8004b36 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_TIM_Base_Start_IT+0xa8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00e      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x58>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ade:	d009      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x58>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <HAL_TIM_Base_Start_IT+0xac>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x58>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <HAL_TIM_Base_Start_IT+0xb0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d115      	bne.n	8004b20 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <HAL_TIM_Base_Start_IT+0xb4>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b06      	cmp	r3, #6
 8004b04:	d015      	beq.n	8004b32 <HAL_TIM_Base_Start_IT+0x96>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0c:	d011      	beq.n	8004b32 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	e008      	b.n	8004b32 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e000      	b.n	8004b34 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	00010007 	.word	0x00010007

08004b54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e049      	b.n	8004bfa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f841 	bl	8004c02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 fa40 	bl	8005018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d109      	bne.n	8004c3c <HAL_TIM_PWM_Start+0x24>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e03c      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x9e>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d109      	bne.n	8004c56 <HAL_TIM_PWM_Start+0x3e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	bf14      	ite	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	2300      	moveq	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	e02f      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x9e>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d109      	bne.n	8004c70 <HAL_TIM_PWM_Start+0x58>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	bf14      	ite	ne
 8004c68:	2301      	movne	r3, #1
 8004c6a:	2300      	moveq	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	e022      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x9e>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b0c      	cmp	r3, #12
 8004c74:	d109      	bne.n	8004c8a <HAL_TIM_PWM_Start+0x72>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	bf14      	ite	ne
 8004c82:	2301      	movne	r3, #1
 8004c84:	2300      	moveq	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	e015      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x9e>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d109      	bne.n	8004ca4 <HAL_TIM_PWM_Start+0x8c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	bf14      	ite	ne
 8004c9c:	2301      	movne	r3, #1
 8004c9e:	2300      	moveq	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	e008      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x9e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	bf14      	ite	ne
 8004cb0:	2301      	movne	r3, #1
 8004cb2:	2300      	moveq	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e088      	b.n	8004dd0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_PWM_Start+0xb6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ccc:	e023      	b.n	8004d16 <HAL_TIM_PWM_Start+0xfe>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_PWM_Start+0xc6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cdc:	e01b      	b.n	8004d16 <HAL_TIM_PWM_Start+0xfe>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d104      	bne.n	8004cee <HAL_TIM_PWM_Start+0xd6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cec:	e013      	b.n	8004d16 <HAL_TIM_PWM_Start+0xfe>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b0c      	cmp	r3, #12
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_PWM_Start+0xe6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cfc:	e00b      	b.n	8004d16 <HAL_TIM_PWM_Start+0xfe>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_PWM_Start+0xf6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d0c:	e003      	b.n	8004d16 <HAL_TIM_PWM_Start+0xfe>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fc98 	bl	8005654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2b      	ldr	r2, [pc, #172]	; (8004dd8 <HAL_TIM_PWM_Start+0x1c0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00e      	beq.n	8004d4c <HAL_TIM_PWM_Start+0x134>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a2a      	ldr	r2, [pc, #168]	; (8004ddc <HAL_TIM_PWM_Start+0x1c4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d009      	beq.n	8004d4c <HAL_TIM_PWM_Start+0x134>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a28      	ldr	r2, [pc, #160]	; (8004de0 <HAL_TIM_PWM_Start+0x1c8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <HAL_TIM_PWM_Start+0x134>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a27      	ldr	r2, [pc, #156]	; (8004de4 <HAL_TIM_PWM_Start+0x1cc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIM_PWM_Start+0x138>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <HAL_TIM_PWM_Start+0x13a>
 8004d50:	2300      	movs	r3, #0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d007      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1b      	ldr	r2, [pc, #108]	; (8004dd8 <HAL_TIM_PWM_Start+0x1c0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00e      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x176>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d78:	d009      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x176>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1a      	ldr	r2, [pc, #104]	; (8004de8 <HAL_TIM_PWM_Start+0x1d0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d004      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x176>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <HAL_TIM_PWM_Start+0x1c4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d115      	bne.n	8004dba <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	4b15      	ldr	r3, [pc, #84]	; (8004dec <HAL_TIM_PWM_Start+0x1d4>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b06      	cmp	r3, #6
 8004d9e:	d015      	beq.n	8004dcc <HAL_TIM_PWM_Start+0x1b4>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da6:	d011      	beq.n	8004dcc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db8:	e008      	b.n	8004dcc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e000      	b.n	8004dce <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400
 8004de4:	40014800 	.word	0x40014800
 8004de8:	40000400 	.word	0x40000400
 8004dec:	00010007 	.word	0x00010007

08004df0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e0ff      	b.n	800500e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b14      	cmp	r3, #20
 8004e1a:	f200 80f0 	bhi.w	8004ffe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004e79 	.word	0x08004e79
 8004e28:	08004fff 	.word	0x08004fff
 8004e2c:	08004fff 	.word	0x08004fff
 8004e30:	08004fff 	.word	0x08004fff
 8004e34:	08004eb9 	.word	0x08004eb9
 8004e38:	08004fff 	.word	0x08004fff
 8004e3c:	08004fff 	.word	0x08004fff
 8004e40:	08004fff 	.word	0x08004fff
 8004e44:	08004efb 	.word	0x08004efb
 8004e48:	08004fff 	.word	0x08004fff
 8004e4c:	08004fff 	.word	0x08004fff
 8004e50:	08004fff 	.word	0x08004fff
 8004e54:	08004f3b 	.word	0x08004f3b
 8004e58:	08004fff 	.word	0x08004fff
 8004e5c:	08004fff 	.word	0x08004fff
 8004e60:	08004fff 	.word	0x08004fff
 8004e64:	08004f7d 	.word	0x08004f7d
 8004e68:	08004fff 	.word	0x08004fff
 8004e6c:	08004fff 	.word	0x08004fff
 8004e70:	08004fff 	.word	0x08004fff
 8004e74:	08004fbd 	.word	0x08004fbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f942 	bl	8005108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0208 	orr.w	r2, r2, #8
 8004e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0204 	bic.w	r2, r2, #4
 8004ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6999      	ldr	r1, [r3, #24]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	619a      	str	r2, [r3, #24]
      break;
 8004eb6:	e0a5      	b.n	8005004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 f9a8 	bl	8005214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6999      	ldr	r1, [r3, #24]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	021a      	lsls	r2, r3, #8
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	619a      	str	r2, [r3, #24]
      break;
 8004ef8:	e084      	b.n	8005004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fa07 	bl	8005314 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0208 	orr.w	r2, r2, #8
 8004f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0204 	bic.w	r2, r2, #4
 8004f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69d9      	ldr	r1, [r3, #28]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	61da      	str	r2, [r3, #28]
      break;
 8004f38:	e064      	b.n	8005004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fa65 	bl	8005410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69da      	ldr	r2, [r3, #28]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69d9      	ldr	r1, [r3, #28]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	021a      	lsls	r2, r3, #8
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	61da      	str	r2, [r3, #28]
      break;
 8004f7a:	e043      	b.n	8005004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 faa8 	bl	80054d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0208 	orr.w	r2, r2, #8
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0204 	bic.w	r2, r2, #4
 8004fa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fba:	e023      	b.n	8005004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fae6 	bl	8005594 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	021a      	lsls	r2, r3, #8
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ffc:	e002      	b.n	8005004 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	75fb      	strb	r3, [r7, #23]
      break;
 8005002:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800500c:	7dfb      	ldrb	r3, [r7, #23]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop

08005018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a32      	ldr	r2, [pc, #200]	; (80050f4 <TIM_Base_SetConfig+0xdc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d007      	beq.n	8005040 <TIM_Base_SetConfig+0x28>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005036:	d003      	beq.n	8005040 <TIM_Base_SetConfig+0x28>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a2f      	ldr	r2, [pc, #188]	; (80050f8 <TIM_Base_SetConfig+0xe0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d108      	bne.n	8005052 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <TIM_Base_SetConfig+0xdc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <TIM_Base_SetConfig+0x6a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005060:	d00f      	beq.n	8005082 <TIM_Base_SetConfig+0x6a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a24      	ldr	r2, [pc, #144]	; (80050f8 <TIM_Base_SetConfig+0xe0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00b      	beq.n	8005082 <TIM_Base_SetConfig+0x6a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a23      	ldr	r2, [pc, #140]	; (80050fc <TIM_Base_SetConfig+0xe4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <TIM_Base_SetConfig+0x6a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a22      	ldr	r2, [pc, #136]	; (8005100 <TIM_Base_SetConfig+0xe8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d003      	beq.n	8005082 <TIM_Base_SetConfig+0x6a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a21      	ldr	r2, [pc, #132]	; (8005104 <TIM_Base_SetConfig+0xec>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d108      	bne.n	8005094 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <TIM_Base_SetConfig+0xdc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <TIM_Base_SetConfig+0xc0>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a0e      	ldr	r2, [pc, #56]	; (80050fc <TIM_Base_SetConfig+0xe4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_Base_SetConfig+0xc0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a0d      	ldr	r2, [pc, #52]	; (8005100 <TIM_Base_SetConfig+0xe8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_Base_SetConfig+0xc0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a0c      	ldr	r2, [pc, #48]	; (8005104 <TIM_Base_SetConfig+0xec>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d103      	bne.n	80050e0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	615a      	str	r2, [r3, #20]
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40014000 	.word	0x40014000
 8005100:	40014400 	.word	0x40014400
 8005104:	40014800 	.word	0x40014800

08005108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 0201 	bic.w	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0303 	bic.w	r3, r3, #3
 8005142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 0302 	bic.w	r3, r3, #2
 8005154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a28      	ldr	r2, [pc, #160]	; (8005204 <TIM_OC1_SetConfig+0xfc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00b      	beq.n	8005180 <TIM_OC1_SetConfig+0x78>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a27      	ldr	r2, [pc, #156]	; (8005208 <TIM_OC1_SetConfig+0x100>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d007      	beq.n	8005180 <TIM_OC1_SetConfig+0x78>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a26      	ldr	r2, [pc, #152]	; (800520c <TIM_OC1_SetConfig+0x104>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_OC1_SetConfig+0x78>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a25      	ldr	r2, [pc, #148]	; (8005210 <TIM_OC1_SetConfig+0x108>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10c      	bne.n	800519a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0308 	bic.w	r3, r3, #8
 8005186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f023 0304 	bic.w	r3, r3, #4
 8005198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a19      	ldr	r2, [pc, #100]	; (8005204 <TIM_OC1_SetConfig+0xfc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00b      	beq.n	80051ba <TIM_OC1_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a18      	ldr	r2, [pc, #96]	; (8005208 <TIM_OC1_SetConfig+0x100>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <TIM_OC1_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a17      	ldr	r2, [pc, #92]	; (800520c <TIM_OC1_SetConfig+0x104>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_OC1_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a16      	ldr	r2, [pc, #88]	; (8005210 <TIM_OC1_SetConfig+0x108>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d111      	bne.n	80051de <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	621a      	str	r2, [r3, #32]
}
 80051f8:	bf00      	nop
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40014000 	.word	0x40014000
 800520c:	40014400 	.word	0x40014400
 8005210:	40014800 	.word	0x40014800

08005214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0210 	bic.w	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0320 	bic.w	r3, r3, #32
 8005262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a24      	ldr	r2, [pc, #144]	; (8005304 <TIM_OC2_SetConfig+0xf0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d10d      	bne.n	8005294 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800527e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1b      	ldr	r2, [pc, #108]	; (8005304 <TIM_OC2_SetConfig+0xf0>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00b      	beq.n	80052b4 <TIM_OC2_SetConfig+0xa0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1a      	ldr	r2, [pc, #104]	; (8005308 <TIM_OC2_SetConfig+0xf4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d007      	beq.n	80052b4 <TIM_OC2_SetConfig+0xa0>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a19      	ldr	r2, [pc, #100]	; (800530c <TIM_OC2_SetConfig+0xf8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_OC2_SetConfig+0xa0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a18      	ldr	r2, [pc, #96]	; (8005310 <TIM_OC2_SetConfig+0xfc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d113      	bne.n	80052dc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ba:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052c2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40014000 	.word	0x40014000
 800530c:	40014400 	.word	0x40014400
 8005310:	40014800 	.word	0x40014800

08005314 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a23      	ldr	r2, [pc, #140]	; (8005400 <TIM_OC3_SetConfig+0xec>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d10d      	bne.n	8005392 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800537c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005390:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1a      	ldr	r2, [pc, #104]	; (8005400 <TIM_OC3_SetConfig+0xec>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00b      	beq.n	80053b2 <TIM_OC3_SetConfig+0x9e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a19      	ldr	r2, [pc, #100]	; (8005404 <TIM_OC3_SetConfig+0xf0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <TIM_OC3_SetConfig+0x9e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a18      	ldr	r2, [pc, #96]	; (8005408 <TIM_OC3_SetConfig+0xf4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_OC3_SetConfig+0x9e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a17      	ldr	r2, [pc, #92]	; (800540c <TIM_OC3_SetConfig+0xf8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d113      	bne.n	80053da <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40014000 	.word	0x40014000
 8005408:	40014400 	.word	0x40014400
 800540c:	40014800 	.word	0x40014800

08005410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800543e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800545e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	031b      	lsls	r3, r3, #12
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a16      	ldr	r2, [pc, #88]	; (80054c8 <TIM_OC4_SetConfig+0xb8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00b      	beq.n	800548c <TIM_OC4_SetConfig+0x7c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <TIM_OC4_SetConfig+0xbc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <TIM_OC4_SetConfig+0x7c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <TIM_OC4_SetConfig+0xc0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_OC4_SetConfig+0x7c>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <TIM_OC4_SetConfig+0xc4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d109      	bne.n	80054a0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	019b      	lsls	r3, r3, #6
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800

080054d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800551c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	041b      	lsls	r3, r3, #16
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a15      	ldr	r2, [pc, #84]	; (8005584 <TIM_OC5_SetConfig+0xac>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00b      	beq.n	800554a <TIM_OC5_SetConfig+0x72>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a14      	ldr	r2, [pc, #80]	; (8005588 <TIM_OC5_SetConfig+0xb0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d007      	beq.n	800554a <TIM_OC5_SetConfig+0x72>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a13      	ldr	r2, [pc, #76]	; (800558c <TIM_OC5_SetConfig+0xb4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC5_SetConfig+0x72>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a12      	ldr	r2, [pc, #72]	; (8005590 <TIM_OC5_SetConfig+0xb8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d109      	bne.n	800555e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005550:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	621a      	str	r2, [r3, #32]
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40014000 	.word	0x40014000
 800558c:	40014400 	.word	0x40014400
 8005590:	40014800 	.word	0x40014800

08005594 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	051b      	lsls	r3, r3, #20
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a16      	ldr	r2, [pc, #88]	; (8005644 <TIM_OC6_SetConfig+0xb0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_OC6_SetConfig+0x74>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a15      	ldr	r2, [pc, #84]	; (8005648 <TIM_OC6_SetConfig+0xb4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_OC6_SetConfig+0x74>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a14      	ldr	r2, [pc, #80]	; (800564c <TIM_OC6_SetConfig+0xb8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC6_SetConfig+0x74>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a13      	ldr	r2, [pc, #76]	; (8005650 <TIM_OC6_SetConfig+0xbc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d109      	bne.n	800561c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800560e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40014000 	.word	0x40014000
 800564c:	40014400 	.word	0x40014400
 8005650:	40014800 	.word	0x40014800

08005654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2201      	movs	r2, #1
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1a      	ldr	r2, [r3, #32]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	43db      	mvns	r3, r3
 8005676:	401a      	ands	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	431a      	orrs	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e060      	b.n	800577e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	041b      	lsls	r3, r3, #16
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a14      	ldr	r2, [pc, #80]	; (800578c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d115      	bne.n	800576c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	051b      	lsls	r3, r3, #20
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40012c00 	.word	0x40012c00

08005790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e040      	b.n	8005824 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fc fcc8 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2224      	movs	r2, #36	; 0x24
 80057bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0201 	bic.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fb7a 	bl	8005ec8 <UART_SetConfig>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e022      	b.n	8005824 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fca6 	bl	8006138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800580a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fd2d 	bl	800627c <UART_CheckIdleState>
 8005822:	4603      	mov	r3, r0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	; 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	4613      	mov	r3, r2
 8005838:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583e:	2b20      	cmp	r3, #32
 8005840:	d13d      	bne.n	80058be <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_UART_Receive_IT+0x22>
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e036      	b.n	80058c0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_UART_Receive_IT+0x34>
 800585c:	2302      	movs	r3, #2
 800585e:	e02f      	b.n	80058c0 <HAL_UART_Receive_IT+0x94>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d018      	beq.n	80058ae <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	613b      	str	r3, [r7, #16]
   return(result);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	69f9      	ldr	r1, [r7, #28]
 80058a0:	6a3a      	ldr	r2, [r7, #32]
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e6      	bne.n	800587c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	461a      	mov	r2, r3
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fdef 	bl	8006498 <UART_Start_Receive_IT>
 80058ba:	4603      	mov	r3, r0
 80058bc:	e000      	b.n	80058c0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058be:	2302      	movs	r3, #2
  }
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3728      	adds	r7, #40	; 0x28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b0ba      	sub	sp, #232	; 0xe8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80058f6:	4013      	ands	r3, r2
 80058f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d115      	bne.n	8005930 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00f      	beq.n	8005930 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d009      	beq.n	8005930 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 82a4 	beq.w	8005e6e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
      }
      return;
 800592e:	e29e      	b.n	8005e6e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8117 	beq.w	8005b68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800593a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005946:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800594a:	4b85      	ldr	r3, [pc, #532]	; (8005b60 <HAL_UART_IRQHandler+0x298>)
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 810a 	beq.w	8005b68 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d011      	beq.n	8005984 <HAL_UART_IRQHandler+0xbc>
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800597a:	f043 0201 	orr.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d011      	beq.n	80059b4 <HAL_UART_IRQHandler+0xec>
 8005990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2202      	movs	r2, #2
 80059a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059aa:	f043 0204 	orr.w	r2, r3, #4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d011      	beq.n	80059e4 <HAL_UART_IRQHandler+0x11c>
 80059c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2204      	movs	r2, #4
 80059d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059da:	f043 0202 	orr.w	r2, r3, #2
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d017      	beq.n	8005a20 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00b      	beq.n	8005a20 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a16:	f043 0208 	orr.w	r2, r3, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <HAL_UART_IRQHandler+0x18a>
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00c      	beq.n	8005a52 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 820a 	beq.w	8005e72 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00d      	beq.n	8005a86 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d005      	beq.n	8005aaa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d04f      	beq.n	8005b4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fda0 	bl	80065f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d141      	bne.n	8005b42 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005af6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1d9      	bne.n	8005abe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d013      	beq.n	8005b3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <HAL_UART_IRQHandler+0x29c>)
 8005b18:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fc fe1e 	bl	8002760 <HAL_DMA_Abort_IT>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d017      	beq.n	8005b5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005b34:	4610      	mov	r0, r2
 8005b36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	e00f      	b.n	8005b5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9ae 	bl	8005e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e00b      	b.n	8005b5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9aa 	bl	8005e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e007      	b.n	8005b5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9a6 	bl	8005e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005b58:	e18b      	b.n	8005e72 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5a:	bf00      	nop
    return;
 8005b5c:	e189      	b.n	8005e72 <HAL_UART_IRQHandler+0x5aa>
 8005b5e:	bf00      	nop
 8005b60:	04000120 	.word	0x04000120
 8005b64:	080066b7 	.word	0x080066b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	f040 8143 	bne.w	8005df8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 813c 	beq.w	8005df8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8135 	beq.w	8005df8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2210      	movs	r2, #16
 8005b94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b40      	cmp	r3, #64	; 0x40
 8005ba2:	f040 80b1 	bne.w	8005d08 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bb2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 815d 	beq.w	8005e76 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	f080 8155 	bcs.w	8005e76 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	f000 8085 	beq.w	8005cec <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c10:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1da      	bne.n	8005be2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c5c:	e841 2300 	strex	r3, r2, [r1]
 8005c60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e1      	bne.n	8005c2c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c72:	e853 3f00 	ldrex	r3, [r3]
 8005c76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e3      	bne.n	8005c68 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cbc:	f023 0310 	bic.w	r3, r3, #16
 8005cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cce:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cd0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e4      	bne.n	8005cac <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fc fd01 	bl	80026ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f8d5 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d06:	e0b6      	b.n	8005e76 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80a8 	beq.w	8005e7a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005d2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 80a3 	beq.w	8005e7a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d56:	647b      	str	r3, [r7, #68]	; 0x44
 8005d58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e4      	bne.n	8005d34 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3308      	adds	r3, #8
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	623b      	str	r3, [r7, #32]
   return(result);
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	f023 0301 	bic.w	r3, r3, #1
 8005d80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e3      	bne.n	8005d6a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f023 0310 	bic.w	r3, r3, #16
 8005dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	69b9      	ldr	r1, [r7, #24]
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	617b      	str	r3, [r7, #20]
   return(result);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e4      	bne.n	8005db4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f85d 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005df6:	e040      	b.n	8005e7a <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00e      	beq.n	8005e22 <HAL_UART_IRQHandler+0x55a>
 8005e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d008      	beq.n	8005e22 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fde7 	bl	80069ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e20:	e02e      	b.n	8005e80 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00e      	beq.n	8005e4c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d008      	beq.n	8005e4c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d01d      	beq.n	8005e7e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
    }
    return;
 8005e4a:	e018      	b.n	8005e7e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d013      	beq.n	8005e80 <HAL_UART_IRQHandler+0x5b8>
 8005e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00d      	beq.n	8005e80 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fc3c 	bl	80066e2 <UART_EndTransmit_IT>
    return;
 8005e6a:	bf00      	nop
 8005e6c:	e008      	b.n	8005e80 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005e6e:	bf00      	nop
 8005e70:	e006      	b.n	8005e80 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005e72:	bf00      	nop
 8005e74:	e004      	b.n	8005e80 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005e76:	bf00      	nop
 8005e78:	e002      	b.n	8005e80 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005e7a:	bf00      	nop
 8005e7c:	e000      	b.n	8005e80 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005e7e:	bf00      	nop
  }

}
 8005e80:	37e8      	adds	r7, #232	; 0xe8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop

08005e88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	4b8b      	ldr	r3, [pc, #556]	; (8006120 <UART_SetConfig+0x258>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	6979      	ldr	r1, [r7, #20]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a79      	ldr	r2, [pc, #484]	; (8006124 <UART_SetConfig+0x25c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d121      	bne.n	8005f88 <UART_SetConfig+0xc0>
 8005f44:	4b78      	ldr	r3, [pc, #480]	; (8006128 <UART_SetConfig+0x260>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d817      	bhi.n	8005f80 <UART_SetConfig+0xb8>
 8005f50:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <UART_SetConfig+0x90>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08005f69 	.word	0x08005f69
 8005f5c:	08005f75 	.word	0x08005f75
 8005f60:	08005f7b 	.word	0x08005f7b
 8005f64:	08005f6f 	.word	0x08005f6f
 8005f68:	2300      	movs	r3, #0
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e01e      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	77fb      	strb	r3, [r7, #31]
 8005f72:	e01b      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f74:	2304      	movs	r3, #4
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e018      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	77fb      	strb	r3, [r7, #31]
 8005f7e:	e015      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f80:	2310      	movs	r3, #16
 8005f82:	77fb      	strb	r3, [r7, #31]
 8005f84:	bf00      	nop
 8005f86:	e011      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a67      	ldr	r2, [pc, #412]	; (800612c <UART_SetConfig+0x264>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d102      	bne.n	8005f98 <UART_SetConfig+0xd0>
 8005f92:	2300      	movs	r3, #0
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	e009      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a64      	ldr	r2, [pc, #400]	; (8006130 <UART_SetConfig+0x268>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d102      	bne.n	8005fa8 <UART_SetConfig+0xe0>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e001      	b.n	8005fac <UART_SetConfig+0xe4>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb4:	d15c      	bne.n	8006070 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8005fb6:	7ffb      	ldrb	r3, [r7, #31]
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d828      	bhi.n	800600e <UART_SetConfig+0x146>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0xfc>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fe9 	.word	0x08005fe9
 8005fc8:	08005ff1 	.word	0x08005ff1
 8005fcc:	08005ff9 	.word	0x08005ff9
 8005fd0:	0800600f 	.word	0x0800600f
 8005fd4:	08005fff 	.word	0x08005fff
 8005fd8:	0800600f 	.word	0x0800600f
 8005fdc:	0800600f 	.word	0x0800600f
 8005fe0:	0800600f 	.word	0x0800600f
 8005fe4:	08006007 	.word	0x08006007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe8:	f7fe fb96 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8005fec:	61b8      	str	r0, [r7, #24]
        break;
 8005fee:	e013      	b.n	8006018 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff0:	f7fe fbb4 	bl	800475c <HAL_RCC_GetPCLK2Freq>
 8005ff4:	61b8      	str	r0, [r7, #24]
        break;
 8005ff6:	e00f      	b.n	8006018 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ff8:	4b4e      	ldr	r3, [pc, #312]	; (8006134 <UART_SetConfig+0x26c>)
 8005ffa:	61bb      	str	r3, [r7, #24]
        break;
 8005ffc:	e00c      	b.n	8006018 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ffe:	f7fe fb15 	bl	800462c <HAL_RCC_GetSysClockFreq>
 8006002:	61b8      	str	r0, [r7, #24]
        break;
 8006004:	e008      	b.n	8006018 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600a:	61bb      	str	r3, [r7, #24]
        break;
 800600c:	e004      	b.n	8006018 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	77bb      	strb	r3, [r7, #30]
        break;
 8006016:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d074      	beq.n	8006108 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	005a      	lsls	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	441a      	add	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006032:	b29b      	uxth	r3, r3
 8006034:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b0f      	cmp	r3, #15
 800603a:	d916      	bls.n	800606a <UART_SetConfig+0x1a2>
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006042:	d212      	bcs.n	800606a <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	b29b      	uxth	r3, r3
 8006048:	f023 030f 	bic.w	r3, r3, #15
 800604c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	085b      	lsrs	r3, r3, #1
 8006052:	b29b      	uxth	r3, r3
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	b29a      	uxth	r2, r3
 800605a:	89fb      	ldrh	r3, [r7, #14]
 800605c:	4313      	orrs	r3, r2
 800605e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	89fa      	ldrh	r2, [r7, #14]
 8006066:	60da      	str	r2, [r3, #12]
 8006068:	e04e      	b.n	8006108 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	77bb      	strb	r3, [r7, #30]
 800606e:	e04b      	b.n	8006108 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006070:	7ffb      	ldrb	r3, [r7, #31]
 8006072:	2b08      	cmp	r3, #8
 8006074:	d827      	bhi.n	80060c6 <UART_SetConfig+0x1fe>
 8006076:	a201      	add	r2, pc, #4	; (adr r2, 800607c <UART_SetConfig+0x1b4>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	080060a1 	.word	0x080060a1
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060b1 	.word	0x080060b1
 8006088:	080060c7 	.word	0x080060c7
 800608c:	080060b7 	.word	0x080060b7
 8006090:	080060c7 	.word	0x080060c7
 8006094:	080060c7 	.word	0x080060c7
 8006098:	080060c7 	.word	0x080060c7
 800609c:	080060bf 	.word	0x080060bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7fe fb3a 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 80060a4:	61b8      	str	r0, [r7, #24]
        break;
 80060a6:	e013      	b.n	80060d0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a8:	f7fe fb58 	bl	800475c <HAL_RCC_GetPCLK2Freq>
 80060ac:	61b8      	str	r0, [r7, #24]
        break;
 80060ae:	e00f      	b.n	80060d0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b0:	4b20      	ldr	r3, [pc, #128]	; (8006134 <UART_SetConfig+0x26c>)
 80060b2:	61bb      	str	r3, [r7, #24]
        break;
 80060b4:	e00c      	b.n	80060d0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b6:	f7fe fab9 	bl	800462c <HAL_RCC_GetSysClockFreq>
 80060ba:	61b8      	str	r0, [r7, #24]
        break;
 80060bc:	e008      	b.n	80060d0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c2:	61bb      	str	r3, [r7, #24]
        break;
 80060c4:	e004      	b.n	80060d0 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	77bb      	strb	r3, [r7, #30]
        break;
 80060ce:	bf00      	nop
    }

    if (pclk != 0U)
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d018      	beq.n	8006108 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	085a      	lsrs	r2, r3, #1
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	441a      	add	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	2b0f      	cmp	r3, #15
 80060f0:	d908      	bls.n	8006104 <UART_SetConfig+0x23c>
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f8:	d204      	bcs.n	8006104 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	e001      	b.n	8006108 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006114:	7fbb      	ldrb	r3, [r7, #30]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	efff69f3 	.word	0xefff69f3
 8006124:	40013800 	.word	0x40013800
 8006128:	40021000 	.word	0x40021000
 800612c:	40004400 	.word	0x40004400
 8006130:	40004800 	.word	0x40004800
 8006134:	007a1200 	.word	0x007a1200

08006138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01a      	beq.n	800624e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006236:	d10a      	bne.n	800624e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  }
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af02      	add	r7, sp, #8
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800628c:	f7fc f8c0 	bl	8002410 <HAL_GetTick>
 8006290:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b08      	cmp	r3, #8
 800629e:	d10e      	bne.n	80062be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f82d 	bl	800630e <UART_WaitOnFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e023      	b.n	8006306 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d10e      	bne.n	80062ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f817 	bl	800630e <UART_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e00d      	b.n	8006306 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b09c      	sub	sp, #112	; 0x70
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	4613      	mov	r3, r2
 800631c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631e:	e0a5      	b.n	800646c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006326:	f000 80a1 	beq.w	800646c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632a:	f7fc f871 	bl	8002410 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006336:	429a      	cmp	r2, r3
 8006338:	d302      	bcc.n	8006340 <UART_WaitOnFlagUntilTimeout+0x32>
 800633a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800633c:	2b00      	cmp	r3, #0
 800633e:	d13e      	bne.n	80063be <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800634e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006350:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006354:	667b      	str	r3, [r7, #100]	; 0x64
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006360:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006364:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800636c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e6      	bne.n	8006340 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3308      	adds	r3, #8
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	663b      	str	r3, [r7, #96]	; 0x60
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006392:	64ba      	str	r2, [r7, #72]	; 0x48
 8006394:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2220      	movs	r2, #32
 80063aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e067      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d04f      	beq.n	800646c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063da:	d147      	bne.n	800646c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006404:	637b      	str	r3, [r7, #52]	; 0x34
 8006406:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800640a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e6      	bne.n	80063e6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3308      	adds	r3, #8
 800641e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	613b      	str	r3, [r7, #16]
   return(result);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3308      	adds	r3, #8
 8006436:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006438:	623a      	str	r2, [r7, #32]
 800643a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	69f9      	ldr	r1, [r7, #28]
 800643e:	6a3a      	ldr	r2, [r7, #32]
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	61bb      	str	r3, [r7, #24]
   return(result);
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e5      	bne.n	8006418 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e010      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4013      	ands	r3, r2
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	429a      	cmp	r2, r3
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	429a      	cmp	r2, r3
 8006488:	f43f af4a 	beq.w	8006320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3770      	adds	r7, #112	; 0x70
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006498:	b480      	push	{r7}
 800649a:	b091      	sub	sp, #68	; 0x44
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	88fa      	ldrh	r2, [r7, #6]
 80064b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ca:	d10e      	bne.n	80064ea <UART_Start_Receive_IT+0x52>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <UART_Start_Receive_IT+0x48>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064de:	e02d      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	22ff      	movs	r2, #255	; 0xff
 80064e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064e8:	e028      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10d      	bne.n	800650e <UART_Start_Receive_IT+0x76>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <UART_Start_Receive_IT+0x6c>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	22ff      	movs	r2, #255	; 0xff
 80064fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006502:	e01b      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	227f      	movs	r2, #127	; 0x7f
 8006508:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800650c:	e016      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006516:	d10d      	bne.n	8006534 <UART_Start_Receive_IT+0x9c>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <UART_Start_Receive_IT+0x92>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	227f      	movs	r2, #127	; 0x7f
 8006524:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006528:	e008      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	223f      	movs	r2, #63	; 0x3f
 800652e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006532:	e003      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2222      	movs	r2, #34	; 0x22
 8006548:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	f043 0301 	orr.w	r3, r3, #1
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800656a:	637a      	str	r2, [r7, #52]	; 0x34
 800656c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e5      	bne.n	800654a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006586:	d107      	bne.n	8006598 <UART_Start_Receive_IT+0x100>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d103      	bne.n	8006598 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <UART_Start_Receive_IT+0x150>)
 8006594:	665a      	str	r2, [r3, #100]	; 0x64
 8006596:	e002      	b.n	800659e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4a14      	ldr	r2, [pc, #80]	; (80065ec <UART_Start_Receive_IT+0x154>)
 800659c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	613b      	str	r3, [r7, #16]
   return(result);
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80065ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	623b      	str	r3, [r7, #32]
 80065c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	69f9      	ldr	r1, [r7, #28]
 80065ca:	6a3a      	ldr	r2, [r7, #32]
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e6      	bne.n	80065a6 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3744      	adds	r7, #68	; 0x44
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	08006893 	.word	0x08006893
 80065ec:	08006737 	.word	0x08006737

080065f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b095      	sub	sp, #84	; 0x54
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800660c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006616:	643b      	str	r3, [r7, #64]	; 0x40
 8006618:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800661c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e6      	bne.n	80065f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3308      	adds	r3, #8
 8006630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	61fb      	str	r3, [r7, #28]
   return(result);
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	64bb      	str	r3, [r7, #72]	; 0x48
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800664a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800664c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e5      	bne.n	800662a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006662:	2b01      	cmp	r3, #1
 8006664:	d118      	bne.n	8006698 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	60bb      	str	r3, [r7, #8]
   return(result);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f023 0310 	bic.w	r3, r3, #16
 800667a:	647b      	str	r3, [r7, #68]	; 0x44
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6979      	ldr	r1, [r7, #20]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	613b      	str	r3, [r7, #16]
   return(result);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e6      	bne.n	8006666 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80066aa:	bf00      	nop
 80066ac:	3754      	adds	r7, #84	; 0x54
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7ff fbe1 	bl	8005e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066da:	bf00      	nop
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b088      	sub	sp, #32
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6979      	ldr	r1, [r7, #20]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	613b      	str	r3, [r7, #16]
   return(result);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e6      	bne.n	80066ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff fbad 	bl	8005e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800672e:	bf00      	nop
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b096      	sub	sp, #88	; 0x58
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006744:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800674c:	2b22      	cmp	r3, #34	; 0x22
 800674e:	f040 8094 	bne.w	800687a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006758:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800675c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006760:	b2d9      	uxtb	r1, r3
 8006762:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006766:	b2da      	uxtb	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676c:	400a      	ands	r2, r1
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d177      	bne.n	800688a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067ae:	653b      	str	r3, [r7, #80]	; 0x50
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b8:	647b      	str	r3, [r7, #68]	; 0x44
 80067ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e6      	bne.n	800679a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3308      	adds	r3, #8
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	623b      	str	r3, [r7, #32]
   return(result);
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	f023 0301 	bic.w	r3, r3, #1
 80067e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3308      	adds	r3, #8
 80067ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067ec:	633a      	str	r2, [r7, #48]	; 0x30
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e5      	bne.n	80067cc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006810:	2b01      	cmp	r3, #1
 8006812:	d12e      	bne.n	8006872 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	60fb      	str	r3, [r7, #12]
   return(result);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0310 	bic.w	r3, r3, #16
 800682e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	69b9      	ldr	r1, [r7, #24]
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	617b      	str	r3, [r7, #20]
   return(result);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	f003 0310 	and.w	r3, r3, #16
 8006856:	2b10      	cmp	r3, #16
 8006858:	d103      	bne.n	8006862 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2210      	movs	r2, #16
 8006860:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff fb20 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006870:	e00b      	b.n	800688a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fa ffca 	bl	800180c <HAL_UART_RxCpltCallback>
}
 8006878:	e007      	b.n	800688a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0208 	orr.w	r2, r2, #8
 8006888:	619a      	str	r2, [r3, #24]
}
 800688a:	bf00      	nop
 800688c:	3758      	adds	r7, #88	; 0x58
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b096      	sub	sp, #88	; 0x58
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a8:	2b22      	cmp	r3, #34	; 0x22
 80068aa:	f040 8094 	bne.w	80069d6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068bc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80068be:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80068c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068c6:	4013      	ands	r3, r2
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d2:	1c9a      	adds	r2, r3, #2
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d177      	bne.n	80069e6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800690a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006914:	643b      	str	r3, [r7, #64]	; 0x40
 8006916:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800691a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e6      	bne.n	80068f6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	61fb      	str	r3, [r7, #28]
   return(result);
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f023 0301 	bic.w	r3, r3, #1
 800693e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800694e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e5      	bne.n	8006928 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696c:	2b01      	cmp	r3, #1
 800696e:	d12e      	bne.n	80069ce <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	60bb      	str	r3, [r7, #8]
   return(result);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f023 0310 	bic.w	r3, r3, #16
 800698a:	647b      	str	r3, [r7, #68]	; 0x44
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6979      	ldr	r1, [r7, #20]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	613b      	str	r3, [r7, #16]
   return(result);
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e6      	bne.n	8006976 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f003 0310 	and.w	r3, r3, #16
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d103      	bne.n	80069be <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2210      	movs	r2, #16
 80069bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fa72 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069cc:	e00b      	b.n	80069e6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fa ff1c 	bl	800180c <HAL_UART_RxCpltCallback>
}
 80069d4:	e007      	b.n	80069e6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0208 	orr.w	r2, r2, #8
 80069e4:	619a      	str	r2, [r3, #24]
}
 80069e6:	bf00      	nop
 80069e8:	3758      	adds	r7, #88	; 0x58
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fce5 	bl	80083e2 <VL53L0X_get_offset_calibration_data_micro_meter>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a34:	2300      	movs	r3, #0
 8006a36:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	085b      	lsrs	r3, r3, #1
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	218a      	movs	r1, #138	; 0x8a
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f004 fee8 	bl	800b818 <VL53L0X_WrByte>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8006a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006a58:	b5b0      	push	{r4, r5, r7, lr}
 8006a5a:	b096      	sub	sp, #88	; 0x58
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a60:	2300      	movs	r3, #0
 8006a62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006a66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d107      	bne.n	8006a7e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2188      	movs	r1, #136	; 0x88
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f004 fed0 	bl	800b818 <VL53L0X_WrByte>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a8c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006a96:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a9e      	ldr	r2, [pc, #632]	; (8006d18 <VL53L0X_DataInit+0x2c0>)
 8006a9e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a9d      	ldr	r2, [pc, #628]	; (8006d1c <VL53L0X_DataInit+0x2c4>)
 8006aa6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006ab0:	f107 0310 	add.w	r3, r7, #16
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fac2 	bl	8007040 <VL53L0X_GetDeviceParameters>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006ac2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d112      	bne.n	8006af0 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006aca:	2300      	movs	r3, #0
 8006acc:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f103 0410 	add.w	r4, r3, #16
 8006ad8:	f107 0510 	add.w	r5, r7, #16
 8006adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2264      	movs	r2, #100	; 0x64
 8006af4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f44f 7261 	mov.w	r2, #900	; 0x384
 8006afe:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006b08:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006b12:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006b1e:	2201      	movs	r2, #1
 8006b20:	2180      	movs	r1, #128	; 0x80
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f004 fe78 	bl	800b818 <VL53L0X_WrByte>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b30:	4313      	orrs	r3, r2
 8006b32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006b36:	2201      	movs	r2, #1
 8006b38:	21ff      	movs	r1, #255	; 0xff
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f004 fe6c 	bl	800b818 <VL53L0X_WrByte>
 8006b40:	4603      	mov	r3, r0
 8006b42:	461a      	mov	r2, r3
 8006b44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2100      	movs	r1, #0
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f004 fe60 	bl	800b818 <VL53L0X_WrByte>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b60:	4313      	orrs	r3, r2
 8006b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006b66:	f107 030f 	add.w	r3, r7, #15
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	2191      	movs	r1, #145	; 0x91
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f004 fed4 	bl	800b91c <VL53L0X_RdByte>
 8006b74:	4603      	mov	r3, r0
 8006b76:	461a      	mov	r2, r3
 8006b78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006b82:	7bfa      	ldrb	r2, [r7, #15]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f004 fe42 	bl	800b818 <VL53L0X_WrByte>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	21ff      	movs	r1, #255	; 0xff
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f004 fe36 	bl	800b818 <VL53L0X_WrByte>
 8006bac:	4603      	mov	r3, r0
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2180      	movs	r1, #128	; 0x80
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f004 fe2a 	bl	800b818 <VL53L0X_WrByte>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	653b      	str	r3, [r7, #80]	; 0x50
 8006bd6:	e014      	b.n	8006c02 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006bd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d114      	bne.n	8006c0a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2201      	movs	r2, #1
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fd51 	bl	8007690 <VL53L0X_SetLimitCheckEnable>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfe:	3301      	adds	r3, #1
 8006c00:	653b      	str	r3, [r7, #80]	; 0x50
 8006c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c04:	2b05      	cmp	r3, #5
 8006c06:	dde7      	ble.n	8006bd8 <VL53L0X_DataInit+0x180>
 8006c08:	e000      	b.n	8006c0c <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006c0a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006c0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d107      	bne.n	8006c24 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006c14:	2200      	movs	r2, #0
 8006c16:	2102      	movs	r1, #2
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fd39 	bl	8007690 <VL53L0X_SetLimitCheckEnable>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006c24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d107      	bne.n	8006c3c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2103      	movs	r1, #3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fd2d 	bl	8007690 <VL53L0X_SetLimitCheckEnable>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006c3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d107      	bne.n	8006c54 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006c44:	2200      	movs	r2, #0
 8006c46:	2104      	movs	r1, #4
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fd21 	bl	8007690 <VL53L0X_SetLimitCheckEnable>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006c54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d107      	bne.n	8006c6c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2105      	movs	r1, #5
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fd15 	bl	8007690 <VL53L0X_SetLimitCheckEnable>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006c6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d108      	bne.n	8006c86 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006c74:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006c78:	2100      	movs	r1, #0
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fdb8 	bl	80077f0 <VL53L0X_SetLimitCheckValue>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006c86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d108      	bne.n	8006ca0 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006c8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c92:	2101      	movs	r1, #1
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fdab 	bl	80077f0 <VL53L0X_SetLimitCheckValue>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ca0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d108      	bne.n	8006cba <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006ca8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006cac:	2102      	movs	r1, #2
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fd9e 	bl	80077f0 <VL53L0X_SetLimitCheckValue>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006cba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d107      	bne.n	8006cd2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2103      	movs	r1, #3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fd92 	bl	80077f0 <VL53L0X_SetLimitCheckValue>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006cd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10f      	bne.n	8006cfa <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	22ff      	movs	r2, #255	; 0xff
 8006cde:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006ce2:	22ff      	movs	r2, #255	; 0xff
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f004 fd96 	bl	800b818 <VL53L0X_WrByte>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006cfa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d103      	bne.n	8006d0a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006d0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3758      	adds	r7, #88	; 0x58
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bdb0      	pop	{r4, r5, r7, pc}
 8006d16:	bf00      	nop
 8006d18:	00016b85 	.word	0x00016b85
 8006d1c:	000970a4 	.word	0x000970a4

08006d20 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006d20:	b5b0      	push	{r4, r5, r7, lr}
 8006d22:	b09e      	sub	sp, #120	; 0x78
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006d2e:	f107 031c 	add.w	r3, r7, #28
 8006d32:	2240      	movs	r2, #64	; 0x40
 8006d34:	2100      	movs	r1, #0
 8006d36:	4618      	mov	r0, r3
 8006d38:	f004 fed9 	bl	800baee <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f002 fa95 	bl	800928e <VL53L0X_get_info_from_device>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006d70:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006d78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006d7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d80d      	bhi.n	8006da0 <VL53L0X_StaticInit+0x80>
 8006d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d102      	bne.n	8006d92 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d806      	bhi.n	8006da0 <VL53L0X_StaticInit+0x80>
 8006d92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10e      	bne.n	8006db8 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d9c:	2b0c      	cmp	r3, #12
 8006d9e:	d90b      	bls.n	8006db8 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006da0:	f107 0218 	add.w	r2, r7, #24
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 fd14 	bl	80087d8 <VL53L0X_perform_ref_spad_management>
 8006db0:	4603      	mov	r3, r0
 8006db2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006db6:	e009      	b.n	8006dcc <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006db8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 ff15 	bl	8008bf0 <VL53L0X_set_reference_spads>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006dcc:	4b94      	ldr	r3, [pc, #592]	; (8007020 <VL53L0X_StaticInit+0x300>)
 8006dce:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006dd0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10f      	bne.n	8006df8 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006dde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006de2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006df0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006df2:	e001      	b.n	8006df8 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006df4:	4b8a      	ldr	r3, [pc, #552]	; (8007020 <VL53L0X_StaticInit+0x300>)
 8006df6:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006df8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006e00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f003 fde8 	bl	800a9d8 <VL53L0X_load_tuning_settings>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006e0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10a      	bne.n	8006e2c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006e16:	2300      	movs	r3, #0
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	2304      	movs	r3, #4
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 f90d 	bl	8008040 <VL53L0X_SetGpioConfig>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e2c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d121      	bne.n	8006e78 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e34:	2201      	movs	r2, #1
 8006e36:	21ff      	movs	r1, #255	; 0xff
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f004 fced 	bl	800b818 <VL53L0X_WrByte>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006e44:	f107 031a 	add.w	r3, r7, #26
 8006e48:	461a      	mov	r2, r3
 8006e4a:	2184      	movs	r1, #132	; 0x84
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f004 fd8f 	bl	800b970 <VL53L0X_RdWord>
 8006e52:	4603      	mov	r3, r0
 8006e54:	461a      	mov	r2, r3
 8006e56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e60:	2200      	movs	r2, #0
 8006e62:	21ff      	movs	r1, #255	; 0xff
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f004 fcd7 	bl	800b818 <VL53L0X_WrByte>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e78:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d105      	bne.n	8006e8c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006e80:	8b7b      	ldrh	r3, [r7, #26]
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	461a      	mov	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006e8c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d108      	bne.n	8006ea6 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006e94:	f107 031c 	add.w	r3, r7, #28
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f8d0 	bl	8007040 <VL53L0X_GetDeviceParameters>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006ea6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d110      	bne.n	8006ed0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006eae:	f107 0319 	add.w	r3, r7, #25
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f9ae 	bl	8007216 <VL53L0X_GetFractionEnable>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006ec0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006ec8:	7e7a      	ldrb	r2, [r7, #25]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006ed0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10e      	bne.n	8006ef6 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f103 0410 	add.w	r4, r3, #16
 8006ede:	f107 051c 	add.w	r5, r7, #28
 8006ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006ef2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006ef6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d111      	bne.n	8006f22 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8006efe:	f107 0319 	add.w	r3, r7, #25
 8006f02:	461a      	mov	r2, r3
 8006f04:	2101      	movs	r1, #1
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f004 fd08 	bl	800b91c <VL53L0X_RdByte>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006f12:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d103      	bne.n	8006f22 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006f1a:	7e7a      	ldrb	r2, [r7, #25]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006f22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d107      	bne.n	8006f3a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f9e6 	bl	8007300 <VL53L0X_SetSequenceStepEnable>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006f3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d107      	bne.n	8006f52 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006f42:	2200      	movs	r2, #0
 8006f44:	2102      	movs	r1, #2
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f9da 	bl	8007300 <VL53L0X_SetSequenceStepEnable>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006f52:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d103      	bne.n	8006f62 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2203      	movs	r2, #3
 8006f5e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006f62:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006f6a:	f107 0313 	add.w	r3, r7, #19
 8006f6e:	461a      	mov	r2, r3
 8006f70:	2100      	movs	r1, #0
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f9ac 	bl	80072d0 <VL53L0X_GetVcselPulsePeriod>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006f7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d103      	bne.n	8006f8e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006f86:	7cfa      	ldrb	r2, [r7, #19]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006f8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006f96:	f107 0313 	add.w	r3, r7, #19
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f996 	bl	80072d0 <VL53L0X_GetVcselPulsePeriod>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006faa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d103      	bne.n	8006fba <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006fb2:	7cfa      	ldrb	r2, [r7, #19]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006fba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d109      	bne.n	8006fd6 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006fc2:	f107 030c 	add.w	r3, r7, #12
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	2103      	movs	r1, #3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f002 fee0 	bl	8009d90 <get_sequence_step_timeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006fd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d103      	bne.n	8006fe6 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006fe6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d109      	bne.n	8007002 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8006fee:	f107 030c 	add.w	r3, r7, #12
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	2104      	movs	r1, #4
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f002 feca 	bl	8009d90 <get_sequence_step_timeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007002:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007012:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8007016:	4618      	mov	r0, r3
 8007018:	3770      	adds	r7, #112	; 0x70
 800701a:	46bd      	mov	sp, r7
 800701c:	bdb0      	pop	{r4, r5, r7, pc}
 800701e:	bf00      	nop
 8007020:	20000018 	.word	0x20000018

08007024 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800702c:	239d      	movs	r3, #157	; 0x9d
 800702e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8007030:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f8cc 	bl	80071f0 <VL53L0X_GetDeviceMode>
 8007058:	4603      	mov	r3, r0
 800705a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800705c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d107      	bne.n	8007074 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	3308      	adds	r3, #8
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa94 	bl	8007598 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8007070:	4603      	mov	r3, r0
 8007072:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d107      	bne.n	800709a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	3310      	adds	r3, #16
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 faca 	bl	800762a <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007096:	4603      	mov	r3, r0
 8007098:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800709a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d107      	bne.n	80070b2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	3314      	adds	r3, #20
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fcaa 	bl	8006a02 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80070ae:	4603      	mov	r3, r0
 80070b0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80070b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d134      	bne.n	8007124 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80070ba:	2300      	movs	r3, #0
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	e02a      	b.n	8007116 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80070c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d12a      	bne.n	800711e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	b299      	uxth	r1, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	3308      	adds	r3, #8
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	4413      	add	r3, r2
 80070d6:	3304      	adds	r3, #4
 80070d8:	461a      	mov	r2, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fbea 	bl	80078b4 <VL53L0X_GetLimitCheckValue>
 80070e0:	4603      	mov	r3, r0
 80070e2:	461a      	mov	r2, r3
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80070ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d117      	bne.n	8007122 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	b299      	uxth	r1, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	3318      	adds	r3, #24
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	4413      	add	r3, r2
 80070fe:	461a      	mov	r2, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fb51 	bl	80077a8 <VL53L0X_GetLimitCheckEnable>
 8007106:	4603      	mov	r3, r0
 8007108:	461a      	mov	r2, r3
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	4313      	orrs	r3, r2
 800710e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	3301      	adds	r3, #1
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b05      	cmp	r3, #5
 800711a:	ddd1      	ble.n	80070c0 <VL53L0X_GetDeviceParameters+0x80>
 800711c:	e002      	b.n	8007124 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800711e:	bf00      	nop
 8007120:	e000      	b.n	8007124 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007122:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d107      	bne.n	800713c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	333c      	adds	r3, #60	; 0x3c
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fc4c 	bl	80079d0 <VL53L0X_GetWrapAroundCheckEnable>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800713c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d107      	bne.n	8007154 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	3304      	adds	r3, #4
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f895 	bl	800727a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007150:	4603      	mov	r3, r0
 8007152:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8007170:	78fb      	ldrb	r3, [r7, #3]
 8007172:	2b15      	cmp	r3, #21
 8007174:	d832      	bhi.n	80071dc <VL53L0X_SetDeviceMode+0x7c>
 8007176:	a201      	add	r2, pc, #4	; (adr r2, 800717c <VL53L0X_SetDeviceMode+0x1c>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	080071d5 	.word	0x080071d5
 8007180:	080071d5 	.word	0x080071d5
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071d5 	.word	0x080071d5
 800718c:	080071dd 	.word	0x080071dd
 8007190:	080071dd 	.word	0x080071dd
 8007194:	080071dd 	.word	0x080071dd
 8007198:	080071dd 	.word	0x080071dd
 800719c:	080071dd 	.word	0x080071dd
 80071a0:	080071dd 	.word	0x080071dd
 80071a4:	080071dd 	.word	0x080071dd
 80071a8:	080071dd 	.word	0x080071dd
 80071ac:	080071dd 	.word	0x080071dd
 80071b0:	080071dd 	.word	0x080071dd
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071dd 	.word	0x080071dd
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	080071dd 	.word	0x080071dd
 80071c8:	080071dd 	.word	0x080071dd
 80071cc:	080071d5 	.word	0x080071d5
 80071d0:	080071d5 	.word	0x080071d5
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	78fa      	ldrb	r2, [r7, #3]
 80071d8:	741a      	strb	r2, [r3, #16]
		break;
 80071da:	e001      	b.n	80071e0 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80071dc:	23f8      	movs	r3, #248	; 0xf8
 80071de:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071fa:	2300      	movs	r3, #0
 80071fc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	7c1a      	ldrb	r2, [r3, #16]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	2109      	movs	r1, #9
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f004 fb77 	bl	800b91c <VL53L0X_RdByte>
 800722e:	4603      	mov	r3, r0
 8007230:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d106      	bne.n	8007248 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	b2da      	uxtb	r2, r3
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f003 fa26 	bl	800a6b6 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800726a:	4603      	mov	r3, r0
 800726c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800726e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f003 faf3 	bl	800a876 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007294:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
 80072ac:	4613      	mov	r3, r2
 80072ae:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80072b4:	78ba      	ldrb	r2, [r7, #2]
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f002 ff3b 	bl	800a136 <VL53L0X_set_vcsel_pulse_period>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80072c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	460b      	mov	r3, r1
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072de:	2300      	movs	r3, #0
 80072e0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80072e2:	7afb      	ldrb	r3, [r7, #11]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	4619      	mov	r1, r3
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f003 f9ad 	bl	800a648 <VL53L0X_get_vcsel_pulse_period>
 80072ee:	4603      	mov	r3, r0
 80072f0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80072f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	70fb      	strb	r3, [r7, #3]
 800730c:	4613      	mov	r3, r2
 800730e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007310:	2300      	movs	r3, #0
 8007312:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800731c:	f107 030f 	add.w	r3, r7, #15
 8007320:	461a      	mov	r2, r3
 8007322:	2101      	movs	r1, #1
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f004 faf9 	bl	800b91c <VL53L0X_RdByte>
 800732a:	4603      	mov	r3, r0
 800732c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8007332:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d15a      	bne.n	80073f0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800733a:	78bb      	ldrb	r3, [r7, #2]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d12b      	bne.n	8007398 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	2b04      	cmp	r3, #4
 8007344:	d825      	bhi.n	8007392 <VL53L0X_SetSequenceStepEnable+0x92>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	08007361 	.word	0x08007361
 8007350:	0800736b 	.word	0x0800736b
 8007354:	08007375 	.word	0x08007375
 8007358:	0800737f 	.word	0x0800737f
 800735c:	08007389 	.word	0x08007389
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8007360:	7dbb      	ldrb	r3, [r7, #22]
 8007362:	f043 0310 	orr.w	r3, r3, #16
 8007366:	75bb      	strb	r3, [r7, #22]
				break;
 8007368:	e043      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800736a:	7dbb      	ldrb	r3, [r7, #22]
 800736c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007370:	75bb      	strb	r3, [r7, #22]
				break;
 8007372:	e03e      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007374:	7dbb      	ldrb	r3, [r7, #22]
 8007376:	f043 0304 	orr.w	r3, r3, #4
 800737a:	75bb      	strb	r3, [r7, #22]
				break;
 800737c:	e039      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800737e:	7dbb      	ldrb	r3, [r7, #22]
 8007380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007384:	75bb      	strb	r3, [r7, #22]
				break;
 8007386:	e034      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007388:	7dbb      	ldrb	r3, [r7, #22]
 800738a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800738e:	75bb      	strb	r3, [r7, #22]
				break;
 8007390:	e02f      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007392:	23fc      	movs	r3, #252	; 0xfc
 8007394:	75fb      	strb	r3, [r7, #23]
 8007396:	e02c      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007398:	78fb      	ldrb	r3, [r7, #3]
 800739a:	2b04      	cmp	r3, #4
 800739c:	d825      	bhi.n	80073ea <VL53L0X_SetSequenceStepEnable+0xea>
 800739e:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	080073b9 	.word	0x080073b9
 80073a8:	080073c3 	.word	0x080073c3
 80073ac:	080073cd 	.word	0x080073cd
 80073b0:	080073d7 	.word	0x080073d7
 80073b4:	080073e1 	.word	0x080073e1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80073b8:	7dbb      	ldrb	r3, [r7, #22]
 80073ba:	f023 0310 	bic.w	r3, r3, #16
 80073be:	75bb      	strb	r3, [r7, #22]
				break;
 80073c0:	e017      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80073c2:	7dbb      	ldrb	r3, [r7, #22]
 80073c4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80073c8:	75bb      	strb	r3, [r7, #22]
				break;
 80073ca:	e012      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80073cc:	7dbb      	ldrb	r3, [r7, #22]
 80073ce:	f023 0304 	bic.w	r3, r3, #4
 80073d2:	75bb      	strb	r3, [r7, #22]
				break;
 80073d4:	e00d      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80073d6:	7dbb      	ldrb	r3, [r7, #22]
 80073d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073dc:	75bb      	strb	r3, [r7, #22]
				break;
 80073de:	e008      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80073e0:	7dbb      	ldrb	r3, [r7, #22]
 80073e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e6:	75bb      	strb	r3, [r7, #22]
				break;
 80073e8:	e003      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80073ea:	23fc      	movs	r3, #252	; 0xfc
 80073ec:	75fb      	strb	r3, [r7, #23]
 80073ee:	e000      	b.n	80073f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80073f0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	7dba      	ldrb	r2, [r7, #22]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d01e      	beq.n	8007438 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80073fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d107      	bne.n	8007412 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007402:	7dbb      	ldrb	r3, [r7, #22]
 8007404:	461a      	mov	r2, r3
 8007406:	2101      	movs	r1, #1
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f004 fa05 	bl	800b818 <VL53L0X_WrByte>
 800740e:	4603      	mov	r3, r0
 8007410:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8007412:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	7dba      	ldrb	r2, [r7, #22]
 800741e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007422:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007430:	6939      	ldr	r1, [r7, #16]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff ff0e 	bl	8007254 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007438:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	607b      	str	r3, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	72fb      	strb	r3, [r7, #11]
 8007452:	4613      	mov	r3, r2
 8007454:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007456:	2300      	movs	r3, #0
 8007458:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	2b04      	cmp	r3, #4
 8007464:	d836      	bhi.n	80074d4 <sequence_step_enabled+0x90>
 8007466:	a201      	add	r2, pc, #4	; (adr r2, 800746c <sequence_step_enabled+0x28>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	08007481 	.word	0x08007481
 8007470:	08007493 	.word	0x08007493
 8007474:	080074a5 	.word	0x080074a5
 8007478:	080074b7 	.word	0x080074b7
 800747c:	080074c9 	.word	0x080074c9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007480:	7abb      	ldrb	r3, [r7, #10]
 8007482:	111b      	asrs	r3, r3, #4
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	b2da      	uxtb	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	701a      	strb	r2, [r3, #0]
		break;
 8007490:	e022      	b.n	80074d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007492:	7abb      	ldrb	r3, [r7, #10]
 8007494:	10db      	asrs	r3, r3, #3
 8007496:	b2db      	uxtb	r3, r3
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	b2da      	uxtb	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	701a      	strb	r2, [r3, #0]
		break;
 80074a2:	e019      	b.n	80074d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80074a4:	7abb      	ldrb	r3, [r7, #10]
 80074a6:	109b      	asrs	r3, r3, #2
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	701a      	strb	r2, [r3, #0]
		break;
 80074b4:	e010      	b.n	80074d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80074b6:	7abb      	ldrb	r3, [r7, #10]
 80074b8:	119b      	asrs	r3, r3, #6
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	701a      	strb	r2, [r3, #0]
		break;
 80074c6:	e007      	b.n	80074d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80074c8:	7abb      	ldrb	r3, [r7, #10]
 80074ca:	09db      	lsrs	r3, r3, #7
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	701a      	strb	r2, [r3, #0]
		break;
 80074d2:	e001      	b.n	80074d8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80074d4:	23fc      	movs	r3, #252	; 0xfc
 80074d6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80074d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80074fa:	f107 030e 	add.w	r3, r7, #14
 80074fe:	461a      	mov	r2, r3
 8007500:	2101      	movs	r1, #1
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f004 fa0a 	bl	800b91c <VL53L0X_RdByte>
 8007508:	4603      	mov	r3, r0
 800750a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800750c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d107      	bne.n	8007524 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007514:	7bba      	ldrb	r2, [r7, #14]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2100      	movs	r1, #0
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff ff92 	bl	8007444 <sequence_step_enabled>
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d108      	bne.n	800753e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800752c:	7bba      	ldrb	r2, [r7, #14]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	3302      	adds	r3, #2
 8007532:	2101      	movs	r1, #1
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff ff85 	bl	8007444 <sequence_step_enabled>
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800753e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d108      	bne.n	8007558 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007546:	7bba      	ldrb	r2, [r7, #14]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	3301      	adds	r3, #1
 800754c:	2102      	movs	r1, #2
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff ff78 	bl	8007444 <sequence_step_enabled>
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d108      	bne.n	8007572 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007560:	7bba      	ldrb	r2, [r7, #14]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	3303      	adds	r3, #3
 8007566:	2103      	movs	r1, #3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff ff6b 	bl	8007444 <sequence_step_enabled>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d108      	bne.n	800758c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800757a:	7bba      	ldrb	r2, [r7, #14]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	3304      	adds	r3, #4
 8007580:	2104      	movs	r1, #4
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff ff5e 	bl	8007444 <sequence_step_enabled>
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800758c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80075a6:	f107 030c 	add.w	r3, r7, #12
 80075aa:	461a      	mov	r2, r3
 80075ac:	21f8      	movs	r1, #248	; 0xf8
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f004 f9de 	bl	800b970 <VL53L0X_RdWord>
 80075b4:	4603      	mov	r3, r0
 80075b6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80075b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d108      	bne.n	80075d2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80075c0:	f107 0308 	add.w	r3, r7, #8
 80075c4:	461a      	mov	r2, r3
 80075c6:	2104      	movs	r1, #4
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f004 fa09 	bl	800b9e0 <VL53L0X_RdDWord>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80075d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10c      	bne.n	80075f4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80075da:	89bb      	ldrh	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	89ba      	ldrh	r2, [r7, #12]
 80075e4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800760a:	2300      	movs	r3, #0
 800760c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	7f1b      	ldrb	r3, [r3, #28]
 8007612:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	7bba      	ldrb	r2, [r7, #14]
 8007618:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800761a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b086      	sub	sp, #24
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007634:	2300      	movs	r3, #0
 8007636:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007638:	f107 030e 	add.w	r3, r7, #14
 800763c:	461a      	mov	r2, r3
 800763e:	2120      	movs	r1, #32
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f004 f995 	bl	800b970 <VL53L0X_RdWord>
 8007646:	4603      	mov	r3, r0
 8007648:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800764a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d118      	bne.n	8007684 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8007652:	89fb      	ldrh	r3, [r7, #14]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d109      	bne.n	800766c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	771a      	strb	r2, [r3, #28]
 800766a:	e00b      	b.n	8007684 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800766c:	89fb      	ldrh	r3, [r7, #14]
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007684:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	807b      	strh	r3, [r7, #2]
 800769c:	4613      	mov	r3, r2
 800769e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076a0:	2300      	movs	r3, #0
 80076a2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80076b0:	887b      	ldrh	r3, [r7, #2]
 80076b2:	2b05      	cmp	r3, #5
 80076b4:	d902      	bls.n	80076bc <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076b6:	23fc      	movs	r3, #252	; 0xfc
 80076b8:	75fb      	strb	r3, [r7, #23]
 80076ba:	e05b      	b.n	8007774 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80076bc:	787b      	ldrb	r3, [r7, #1]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80076ca:	2301      	movs	r3, #1
 80076cc:	73bb      	strb	r3, [r7, #14]
 80076ce:	e00a      	b.n	80076e6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80076d0:	887b      	ldrh	r3, [r7, #2]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	330c      	adds	r3, #12
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80076e2:	2301      	movs	r3, #1
 80076e4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80076e6:	887b      	ldrh	r3, [r7, #2]
 80076e8:	2b05      	cmp	r3, #5
 80076ea:	d841      	bhi.n	8007770 <VL53L0X_SetLimitCheckEnable+0xe0>
 80076ec:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80076ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f2:	bf00      	nop
 80076f4:	0800770d 	.word	0x0800770d
 80076f8:	08007717 	.word	0x08007717
 80076fc:	0800772d 	.word	0x0800772d
 8007700:	08007737 	.word	0x08007737
 8007704:	08007741 	.word	0x08007741
 8007708:	08007759 	.word	0x08007759

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	7bfa      	ldrb	r2, [r7, #15]
 8007710:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007714:	e02e      	b.n	8007774 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800771a:	b29b      	uxth	r3, r3
 800771c:	461a      	mov	r2, r3
 800771e:	2144      	movs	r1, #68	; 0x44
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f004 f89d 	bl	800b860 <VL53L0X_WrWord>
 8007726:	4603      	mov	r3, r0
 8007728:	75fb      	strb	r3, [r7, #23]

			break;
 800772a:	e023      	b.n	8007774 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	7bfa      	ldrb	r2, [r7, #15]
 8007730:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007734:	e01e      	b.n	8007774 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7bfa      	ldrb	r2, [r7, #15]
 800773a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800773e:	e019      	b.n	8007774 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007746:	7b7b      	ldrb	r3, [r7, #13]
 8007748:	22fe      	movs	r2, #254	; 0xfe
 800774a:	2160      	movs	r1, #96	; 0x60
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f004 f8b1 	bl	800b8b4 <VL53L0X_UpdateByte>
 8007752:	4603      	mov	r3, r0
 8007754:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007756:	e00d      	b.n	8007774 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	011b      	lsls	r3, r3, #4
 800775c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800775e:	7b7b      	ldrb	r3, [r7, #13]
 8007760:	22ef      	movs	r2, #239	; 0xef
 8007762:	2160      	movs	r1, #96	; 0x60
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f004 f8a5 	bl	800b8b4 <VL53L0X_UpdateByte>
 800776a:	4603      	mov	r3, r0
 800776c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800776e:	e001      	b.n	8007774 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007770:	23fc      	movs	r3, #252	; 0xfc
 8007772:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007774:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10f      	bne.n	800779c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800777c:	787b      	ldrb	r3, [r7, #1]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007782:	887b      	ldrh	r3, [r7, #2]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	4413      	add	r3, r2
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800778e:	e005      	b.n	800779c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007790:	887b      	ldrh	r3, [r7, #2]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800779c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	460b      	mov	r3, r1
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077b6:	2300      	movs	r3, #0
 80077b8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80077ba:	897b      	ldrh	r3, [r7, #10]
 80077bc:	2b05      	cmp	r3, #5
 80077be:	d905      	bls.n	80077cc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077c0:	23fc      	movs	r3, #252	; 0xfc
 80077c2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	701a      	strb	r2, [r3, #0]
 80077ca:	e008      	b.n	80077de <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80077cc:	897b      	ldrh	r3, [r7, #10]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4413      	add	r3, r2
 80077d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077d6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	7dba      	ldrb	r2, [r7, #22]
 80077dc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80077de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	371c      	adds	r7, #28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	460b      	mov	r3, r1
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077fe:	2300      	movs	r3, #0
 8007800:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007802:	897b      	ldrh	r3, [r7, #10]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800780c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800780e:	7dbb      	ldrb	r3, [r7, #22]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d107      	bne.n	8007824 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007814:	897b      	ldrh	r3, [r7, #10]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	330c      	adds	r3, #12
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	605a      	str	r2, [r3, #4]
 8007822:	e040      	b.n	80078a6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007824:	897b      	ldrh	r3, [r7, #10]
 8007826:	2b05      	cmp	r3, #5
 8007828:	d830      	bhi.n	800788c <VL53L0X_SetLimitCheckValue+0x9c>
 800782a:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <VL53L0X_SetLimitCheckValue+0x40>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007849 	.word	0x08007849
 8007834:	08007851 	.word	0x08007851
 8007838:	08007867 	.word	0x08007867
 800783c:	0800786f 	.word	0x0800786f
 8007840:	08007877 	.word	0x08007877
 8007844:	08007877 	.word	0x08007877

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800784e:	e01f      	b.n	8007890 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007854:	b29b      	uxth	r3, r3
 8007856:	461a      	mov	r2, r3
 8007858:	2144      	movs	r1, #68	; 0x44
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f004 f800 	bl	800b860 <VL53L0X_WrWord>
 8007860:	4603      	mov	r3, r0
 8007862:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007864:	e014      	b.n	8007890 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800786c:	e010      	b.n	8007890 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007874:	e00c      	b.n	8007890 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800787a:	b29b      	uxth	r3, r3
 800787c:	461a      	mov	r2, r3
 800787e:	2164      	movs	r1, #100	; 0x64
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f003 ffed 	bl	800b860 <VL53L0X_WrWord>
 8007886:	4603      	mov	r3, r0
 8007888:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800788a:	e001      	b.n	8007890 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800788c:	23fc      	movs	r3, #252	; 0xfc
 800788e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d106      	bne.n	80078a6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007898:	897b      	ldrh	r3, [r7, #10]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	330c      	adds	r3, #12
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop

080078b4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	460b      	mov	r3, r1
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078c2:	2300      	movs	r3, #0
 80078c4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80078ca:	897b      	ldrh	r3, [r7, #10]
 80078cc:	2b05      	cmp	r3, #5
 80078ce:	d847      	bhi.n	8007960 <VL53L0X_GetLimitCheckValue+0xac>
 80078d0:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <VL53L0X_GetLimitCheckValue+0x24>)
 80078d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d6:	bf00      	nop
 80078d8:	080078f1 	.word	0x080078f1
 80078dc:	080078fd 	.word	0x080078fd
 80078e0:	08007923 	.word	0x08007923
 80078e4:	0800792f 	.word	0x0800792f
 80078e8:	0800793b 	.word	0x0800793b
 80078ec:	0800793b 	.word	0x0800793b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	77bb      	strb	r3, [r7, #30]
		break;
 80078fa:	e033      	b.n	8007964 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80078fc:	f107 0316 	add.w	r3, r7, #22
 8007900:	461a      	mov	r2, r3
 8007902:	2144      	movs	r1, #68	; 0x44
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f004 f833 	bl	800b970 <VL53L0X_RdWord>
 800790a:	4603      	mov	r3, r0
 800790c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800790e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d102      	bne.n	800791c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007916:	8afb      	ldrh	r3, [r7, #22]
 8007918:	025b      	lsls	r3, r3, #9
 800791a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800791c:	2301      	movs	r3, #1
 800791e:	77bb      	strb	r3, [r7, #30]
		break;
 8007920:	e020      	b.n	8007964 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007926:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	77bb      	strb	r3, [r7, #30]
		break;
 800792c:	e01a      	b.n	8007964 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	77bb      	strb	r3, [r7, #30]
		break;
 8007938:	e014      	b.n	8007964 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800793a:	f107 0316 	add.w	r3, r7, #22
 800793e:	461a      	mov	r2, r3
 8007940:	2164      	movs	r1, #100	; 0x64
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f004 f814 	bl	800b970 <VL53L0X_RdWord>
 8007948:	4603      	mov	r3, r0
 800794a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800794c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d102      	bne.n	800795a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007954:	8afb      	ldrh	r3, [r7, #22]
 8007956:	025b      	lsls	r3, r3, #9
 8007958:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	77bb      	strb	r3, [r7, #30]
		break;
 800795e:	e001      	b.n	8007964 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007960:	23fc      	movs	r3, #252	; 0xfc
 8007962:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007964:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d12a      	bne.n	80079c2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800796c:	7fbb      	ldrb	r3, [r7, #30]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d124      	bne.n	80079bc <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d110      	bne.n	800799a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007978:	897b      	ldrh	r3, [r7, #10]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	330c      	adds	r3, #12
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800798c:	897b      	ldrh	r3, [r7, #10]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007998:	e013      	b.n	80079c2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80079a0:	897b      	ldrh	r3, [r7, #10]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	330c      	adds	r3, #12
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80079ae:	897b      	ldrh	r3, [r7, #10]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80079ba:	e002      	b.n	80079c2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079c2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3720      	adds	r7, #32
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop

080079d0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80079de:	f107 030e 	add.w	r3, r7, #14
 80079e2:	461a      	mov	r2, r3
 80079e4:	2101      	movs	r1, #1
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f003 ff98 	bl	800b91c <VL53L0X_RdByte>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80079f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10e      	bne.n	8007a16 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80079f8:	7bba      	ldrb	r2, [r7, #14]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	b25b      	sxtb	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da03      	bge.n	8007a10 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e002      	b.n	8007a16 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2200      	movs	r2, #0
 8007a14:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d104      	bne.n	8007a28 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781a      	ldrb	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007a40:	f107 030e 	add.w	r3, r7, #14
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff fbd2 	bl	80071f0 <VL53L0X_GetDeviceMode>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d107      	bne.n	8007a68 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d104      	bne.n	8007a68 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f898 	bl	8007b94 <VL53L0X_StartMeasurement>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d104      	bne.n	8007a7a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fb3f 	bl	80090f4 <VL53L0X_measurement_poll_for_completion>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d103      	bne.n	8007a90 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007aac:	2301      	movs	r3, #1
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f001 fae1 	bl	800907a <VL53L0X_perform_ref_calibration>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007ade:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007ae0:	7dbb      	ldrb	r3, [r7, #22]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d005      	beq.n	8007af2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8007ae6:	7dbb      	ldrb	r3, [r7, #22]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d002      	beq.n	8007af2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007aec:	7dbb      	ldrb	r3, [r7, #22]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d147      	bne.n	8007b82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	f107 0210 	add.w	r2, r7, #16
 8007afa:	2101      	movs	r1, #1
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fbc3 	bl	8008288 <VL53L0X_GetInterruptThresholds>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007b0c:	d803      	bhi.n	8007b16 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007b0e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007b10:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007b14:	d935      	bls.n	8007b82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d131      	bne.n	8007b82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d006      	beq.n	8007b32 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007b24:	491a      	ldr	r1, [pc, #104]	; (8007b90 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f002 ff56 	bl	800a9d8 <VL53L0X_load_tuning_settings>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	75fb      	strb	r3, [r7, #23]
 8007b30:	e027      	b.n	8007b82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007b32:	2204      	movs	r2, #4
 8007b34:	21ff      	movs	r1, #255	; 0xff
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f003 fe6e 	bl	800b818 <VL53L0X_WrByte>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007b46:	2200      	movs	r2, #0
 8007b48:	2170      	movs	r1, #112	; 0x70
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f003 fe64 	bl	800b818 <VL53L0X_WrByte>
 8007b50:	4603      	mov	r3, r0
 8007b52:	461a      	mov	r2, r3
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	21ff      	movs	r1, #255	; 0xff
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f003 fe5a 	bl	800b818 <VL53L0X_WrByte>
 8007b64:	4603      	mov	r3, r0
 8007b66:	461a      	mov	r2, r3
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2180      	movs	r1, #128	; 0x80
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f003 fe50 	bl	800b818 <VL53L0X_WrByte>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007b82:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	2000010c 	.word	0x2000010c

08007b94 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007ba4:	f107 030e 	add.w	r3, r7, #14
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff fb20 	bl	80071f0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	2180      	movs	r1, #128	; 0x80
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f003 fe2f 	bl	800b818 <VL53L0X_WrByte>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	21ff      	movs	r1, #255	; 0xff
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f003 fe28 	bl	800b818 <VL53L0X_WrByte>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2100      	movs	r1, #0
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f003 fe21 	bl	800b818 <VL53L0X_WrByte>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007be0:	461a      	mov	r2, r3
 8007be2:	2191      	movs	r1, #145	; 0x91
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f003 fe17 	bl	800b818 <VL53L0X_WrByte>
 8007bea:	4603      	mov	r3, r0
 8007bec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007bee:	2201      	movs	r2, #1
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f003 fe10 	bl	800b818 <VL53L0X_WrByte>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	21ff      	movs	r1, #255	; 0xff
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f003 fe09 	bl	800b818 <VL53L0X_WrByte>
 8007c06:	4603      	mov	r3, r0
 8007c08:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2180      	movs	r1, #128	; 0x80
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f003 fe02 	bl	800b818 <VL53L0X_WrByte>
 8007c14:	4603      	mov	r3, r0
 8007c16:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d037      	beq.n	8007c8e <VL53L0X_StartMeasurement+0xfa>
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d04f      	beq.n	8007cc2 <VL53L0X_StartMeasurement+0x12e>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d167      	bne.n	8007cf6 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007c26:	2201      	movs	r2, #1
 8007c28:	2100      	movs	r1, #0
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f003 fdf4 	bl	800b818 <VL53L0X_WrByte>
 8007c30:	4603      	mov	r3, r0
 8007c32:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d15d      	bne.n	8007cfc <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d008      	beq.n	8007c5c <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8007c4a:	f107 030d 	add.w	r3, r7, #13
 8007c4e:	461a      	mov	r2, r3
 8007c50:	2100      	movs	r1, #0
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f003 fe62 	bl	800b91c <VL53L0X_RdByte>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007c62:	7b7a      	ldrb	r2, [r7, #13]
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	4013      	ands	r3, r2
 8007c68:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007c6a:	7bfa      	ldrb	r2, [r7, #15]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d107      	bne.n	8007c80 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8007c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d103      	bne.n	8007c80 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007c7e:	d3e1      	bcc.n	8007c44 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007c86:	d339      	bcc.n	8007cfc <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007c88:	23f9      	movs	r3, #249	; 0xf9
 8007c8a:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007c8c:	e036      	b.n	8007cfc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d105      	bne.n	8007ca2 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007c96:	2101      	movs	r1, #1
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff ff15 	bl	8007ac8 <VL53L0X_CheckAndLoadInterruptSettings>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f003 fdb6 	bl	800b818 <VL53L0X_WrByte>
 8007cac:	4603      	mov	r3, r0
 8007cae:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007cb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d123      	bne.n	8007d00 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007cc0:	e01e      	b.n	8007d00 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d105      	bne.n	8007cd6 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007cca:	2101      	movs	r1, #1
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff fefb 	bl	8007ac8 <VL53L0X_CheckAndLoadInterruptSettings>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	2100      	movs	r1, #0
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f003 fd9c 	bl	800b818 <VL53L0X_WrByte>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10b      	bne.n	8007d04 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2204      	movs	r2, #4
 8007cf0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007cf4:	e006      	b.n	8007d04 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007cf6:	23f8      	movs	r3, #248	; 0xf8
 8007cf8:	75fb      	strb	r3, [r7, #23]
 8007cfa:	e004      	b.n	8007d06 <VL53L0X_StartMeasurement+0x172>
		break;
 8007cfc:	bf00      	nop
 8007cfe:	e002      	b.n	8007d06 <VL53L0X_StartMeasurement+0x172>
		break;
 8007d00:	bf00      	nop
 8007d02:	e000      	b.n	8007d06 <VL53L0X_StartMeasurement+0x172>
		break;
 8007d04:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007d26:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d112      	bne.n	8007d54 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007d2e:	f107 0308 	add.w	r3, r7, #8
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fb1d 	bl	8008374 <VL53L0X_GetInterruptMaskStatus>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d103      	bne.n	8007d4c <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2201      	movs	r2, #1
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	e01c      	b.n	8007d86 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	e018      	b.n	8007d86 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007d54:	f107 030d 	add.w	r3, r7, #13
 8007d58:	461a      	mov	r2, r3
 8007d5a:	2114      	movs	r1, #20
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f003 fddd 	bl	800b91c <VL53L0X_RdByte>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10b      	bne.n	8007d86 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007d6e:	7b7b      	ldrb	r3, [r7, #13]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e002      	b.n	8007d86 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007d94:	b5b0      	push	{r4, r5, r7, lr}
 8007d96:	b096      	sub	sp, #88	; 0x58
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007da4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007da8:	230c      	movs	r3, #12
 8007daa:	2114      	movs	r1, #20
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f003 fd07 	bl	800b7c0 <VL53L0X_ReadMulti>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007db8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f040 80d2 	bne.w	8007f66 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007dce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	4413      	add	r3, r2
 8007de0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2200      	movs	r2, #0
 8007de8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8007dea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	4413      	add	r3, r2
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	025b      	lsls	r3, r3, #9
 8007e00:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e06:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007e08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	4413      	add	r3, r2
 8007e1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007e1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007e22:	025b      	lsls	r3, r3, #9
 8007e24:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007e2a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	021b      	lsls	r3, r3, #8
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007e46:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007e48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8007e56:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007e5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007e62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e68:	d047      	beq.n	8007efa <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007e6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007e6c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007e70:	fb02 f303 	mul.w	r3, r2, r3
 8007e74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007e78:	4a58      	ldr	r2, [pc, #352]	; (8007fdc <VL53L0X_GetRangingMeasurementData+0x248>)
 8007e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8007e7e:	1192      	asrs	r2, r2, #6
 8007e80:	17db      	asrs	r3, r3, #31
 8007e82:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007e84:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7f1b      	ldrb	r3, [r3, #28]
 8007e92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8007e96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d02d      	beq.n	8007efa <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007e9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ea0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007ea4:	fb02 f303 	mul.w	r3, r2, r3
 8007ea8:	121b      	asrs	r3, r3, #8
 8007eaa:	461a      	mov	r2, r3
				if ((SignalRate
 8007eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d10d      	bne.n	8007ece <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8007eb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8007eba:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007ebe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ec2:	e016      	b.n	8007ef2 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8007ec4:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007ec8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ecc:	e011      	b.n	8007ef2 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007ece:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ed4:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007ed8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007eda:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007ede:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007ee2:	121b      	asrs	r3, r3, #8
 8007ee4:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee8:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007eea:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007eee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007ef2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ef6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007efa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00d      	beq.n	8007f1e <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007f02:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f06:	089b      	lsrs	r3, r3, #2
 8007f08:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007f0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	019b      	lsls	r3, r3, #6
 8007f16:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	75da      	strb	r2, [r3, #23]
 8007f1c:	e006      	b.n	8007f2c <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007f24:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007f2c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007f30:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007f34:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007f38:	9301      	str	r3, [sp, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f003 f9f0 	bl	800b328 <VL53L0X_get_pal_range_status>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f50:	4313      	orrs	r3, r2
 8007f52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007f56:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d103      	bne.n	8007f66 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007f5e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f66:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d12f      	bne.n	8007fce <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f107 040c 	add.w	r4, r7, #12
 8007f74:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8007f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007f80:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8007f88:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8007f96:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007f9c:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007fa2:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8007fa8:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007fae:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007fb4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007fbe:	f107 050c 	add.w	r5, r7, #12
 8007fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007fca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007fce:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3750      	adds	r7, #80	; 0x50
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	10624dd3 	.word	0x10624dd3

08007fe0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007fee:	2100      	movs	r1, #0
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff f8b5 	bl	8007160 <VL53L0X_SetDeviceMode>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d104      	bne.n	800800c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff fd16 	bl	8007a34 <VL53L0X_PerformSingleMeasurement>
 8008008:	4603      	mov	r3, r0
 800800a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800800c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d105      	bne.n	8008020 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff febc 	bl	8007d94 <VL53L0X_GetRangingMeasurementData>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d105      	bne.n	8008034 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008028:	2100      	movs	r1, #0
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f962 	bl	80082f4 <VL53L0X_ClearInterruptMask>
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008034:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	4608      	mov	r0, r1
 800804a:	4611      	mov	r1, r2
 800804c:	461a      	mov	r2, r3
 800804e:	4603      	mov	r3, r0
 8008050:	70fb      	strb	r3, [r7, #3]
 8008052:	460b      	mov	r3, r1
 8008054:	70bb      	strb	r3, [r7, #2]
 8008056:	4613      	mov	r3, r2
 8008058:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008064:	23f6      	movs	r3, #246	; 0xf6
 8008066:	73fb      	strb	r3, [r7, #15]
 8008068:	e107      	b.n	800827a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800806a:	78bb      	ldrb	r3, [r7, #2]
 800806c:	2b14      	cmp	r3, #20
 800806e:	d110      	bne.n	8008092 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008070:	7e3b      	ldrb	r3, [r7, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008076:	2310      	movs	r3, #16
 8008078:	73bb      	strb	r3, [r7, #14]
 800807a:	e001      	b.n	8008080 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800807c:	2301      	movs	r3, #1
 800807e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	461a      	mov	r2, r3
 8008084:	2184      	movs	r1, #132	; 0x84
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f003 fbc6 	bl	800b818 <VL53L0X_WrByte>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]
 8008090:	e0f3      	b.n	800827a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8008092:	78bb      	ldrb	r3, [r7, #2]
 8008094:	2b15      	cmp	r3, #21
 8008096:	f040 8097 	bne.w	80081c8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800809a:	2201      	movs	r2, #1
 800809c:	21ff      	movs	r1, #255	; 0xff
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f003 fbba 	bl	800b818 <VL53L0X_WrByte>
 80080a4:	4603      	mov	r3, r0
 80080a6:	461a      	mov	r2, r3
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80080ae:	2200      	movs	r2, #0
 80080b0:	2100      	movs	r1, #0
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f003 fbb0 	bl	800b818 <VL53L0X_WrByte>
 80080b8:	4603      	mov	r3, r0
 80080ba:	461a      	mov	r2, r3
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	4313      	orrs	r3, r2
 80080c0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80080c2:	2200      	movs	r2, #0
 80080c4:	21ff      	movs	r1, #255	; 0xff
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f003 fba6 	bl	800b818 <VL53L0X_WrByte>
 80080cc:	4603      	mov	r3, r0
 80080ce:	461a      	mov	r2, r3
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80080d6:	2201      	movs	r2, #1
 80080d8:	2180      	movs	r1, #128	; 0x80
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f003 fb9c 	bl	800b818 <VL53L0X_WrByte>
 80080e0:	4603      	mov	r3, r0
 80080e2:	461a      	mov	r2, r3
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80080ea:	2202      	movs	r2, #2
 80080ec:	2185      	movs	r1, #133	; 0x85
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f003 fb92 	bl	800b818 <VL53L0X_WrByte>
 80080f4:	4603      	mov	r3, r0
 80080f6:	461a      	mov	r2, r3
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80080fe:	2204      	movs	r2, #4
 8008100:	21ff      	movs	r1, #255	; 0xff
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f003 fb88 	bl	800b818 <VL53L0X_WrByte>
 8008108:	4603      	mov	r3, r0
 800810a:	461a      	mov	r2, r3
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	4313      	orrs	r3, r2
 8008110:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8008112:	2200      	movs	r2, #0
 8008114:	21cd      	movs	r1, #205	; 0xcd
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f003 fb7e 	bl	800b818 <VL53L0X_WrByte>
 800811c:	4603      	mov	r3, r0
 800811e:	461a      	mov	r2, r3
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	4313      	orrs	r3, r2
 8008124:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8008126:	2211      	movs	r2, #17
 8008128:	21cc      	movs	r1, #204	; 0xcc
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f003 fb74 	bl	800b818 <VL53L0X_WrByte>
 8008130:	4603      	mov	r3, r0
 8008132:	461a      	mov	r2, r3
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	4313      	orrs	r3, r2
 8008138:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800813a:	2207      	movs	r2, #7
 800813c:	21ff      	movs	r1, #255	; 0xff
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f003 fb6a 	bl	800b818 <VL53L0X_WrByte>
 8008144:	4603      	mov	r3, r0
 8008146:	461a      	mov	r2, r3
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	4313      	orrs	r3, r2
 800814c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800814e:	2200      	movs	r2, #0
 8008150:	21be      	movs	r1, #190	; 0xbe
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f003 fb60 	bl	800b818 <VL53L0X_WrByte>
 8008158:	4603      	mov	r3, r0
 800815a:	461a      	mov	r2, r3
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	4313      	orrs	r3, r2
 8008160:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8008162:	2206      	movs	r2, #6
 8008164:	21ff      	movs	r1, #255	; 0xff
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f003 fb56 	bl	800b818 <VL53L0X_WrByte>
 800816c:	4603      	mov	r3, r0
 800816e:	461a      	mov	r2, r3
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	4313      	orrs	r3, r2
 8008174:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008176:	2209      	movs	r2, #9
 8008178:	21cc      	movs	r1, #204	; 0xcc
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f003 fb4c 	bl	800b818 <VL53L0X_WrByte>
 8008180:	4603      	mov	r3, r0
 8008182:	461a      	mov	r2, r3
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	4313      	orrs	r3, r2
 8008188:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800818a:	2200      	movs	r2, #0
 800818c:	21ff      	movs	r1, #255	; 0xff
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f003 fb42 	bl	800b818 <VL53L0X_WrByte>
 8008194:	4603      	mov	r3, r0
 8008196:	461a      	mov	r2, r3
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	4313      	orrs	r3, r2
 800819c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800819e:	2201      	movs	r2, #1
 80081a0:	21ff      	movs	r1, #255	; 0xff
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f003 fb38 	bl	800b818 <VL53L0X_WrByte>
 80081a8:	4603      	mov	r3, r0
 80081aa:	461a      	mov	r2, r3
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80081b2:	2200      	movs	r2, #0
 80081b4:	2100      	movs	r1, #0
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f003 fb2e 	bl	800b818 <VL53L0X_WrByte>
 80081bc:	4603      	mov	r3, r0
 80081be:	461a      	mov	r2, r3
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	73fb      	strb	r3, [r7, #15]
 80081c6:	e058      	b.n	800827a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80081c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d121      	bne.n	8008214 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80081d0:	787b      	ldrb	r3, [r7, #1]
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d81b      	bhi.n	800820e <VL53L0X_SetGpioConfig+0x1ce>
 80081d6:	a201      	add	r2, pc, #4	; (adr r2, 80081dc <VL53L0X_SetGpioConfig+0x19c>)
 80081d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081dc:	080081f1 	.word	0x080081f1
 80081e0:	080081f7 	.word	0x080081f7
 80081e4:	080081fd 	.word	0x080081fd
 80081e8:	08008203 	.word	0x08008203
 80081ec:	08008209 	.word	0x08008209
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73bb      	strb	r3, [r7, #14]
				break;
 80081f4:	e00f      	b.n	8008216 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80081f6:	2301      	movs	r3, #1
 80081f8:	73bb      	strb	r3, [r7, #14]
				break;
 80081fa:	e00c      	b.n	8008216 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80081fc:	2302      	movs	r3, #2
 80081fe:	73bb      	strb	r3, [r7, #14]
				break;
 8008200:	e009      	b.n	8008216 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008202:	2303      	movs	r3, #3
 8008204:	73bb      	strb	r3, [r7, #14]
				break;
 8008206:	e006      	b.n	8008216 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008208:	2304      	movs	r3, #4
 800820a:	73bb      	strb	r3, [r7, #14]
				break;
 800820c:	e003      	b.n	8008216 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800820e:	23f5      	movs	r3, #245	; 0xf5
 8008210:	73fb      	strb	r3, [r7, #15]
 8008212:	e000      	b.n	8008216 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008214:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d107      	bne.n	800822e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	461a      	mov	r2, r3
 8008222:	210a      	movs	r1, #10
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f003 faf7 	bl	800b818 <VL53L0X_WrByte>
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800822e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10f      	bne.n	8008256 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008236:	7e3b      	ldrb	r3, [r7, #24]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	73bb      	strb	r3, [r7, #14]
 8008240:	e001      	b.n	8008246 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8008242:	2310      	movs	r3, #16
 8008244:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	22ef      	movs	r2, #239	; 0xef
 800824a:	2184      	movs	r1, #132	; 0x84
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f003 fb31 	bl	800b8b4 <VL53L0X_UpdateByte>
 8008252:	4603      	mov	r3, r0
 8008254:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d103      	bne.n	8008266 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	787a      	ldrb	r2, [r7, #1]
 8008262:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d105      	bne.n	800827a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800826e:	2100      	movs	r1, #0
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f83f 	bl	80082f4 <VL53L0X_ClearInterruptMask>
 8008276:	4603      	mov	r3, r0
 8008278:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800827a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop

08008288 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	607a      	str	r2, [r7, #4]
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	460b      	mov	r3, r1
 8008296:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008298:	2300      	movs	r3, #0
 800829a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800829c:	f107 0314 	add.w	r3, r7, #20
 80082a0:	461a      	mov	r2, r3
 80082a2:	210e      	movs	r1, #14
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f003 fb63 	bl	800b970 <VL53L0X_RdWord>
 80082aa:	4603      	mov	r3, r0
 80082ac:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80082ae:	8abb      	ldrh	r3, [r7, #20]
 80082b0:	045b      	lsls	r3, r3, #17
 80082b2:	461a      	mov	r2, r3
 80082b4:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <VL53L0X_GetInterruptThresholds+0x68>)
 80082b6:	4013      	ands	r3, r2
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80082bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10f      	bne.n	80082e4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80082c4:	f107 0314 	add.w	r3, r7, #20
 80082c8:	461a      	mov	r2, r3
 80082ca:	210c      	movs	r1, #12
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f003 fb4f 	bl	800b970 <VL53L0X_RdWord>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80082d6:	8abb      	ldrh	r3, [r7, #20]
 80082d8:	045b      	lsls	r3, r3, #17
 80082da:	461a      	mov	r2, r3
 80082dc:	4b04      	ldr	r3, [pc, #16]	; (80082f0 <VL53L0X_GetInterruptThresholds+0x68>)
 80082de:	4013      	ands	r3, r2
		*pThresholdHigh =
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80082e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	1ffe0000 	.word	0x1ffe0000

080082f4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008306:	2201      	movs	r2, #1
 8008308:	210b      	movs	r1, #11
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f003 fa84 	bl	800b818 <VL53L0X_WrByte>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008314:	2200      	movs	r2, #0
 8008316:	210b      	movs	r1, #11
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f003 fa7d 	bl	800b818 <VL53L0X_WrByte>
 800831e:	4603      	mov	r3, r0
 8008320:	461a      	mov	r2, r3
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	4313      	orrs	r3, r2
 8008326:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008328:	f107 030d 	add.w	r3, r7, #13
 800832c:	461a      	mov	r2, r3
 800832e:	2113      	movs	r1, #19
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f003 faf3 	bl	800b91c <VL53L0X_RdByte>
 8008336:	4603      	mov	r3, r0
 8008338:	461a      	mov	r2, r3
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	4313      	orrs	r3, r2
 800833e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	3301      	adds	r3, #1
 8008344:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008346:	7b7b      	ldrb	r3, [r7, #13]
 8008348:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800834c:	2b00      	cmp	r3, #0
 800834e:	d006      	beq.n	800835e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d803      	bhi.n	800835e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0d3      	beq.n	8008306 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008364:	23f4      	movs	r3, #244	; 0xf4
 8008366:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008382:	f107 030e 	add.w	r3, r7, #14
 8008386:	461a      	mov	r2, r3
 8008388:	2113      	movs	r1, #19
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f003 fac6 	bl	800b91c <VL53L0X_RdByte>
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	f003 0207 	and.w	r2, r3, #7
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	f003 0318 	and.w	r3, r3, #24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80083a8:	23fa      	movs	r3, #250	; 0xfa
 80083aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80083ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083c4:	2300      	movs	r3, #0
 80083c6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fa03 	bl	80087d8 <VL53L0X_perform_ref_spad_management>
 80083d2:	4603      	mov	r3, r0
 80083d4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80083d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80083f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80083f4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80083f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083fa:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80083fc:	f107 0308 	add.w	r3, r7, #8
 8008400:	461a      	mov	r2, r3
 8008402:	2128      	movs	r1, #40	; 0x28
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f003 fab3 	bl	800b970 <VL53L0X_RdWord>
 800840a:	4603      	mov	r3, r0
 800840c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800840e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d11e      	bne.n	8008454 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008416:	893b      	ldrh	r3, [r7, #8]
 8008418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800841c:	b29b      	uxth	r3, r3
 800841e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008420:	893b      	ldrh	r3, [r7, #8]
 8008422:	461a      	mov	r2, r3
 8008424:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008428:	429a      	cmp	r2, r3
 800842a:	dd0b      	ble.n	8008444 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800842c:	893a      	ldrh	r2, [r7, #8]
 800842e:	897b      	ldrh	r3, [r7, #10]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	b29b      	uxth	r3, r3
 8008434:	b21b      	sxth	r3, r3
 8008436:	461a      	mov	r2, r3
					* 250;
 8008438:	23fa      	movs	r3, #250	; 0xfa
 800843a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	e007      	b.n	8008454 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008444:	893b      	ldrh	r3, [r7, #8]
 8008446:	b21b      	sxth	r3, r3
 8008448:	461a      	mov	r2, r3
 800844a:	23fa      	movs	r3, #250	; 0xfa
 800844c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008460:	b480      	push	{r7}
 8008462:	b08b      	sub	sp, #44	; 0x2c
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800846e:	2308      	movs	r3, #8
 8008470:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800847c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	fbb2 f3f3 	udiv	r3, r2, r3
 8008486:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	69ba      	ldr	r2, [r7, #24]
 800848c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008490:	69b9      	ldr	r1, [r7, #24]
 8008492:	fb01 f202 	mul.w	r2, r1, r2
 8008496:	1a9b      	subs	r3, r3, r2
 8008498:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
 800849e:	e030      	b.n	8008502 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	4413      	add	r3, r2
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80084ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d11e      	bne.n	80084f4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80084b6:	7ffa      	ldrb	r2, [r7, #31]
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	fa42 f303 	asr.w	r3, r2, r3
 80084be:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80084c4:	e016      	b.n	80084f4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80084c6:	7ffb      	ldrb	r3, [r7, #31]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00b      	beq.n	80084e8 <get_next_good_spad+0x88>
				success = 1;
 80084d0:	2301      	movs	r3, #1
 80084d2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	fb02 f203 	mul.w	r2, r2, r3
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	4413      	add	r3, r2
 80084e0:	461a      	mov	r2, r3
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	601a      	str	r2, [r3, #0]
				break;
 80084e6:	e009      	b.n	80084fc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80084e8:	7ffb      	ldrb	r3, [r7, #31]
 80084ea:	085b      	lsrs	r3, r3, #1
 80084ec:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	3301      	adds	r3, #1
 80084f2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80084f4:	6a3a      	ldr	r2, [r7, #32]
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d3e4      	bcc.n	80084c6 <get_next_good_spad+0x66>
				coarseIndex++) {
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	3301      	adds	r3, #1
 8008500:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	429a      	cmp	r2, r3
 8008508:	d202      	bcs.n	8008510 <get_next_good_spad+0xb0>
 800850a:	7fbb      	ldrb	r3, [r7, #30]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0c7      	beq.n	80084a0 <get_next_good_spad+0x40>
		}
	}
}
 8008510:	bf00      	nop
 8008512:	372c      	adds	r7, #44	; 0x2c
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008524:	2301      	movs	r3, #1
 8008526:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	099b      	lsrs	r3, r3, #6
 800852c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800852e:	4a07      	ldr	r2, [pc, #28]	; (800854c <is_aperture+0x30>)
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <is_aperture+0x22>
		isAperture = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	200002c4 	.word	0x200002c4

08008550 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008550:	b480      	push	{r7}
 8008552:	b089      	sub	sp, #36	; 0x24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800855c:	2300      	movs	r3, #0
 800855e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008560:	2308      	movs	r3, #8
 8008562:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	fbb2 f3f3 	udiv	r3, r2, r3
 800856c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	fbb3 f2f2 	udiv	r2, r3, r2
 8008576:	69b9      	ldr	r1, [r7, #24]
 8008578:	fb01 f202 	mul.w	r2, r1, r2
 800857c:	1a9b      	subs	r3, r3, r2
 800857e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	429a      	cmp	r2, r3
 8008586:	d302      	bcc.n	800858e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008588:	23ce      	movs	r3, #206	; 0xce
 800858a:	77fb      	strb	r3, [r7, #31]
 800858c:	e010      	b.n	80085b0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	4413      	add	r3, r2
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	b25a      	sxtb	r2, r3
 8008598:	2101      	movs	r1, #1
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	fa01 f303 	lsl.w	r3, r1, r3
 80085a0:	b25b      	sxtb	r3, r3
 80085a2:	4313      	orrs	r3, r2
 80085a4:	b259      	sxtb	r1, r3
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	4413      	add	r3, r2
 80085ac:	b2ca      	uxtb	r2, r1
 80085ae:	701a      	strb	r2, [r3, #0]

	return status;
 80085b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3724      	adds	r7, #36	; 0x24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80085ca:	2306      	movs	r3, #6
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	21b0      	movs	r1, #176	; 0xb0
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f003 f8c5 	bl	800b760 <VL53L0X_WriteMulti>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80085da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80085f0:	2306      	movs	r3, #6
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	21b0      	movs	r1, #176	; 0xb0
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f003 f8e2 	bl	800b7c0 <VL53L0X_ReadMulti>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08c      	sub	sp, #48	; 0x30
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	607a      	str	r2, [r7, #4]
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	460b      	mov	r3, r1
 800861a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800861c:	2300      	movs	r3, #0
 800861e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008624:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008628:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800862a:	2300      	movs	r3, #0
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28
 800862e:	e02b      	b.n	8008688 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008630:	f107 031c 	add.w	r3, r7, #28
 8008634:	6a3a      	ldr	r2, [r7, #32]
 8008636:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff ff11 	bl	8008460 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008644:	d103      	bne.n	800864e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008646:	23ce      	movs	r3, #206	; 0xce
 8008648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800864c:	e020      	b.n	8008690 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	461a      	mov	r2, r3
 8008652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008654:	4413      	add	r3, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff ff60 	bl	800851c <is_aperture>
 800865c:	4603      	mov	r3, r0
 800865e:	461a      	mov	r2, r3
 8008660:	7afb      	ldrb	r3, [r7, #11]
 8008662:	4293      	cmp	r3, r2
 8008664:	d003      	beq.n	800866e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008666:	23ce      	movs	r3, #206	; 0xce
 8008668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800866c:	e010      	b.n	8008690 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008672:	6a3a      	ldr	r2, [r7, #32]
 8008674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008676:	6838      	ldr	r0, [r7, #0]
 8008678:	f7ff ff6a 	bl	8008550 <enable_spad_bit>
		currentSpad++;
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	3301      	adds	r3, #1
 8008680:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	3301      	adds	r3, #1
 8008686:	62bb      	str	r3, [r7, #40]	; 0x28
 8008688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800868a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800868c:	429a      	cmp	r2, r3
 800868e:	d3cf      	bcc.n	8008630 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008692:	6a3a      	ldr	r2, [r7, #32]
 8008694:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008696:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7ff ff8d 	bl	80085c0 <set_ref_spad_map>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80086ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d121      	bne.n	80086f8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80086b4:	f107 0314 	add.w	r3, r7, #20
 80086b8:	4619      	mov	r1, r3
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7ff ff93 	bl	80085e6 <get_ref_spad_map>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80086ca:	e011      	b.n	80086f0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	4413      	add	r3, r2
 80086d2:	781a      	ldrb	r2, [r3, #0]
 80086d4:	f107 0114 	add.w	r1, r7, #20
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	440b      	add	r3, r1
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d003      	beq.n	80086ea <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80086e2:	23ce      	movs	r3, #206	; 0xce
 80086e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80086e8:	e006      	b.n	80086f8 <enable_ref_spads+0xec>
			}
			i++;
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	3301      	adds	r3, #1
 80086ee:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80086f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d3e9      	bcc.n	80086cc <enable_ref_spads+0xc0>
		}
	}
	return status;
 80086f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3730      	adds	r7, #48	; 0x30
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08a      	sub	sp, #40	; 0x28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800870e:	2300      	movs	r3, #0
 8008710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008728:	2b00      	cmp	r3, #0
 800872a:	d107      	bne.n	800873c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800872c:	22c0      	movs	r2, #192	; 0xc0
 800872e:	2101      	movs	r1, #1
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f003 f871 	bl	800b818 <VL53L0X_WrByte>
 8008736:	4603      	mov	r3, r0
 8008738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800873c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008740:	2b00      	cmp	r3, #0
 8008742:	d108      	bne.n	8008756 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008744:	f107 0308 	add.w	r3, r7, #8
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7ff fc48 	bl	8007fe0 <VL53L0X_PerformSingleRangingMeasurement>
 8008750:	4603      	mov	r3, r0
 8008752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008756:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800875a:	2b00      	cmp	r3, #0
 800875c:	d107      	bne.n	800876e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800875e:	2201      	movs	r2, #1
 8008760:	21ff      	movs	r1, #255	; 0xff
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f003 f858 	bl	800b818 <VL53L0X_WrByte>
 8008768:	4603      	mov	r3, r0
 800876a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800876e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008772:	2b00      	cmp	r3, #0
 8008774:	d107      	bne.n	8008786 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	21b6      	movs	r1, #182	; 0xb6
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f003 f8f8 	bl	800b970 <VL53L0X_RdWord>
 8008780:	4603      	mov	r3, r0
 8008782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008786:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800878a:	2b00      	cmp	r3, #0
 800878c:	d107      	bne.n	800879e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800878e:	2200      	movs	r2, #0
 8008790:	21ff      	movs	r1, #255	; 0xff
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f003 f840 	bl	800b818 <VL53L0X_WrByte>
 8008798:	4603      	mov	r3, r0
 800879a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800879e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d112      	bne.n	80087cc <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80087a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80087aa:	461a      	mov	r2, r3
 80087ac:	2101      	movs	r1, #1
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f003 f832 	bl	800b818 <VL53L0X_WrByte>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80087ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d104      	bne.n	80087cc <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80087c8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80087cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3728      	adds	r7, #40	; 0x28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80087d8:	b590      	push	{r4, r7, lr}
 80087da:	b09d      	sub	sp, #116	; 0x74
 80087dc:	af06      	add	r7, sp, #24
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80087ea:	23b4      	movs	r3, #180	; 0xb4
 80087ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80087f0:	2303      	movs	r3, #3
 80087f2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80087f4:	232c      	movs	r3, #44	; 0x2c
 80087f6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008804:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008808:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8008812:	2306      	movs	r3, #6
 8008814:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800883c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800883e:	2300      	movs	r3, #0
 8008840:	64bb      	str	r3, [r7, #72]	; 0x48
 8008842:	e009      	b.n	8008858 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008848:	4413      	add	r3, r2
 800884a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008854:	3301      	adds	r3, #1
 8008856:	64bb      	str	r3, [r7, #72]	; 0x48
 8008858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	429a      	cmp	r2, r3
 800885e:	d3f1      	bcc.n	8008844 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008860:	2201      	movs	r2, #1
 8008862:	21ff      	movs	r1, #255	; 0xff
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f002 ffd7 	bl	800b818 <VL53L0X_WrByte>
 800886a:	4603      	mov	r3, r0
 800886c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008870:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008874:	2b00      	cmp	r3, #0
 8008876:	d107      	bne.n	8008888 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008878:	2200      	movs	r2, #0
 800887a:	214f      	movs	r1, #79	; 0x4f
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f002 ffcb 	bl	800b818 <VL53L0X_WrByte>
 8008882:	4603      	mov	r3, r0
 8008884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008888:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800888c:	2b00      	cmp	r3, #0
 800888e:	d107      	bne.n	80088a0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008890:	222c      	movs	r2, #44	; 0x2c
 8008892:	214e      	movs	r1, #78	; 0x4e
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f002 ffbf 	bl	800b818 <VL53L0X_WrByte>
 800889a:	4603      	mov	r3, r0
 800889c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80088a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d107      	bne.n	80088b8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80088a8:	2200      	movs	r2, #0
 80088aa:	21ff      	movs	r1, #255	; 0xff
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f002 ffb3 	bl	800b818 <VL53L0X_WrByte>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80088b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80088c0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80088c4:	461a      	mov	r2, r3
 80088c6:	21b6      	movs	r1, #182	; 0xb6
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f002 ffa5 	bl	800b818 <VL53L0X_WrByte>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80088d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d107      	bne.n	80088ec <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80088dc:	2200      	movs	r2, #0
 80088de:	2180      	movs	r1, #128	; 0x80
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f002 ff99 	bl	800b818 <VL53L0X_WrByte>
 80088e6:	4603      	mov	r3, r0
 80088e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80088ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10a      	bne.n	800890a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80088f4:	f107 0210 	add.w	r2, r7, #16
 80088f8:	f107 0111 	add.w	r1, r7, #17
 80088fc:	2300      	movs	r3, #0
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 fbbb 	bl	800907a <VL53L0X_perform_ref_calibration>
 8008904:	4603      	mov	r3, r0
 8008906:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800890a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800890e:	2b00      	cmp	r3, #0
 8008910:	d121      	bne.n	8008956 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008918:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800891e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008920:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800892e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008932:	f107 0218 	add.w	r2, r7, #24
 8008936:	9204      	str	r2, [sp, #16]
 8008938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800893a:	9203      	str	r2, [sp, #12]
 800893c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800893e:	9202      	str	r2, [sp, #8]
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	4623      	mov	r3, r4
 8008948:	4602      	mov	r2, r0
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f7ff fe5e 	bl	800860c <enable_ref_spads>
 8008950:	4603      	mov	r3, r0
 8008952:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008956:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800895a:	2b00      	cmp	r3, #0
 800895c:	d174      	bne.n	8008a48 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008962:	f107 0312 	add.w	r3, r7, #18
 8008966:	4619      	mov	r1, r3
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f7ff fecb 	bl	8008704 <perform_ref_signal_measurement>
 800896e:	4603      	mov	r3, r0
 8008970:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008974:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008978:	2b00      	cmp	r3, #0
 800897a:	d161      	bne.n	8008a40 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800897c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800897e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008980:	429a      	cmp	r2, r3
 8008982:	d25d      	bcs.n	8008a40 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008984:	2300      	movs	r3, #0
 8008986:	64bb      	str	r3, [r7, #72]	; 0x48
 8008988:	e009      	b.n	800899e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800898e:	4413      	add	r3, r2
 8008990:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008994:	2200      	movs	r2, #0
 8008996:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800899a:	3301      	adds	r3, #1
 800899c:	64bb      	str	r3, [r7, #72]	; 0x48
 800899e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d3f1      	bcc.n	800898a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80089a6:	e002      	b.n	80089ae <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80089a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089aa:	3301      	adds	r3, #1
 80089ac:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80089ae:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80089b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089b4:	4413      	add	r3, r2
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7ff fdb0 	bl	800851c <is_aperture>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d103      	bne.n	80089ca <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80089c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d3ee      	bcc.n	80089a8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80089ca:	2301      	movs	r3, #1
 80089cc:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80089ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80089de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80089e2:	f107 0218 	add.w	r2, r7, #24
 80089e6:	9204      	str	r2, [sp, #16]
 80089e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ea:	9203      	str	r2, [sp, #12]
 80089ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089ee:	9202      	str	r2, [sp, #8]
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	4623      	mov	r3, r4
 80089f8:	4602      	mov	r2, r0
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7ff fe06 	bl	800860c <enable_ref_spads>
 8008a00:	4603      	mov	r3, r0
 8008a02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008a06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d11b      	bne.n	8008a46 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008a12:	f107 0312 	add.w	r3, r7, #18
 8008a16:	4619      	mov	r1, r3
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7ff fe73 	bl	8008704 <perform_ref_signal_measurement>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008a24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10c      	bne.n	8008a46 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008a2c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008a2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d208      	bcs.n	8008a46 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008a34:	2301      	movs	r3, #1
 8008a36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008a3e:	e002      	b.n	8008a46 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a44:	e000      	b.n	8008a48 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008a46:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008a48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f040 80af 	bne.w	8008bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008a52:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008a54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a56:	429a      	cmp	r2, r3
 8008a58:	f240 80aa 	bls.w	8008bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a64:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008a6c:	f107 031c 	add.w	r3, r7, #28
 8008a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a72:	4618      	mov	r0, r3
 8008a74:	f003 f830 	bl	800bad8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008a78:	8a7b      	ldrh	r3, [r7, #18]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	bfb8      	it	lt
 8008a84:	425b      	neglt	r3, r3
 8008a86:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008a8e:	e086      	b.n	8008b9e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8008a96:	f107 0314 	add.w	r3, r7, #20
 8008a9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a9e:	f7ff fcdf 	bl	8008460 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aa8:	d103      	bne.n	8008ab2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008aaa:	23ce      	movs	r3, #206	; 0xce
 8008aac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008ab0:	e07e      	b.n	8008bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008ab2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4413      	add	r3, r2
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7ff fd2e 	bl	800851c <is_aperture>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d003      	beq.n	8008ad2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8008aca:	2301      	movs	r3, #1
 8008acc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8008ad0:	e06e      	b.n	8008bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8008ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8008ae2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff fd32 	bl	8008550 <enable_spad_bit>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008af2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10c      	bne.n	8008b14 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008afc:	3301      	adds	r3, #1
 8008afe:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008b06:	4619      	mov	r1, r3
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f7ff fd59 	bl	80085c0 <set_ref_spad_map>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008b14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d146      	bne.n	8008baa <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008b1c:	f107 0312 	add.w	r3, r7, #18
 8008b20:	4619      	mov	r1, r3
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f7ff fdee 	bl	8008704 <perform_ref_signal_measurement>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008b2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d13b      	bne.n	8008bae <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008b36:	8a7b      	ldrh	r3, [r7, #18]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	bfb8      	it	lt
 8008b42:	425b      	neglt	r3, r3
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008b46:	8a7b      	ldrh	r3, [r7, #18]
 8008b48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d21c      	bcs.n	8008b88 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d914      	bls.n	8008b80 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008b56:	f107 031c 	add.w	r3, r7, #28
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fd2f 	bl	80085c0 <set_ref_spad_map>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008b6e:	f107 011c 	add.w	r1, r7, #28
 8008b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b74:	4618      	mov	r0, r3
 8008b76:	f002 ffaf 	bl	800bad8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8008b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008b80:	2301      	movs	r3, #1
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b86:	e00a      	b.n	8008b9e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008b92:	f107 031c 	add.w	r3, r7, #28
 8008b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f002 ff9d 	bl	800bad8 <memcpy>
		while (!complete) {
 8008b9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f43f af74 	beq.w	8008a90 <VL53L0X_perform_ref_spad_management+0x2b8>
 8008ba8:	e002      	b.n	8008bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008baa:	bf00      	nop
 8008bac:	e000      	b.n	8008bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008bae:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008bb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d115      	bne.n	8008be4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bbc:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008bc4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	781a      	ldrb	r2, [r3, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008be4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	375c      	adds	r7, #92	; 0x5c
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd90      	pop	{r4, r7, pc}

08008bf0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008bf0:	b590      	push	{r4, r7, lr}
 8008bf2:	b093      	sub	sp, #76	; 0x4c
 8008bf4:	af06      	add	r7, sp, #24
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008c08:	23b4      	movs	r3, #180	; 0xb4
 8008c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8008c0e:	2306      	movs	r3, #6
 8008c10:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008c12:	232c      	movs	r3, #44	; 0x2c
 8008c14:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008c16:	2201      	movs	r2, #1
 8008c18:	21ff      	movs	r1, #255	; 0xff
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f002 fdfc 	bl	800b818 <VL53L0X_WrByte>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008c26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d107      	bne.n	8008c3e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008c2e:	2200      	movs	r2, #0
 8008c30:	214f      	movs	r1, #79	; 0x4f
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f002 fdf0 	bl	800b818 <VL53L0X_WrByte>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008c3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d107      	bne.n	8008c56 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008c46:	222c      	movs	r2, #44	; 0x2c
 8008c48:	214e      	movs	r1, #78	; 0x4e
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f002 fde4 	bl	800b818 <VL53L0X_WrByte>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008c56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d107      	bne.n	8008c6e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008c5e:	2200      	movs	r2, #0
 8008c60:	21ff      	movs	r1, #255	; 0xff
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f002 fdd8 	bl	800b818 <VL53L0X_WrByte>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008c6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d109      	bne.n	8008c8a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008c76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	21b6      	movs	r1, #182	; 0xb6
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f002 fdca 	bl	800b818 <VL53L0X_WrByte>
 8008c84:	4603      	mov	r3, r0
 8008c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c8e:	e009      	b.n	8008ca4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d3f1      	bcc.n	8008c90 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d011      	beq.n	8008cd6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008cb2:	e002      	b.n	8008cba <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008cba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	4413      	add	r3, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fc2a 	bl	800851c <is_aperture>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d103      	bne.n	8008cd6 <VL53L0X_set_reference_spads+0xe6>
 8008cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d3ee      	bcc.n	8008cb4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8008ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ce6:	79f9      	ldrb	r1, [r7, #7]
 8008ce8:	f107 0214 	add.w	r2, r7, #20
 8008cec:	9204      	str	r2, [sp, #16]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	9203      	str	r2, [sp, #12]
 8008cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf4:	9202      	str	r2, [sp, #8]
 8008cf6:	9301      	str	r3, [sp, #4]
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	4623      	mov	r3, r4
 8008cfe:	4602      	mov	r2, r0
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f7ff fc83 	bl	800860c <enable_ref_spads>
 8008d06:	4603      	mov	r3, r0
 8008d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008d0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10c      	bne.n	8008d2e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	79fa      	ldrb	r2, [r7, #7]
 8008d2a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8008d2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3734      	adds	r7, #52	; 0x34
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd90      	pop	{r4, r7, pc}

08008d3a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	460b      	mov	r3, r1
 8008d44:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008d52:	78fb      	ldrb	r3, [r7, #3]
 8008d54:	f043 0301 	orr.w	r3, r3, #1
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f002 fd5a 	bl	800b818 <VL53L0X_WrByte>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f9bf 	bl	80090f4 <VL53L0X_measurement_poll_for_completion>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d105      	bne.n	8008d8e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008d82:	2100      	movs	r1, #0
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff fab5 	bl	80082f4 <VL53L0X_ClearInterruptMask>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008d96:	2200      	movs	r2, #0
 8008d98:	2100      	movs	r1, #0
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f002 fd3c 	bl	800b818 <VL53L0X_WrByte>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	4608      	mov	r0, r1
 8008dba:	4611      	mov	r1, r2
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	70fb      	strb	r3, [r7, #3]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	70bb      	strb	r3, [r7, #2]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	21ff      	movs	r1, #255	; 0xff
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f002 fd1e 	bl	800b818 <VL53L0X_WrByte>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	461a      	mov	r2, r3
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008de6:	2200      	movs	r2, #0
 8008de8:	2100      	movs	r1, #0
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f002 fd14 	bl	800b818 <VL53L0X_WrByte>
 8008df0:	4603      	mov	r3, r0
 8008df2:	461a      	mov	r2, r3
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	21ff      	movs	r1, #255	; 0xff
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f002 fd0a 	bl	800b818 <VL53L0X_WrByte>
 8008e04:	4603      	mov	r3, r0
 8008e06:	461a      	mov	r2, r3
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01e      	beq.n	8008e52 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008e14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d009      	beq.n	8008e30 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	21cb      	movs	r1, #203	; 0xcb
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f002 fd7b 	bl	800b91c <VL53L0X_RdByte>
 8008e26:	4603      	mov	r3, r0
 8008e28:	461a      	mov	r2, r3
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008e30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d02a      	beq.n	8008e8e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008e38:	f107 030e 	add.w	r3, r7, #14
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	21ee      	movs	r1, #238	; 0xee
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f002 fd6b 	bl	800b91c <VL53L0X_RdByte>
 8008e46:	4603      	mov	r3, r0
 8008e48:	461a      	mov	r2, r3
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	73fb      	strb	r3, [r7, #15]
 8008e50:	e01d      	b.n	8008e8e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008e52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00a      	beq.n	8008e70 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008e5a:	78bb      	ldrb	r3, [r7, #2]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	21cb      	movs	r1, #203	; 0xcb
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f002 fcd9 	bl	800b818 <VL53L0X_WrByte>
 8008e66:	4603      	mov	r3, r0
 8008e68:	461a      	mov	r2, r3
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008e70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00a      	beq.n	8008e8e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008e78:	787b      	ldrb	r3, [r7, #1]
 8008e7a:	2280      	movs	r2, #128	; 0x80
 8008e7c:	21ee      	movs	r1, #238	; 0xee
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f002 fd18 	bl	800b8b4 <VL53L0X_UpdateByte>
 8008e84:	4603      	mov	r3, r0
 8008e86:	461a      	mov	r2, r3
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008e8e:	2201      	movs	r2, #1
 8008e90:	21ff      	movs	r1, #255	; 0xff
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f002 fcc0 	bl	800b818 <VL53L0X_WrByte>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f002 fcb6 	bl	800b818 <VL53L0X_WrByte>
 8008eac:	4603      	mov	r3, r0
 8008eae:	461a      	mov	r2, r3
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	21ff      	movs	r1, #255	; 0xff
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f002 fcac 	bl	800b818 <VL53L0X_WrByte>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	f023 0310 	bic.w	r3, r3, #16
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	701a      	strb	r2, [r3, #0]

	return Status;
 8008ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b08a      	sub	sp, #40	; 0x28
 8008ee6:	af04      	add	r7, sp, #16
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	4611      	mov	r1, r2
 8008eee:	461a      	mov	r2, r3
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	71fb      	strb	r3, [r7, #7]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008f0c:	79bb      	ldrb	r3, [r7, #6]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008f18:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f002 fc7a 	bl	800b818 <VL53L0X_WrByte>
 8008f24:	4603      	mov	r3, r0
 8008f26:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d105      	bne.n	8008f3c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008f30:	2140      	movs	r1, #64	; 0x40
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f7ff ff01 	bl	8008d3a <VL53L0X_perform_single_ref_calibration>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008f3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d115      	bne.n	8008f70 <VL53L0X_perform_vhv_calibration+0x8e>
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d112      	bne.n	8008f70 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008f4a:	7d39      	ldrb	r1, [r7, #20]
 8008f4c:	7d7a      	ldrb	r2, [r7, #21]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	9303      	str	r3, [sp, #12]
 8008f52:	2301      	movs	r3, #1
 8008f54:	9302      	str	r3, [sp, #8]
 8008f56:	f107 0313 	add.w	r3, r7, #19
 8008f5a:	9301      	str	r3, [sp, #4]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	460b      	mov	r3, r1
 8008f62:	2101      	movs	r1, #1
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7ff ff23 	bl	8008db0 <VL53L0X_ref_calibration_io>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	75fb      	strb	r3, [r7, #23]
 8008f6e:	e002      	b.n	8008f76 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008f76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d112      	bne.n	8008fa4 <VL53L0X_perform_vhv_calibration+0xc2>
 8008f7e:	79bb      	ldrb	r3, [r7, #6]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00f      	beq.n	8008fa4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008f84:	7dbb      	ldrb	r3, [r7, #22]
 8008f86:	461a      	mov	r2, r3
 8008f88:	2101      	movs	r1, #1
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f002 fc44 	bl	800b818 <VL53L0X_WrByte>
 8008f90:	4603      	mov	r3, r0
 8008f92:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d103      	bne.n	8008fa4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	7dba      	ldrb	r2, [r7, #22]
 8008fa0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08a      	sub	sp, #40	; 0x28
 8008fb4:	af04      	add	r7, sp, #16
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	4611      	mov	r1, r2
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	71fb      	strb	r3, [r7, #7]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008fd6:	79bb      	ldrb	r3, [r7, #6]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008fe2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f002 fc15 	bl	800b818 <VL53L0X_WrByte>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d105      	bne.n	8009006 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff fe9c 	bl	8008d3a <VL53L0X_perform_single_ref_calibration>
 8009002:	4603      	mov	r3, r0
 8009004:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d115      	bne.n	800903a <VL53L0X_perform_phase_calibration+0x8a>
 800900e:	79fb      	ldrb	r3, [r7, #7]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d112      	bne.n	800903a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009014:	7d39      	ldrb	r1, [r7, #20]
 8009016:	7d7a      	ldrb	r2, [r7, #21]
 8009018:	2301      	movs	r3, #1
 800901a:	9303      	str	r3, [sp, #12]
 800901c:	2300      	movs	r3, #0
 800901e:	9302      	str	r3, [sp, #8]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	f107 0313 	add.w	r3, r7, #19
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	460b      	mov	r3, r1
 800902c:	2101      	movs	r1, #1
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f7ff febe 	bl	8008db0 <VL53L0X_ref_calibration_io>
 8009034:	4603      	mov	r3, r0
 8009036:	75fb      	strb	r3, [r7, #23]
 8009038:	e002      	b.n	8009040 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2200      	movs	r2, #0
 800903e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d112      	bne.n	800906e <VL53L0X_perform_phase_calibration+0xbe>
 8009048:	79bb      	ldrb	r3, [r7, #6]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00f      	beq.n	800906e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800904e:	7dbb      	ldrb	r3, [r7, #22]
 8009050:	461a      	mov	r2, r3
 8009052:	2101      	movs	r1, #1
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f002 fbdf 	bl	800b818 <VL53L0X_WrByte>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800905e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d103      	bne.n	800906e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	7dba      	ldrb	r2, [r7, #22]
 800906a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800906e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b086      	sub	sp, #24
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	607a      	str	r2, [r7, #4]
 8009086:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009088:	2300      	movs	r3, #0
 800908a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009096:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009098:	78fa      	ldrb	r2, [r7, #3]
 800909a:	2300      	movs	r3, #0
 800909c:	68b9      	ldr	r1, [r7, #8]
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f7ff ff1f 	bl	8008ee2 <VL53L0X_perform_vhv_calibration>
 80090a4:	4603      	mov	r3, r0
 80090a6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80090a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d107      	bne.n	80090c0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80090b0:	78fa      	ldrb	r2, [r7, #3]
 80090b2:	2300      	movs	r3, #0
 80090b4:	6879      	ldr	r1, [r7, #4]
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff ff7a 	bl	8008fb0 <VL53L0X_perform_phase_calibration>
 80090bc:	4603      	mov	r3, r0
 80090be:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80090c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10f      	bne.n	80090e8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80090c8:	7dbb      	ldrb	r3, [r7, #22]
 80090ca:	461a      	mov	r2, r3
 80090cc:	2101      	movs	r1, #1
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f002 fba2 	bl	800b818 <VL53L0X_WrByte>
 80090d4:	4603      	mov	r3, r0
 80090d6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80090d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d103      	bne.n	80090e8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	7dba      	ldrb	r2, [r7, #22]
 80090e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80090e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090fc:	2300      	movs	r3, #0
 80090fe:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009108:	f107 030f 	add.w	r3, r7, #15
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7fe fdff 	bl	8007d12 <VL53L0X_GetMeasurementDataReady>
 8009114:	4603      	mov	r3, r0
 8009116:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009118:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d110      	bne.n	8009142 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d00f      	beq.n	8009146 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	3301      	adds	r3, #1
 800912a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009132:	d302      	bcc.n	800913a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009134:	23f9      	movs	r3, #249	; 0xf9
 8009136:	75fb      	strb	r3, [r7, #23]
			break;
 8009138:	e006      	b.n	8009148 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f002 fc8c 	bl	800ba58 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009140:	e7e2      	b.n	8009108 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8009146:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009148:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	3301      	adds	r3, #1
 8009166:	b2db      	uxtb	r3, r3
 8009168:	005b      	lsls	r3, r3, #1
 800916a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800917a:	b480      	push	{r7}
 800917c:	b085      	sub	sp, #20
 800917e:	af00      	add	r7, sp, #0
 8009180:	4603      	mov	r3, r0
 8009182:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	085b      	lsrs	r3, r3, #1
 800918c:	b2db      	uxtb	r3, r3
 800918e:	3b01      	subs	r3, #1
 8009190:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8009192:	7bfb      	ldrb	r3, [r7, #15]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80091ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091b0:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80091b2:	e002      	b.n	80091ba <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	089b      	lsrs	r3, r3, #2
 80091b8:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d8f8      	bhi.n	80091b4 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80091c2:	e017      	b.n	80091f4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	4413      	add	r3, r2
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d30b      	bcc.n	80091e8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	4413      	add	r3, r2
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	085b      	lsrs	r3, r3, #1
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	4413      	add	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	e002      	b.n	80091ee <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	085b      	lsrs	r3, r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	089b      	lsrs	r3, r3, #2
 80091f2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e4      	bne.n	80091c4 <VL53L0X_isqrt+0x24>
	}

	return res;
 80091fa:	68fb      	ldr	r3, [r7, #12]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3714      	adds	r7, #20
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009210:	2300      	movs	r3, #0
 8009212:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009214:	2200      	movs	r2, #0
 8009216:	2183      	movs	r1, #131	; 0x83
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f002 fafd 	bl	800b818 <VL53L0X_WrByte>
 800921e:	4603      	mov	r3, r0
 8009220:	461a      	mov	r2, r3
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	4313      	orrs	r3, r2
 8009226:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d11e      	bne.n	800926e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009234:	f107 030f 	add.w	r3, r7, #15
 8009238:	461a      	mov	r2, r3
 800923a:	2183      	movs	r1, #131	; 0x83
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f002 fb6d 	bl	800b91c <VL53L0X_RdByte>
 8009242:	4603      	mov	r3, r0
 8009244:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <VL53L0X_device_read_strobe+0x5a>
 800924c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d106      	bne.n	8009262 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	3301      	adds	r3, #1
 8009258:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009260:	d3e8      	bcc.n	8009234 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009268:	d301      	bcc.n	800926e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800926a:	23f9      	movs	r3, #249	; 0xf9
 800926c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800926e:	2201      	movs	r2, #1
 8009270:	2183      	movs	r1, #131	; 0x83
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f002 fad0 	bl	800b818 <VL53L0X_WrByte>
 8009278:	4603      	mov	r3, r0
 800927a:	461a      	mov	r2, r3
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	4313      	orrs	r3, r2
 8009280:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009282:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b098      	sub	sp, #96	; 0x60
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	460b      	mov	r3, r1
 8009298:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800929a:	2300      	movs	r3, #0
 800929c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80092be:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80092c2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80092d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80092da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092de:	2b07      	cmp	r3, #7
 80092e0:	f000 8408 	beq.w	8009af4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80092e4:	2201      	movs	r2, #1
 80092e6:	2180      	movs	r1, #128	; 0x80
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f002 fa95 	bl	800b818 <VL53L0X_WrByte>
 80092ee:	4603      	mov	r3, r0
 80092f0:	461a      	mov	r2, r3
 80092f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80092fc:	2201      	movs	r2, #1
 80092fe:	21ff      	movs	r1, #255	; 0xff
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f002 fa89 	bl	800b818 <VL53L0X_WrByte>
 8009306:	4603      	mov	r3, r0
 8009308:	461a      	mov	r2, r3
 800930a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800930e:	4313      	orrs	r3, r2
 8009310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009314:	2200      	movs	r2, #0
 8009316:	2100      	movs	r1, #0
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f002 fa7d 	bl	800b818 <VL53L0X_WrByte>
 800931e:	4603      	mov	r3, r0
 8009320:	461a      	mov	r2, r3
 8009322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009326:	4313      	orrs	r3, r2
 8009328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800932c:	2206      	movs	r2, #6
 800932e:	21ff      	movs	r1, #255	; 0xff
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f002 fa71 	bl	800b818 <VL53L0X_WrByte>
 8009336:	4603      	mov	r3, r0
 8009338:	461a      	mov	r2, r3
 800933a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800933e:	4313      	orrs	r3, r2
 8009340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009344:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009348:	461a      	mov	r2, r3
 800934a:	2183      	movs	r1, #131	; 0x83
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f002 fae5 	bl	800b91c <VL53L0X_RdByte>
 8009352:	4603      	mov	r3, r0
 8009354:	461a      	mov	r2, r3
 8009356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800935a:	4313      	orrs	r3, r2
 800935c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009360:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009364:	f043 0304 	orr.w	r3, r3, #4
 8009368:	b2db      	uxtb	r3, r3
 800936a:	461a      	mov	r2, r3
 800936c:	2183      	movs	r1, #131	; 0x83
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f002 fa52 	bl	800b818 <VL53L0X_WrByte>
 8009374:	4603      	mov	r3, r0
 8009376:	461a      	mov	r2, r3
 8009378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800937c:	4313      	orrs	r3, r2
 800937e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009382:	2207      	movs	r2, #7
 8009384:	21ff      	movs	r1, #255	; 0xff
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f002 fa46 	bl	800b818 <VL53L0X_WrByte>
 800938c:	4603      	mov	r3, r0
 800938e:	461a      	mov	r2, r3
 8009390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009394:	4313      	orrs	r3, r2
 8009396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800939a:	2201      	movs	r2, #1
 800939c:	2181      	movs	r1, #129	; 0x81
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f002 fa3a 	bl	800b818 <VL53L0X_WrByte>
 80093a4:	4603      	mov	r3, r0
 80093a6:	461a      	mov	r2, r3
 80093a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093ac:	4313      	orrs	r3, r2
 80093ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f002 fb50 	bl	800ba58 <VL53L0X_PollingDelay>
 80093b8:	4603      	mov	r3, r0
 80093ba:	461a      	mov	r2, r3
 80093bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80093c6:	2201      	movs	r2, #1
 80093c8:	2180      	movs	r1, #128	; 0x80
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f002 fa24 	bl	800b818 <VL53L0X_WrByte>
 80093d0:	4603      	mov	r3, r0
 80093d2:	461a      	mov	r2, r3
 80093d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093d8:	4313      	orrs	r3, r2
 80093da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8098 	beq.w	800951a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80093ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80093ee:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f040 8091 	bne.w	800951a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80093f8:	226b      	movs	r2, #107	; 0x6b
 80093fa:	2194      	movs	r1, #148	; 0x94
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f002 fa0b 	bl	800b818 <VL53L0X_WrByte>
 8009402:	4603      	mov	r3, r0
 8009404:	461a      	mov	r2, r3
 8009406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800940a:	4313      	orrs	r3, r2
 800940c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff fef9 	bl	8009208 <VL53L0X_device_read_strobe>
 8009416:	4603      	mov	r3, r0
 8009418:	461a      	mov	r2, r3
 800941a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800941e:	4313      	orrs	r3, r2
 8009420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009424:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009428:	461a      	mov	r2, r3
 800942a:	2190      	movs	r1, #144	; 0x90
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f002 fad7 	bl	800b9e0 <VL53L0X_RdDWord>
 8009432:	4603      	mov	r3, r0
 8009434:	461a      	mov	r2, r3
 8009436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800943a:	4313      	orrs	r3, r2
 800943c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	0a1b      	lsrs	r3, r3, #8
 8009444:	b2db      	uxtb	r3, r3
 8009446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800944a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	0bdb      	lsrs	r3, r3, #15
 8009452:	b2db      	uxtb	r3, r3
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800945c:	2224      	movs	r2, #36	; 0x24
 800945e:	2194      	movs	r1, #148	; 0x94
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f002 f9d9 	bl	800b818 <VL53L0X_WrByte>
 8009466:	4603      	mov	r3, r0
 8009468:	461a      	mov	r2, r3
 800946a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800946e:	4313      	orrs	r3, r2
 8009470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff fec7 	bl	8009208 <VL53L0X_device_read_strobe>
 800947a:	4603      	mov	r3, r0
 800947c:	461a      	mov	r2, r3
 800947e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009482:	4313      	orrs	r3, r2
 8009484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800948c:	461a      	mov	r2, r3
 800948e:	2190      	movs	r1, #144	; 0x90
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f002 faa5 	bl	800b9e0 <VL53L0X_RdDWord>
 8009496:	4603      	mov	r3, r0
 8009498:	461a      	mov	r2, r3
 800949a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800949e:	4313      	orrs	r3, r2
 80094a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80094a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a6:	0e1b      	lsrs	r3, r3, #24
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80094ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ae:	0c1b      	lsrs	r3, r3, #16
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	0a1b      	lsrs	r3, r3, #8
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80094c2:	2225      	movs	r2, #37	; 0x25
 80094c4:	2194      	movs	r1, #148	; 0x94
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f002 f9a6 	bl	800b818 <VL53L0X_WrByte>
 80094cc:	4603      	mov	r3, r0
 80094ce:	461a      	mov	r2, r3
 80094d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094d4:	4313      	orrs	r3, r2
 80094d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff fe94 	bl	8009208 <VL53L0X_device_read_strobe>
 80094e0:	4603      	mov	r3, r0
 80094e2:	461a      	mov	r2, r3
 80094e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094e8:	4313      	orrs	r3, r2
 80094ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80094ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094f2:	461a      	mov	r2, r3
 80094f4:	2190      	movs	r1, #144	; 0x90
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f002 fa72 	bl	800b9e0 <VL53L0X_RdDWord>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461a      	mov	r2, r3
 8009500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009504:	4313      	orrs	r3, r2
 8009506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	0e1b      	lsrs	r3, r3, #24
 800950e:	b2db      	uxtb	r3, r3
 8009510:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	0c1b      	lsrs	r3, r3, #16
 8009516:	b2db      	uxtb	r3, r3
 8009518:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800951a:	78fb      	ldrb	r3, [r7, #3]
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8189 	beq.w	8009838 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009526:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800952a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800952e:	2b00      	cmp	r3, #0
 8009530:	f040 8182 	bne.w	8009838 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009534:	2202      	movs	r2, #2
 8009536:	2194      	movs	r1, #148	; 0x94
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f002 f96d 	bl	800b818 <VL53L0X_WrByte>
 800953e:	4603      	mov	r3, r0
 8009540:	461a      	mov	r2, r3
 8009542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009546:	4313      	orrs	r3, r2
 8009548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7ff fe5b 	bl	8009208 <VL53L0X_device_read_strobe>
 8009552:	4603      	mov	r3, r0
 8009554:	461a      	mov	r2, r3
 8009556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800955a:	4313      	orrs	r3, r2
 800955c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009560:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009564:	461a      	mov	r2, r3
 8009566:	2190      	movs	r1, #144	; 0x90
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f002 f9d7 	bl	800b91c <VL53L0X_RdByte>
 800956e:	4603      	mov	r3, r0
 8009570:	461a      	mov	r2, r3
 8009572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009576:	4313      	orrs	r3, r2
 8009578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800957c:	227b      	movs	r2, #123	; 0x7b
 800957e:	2194      	movs	r1, #148	; 0x94
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f002 f949 	bl	800b818 <VL53L0X_WrByte>
 8009586:	4603      	mov	r3, r0
 8009588:	461a      	mov	r2, r3
 800958a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800958e:	4313      	orrs	r3, r2
 8009590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7ff fe37 	bl	8009208 <VL53L0X_device_read_strobe>
 800959a:	4603      	mov	r3, r0
 800959c:	461a      	mov	r2, r3
 800959e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095a2:	4313      	orrs	r3, r2
 80095a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80095a8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80095ac:	461a      	mov	r2, r3
 80095ae:	2190      	movs	r1, #144	; 0x90
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f002 f9b3 	bl	800b91c <VL53L0X_RdByte>
 80095b6:	4603      	mov	r3, r0
 80095b8:	461a      	mov	r2, r3
 80095ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095be:	4313      	orrs	r3, r2
 80095c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80095c4:	2277      	movs	r2, #119	; 0x77
 80095c6:	2194      	movs	r1, #148	; 0x94
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f002 f925 	bl	800b818 <VL53L0X_WrByte>
 80095ce:	4603      	mov	r3, r0
 80095d0:	461a      	mov	r2, r3
 80095d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095d6:	4313      	orrs	r3, r2
 80095d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff fe13 	bl	8009208 <VL53L0X_device_read_strobe>
 80095e2:	4603      	mov	r3, r0
 80095e4:	461a      	mov	r2, r3
 80095e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80095f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095f4:	461a      	mov	r2, r3
 80095f6:	2190      	movs	r1, #144	; 0x90
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f002 f9f1 	bl	800b9e0 <VL53L0X_RdDWord>
 80095fe:	4603      	mov	r3, r0
 8009600:	461a      	mov	r2, r3
 8009602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009606:	4313      	orrs	r3, r2
 8009608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	0e5b      	lsrs	r3, r3, #25
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009616:	b2db      	uxtb	r3, r3
 8009618:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	0c9b      	lsrs	r3, r3, #18
 800961e:	b2db      	uxtb	r3, r3
 8009620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009624:	b2db      	uxtb	r3, r3
 8009626:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962a:	0adb      	lsrs	r3, r3, #11
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009632:	b2db      	uxtb	r3, r3
 8009634:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	091b      	lsrs	r3, r3, #4
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009640:	b2db      	uxtb	r3, r3
 8009642:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009646:	b2db      	uxtb	r3, r3
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	b2db      	uxtb	r3, r3
 800964c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8009656:	2278      	movs	r2, #120	; 0x78
 8009658:	2194      	movs	r1, #148	; 0x94
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f002 f8dc 	bl	800b818 <VL53L0X_WrByte>
 8009660:	4603      	mov	r3, r0
 8009662:	461a      	mov	r2, r3
 8009664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009668:	4313      	orrs	r3, r2
 800966a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff fdca 	bl	8009208 <VL53L0X_device_read_strobe>
 8009674:	4603      	mov	r3, r0
 8009676:	461a      	mov	r2, r3
 8009678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800967c:	4313      	orrs	r3, r2
 800967e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009682:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009686:	461a      	mov	r2, r3
 8009688:	2190      	movs	r1, #144	; 0x90
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f002 f9a8 	bl	800b9e0 <VL53L0X_RdDWord>
 8009690:	4603      	mov	r3, r0
 8009692:	461a      	mov	r2, r3
 8009694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009698:	4313      	orrs	r3, r2
 800969a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	0f5b      	lsrs	r3, r3, #29
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a8:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80096aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096ae:	4413      	add	r3, r2
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	0d9b      	lsrs	r3, r3, #22
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	0bdb      	lsrs	r3, r3, #15
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	085b      	lsrs	r3, r3, #1
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80096ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	019b      	lsls	r3, r3, #6
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80096fe:	2279      	movs	r2, #121	; 0x79
 8009700:	2194      	movs	r1, #148	; 0x94
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f002 f888 	bl	800b818 <VL53L0X_WrByte>
 8009708:	4603      	mov	r3, r0
 800970a:	461a      	mov	r2, r3
 800970c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009710:	4313      	orrs	r3, r2
 8009712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff fd76 	bl	8009208 <VL53L0X_device_read_strobe>
 800971c:	4603      	mov	r3, r0
 800971e:	461a      	mov	r2, r3
 8009720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009724:	4313      	orrs	r3, r2
 8009726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800972a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800972e:	461a      	mov	r2, r3
 8009730:	2190      	movs	r1, #144	; 0x90
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f002 f954 	bl	800b9e0 <VL53L0X_RdDWord>
 8009738:	4603      	mov	r3, r0
 800973a:	461a      	mov	r2, r3
 800973c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009740:	4313      	orrs	r3, r2
 8009742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	0e9b      	lsrs	r3, r3, #26
 800974a:	b2db      	uxtb	r3, r3
 800974c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009750:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009752:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009756:	4413      	add	r3, r2
 8009758:	b2db      	uxtb	r3, r3
 800975a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	0cdb      	lsrs	r3, r3, #19
 8009760:	b2db      	uxtb	r3, r3
 8009762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009766:	b2db      	uxtb	r3, r3
 8009768:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	0b1b      	lsrs	r3, r3, #12
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009774:	b2db      	uxtb	r3, r3
 8009776:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977a:	095b      	lsrs	r3, r3, #5
 800977c:	b2db      	uxtb	r3, r3
 800977e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009782:	b2db      	uxtb	r3, r3
 8009784:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	b2db      	uxtb	r3, r3
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	b2db      	uxtb	r3, r3
 800978e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009798:	227a      	movs	r2, #122	; 0x7a
 800979a:	2194      	movs	r1, #148	; 0x94
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f002 f83b 	bl	800b818 <VL53L0X_WrByte>
 80097a2:	4603      	mov	r3, r0
 80097a4:	461a      	mov	r2, r3
 80097a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097aa:	4313      	orrs	r3, r2
 80097ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7ff fd29 	bl	8009208 <VL53L0X_device_read_strobe>
 80097b6:	4603      	mov	r3, r0
 80097b8:	461a      	mov	r2, r3
 80097ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097be:	4313      	orrs	r3, r2
 80097c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80097c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097c8:	461a      	mov	r2, r3
 80097ca:	2190      	movs	r1, #144	; 0x90
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f002 f907 	bl	800b9e0 <VL53L0X_RdDWord>
 80097d2:	4603      	mov	r3, r0
 80097d4:	461a      	mov	r2, r3
 80097d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097da:	4313      	orrs	r3, r2
 80097dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80097e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e2:	0f9b      	lsrs	r3, r3, #30
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ea:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80097ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097f0:	4413      	add	r3, r2
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	0ddb      	lsrs	r3, r3, #23
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009800:	b2db      	uxtb	r3, r3
 8009802:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009806:	0c1b      	lsrs	r3, r3, #16
 8009808:	b2db      	uxtb	r3, r3
 800980a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800980e:	b2db      	uxtb	r3, r3
 8009810:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	0a5b      	lsrs	r3, r3, #9
 8009816:	b2db      	uxtb	r3, r3
 8009818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800981c:	b2db      	uxtb	r3, r3
 800981e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	089b      	lsrs	r3, r3, #2
 8009826:	b2db      	uxtb	r3, r3
 8009828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982c:	b2db      	uxtb	r3, r3
 800982e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009832:	2300      	movs	r3, #0
 8009834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 80f1 	beq.w	8009a26 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009844:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009848:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800984c:	2b00      	cmp	r3, #0
 800984e:	f040 80ea 	bne.w	8009a26 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009852:	227b      	movs	r2, #123	; 0x7b
 8009854:	2194      	movs	r1, #148	; 0x94
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f001 ffde 	bl	800b818 <VL53L0X_WrByte>
 800985c:	4603      	mov	r3, r0
 800985e:	461a      	mov	r2, r3
 8009860:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009864:	4313      	orrs	r3, r2
 8009866:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7ff fccc 	bl	8009208 <VL53L0X_device_read_strobe>
 8009870:	4603      	mov	r3, r0
 8009872:	461a      	mov	r2, r3
 8009874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009878:	4313      	orrs	r3, r2
 800987a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800987e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009882:	461a      	mov	r2, r3
 8009884:	2190      	movs	r1, #144	; 0x90
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f002 f8aa 	bl	800b9e0 <VL53L0X_RdDWord>
 800988c:	4603      	mov	r3, r0
 800988e:	461a      	mov	r2, r3
 8009890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009894:	4313      	orrs	r3, r2
 8009896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800989a:	227c      	movs	r2, #124	; 0x7c
 800989c:	2194      	movs	r1, #148	; 0x94
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f001 ffba 	bl	800b818 <VL53L0X_WrByte>
 80098a4:	4603      	mov	r3, r0
 80098a6:	461a      	mov	r2, r3
 80098a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098ac:	4313      	orrs	r3, r2
 80098ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f7ff fca8 	bl	8009208 <VL53L0X_device_read_strobe>
 80098b8:	4603      	mov	r3, r0
 80098ba:	461a      	mov	r2, r3
 80098bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098c0:	4313      	orrs	r3, r2
 80098c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80098c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098ca:	461a      	mov	r2, r3
 80098cc:	2190      	movs	r1, #144	; 0x90
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f002 f886 	bl	800b9e0 <VL53L0X_RdDWord>
 80098d4:	4603      	mov	r3, r0
 80098d6:	461a      	mov	r2, r3
 80098d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098dc:	4313      	orrs	r3, r2
 80098de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80098e2:	2273      	movs	r2, #115	; 0x73
 80098e4:	2194      	movs	r1, #148	; 0x94
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 ff96 	bl	800b818 <VL53L0X_WrByte>
 80098ec:	4603      	mov	r3, r0
 80098ee:	461a      	mov	r2, r3
 80098f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098f4:	4313      	orrs	r3, r2
 80098f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7ff fc84 	bl	8009208 <VL53L0X_device_read_strobe>
 8009900:	4603      	mov	r3, r0
 8009902:	461a      	mov	r2, r3
 8009904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009908:	4313      	orrs	r3, r2
 800990a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800990e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009912:	461a      	mov	r2, r3
 8009914:	2190      	movs	r1, #144	; 0x90
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f002 f862 	bl	800b9e0 <VL53L0X_RdDWord>
 800991c:	4603      	mov	r3, r0
 800991e:	461a      	mov	r2, r3
 8009920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009924:	4313      	orrs	r3, r2
 8009926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800992e:	b29b      	uxth	r3, r3
 8009930:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009932:	2274      	movs	r2, #116	; 0x74
 8009934:	2194      	movs	r1, #148	; 0x94
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f001 ff6e 	bl	800b818 <VL53L0X_WrByte>
 800993c:	4603      	mov	r3, r0
 800993e:	461a      	mov	r2, r3
 8009940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009944:	4313      	orrs	r3, r2
 8009946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7ff fc5c 	bl	8009208 <VL53L0X_device_read_strobe>
 8009950:	4603      	mov	r3, r0
 8009952:	461a      	mov	r2, r3
 8009954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009958:	4313      	orrs	r3, r2
 800995a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800995e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009962:	461a      	mov	r2, r3
 8009964:	2190      	movs	r1, #144	; 0x90
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f002 f83a 	bl	800b9e0 <VL53L0X_RdDWord>
 800996c:	4603      	mov	r3, r0
 800996e:	461a      	mov	r2, r3
 8009970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009974:	4313      	orrs	r3, r2
 8009976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800997e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009980:	4313      	orrs	r3, r2
 8009982:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009984:	2275      	movs	r2, #117	; 0x75
 8009986:	2194      	movs	r1, #148	; 0x94
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 ff45 	bl	800b818 <VL53L0X_WrByte>
 800998e:	4603      	mov	r3, r0
 8009990:	461a      	mov	r2, r3
 8009992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009996:	4313      	orrs	r3, r2
 8009998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7ff fc33 	bl	8009208 <VL53L0X_device_read_strobe>
 80099a2:	4603      	mov	r3, r0
 80099a4:	461a      	mov	r2, r3
 80099a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099aa:	4313      	orrs	r3, r2
 80099ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80099b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099b4:	461a      	mov	r2, r3
 80099b6:	2190      	movs	r1, #144	; 0x90
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f002 f811 	bl	800b9e0 <VL53L0X_RdDWord>
 80099be:	4603      	mov	r3, r0
 80099c0:	461a      	mov	r2, r3
 80099c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099c6:	4313      	orrs	r3, r2
 80099c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80099d4:	2276      	movs	r2, #118	; 0x76
 80099d6:	2194      	movs	r1, #148	; 0x94
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f001 ff1d 	bl	800b818 <VL53L0X_WrByte>
 80099de:	4603      	mov	r3, r0
 80099e0:	461a      	mov	r2, r3
 80099e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099e6:	4313      	orrs	r3, r2
 80099e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff fc0b 	bl	8009208 <VL53L0X_device_read_strobe>
 80099f2:	4603      	mov	r3, r0
 80099f4:	461a      	mov	r2, r3
 80099f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099fa:	4313      	orrs	r3, r2
 80099fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a04:	461a      	mov	r2, r3
 8009a06:	2190      	movs	r1, #144	; 0x90
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f001 ffe9 	bl	800b9e0 <VL53L0X_RdDWord>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	461a      	mov	r2, r3
 8009a12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a16:	4313      	orrs	r3, r2
 8009a18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a22:	4313      	orrs	r3, r2
 8009a24:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009a26:	2200      	movs	r2, #0
 8009a28:	2181      	movs	r1, #129	; 0x81
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 fef4 	bl	800b818 <VL53L0X_WrByte>
 8009a30:	4603      	mov	r3, r0
 8009a32:	461a      	mov	r2, r3
 8009a34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009a3e:	2206      	movs	r2, #6
 8009a40:	21ff      	movs	r1, #255	; 0xff
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f001 fee8 	bl	800b818 <VL53L0X_WrByte>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a50:	4313      	orrs	r3, r2
 8009a52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009a56:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	2183      	movs	r1, #131	; 0x83
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 ff5c 	bl	800b91c <VL53L0X_RdByte>
 8009a64:	4603      	mov	r3, r0
 8009a66:	461a      	mov	r2, r3
 8009a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009a72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a76:	f023 0304 	bic.w	r3, r3, #4
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	2183      	movs	r1, #131	; 0x83
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f001 fec9 	bl	800b818 <VL53L0X_WrByte>
 8009a86:	4603      	mov	r3, r0
 8009a88:	461a      	mov	r2, r3
 8009a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009a94:	2201      	movs	r2, #1
 8009a96:	21ff      	movs	r1, #255	; 0xff
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 febd 	bl	800b818 <VL53L0X_WrByte>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009aac:	2201      	movs	r2, #1
 8009aae:	2100      	movs	r1, #0
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 feb1 	bl	800b818 <VL53L0X_WrByte>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	461a      	mov	r2, r3
 8009aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	21ff      	movs	r1, #255	; 0xff
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f001 fea5 	bl	800b818 <VL53L0X_WrByte>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009adc:	2200      	movs	r2, #0
 8009ade:	2180      	movs	r1, #128	; 0x80
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 fe99 	bl	800b818 <VL53L0X_WrByte>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	461a      	mov	r2, r3
 8009aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aee:	4313      	orrs	r3, r2
 8009af0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009af4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f040 808f 	bne.w	8009c1c <VL53L0X_get_info_from_device+0x98e>
 8009afe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b02:	2b07      	cmp	r3, #7
 8009b04:	f000 808a 	beq.w	8009c1c <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009b08:	78fb      	ldrb	r3, [r7, #3]
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d024      	beq.n	8009b5c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009b12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b16:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d11e      	bne.n	8009b5c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009b24:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009b2e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009b32:	2300      	movs	r3, #0
 8009b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b36:	e00e      	b.n	8009b56 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009b38:	f107 0208 	add.w	r2, r7, #8
 8009b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b3e:	4413      	add	r3, r2
 8009b40:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009b4c:	460a      	mov	r2, r1
 8009b4e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b52:	3301      	adds	r3, #1
 8009b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b58:	2b05      	cmp	r3, #5
 8009b5a:	dded      	ble.n	8009b38 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d018      	beq.n	8009b98 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009b66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b6a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d112      	bne.n	8009b98 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009b72:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009b7c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	33f3      	adds	r3, #243	; 0xf3
 8009b8a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009b8c:	f107 0310 	add.w	r3, r7, #16
 8009b90:	4619      	mov	r1, r3
 8009b92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b94:	f001 ffb3 	bl	800bafe <strcpy>

		}

		if (((option & 4) == 4) &&
 8009b98:	78fb      	ldrb	r3, [r7, #3]
 8009b9a:	f003 0304 	and.w	r3, r3, #4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d030      	beq.n	8009c04 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009ba2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ba6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d12a      	bne.n	8009c04 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc0:	025b      	lsls	r3, r3, #9
 8009bc2:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bc8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8009bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d011      	beq.n	8009bfc <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009bd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8009be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009be2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009be6:	fb02 f303 	mul.w	r3, r2, r3
 8009bea:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009bec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8009bf0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009bf4:	425b      	negs	r3, r3
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009bfc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009c04:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009c08:	78fb      	ldrb	r3, [r7, #3]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009c12:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c1c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3760      	adds	r7, #96	; 0x60
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009c28:	b490      	push	{r4, r7}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009c34:	f240 6377 	movw	r3, #1655	; 0x677
 8009c38:	f04f 0400 	mov.w	r4, #0
 8009c3c:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8009c40:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009c44:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009c46:	78fb      	ldrb	r3, [r7, #3]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	fb02 f303 	mul.w	r3, r2, r3
 8009c54:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009c56:	68bb      	ldr	r3, [r7, #8]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bc90      	pop	{r4, r7}
 8009c60:	4770      	bx	lr

08009c62 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009c62:	b480      	push	{r7}
 8009c64:	b087      	sub	sp, #28
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d017      	beq.n	8009cac <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009c82:	e005      	b.n	8009c90 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	085b      	lsrs	r3, r3, #1
 8009c88:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009c8a:	89fb      	ldrh	r3, [r7, #14]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1f4      	bne.n	8009c84 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009c9a:	89fb      	ldrh	r3, [r7, #14]
 8009c9c:	021b      	lsls	r3, r3, #8
 8009c9e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009ca8:	4413      	add	r3, r2
 8009caa:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009cac:	8afb      	ldrh	r3, [r7, #22]

}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	371c      	adds	r7, #28
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009cc8:	88fb      	ldrh	r3, [r7, #6]
 8009cca:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009ccc:	88fa      	ldrh	r2, [r7, #6]
 8009cce:	0a12      	lsrs	r2, r2, #8
 8009cd0:	b292      	uxth	r2, r2
 8009cd2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
	...

08009ce8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009cfa:	79fb      	ldrb	r3, [r7, #7]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7ff ff92 	bl	8009c28 <VL53L0X_calc_macro_period_ps>
 8009d04:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009d0c:	4a0a      	ldr	r2, [pc, #40]	; (8009d38 <VL53L0X_calc_timeout_mclks+0x50>)
 8009d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d12:	099b      	lsrs	r3, r3, #6
 8009d14:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d1c:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	085b      	lsrs	r3, r3, #1
 8009d24:	441a      	add	r2, r3
	timeout_period_mclks =
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d2c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8009d2e:	69fb      	ldr	r3, [r7, #28]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3720      	adds	r7, #32
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	10624dd3 	.word	0x10624dd3

08009d3c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	807b      	strh	r3, [r7, #2]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009d50:	787b      	ldrb	r3, [r7, #1]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff ff67 	bl	8009c28 <VL53L0X_calc_macro_period_ps>
 8009d5a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009d62:	4a0a      	ldr	r2, [pc, #40]	; (8009d8c <VL53L0X_calc_timeout_us+0x50>)
 8009d64:	fba2 2303 	umull	r2, r3, r2, r3
 8009d68:	099b      	lsrs	r3, r3, #6
 8009d6a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009d6c:	887b      	ldrh	r3, [r7, #2]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	fb02 f303 	mul.w	r3, r2, r3
 8009d74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8009d78:	4a04      	ldr	r2, [pc, #16]	; (8009d8c <VL53L0X_calc_timeout_us+0x50>)
 8009d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7e:	099b      	lsrs	r3, r3, #6
 8009d80:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009d82:	697b      	ldr	r3, [r7, #20]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	10624dd3 	.word	0x10624dd3

08009d90 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08c      	sub	sp, #48	; 0x30
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	607a      	str	r2, [r7, #4]
 8009d9c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009db6:	7afb      	ldrb	r3, [r7, #11]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d005      	beq.n	8009dc8 <get_sequence_step_timeout+0x38>
 8009dbc:	7afb      	ldrb	r3, [r7, #11]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d002      	beq.n	8009dc8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009dc2:	7afb      	ldrb	r3, [r7, #11]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d128      	bne.n	8009e1a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009dc8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009dcc:	461a      	mov	r2, r3
 8009dce:	2100      	movs	r1, #0
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f7fd fa7d 	bl	80072d0 <VL53L0X_GetVcselPulsePeriod>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009ddc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d109      	bne.n	8009df8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009de4:	f107 0320 	add.w	r3, r7, #32
 8009de8:	461a      	mov	r2, r3
 8009dea:	2146      	movs	r1, #70	; 0x46
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f001 fd95 	bl	800b91c <VL53L0X_RdByte>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff ff5b 	bl	8009cba <VL53L0X_decode_timeout>
 8009e04:	4603      	mov	r3, r0
 8009e06:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009e08:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e0e:	4619      	mov	r1, r3
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f7ff ff93 	bl	8009d3c <VL53L0X_calc_timeout_us>
 8009e16:	62b8      	str	r0, [r7, #40]	; 0x28
 8009e18:	e092      	b.n	8009f40 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009e1a:	7afb      	ldrb	r3, [r7, #11]
 8009e1c:	2b03      	cmp	r3, #3
 8009e1e:	d135      	bne.n	8009e8c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009e20:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009e24:	461a      	mov	r2, r3
 8009e26:	2100      	movs	r1, #0
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f7fd fa51 	bl	80072d0 <VL53L0X_GetVcselPulsePeriod>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009e34:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f040 8081 	bne.w	8009f40 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009e3e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009e42:	461a      	mov	r2, r3
 8009e44:	2100      	movs	r1, #0
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f7fd fa42 	bl	80072d0 <VL53L0X_GetVcselPulsePeriod>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009e52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d109      	bne.n	8009e6e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8009e5a:	f107 031e 	add.w	r3, r7, #30
 8009e5e:	461a      	mov	r2, r3
 8009e60:	2151      	movs	r1, #81	; 0x51
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f001 fd84 	bl	800b970 <VL53L0X_RdWord>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009e6e:	8bfb      	ldrh	r3, [r7, #30]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7ff ff22 	bl	8009cba <VL53L0X_decode_timeout>
 8009e76:	4603      	mov	r3, r0
 8009e78:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009e7a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009e7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e80:	4619      	mov	r1, r3
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7ff ff5a 	bl	8009d3c <VL53L0X_calc_timeout_us>
 8009e88:	62b8      	str	r0, [r7, #40]	; 0x28
 8009e8a:	e059      	b.n	8009f40 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009e8c:	7afb      	ldrb	r3, [r7, #11]
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	d156      	bne.n	8009f40 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009e92:	f107 0314 	add.w	r3, r7, #20
 8009e96:	4619      	mov	r1, r3
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7fd fb25 	bl	80074e8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009ea2:	7dfb      	ldrb	r3, [r7, #23]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01d      	beq.n	8009ee4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009ea8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009eac:	461a      	mov	r2, r3
 8009eae:	2100      	movs	r1, #0
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f7fd fa0d 	bl	80072d0 <VL53L0X_GetVcselPulsePeriod>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009ebc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10f      	bne.n	8009ee4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009ec4:	f107 031e 	add.w	r3, r7, #30
 8009ec8:	461a      	mov	r2, r3
 8009eca:	2151      	movs	r1, #81	; 0x51
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f001 fd4f 	bl	800b970 <VL53L0X_RdWord>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009ed8:	8bfb      	ldrh	r3, [r7, #30]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7ff feed 	bl	8009cba <VL53L0X_decode_timeout>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009ee4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d109      	bne.n	8009f00 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009eec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	2101      	movs	r1, #1
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f7fd f9eb 	bl	80072d0 <VL53L0X_GetVcselPulsePeriod>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009f00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10f      	bne.n	8009f28 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009f08:	f107 031c 	add.w	r3, r7, #28
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	2171      	movs	r1, #113	; 0x71
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f001 fd2d 	bl	800b970 <VL53L0X_RdWord>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009f1c:	8bbb      	ldrh	r3, [r7, #28]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff fecb 	bl	8009cba <VL53L0X_decode_timeout>
 8009f24:	4603      	mov	r3, r0
 8009f26:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009f28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009f30:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009f34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f36:	4619      	mov	r1, r3
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7ff feff 	bl	8009d3c <VL53L0X_calc_timeout_us>
 8009f3e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f44:	601a      	str	r2, [r3, #0]

	return Status;
 8009f46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3730      	adds	r7, #48	; 0x30
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b08a      	sub	sp, #40	; 0x28
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	607a      	str	r2, [r7, #4]
 8009f5e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f60:	2300      	movs	r3, #0
 8009f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009f66:	7afb      	ldrb	r3, [r7, #11]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d005      	beq.n	8009f78 <set_sequence_step_timeout+0x26>
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d002      	beq.n	8009f78 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009f72:	7afb      	ldrb	r3, [r7, #11]
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d138      	bne.n	8009fea <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009f78:	f107 031b 	add.w	r3, r7, #27
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	2100      	movs	r1, #0
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f7fd f9a5 	bl	80072d0 <VL53L0X_GetVcselPulsePeriod>
 8009f86:	4603      	mov	r3, r0
 8009f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009f8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d11a      	bne.n	8009fca <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009f94:	7efb      	ldrb	r3, [r7, #27]
 8009f96:	461a      	mov	r2, r3
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff fea4 	bl	8009ce8 <VL53L0X_calc_timeout_mclks>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009fa4:	8bbb      	ldrh	r3, [r7, #28]
 8009fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009faa:	d903      	bls.n	8009fb4 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009fac:	23ff      	movs	r3, #255	; 0xff
 8009fae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009fb2:	e004      	b.n	8009fbe <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009fb4:	8bbb      	ldrh	r3, [r7, #28]
 8009fb6:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009fbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009fca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f040 80ab 	bne.w	800a12a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009fd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fd8:	461a      	mov	r2, r3
 8009fda:	2146      	movs	r1, #70	; 0x46
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f001 fc1b 	bl	800b818 <VL53L0X_WrByte>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009fe8:	e09f      	b.n	800a12a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009fea:	7afb      	ldrb	r3, [r7, #11]
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d135      	bne.n	800a05c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009ff0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d11b      	bne.n	800a030 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009ff8:	f107 031b 	add.w	r3, r7, #27
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	2100      	movs	r1, #0
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7fd f965 	bl	80072d0 <VL53L0X_GetVcselPulsePeriod>
 800a006:	4603      	mov	r3, r0
 800a008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a00c:	7efb      	ldrb	r3, [r7, #27]
 800a00e:	461a      	mov	r2, r3
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f7ff fe68 	bl	8009ce8 <VL53L0X_calc_timeout_mclks>
 800a018:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a01a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a01c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff fe1f 	bl	8009c62 <VL53L0X_encode_timeout>
 800a024:	4603      	mov	r3, r0
 800a026:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a028:	8b3a      	ldrh	r2, [r7, #24]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a030:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a034:	2b00      	cmp	r3, #0
 800a036:	d108      	bne.n	800a04a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a038:	8b3b      	ldrh	r3, [r7, #24]
 800a03a:	461a      	mov	r2, r3
 800a03c:	2151      	movs	r1, #81	; 0x51
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f001 fc0e 	bl	800b860 <VL53L0X_WrWord>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a04a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d16b      	bne.n	800a12a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a05a:	e066      	b.n	800a12a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	2b04      	cmp	r3, #4
 800a060:	d160      	bne.n	800a124 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a062:	f107 0310 	add.w	r3, r7, #16
 800a066:	4619      	mov	r1, r3
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7fd fa3d 	bl	80074e8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a072:	7cfb      	ldrb	r3, [r7, #19]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d01d      	beq.n	800a0b4 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a078:	f107 031b 	add.w	r3, r7, #27
 800a07c:	461a      	mov	r2, r3
 800a07e:	2100      	movs	r1, #0
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7fd f925 	bl	80072d0 <VL53L0X_GetVcselPulsePeriod>
 800a086:	4603      	mov	r3, r0
 800a088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a08c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10f      	bne.n	800a0b4 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a094:	f107 0318 	add.w	r3, r7, #24
 800a098:	461a      	mov	r2, r3
 800a09a:	2151      	movs	r1, #81	; 0x51
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f001 fc67 	bl	800b970 <VL53L0X_RdWord>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a0a8:	8b3b      	ldrh	r3, [r7, #24]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7ff fe05 	bl	8009cba <VL53L0X_decode_timeout>
 800a0b0:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a0b2:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a0b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d109      	bne.n	800a0d0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a0bc:	f107 031b 	add.w	r3, r7, #27
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7fd f903 	bl	80072d0 <VL53L0X_GetVcselPulsePeriod>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a0d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d128      	bne.n	800a12a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a0d8:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800a0da:	461a      	mov	r2, r3
 800a0dc:	6879      	ldr	r1, [r7, #4]
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f7ff fe02 	bl	8009ce8 <VL53L0X_calc_timeout_mclks>
 800a0e4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a0e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0e8:	6a3a      	ldr	r2, [r7, #32]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800a0ee:	6a38      	ldr	r0, [r7, #32]
 800a0f0:	f7ff fdb7 	bl	8009c62 <VL53L0X_encode_timeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 800a0f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d108      	bne.n	800a112 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a100:	8bfb      	ldrh	r3, [r7, #30]
 800a102:	461a      	mov	r2, r3
 800a104:	2171      	movs	r1, #113	; 0x71
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f001 fbaa 	bl	800b860 <VL53L0X_WrWord>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a112:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a116:	2b00      	cmp	r3, #0
 800a118:	d107      	bne.n	800a12a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a122:	e002      	b.n	800a12a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a124:	23fc      	movs	r3, #252	; 0xfc
 800a126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a12a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3728      	adds	r7, #40	; 0x28
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b08a      	sub	sp, #40	; 0x28
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	460b      	mov	r3, r1
 800a140:	70fb      	strb	r3, [r7, #3]
 800a142:	4613      	mov	r3, r2
 800a144:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a146:	2300      	movs	r3, #0
 800a148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a14c:	230c      	movs	r3, #12
 800a14e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a152:	2312      	movs	r3, #18
 800a154:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a158:	2308      	movs	r3, #8
 800a15a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a15e:	230e      	movs	r3, #14
 800a160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a168:	78bb      	ldrb	r3, [r7, #2]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	d003      	beq.n	800a17c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a174:	23fc      	movs	r3, #252	; 0xfc
 800a176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a17a:	e020      	b.n	800a1be <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a17c:	78fb      	ldrb	r3, [r7, #3]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10d      	bne.n	800a19e <VL53L0X_set_vcsel_pulse_period+0x68>
 800a182:	78ba      	ldrb	r2, [r7, #2]
 800a184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a188:	429a      	cmp	r2, r3
 800a18a:	d304      	bcc.n	800a196 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a18c:	78ba      	ldrb	r2, [r7, #2]
 800a18e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a192:	429a      	cmp	r2, r3
 800a194:	d903      	bls.n	800a19e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a196:	23fc      	movs	r3, #252	; 0xfc
 800a198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a19c:	e00f      	b.n	800a1be <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a19e:	78fb      	ldrb	r3, [r7, #3]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d10c      	bne.n	800a1be <VL53L0X_set_vcsel_pulse_period+0x88>
 800a1a4:	78ba      	ldrb	r2, [r7, #2]
 800a1a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d304      	bcc.n	800a1b8 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a1ae:	78ba      	ldrb	r2, [r7, #2]
 800a1b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d902      	bls.n	800a1be <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a1b8:	23fc      	movs	r3, #252	; 0xfc
 800a1ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a1be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a1c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1ca:	e239      	b.n	800a640 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d150      	bne.n	800a274 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a1d2:	78bb      	ldrb	r3, [r7, #2]
 800a1d4:	2b0c      	cmp	r3, #12
 800a1d6:	d110      	bne.n	800a1fa <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a1d8:	2218      	movs	r2, #24
 800a1da:	2157      	movs	r1, #87	; 0x57
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 fb1b 	bl	800b818 <VL53L0X_WrByte>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	2156      	movs	r1, #86	; 0x56
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f001 fb13 	bl	800b818 <VL53L0X_WrByte>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1f8:	e17f      	b.n	800a4fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a1fa:	78bb      	ldrb	r3, [r7, #2]
 800a1fc:	2b0e      	cmp	r3, #14
 800a1fe:	d110      	bne.n	800a222 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a200:	2230      	movs	r2, #48	; 0x30
 800a202:	2157      	movs	r1, #87	; 0x57
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f001 fb07 	bl	800b818 <VL53L0X_WrByte>
 800a20a:	4603      	mov	r3, r0
 800a20c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a210:	2208      	movs	r2, #8
 800a212:	2156      	movs	r1, #86	; 0x56
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f001 faff 	bl	800b818 <VL53L0X_WrByte>
 800a21a:	4603      	mov	r3, r0
 800a21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a220:	e16b      	b.n	800a4fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a222:	78bb      	ldrb	r3, [r7, #2]
 800a224:	2b10      	cmp	r3, #16
 800a226:	d110      	bne.n	800a24a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a228:	2240      	movs	r2, #64	; 0x40
 800a22a:	2157      	movs	r1, #87	; 0x57
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f001 faf3 	bl	800b818 <VL53L0X_WrByte>
 800a232:	4603      	mov	r3, r0
 800a234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a238:	2208      	movs	r2, #8
 800a23a:	2156      	movs	r1, #86	; 0x56
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f001 faeb 	bl	800b818 <VL53L0X_WrByte>
 800a242:	4603      	mov	r3, r0
 800a244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a248:	e157      	b.n	800a4fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a24a:	78bb      	ldrb	r3, [r7, #2]
 800a24c:	2b12      	cmp	r3, #18
 800a24e:	f040 8154 	bne.w	800a4fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a252:	2250      	movs	r2, #80	; 0x50
 800a254:	2157      	movs	r1, #87	; 0x57
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f001 fade 	bl	800b818 <VL53L0X_WrByte>
 800a25c:	4603      	mov	r3, r0
 800a25e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a262:	2208      	movs	r2, #8
 800a264:	2156      	movs	r1, #86	; 0x56
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f001 fad6 	bl	800b818 <VL53L0X_WrByte>
 800a26c:	4603      	mov	r3, r0
 800a26e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a272:	e142      	b.n	800a4fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	2b01      	cmp	r3, #1
 800a278:	f040 813f 	bne.w	800a4fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a27c:	78bb      	ldrb	r3, [r7, #2]
 800a27e:	2b08      	cmp	r3, #8
 800a280:	d14c      	bne.n	800a31c <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a282:	2210      	movs	r2, #16
 800a284:	2148      	movs	r1, #72	; 0x48
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 fac6 	bl	800b818 <VL53L0X_WrByte>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a292:	2208      	movs	r2, #8
 800a294:	2147      	movs	r1, #71	; 0x47
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 fabe 	bl	800b818 <VL53L0X_WrByte>
 800a29c:	4603      	mov	r3, r0
 800a29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	2132      	movs	r1, #50	; 0x32
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 fab6 	bl	800b818 <VL53L0X_WrByte>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a2ba:	220c      	movs	r2, #12
 800a2bc:	2130      	movs	r1, #48	; 0x30
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f001 faaa 	bl	800b818 <VL53L0X_WrByte>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	21ff      	movs	r1, #255	; 0xff
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f001 fa9e 	bl	800b818 <VL53L0X_WrByte>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	461a      	mov	r2, r3
 800a2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a2ea:	2230      	movs	r2, #48	; 0x30
 800a2ec:	2130      	movs	r1, #48	; 0x30
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f001 fa92 	bl	800b818 <VL53L0X_WrByte>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a302:	2200      	movs	r2, #0
 800a304:	21ff      	movs	r1, #255	; 0xff
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f001 fa86 	bl	800b818 <VL53L0X_WrByte>
 800a30c:	4603      	mov	r3, r0
 800a30e:	461a      	mov	r2, r3
 800a310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a314:	4313      	orrs	r3, r2
 800a316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a31a:	e0ee      	b.n	800a4fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800a31c:	78bb      	ldrb	r3, [r7, #2]
 800a31e:	2b0a      	cmp	r3, #10
 800a320:	d14c      	bne.n	800a3bc <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800a322:	2228      	movs	r2, #40	; 0x28
 800a324:	2148      	movs	r1, #72	; 0x48
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 fa76 	bl	800b818 <VL53L0X_WrByte>
 800a32c:	4603      	mov	r3, r0
 800a32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800a332:	2208      	movs	r2, #8
 800a334:	2147      	movs	r1, #71	; 0x47
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f001 fa6e 	bl	800b818 <VL53L0X_WrByte>
 800a33c:	4603      	mov	r3, r0
 800a33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a342:	2203      	movs	r2, #3
 800a344:	2132      	movs	r1, #50	; 0x32
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f001 fa66 	bl	800b818 <VL53L0X_WrByte>
 800a34c:	4603      	mov	r3, r0
 800a34e:	461a      	mov	r2, r3
 800a350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a354:	4313      	orrs	r3, r2
 800a356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a35a:	2209      	movs	r2, #9
 800a35c:	2130      	movs	r1, #48	; 0x30
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f001 fa5a 	bl	800b818 <VL53L0X_WrByte>
 800a364:	4603      	mov	r3, r0
 800a366:	461a      	mov	r2, r3
 800a368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a36c:	4313      	orrs	r3, r2
 800a36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a372:	2201      	movs	r2, #1
 800a374:	21ff      	movs	r1, #255	; 0xff
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f001 fa4e 	bl	800b818 <VL53L0X_WrByte>
 800a37c:	4603      	mov	r3, r0
 800a37e:	461a      	mov	r2, r3
 800a380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a384:	4313      	orrs	r3, r2
 800a386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a38a:	2220      	movs	r2, #32
 800a38c:	2130      	movs	r1, #48	; 0x30
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f001 fa42 	bl	800b818 <VL53L0X_WrByte>
 800a394:	4603      	mov	r3, r0
 800a396:	461a      	mov	r2, r3
 800a398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a39c:	4313      	orrs	r3, r2
 800a39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	21ff      	movs	r1, #255	; 0xff
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f001 fa36 	bl	800b818 <VL53L0X_WrByte>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3ba:	e09e      	b.n	800a4fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800a3bc:	78bb      	ldrb	r3, [r7, #2]
 800a3be:	2b0c      	cmp	r3, #12
 800a3c0:	d14c      	bne.n	800a45c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800a3c2:	2238      	movs	r2, #56	; 0x38
 800a3c4:	2148      	movs	r1, #72	; 0x48
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f001 fa26 	bl	800b818 <VL53L0X_WrByte>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800a3d2:	2208      	movs	r2, #8
 800a3d4:	2147      	movs	r1, #71	; 0x47
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f001 fa1e 	bl	800b818 <VL53L0X_WrByte>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a3e2:	2203      	movs	r2, #3
 800a3e4:	2132      	movs	r1, #50	; 0x32
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f001 fa16 	bl	800b818 <VL53L0X_WrByte>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a3fa:	2208      	movs	r2, #8
 800a3fc:	2130      	movs	r1, #48	; 0x30
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f001 fa0a 	bl	800b818 <VL53L0X_WrByte>
 800a404:	4603      	mov	r3, r0
 800a406:	461a      	mov	r2, r3
 800a408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a40c:	4313      	orrs	r3, r2
 800a40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a412:	2201      	movs	r2, #1
 800a414:	21ff      	movs	r1, #255	; 0xff
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f001 f9fe 	bl	800b818 <VL53L0X_WrByte>
 800a41c:	4603      	mov	r3, r0
 800a41e:	461a      	mov	r2, r3
 800a420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a424:	4313      	orrs	r3, r2
 800a426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a42a:	2220      	movs	r2, #32
 800a42c:	2130      	movs	r1, #48	; 0x30
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f001 f9f2 	bl	800b818 <VL53L0X_WrByte>
 800a434:	4603      	mov	r3, r0
 800a436:	461a      	mov	r2, r3
 800a438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a43c:	4313      	orrs	r3, r2
 800a43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a442:	2200      	movs	r2, #0
 800a444:	21ff      	movs	r1, #255	; 0xff
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f001 f9e6 	bl	800b818 <VL53L0X_WrByte>
 800a44c:	4603      	mov	r3, r0
 800a44e:	461a      	mov	r2, r3
 800a450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a454:	4313      	orrs	r3, r2
 800a456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a45a:	e04e      	b.n	800a4fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a45c:	78bb      	ldrb	r3, [r7, #2]
 800a45e:	2b0e      	cmp	r3, #14
 800a460:	d14b      	bne.n	800a4fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a462:	2248      	movs	r2, #72	; 0x48
 800a464:	2148      	movs	r1, #72	; 0x48
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 f9d6 	bl	800b818 <VL53L0X_WrByte>
 800a46c:	4603      	mov	r3, r0
 800a46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a472:	2208      	movs	r2, #8
 800a474:	2147      	movs	r1, #71	; 0x47
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f001 f9ce 	bl	800b818 <VL53L0X_WrByte>
 800a47c:	4603      	mov	r3, r0
 800a47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a482:	2203      	movs	r2, #3
 800a484:	2132      	movs	r1, #50	; 0x32
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f001 f9c6 	bl	800b818 <VL53L0X_WrByte>
 800a48c:	4603      	mov	r3, r0
 800a48e:	461a      	mov	r2, r3
 800a490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a494:	4313      	orrs	r3, r2
 800a496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a49a:	2207      	movs	r2, #7
 800a49c:	2130      	movs	r1, #48	; 0x30
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f001 f9ba 	bl	800b818 <VL53L0X_WrByte>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	21ff      	movs	r1, #255	; 0xff
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f001 f9ae 	bl	800b818 <VL53L0X_WrByte>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	2130      	movs	r1, #48	; 0x30
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f001 f9a2 	bl	800b818 <VL53L0X_WrByte>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	21ff      	movs	r1, #255	; 0xff
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f001 f996 	bl	800b818 <VL53L0X_WrByte>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a4fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d17f      	bne.n	800a602 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a502:	78bb      	ldrb	r3, [r7, #2]
 800a504:	4618      	mov	r0, r3
 800a506:	f7fe fe38 	bl	800917a <VL53L0X_encode_vcsel_period>
 800a50a:	4603      	mov	r3, r0
 800a50c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d002      	beq.n	800a51c <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a516:	2b01      	cmp	r3, #1
 800a518:	d045      	beq.n	800a5a6 <VL53L0X_set_vcsel_pulse_period+0x470>
 800a51a:	e06e      	b.n	800a5fa <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a51c:	f107 0314 	add.w	r3, r7, #20
 800a520:	461a      	mov	r2, r3
 800a522:	2103      	movs	r1, #3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff fc33 	bl	8009d90 <get_sequence_step_timeout>
 800a52a:	4603      	mov	r3, r0
 800a52c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a530:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a534:	2b00      	cmp	r3, #0
 800a536:	d109      	bne.n	800a54c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a538:	f107 0310 	add.w	r3, r7, #16
 800a53c:	461a      	mov	r2, r3
 800a53e:	2102      	movs	r1, #2
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff fc25 	bl	8009d90 <get_sequence_step_timeout>
 800a546:	4603      	mov	r3, r0
 800a548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a54c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a550:	2b00      	cmp	r3, #0
 800a552:	d109      	bne.n	800a568 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a554:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a558:	461a      	mov	r2, r3
 800a55a:	2150      	movs	r1, #80	; 0x50
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 f95b 	bl	800b818 <VL53L0X_WrByte>
 800a562:	4603      	mov	r3, r0
 800a564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a568:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d108      	bne.n	800a582 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	461a      	mov	r2, r3
 800a574:	2103      	movs	r1, #3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff fceb 	bl	8009f52 <set_sequence_step_timeout>
 800a57c:	4603      	mov	r3, r0
 800a57e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a582:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a586:	2b00      	cmp	r3, #0
 800a588:	d108      	bne.n	800a59c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	461a      	mov	r2, r3
 800a58e:	2102      	movs	r1, #2
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7ff fcde 	bl	8009f52 <set_sequence_step_timeout>
 800a596:	4603      	mov	r3, r0
 800a598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	78ba      	ldrb	r2, [r7, #2]
 800a5a0:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a5a4:	e02e      	b.n	800a604 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a5a6:	f107 0318 	add.w	r3, r7, #24
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	2104      	movs	r1, #4
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7ff fbee 	bl	8009d90 <get_sequence_step_timeout>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a5ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d109      	bne.n	800a5d6 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a5c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	2170      	movs	r1, #112	; 0x70
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f001 f924 	bl	800b818 <VL53L0X_WrByte>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a5d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d108      	bne.n	800a5f0 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	2104      	movs	r1, #4
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7ff fcb4 	bl	8009f52 <set_sequence_step_timeout>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	78ba      	ldrb	r2, [r7, #2]
 800a5f4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a5f8:	e004      	b.n	800a604 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a5fa:	23fc      	movs	r3, #252	; 0xfc
 800a5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a600:	e000      	b.n	800a604 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a602:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a604:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d109      	bne.n	800a620 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a612:	69f9      	ldr	r1, [r7, #28]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f7fc fe1d 	bl	8007254 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a61a:	4603      	mov	r3, r0
 800a61c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a620:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a624:	2b00      	cmp	r3, #0
 800a626:	d109      	bne.n	800a63c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a628:	f107 010f 	add.w	r1, r7, #15
 800a62c:	2301      	movs	r3, #1
 800a62e:	2200      	movs	r2, #0
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7fe fcbd 	bl	8008fb0 <VL53L0X_perform_phase_calibration>
 800a636:	4603      	mov	r3, r0
 800a638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a63c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a640:	4618      	mov	r0, r3
 800a642:	3728      	adds	r7, #40	; 0x28
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	460b      	mov	r3, r1
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a656:	2300      	movs	r3, #0
 800a658:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a65a:	7afb      	ldrb	r3, [r7, #11]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a660:	2b01      	cmp	r3, #1
 800a662:	d00a      	beq.n	800a67a <VL53L0X_get_vcsel_pulse_period+0x32>
 800a664:	e013      	b.n	800a68e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a666:	f107 0316 	add.w	r3, r7, #22
 800a66a:	461a      	mov	r2, r3
 800a66c:	2150      	movs	r1, #80	; 0x50
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f001 f954 	bl	800b91c <VL53L0X_RdByte>
 800a674:	4603      	mov	r3, r0
 800a676:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a678:	e00b      	b.n	800a692 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a67a:	f107 0316 	add.w	r3, r7, #22
 800a67e:	461a      	mov	r2, r3
 800a680:	2170      	movs	r1, #112	; 0x70
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f001 f94a 	bl	800b91c <VL53L0X_RdByte>
 800a688:	4603      	mov	r3, r0
 800a68a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a68c:	e001      	b.n	800a692 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a68e:	23fc      	movs	r3, #252	; 0xfc
 800a690:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a692:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d107      	bne.n	800a6aa <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a69a:	7dbb      	ldrb	r3, [r7, #22]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fe fd59 	bl	8009154 <VL53L0X_decode_vcsel_period>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	701a      	strb	r2, [r3, #0]

	return Status;
 800a6aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b092      	sub	sp, #72	; 0x48
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a6c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a6ca:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a6cc:	f240 7376 	movw	r3, #1910	; 0x776
 800a6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a6d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a6d6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a6d8:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a6dc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a6de:	f240 234e 	movw	r3, #590	; 0x24e
 800a6e2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a6e4:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a6ea:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a6ee:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a6f0:	f240 2326 	movw	r3, #550	; 0x226
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a6fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a6fe:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d205      	bcs.n	800a718 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a70c:	23fc      	movs	r3, #252	; 0xfc
 800a70e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a712:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a716:	e0aa      	b.n	800a86e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71c:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a724:	f107 0314 	add.w	r3, r7, #20
 800a728:	4619      	mov	r1, r3
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7fc fedc 	bl	80074e8 <VL53L0X_GetSequenceStepEnables>
 800a730:	4603      	mov	r3, r0
 800a732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a736:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d15b      	bne.n	800a7f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a73e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a740:	2b00      	cmp	r3, #0
 800a742:	d105      	bne.n	800a750 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a744:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a746:	2b00      	cmp	r3, #0
 800a748:	d102      	bne.n	800a750 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a74a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d052      	beq.n	800a7f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a750:	f107 0310 	add.w	r3, r7, #16
 800a754:	461a      	mov	r2, r3
 800a756:	2102      	movs	r1, #2
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff fb19 	bl	8009d90 <get_sequence_step_timeout>
 800a75e:	4603      	mov	r3, r0
 800a760:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a764:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a76c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a770:	e07d      	b.n	800a86e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a772:	7d3b      	ldrb	r3, [r7, #20]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00f      	beq.n	800a798 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a778:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a77a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a77c:	4413      	add	r3, r2
 800a77e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a780:	69fa      	ldr	r2, [r7, #28]
 800a782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a784:	429a      	cmp	r2, r3
 800a786:	d204      	bcs.n	800a792 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	643b      	str	r3, [r7, #64]	; 0x40
 800a790:	e002      	b.n	800a798 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a792:	23fc      	movs	r3, #252	; 0xfc
 800a794:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a798:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a7a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a7a4:	e063      	b.n	800a86e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a7a6:	7dbb      	ldrb	r3, [r7, #22]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d011      	beq.n	800a7d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b0:	4413      	add	r3, r2
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a7b6:	69fa      	ldr	r2, [r7, #28]
 800a7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d204      	bcs.n	800a7c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a7be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a7c6:	e016      	b.n	800a7f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7c8:	23fc      	movs	r3, #252	; 0xfc
 800a7ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a7ce:	e012      	b.n	800a7f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a7d0:	7d7b      	ldrb	r3, [r7, #21]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00f      	beq.n	800a7f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7da:	4413      	add	r3, r2
 800a7dc:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a7de:	69fa      	ldr	r2, [r7, #28]
 800a7e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d204      	bcs.n	800a7f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a7e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a7ee:	e002      	b.n	800a7f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7f0:	23fc      	movs	r3, #252	; 0xfc
 800a7f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a7f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a7fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a802:	e034      	b.n	800a86e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a804:	7dfb      	ldrb	r3, [r7, #23]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d019      	beq.n	800a83e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a80a:	f107 030c 	add.w	r3, r7, #12
 800a80e:	461a      	mov	r2, r3
 800a810:	2103      	movs	r1, #3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7ff fabc 	bl	8009d90 <get_sequence_step_timeout>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a822:	4413      	add	r3, r2
 800a824:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a826:	69fa      	ldr	r2, [r7, #28]
 800a828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d204      	bcs.n	800a838 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a82e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	643b      	str	r3, [r7, #64]	; 0x40
 800a836:	e002      	b.n	800a83e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a838:	23fc      	movs	r3, #252	; 0xfc
 800a83a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a83e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a842:	2b00      	cmp	r3, #0
 800a844:	d111      	bne.n	800a86a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a846:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00e      	beq.n	800a86a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a84c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a856:	2104      	movs	r1, #4
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7ff fb7a 	bl	8009f52 <set_sequence_step_timeout>
 800a85e:	4603      	mov	r3, r0
 800a860:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a86a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3748      	adds	r7, #72	; 0x48
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b090      	sub	sp, #64	; 0x40
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
 800a87e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a880:	2300      	movs	r3, #0
 800a882:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a886:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a88a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a88c:	f240 7376 	movw	r3, #1910	; 0x776
 800a890:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a892:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a896:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a898:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a89c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a89e:	f240 234e 	movw	r3, #590	; 0x24e
 800a8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a8a4:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a8a8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a8aa:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a8ae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a8b0:	f240 2326 	movw	r3, #550	; 0x226
 800a8b4:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a8ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8be:	441a      	add	r2, r3
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a8c4:	f107 0318 	add.w	r3, r7, #24
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7fc fe0c 	bl	80074e8 <VL53L0X_GetSequenceStepEnables>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a8d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a8de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a8e2:	e075      	b.n	800a9d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a8e4:	7e3b      	ldrb	r3, [r7, #24]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d105      	bne.n	800a8f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a8ea:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d102      	bne.n	800a8f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a8f0:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d030      	beq.n	800a958 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a8f6:	f107 0310 	add.w	r3, r7, #16
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	2102      	movs	r1, #2
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7ff fa46 	bl	8009d90 <get_sequence_step_timeout>
 800a904:	4603      	mov	r3, r0
 800a906:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a90a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d122      	bne.n	800a958 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a912:	7e3b      	ldrb	r3, [r7, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a91c:	6939      	ldr	r1, [r7, #16]
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a922:	441a      	add	r2, r3
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a928:	7ebb      	ldrb	r3, [r7, #26]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d009      	beq.n	800a942 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a932:	6939      	ldr	r1, [r7, #16]
 800a934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a936:	440b      	add	r3, r1
 800a938:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a93a:	441a      	add	r2, r3
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	e00a      	b.n	800a958 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a942:	7e7b      	ldrb	r3, [r7, #25]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d007      	beq.n	800a958 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a94c:	6939      	ldr	r1, [r7, #16]
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a952:	441a      	add	r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a958:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d114      	bne.n	800a98a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a960:	7efb      	ldrb	r3, [r7, #27]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d011      	beq.n	800a98a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a966:	f107 030c 	add.w	r3, r7, #12
 800a96a:	461a      	mov	r2, r3
 800a96c:	2103      	movs	r1, #3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff fa0e 	bl	8009d90 <get_sequence_step_timeout>
 800a974:	4603      	mov	r3, r0
 800a976:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a97e:	68f9      	ldr	r1, [r7, #12]
 800a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a982:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a984:	441a      	add	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a98a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d114      	bne.n	800a9bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a992:	7f3b      	ldrb	r3, [r7, #28]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d011      	beq.n	800a9bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a998:	f107 0314 	add.w	r3, r7, #20
 800a99c:	461a      	mov	r2, r3
 800a99e:	2104      	movs	r1, #4
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff f9f5 	bl	8009d90 <get_sequence_step_timeout>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a9b0:	6979      	ldr	r1, [r7, #20]
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a9b6:	441a      	add	r2, r3
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a9bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d103      	bne.n	800a9cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a9cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3740      	adds	r7, #64	; 0x40
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b088      	sub	sp, #32
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a9ea:	e0c6      	b.n	800ab7a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a9fc:	7cfb      	ldrb	r3, [r7, #19]
 800a9fe:	2bff      	cmp	r3, #255	; 0xff
 800aa00:	f040 808d 	bne.w	800ab1e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	4413      	add	r3, r2
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	747b      	strb	r3, [r7, #17]
			Index++;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	3301      	adds	r3, #1
 800aa12:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800aa14:	7c7b      	ldrb	r3, [r7, #17]
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d87e      	bhi.n	800ab18 <VL53L0X_load_tuning_settings+0x140>
 800aa1a:	a201      	add	r2, pc, #4	; (adr r2, 800aa20 <VL53L0X_load_tuning_settings+0x48>)
 800aa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa20:	0800aa31 	.word	0x0800aa31
 800aa24:	0800aa6b 	.word	0x0800aa6b
 800aa28:	0800aaa5 	.word	0x0800aaa5
 800aa2c:	0800aadf 	.word	0x0800aadf
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	4413      	add	r3, r2
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	743b      	strb	r3, [r7, #16]
				Index++;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	4413      	add	r3, r2
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	73fb      	strb	r3, [r7, #15]
				Index++;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800aa50:	7c3b      	ldrb	r3, [r7, #16]
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	021b      	lsls	r3, r3, #8
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	4413      	add	r3, r2
 800aa5e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	89ba      	ldrh	r2, [r7, #12]
 800aa64:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800aa68:	e087      	b.n	800ab7a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	4413      	add	r3, r2
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	743b      	strb	r3, [r7, #16]
				Index++;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	3301      	adds	r3, #1
 800aa78:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	4413      	add	r3, r2
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	73fb      	strb	r3, [r7, #15]
				Index++;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	3301      	adds	r3, #1
 800aa88:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800aa8a:	7c3b      	ldrb	r3, [r7, #16]
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	021b      	lsls	r3, r3, #8
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	4413      	add	r3, r2
 800aa98:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	89ba      	ldrh	r2, [r7, #12]
 800aa9e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800aaa2:	e06a      	b.n	800ab7a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	743b      	strb	r3, [r7, #16]
				Index++;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	3301      	adds	r3, #1
 800aab2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	4413      	add	r3, r2
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	73fb      	strb	r3, [r7, #15]
				Index++;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	3301      	adds	r3, #1
 800aac2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800aac4:	7c3b      	ldrb	r3, [r7, #16]
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	021b      	lsls	r3, r3, #8
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	4413      	add	r3, r2
 800aad2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	89ba      	ldrh	r2, [r7, #12]
 800aad8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800aadc:	e04d      	b.n	800ab7a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	683a      	ldr	r2, [r7, #0]
 800aae2:	4413      	add	r3, r2
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	743b      	strb	r3, [r7, #16]
				Index++;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	3301      	adds	r3, #1
 800aaec:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	73fb      	strb	r3, [r7, #15]
				Index++;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	3301      	adds	r3, #1
 800aafc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800aafe:	7c3b      	ldrb	r3, [r7, #16]
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	021b      	lsls	r3, r3, #8
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	4413      	add	r3, r2
 800ab0c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	89ba      	ldrh	r2, [r7, #12]
 800ab12:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800ab16:	e030      	b.n	800ab7a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab18:	23fc      	movs	r3, #252	; 0xfc
 800ab1a:	77fb      	strb	r3, [r7, #31]
 800ab1c:	e02d      	b.n	800ab7a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800ab1e:	7cfb      	ldrb	r3, [r7, #19]
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	d828      	bhi.n	800ab76 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	4413      	add	r3, r2
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	3301      	adds	r3, #1
 800ab32:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ab34:	2300      	movs	r3, #0
 800ab36:	61bb      	str	r3, [r7, #24]
 800ab38:	e00f      	b.n	800ab5a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	4413      	add	r3, r2
 800ab40:	7819      	ldrb	r1, [r3, #0]
 800ab42:	f107 0208 	add.w	r2, r7, #8
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	4413      	add	r3, r2
 800ab4a:	460a      	mov	r2, r1
 800ab4c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	3301      	adds	r3, #1
 800ab52:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	3301      	adds	r3, #1
 800ab58:	61bb      	str	r3, [r7, #24]
 800ab5a:	7cfb      	ldrb	r3, [r7, #19]
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	dbeb      	blt.n	800ab3a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800ab62:	7cfb      	ldrb	r3, [r7, #19]
 800ab64:	f107 0208 	add.w	r2, r7, #8
 800ab68:	7cb9      	ldrb	r1, [r7, #18]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fdf8 	bl	800b760 <VL53L0X_WriteMulti>
 800ab70:	4603      	mov	r3, r0
 800ab72:	77fb      	strb	r3, [r7, #31]
 800ab74:	e001      	b.n	800ab7a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab76:	23fc      	movs	r3, #252	; 0xfc
 800ab78:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	4413      	add	r3, r2
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d004      	beq.n	800ab90 <VL53L0X_load_tuning_settings+0x1b8>
 800ab86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f43f af2e 	beq.w	800a9ec <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ab90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3720      	adds	r7, #32
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b088      	sub	sp, #32
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aba8:	2300      	movs	r3, #0
 800abaa:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800abb2:	f107 0313 	add.w	r3, r7, #19
 800abb6:	4619      	mov	r1, r3
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f7fc fd21 	bl	8007600 <VL53L0X_GetXTalkCompensationEnable>
 800abbe:	4603      	mov	r3, r0
 800abc0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800abc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d111      	bne.n	800abee <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800abca:	7cfb      	ldrb	r3, [r7, #19]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00e      	beq.n	800abee <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
 800abd4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	8a9b      	ldrh	r3, [r3, #20]
 800abda:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	fb02 f303 	mul.w	r3, r2, r3
 800abe2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	3380      	adds	r3, #128	; 0x80
 800abe8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800abee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3720      	adds	r7, #32
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b086      	sub	sp, #24
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	60f8      	str	r0, [r7, #12]
 800ac02:	60b9      	str	r1, [r7, #8]
 800ac04:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac06:	2300      	movs	r3, #0
 800ac08:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800ac12:	f107 0310 	add.w	r3, r7, #16
 800ac16:	461a      	mov	r2, r3
 800ac18:	68b9      	ldr	r1, [r7, #8]
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f7ff ffbe 	bl	800ab9c <VL53L0X_get_total_xtalk_rate>
 800ac20:	4603      	mov	r3, r0
 800ac22:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800ac24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d105      	bne.n	800ac38 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	441a      	add	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	601a      	str	r2, [r3, #0]

	return Status;
 800ac38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b09a      	sub	sp, #104	; 0x68
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
 800ac50:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800ac52:	2312      	movs	r3, #18
 800ac54:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800ac56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac5a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800ac5c:	2342      	movs	r3, #66	; 0x42
 800ac5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800ac60:	2306      	movs	r3, #6
 800ac62:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800ac64:	2307      	movs	r3, #7
 800ac66:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800ac74:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ac7c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ac7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac82:	fb02 f303 	mul.w	r3, r2, r3
 800ac86:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800ac88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8a:	3380      	adds	r3, #128	; 0x80
 800ac8c:	0a1b      	lsrs	r3, r3, #8
 800ac8e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800ac90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac94:	fb02 f303 	mul.w	r3, r2, r3
 800ac98:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d01b      	beq.n	800acdc <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	029b      	lsls	r3, r3, #10
 800aca8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800acae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb0:	4413      	add	r3, r2
 800acb2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800acb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800acbc:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800acbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800acc0:	4613      	mov	r3, r2
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	4413      	add	r3, r2
 800acc6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800acc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800accc:	fb02 f303 	mul.w	r3, r2, r3
 800acd0:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800acd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800acd8:	0c1b      	lsrs	r3, r3, #16
 800acda:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ace0:	fb02 f303 	mul.w	r3, r2, r3
 800ace4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800ace6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800acec:	0c1b      	lsrs	r3, r3, #16
 800acee:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800acf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acf4:	fb02 f303 	mul.w	r3, r2, r3
 800acf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800acfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acfc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad00:	0c1b      	lsrs	r3, r3, #16
 800ad02:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800ad04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad06:	085a      	lsrs	r2, r3, #1
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	441a      	add	r2, r3
 800ad0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad12:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad18:	fb02 f303 	mul.w	r3, r2, r3
 800ad1c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800ad1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad24:	d302      	bcc.n	800ad2c <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800ad26:	4b55      	ldr	r3, [pc, #340]	; (800ae7c <VL53L0X_calc_dmax+0x238>)
 800ad28:	663b      	str	r3, [r7, #96]	; 0x60
 800ad2a:	e016      	b.n	800ad5a <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800ad2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad2e:	085a      	lsrs	r2, r3, #1
 800ad30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad32:	441a      	add	r2, r3
 800ad34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad3a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ad3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad40:	fb02 f303 	mul.w	r3, r2, r3
 800ad44:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800ad46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad4c:	0c1b      	lsrs	r3, r3, #16
 800ad4e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800ad50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad54:	fb02 f303 	mul.w	r3, r2, r3
 800ad58:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800ad5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad5c:	039b      	lsls	r3, r3, #14
 800ad5e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ad62:	4a47      	ldr	r2, [pc, #284]	; (800ae80 <VL53L0X_calc_dmax+0x23c>)
 800ad64:	fba2 2303 	umull	r2, r3, r2, r3
 800ad68:	099b      	lsrs	r3, r3, #6
 800ad6a:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad70:	fb02 f303 	mul.w	r3, r2, r3
 800ad74:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800ad76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad7a:	fb02 f303 	mul.w	r3, r2, r3
 800ad7e:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	3308      	adds	r3, #8
 800ad84:	091b      	lsrs	r3, r3, #4
 800ad86:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800ad88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800ad90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad92:	4613      	mov	r3, r2
 800ad94:	005b      	lsls	r3, r3, #1
 800ad96:	4413      	add	r3, r2
 800ad98:	011b      	lsls	r3, r3, #4
 800ad9a:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ada2:	0b9b      	lsrs	r3, r3, #14
 800ada4:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800ada6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ada8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adaa:	4413      	add	r3, r2
 800adac:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800adae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adb0:	085b      	lsrs	r3, r3, #1
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	4413      	add	r3, r2
 800adb6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc0:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	039b      	lsls	r3, r3, #14
 800adc6:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	085b      	lsrs	r3, r3, #1
 800adcc:	69ba      	ldr	r2, [r7, #24]
 800adce:	4413      	add	r3, r2
 800add0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adda:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ade0:	fb02 f303 	mul.w	r3, r2, r3
 800ade4:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800adec:	4a24      	ldr	r2, [pc, #144]	; (800ae80 <VL53L0X_calc_dmax+0x23c>)
 800adee:	fba2 2303 	umull	r2, r3, r2, r3
 800adf2:	099b      	lsrs	r3, r3, #6
 800adf4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	011b      	lsls	r3, r3, #4
 800adfa:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ae02:	4a1f      	ldr	r2, [pc, #124]	; (800ae80 <VL53L0X_calc_dmax+0x23c>)
 800ae04:	fba2 2303 	umull	r2, r3, r2, r3
 800ae08:	099b      	lsrs	r3, r3, #6
 800ae0a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800ae0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae0e:	3380      	adds	r3, #128	; 0x80
 800ae10:	0a1b      	lsrs	r3, r3, #8
 800ae12:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d008      	beq.n	800ae2c <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	085a      	lsrs	r2, r3, #1
 800ae1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae20:	441a      	add	r2, r3
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae28:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae2a:	e001      	b.n	800ae30 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ae30:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ae32:	f7fe f9b5 	bl	80091a0 <VL53L0X_isqrt>
 800ae36:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d008      	beq.n	800ae50 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	085a      	lsrs	r2, r3, #1
 800ae42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae44:	441a      	add	r2, r3
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae4e:	e001      	b.n	800ae54 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800ae54:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ae56:	f7fe f9a3 	bl	80091a0 <VL53L0X_isqrt>
 800ae5a:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800ae5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d902      	bls.n	800ae70 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800ae6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae6e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800ae70:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3768      	adds	r7, #104	; 0x68
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	fff00000 	.word	0xfff00000
 800ae80:	10624dd3 	.word	0x10624dd3

0800ae84 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b0b4      	sub	sp, #208	; 0xd0
 800ae88:	af04      	add	r7, sp, #16
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800ae92:	f44f 7348 	mov.w	r3, #800	; 0x320
 800ae96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800ae9a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800ae9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800aea2:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800aea6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800aeaa:	f241 235c 	movw	r3, #4700	; 0x125c
 800aeae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800aeb2:	4b9e      	ldr	r3, [pc, #632]	; (800b12c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800aeb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800aeb8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800aebc:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800aebe:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800aec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeca:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800aecc:	4b98      	ldr	r3, [pc, #608]	; (800b130 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800aece:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800aed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aed4:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800aed6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800aeda:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800aedc:	f240 6377 	movw	r3, #1655	; 0x677
 800aee0:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aee2:	2300      	movs	r3, #0
 800aee4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6a1b      	ldr	r3, [r3, #32]
 800aeec:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aef6:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800aefa:	0c1b      	lsrs	r3, r3, #16
 800aefc:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800af04:	f107 0310 	add.w	r3, r7, #16
 800af08:	461a      	mov	r2, r3
 800af0a:	68b9      	ldr	r1, [r7, #8]
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f7ff fe74 	bl	800abfa <VL53L0X_get_total_signal_rate>
 800af12:	4603      	mov	r3, r0
 800af14:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800af18:	f107 0314 	add.w	r3, r7, #20
 800af1c:	461a      	mov	r2, r3
 800af1e:	68b9      	ldr	r1, [r7, #8]
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f7ff fe3b 	bl	800ab9c <VL53L0X_get_total_xtalk_rate>
 800af26:	4603      	mov	r3, r0
 800af28:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af32:	fb02 f303 	mul.w	r3, r2, r3
 800af36:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800af38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af3a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800af3e:	0c1b      	lsrs	r3, r3, #16
 800af40:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af48:	fb02 f303 	mul.w	r3, r2, r3
 800af4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800af50:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800af54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af56:	429a      	cmp	r2, r3
 800af58:	d902      	bls.n	800af60 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800af5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800af60:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800af64:	2b00      	cmp	r3, #0
 800af66:	d168      	bne.n	800b03a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800af6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800af78:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800af7c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800af80:	461a      	mov	r2, r3
 800af82:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f7fe feae 	bl	8009ce8 <VL53L0X_calc_timeout_mclks>
 800af8c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800af94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800af9e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800afa2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800afa6:	461a      	mov	r2, r3
 800afa8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f7fe fe9b 	bl	8009ce8 <VL53L0X_calc_timeout_mclks>
 800afb2:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800afb4:	2303      	movs	r3, #3
 800afb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800afba:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800afbe:	2b08      	cmp	r3, #8
 800afc0:	d102      	bne.n	800afc8 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800afc2:	2302      	movs	r3, #2
 800afc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800afc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afcc:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800afce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800afd2:	fb02 f303 	mul.w	r3, r2, r3
 800afd6:	02db      	lsls	r3, r3, #11
 800afd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800afdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800afe0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800afe4:	4a53      	ldr	r2, [pc, #332]	; (800b134 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800afe6:	fba2 2303 	umull	r2, r3, r2, r3
 800afea:	099b      	lsrs	r3, r3, #6
 800afec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800aff0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aff4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aff6:	fb02 f303 	mul.w	r3, r2, r3
 800affa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800affe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b002:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b006:	4a4b      	ldr	r2, [pc, #300]	; (800b134 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b008:	fba2 2303 	umull	r2, r3, r2, r3
 800b00c:	099b      	lsrs	r3, r3, #6
 800b00e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	3380      	adds	r3, #128	; 0x80
 800b016:	0a1b      	lsrs	r3, r3, #8
 800b018:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b020:	fb02 f303 	mul.w	r3, r2, r3
 800b024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b028:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b02c:	3380      	adds	r3, #128	; 0x80
 800b02e:	0a1b      	lsrs	r3, r3, #8
 800b030:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	021b      	lsls	r3, r3, #8
 800b038:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b03a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d002      	beq.n	800b048 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b042:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b046:	e165      	b.n	800b314 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800b048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10c      	bne.n	800b068 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b054:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b05c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2200      	movs	r2, #0
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	e153      	b.n	800b310 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b068:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d102      	bne.n	800b076 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b070:	2301      	movs	r3, #1
 800b072:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b076:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b07a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b07c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b07e:	041a      	lsls	r2, r3, #16
 800b080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b082:	fbb2 f3f3 	udiv	r3, r2, r3
 800b086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b08a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b08e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b090:	429a      	cmp	r2, r3
 800b092:	d902      	bls.n	800b09a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b09a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b09e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b0a2:	fb02 f303 	mul.w	r3, r2, r3
 800b0a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b0aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	005b      	lsls	r3, r3, #1
 800b0b2:	4413      	add	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fe f872 	bl	80091a0 <VL53L0X_isqrt>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	005b      	lsls	r3, r3, #1
 800b0c0:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	891b      	ldrh	r3, [r3, #8]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0ca:	fb02 f303 	mul.w	r3, r2, r3
 800b0ce:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b0d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0d2:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b0d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b0d8:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b0da:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b0dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b0e0:	4a14      	ldr	r2, [pc, #80]	; (800b134 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e6:	099b      	lsrs	r3, r3, #6
 800b0e8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b0ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0ec:	041b      	lsls	r3, r3, #16
 800b0ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b0f2:	4a10      	ldr	r2, [pc, #64]	; (800b134 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f8:	099b      	lsrs	r3, r3, #6
 800b0fa:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0fe:	021b      	lsls	r3, r3, #8
 800b100:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	fbb2 f3f3 	udiv	r3, r2, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	bfb8      	it	lt
 800b10e:	425b      	neglt	r3, r3
 800b110:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b114:	021b      	lsls	r3, r3, #8
 800b116:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	7e1b      	ldrb	r3, [r3, #24]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b128:	e035      	b.n	800b196 <VL53L0X_calc_sigma_estimate+0x312>
 800b12a:	bf00      	nop
 800b12c:	028f87ae 	.word	0x028f87ae
 800b130:	0006999a 	.word	0x0006999a
 800b134:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b138:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b13a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b13e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b148:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b14c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b150:	fb02 f303 	mul.w	r3, r2, r3
 800b154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b158:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b15c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b15e:	4413      	add	r3, r2
 800b160:	0c1b      	lsrs	r3, r3, #16
 800b162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b16a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b16e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b176:	085b      	lsrs	r3, r3, #1
 800b178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b17c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b180:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b184:	fb02 f303 	mul.w	r3, r2, r3
 800b188:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b18c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b190:	0b9b      	lsrs	r3, r3, #14
 800b192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b19a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b19c:	fb02 f303 	mul.w	r3, r2, r3
 800b1a0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b1a8:	0c1b      	lsrs	r3, r3, #16
 800b1aa:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1b0:	fb02 f303 	mul.w	r3, r2, r3
 800b1b4:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b1b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b1ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b1c2:	0c1b      	lsrs	r3, r3, #16
 800b1c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ca:	fb02 f303 	mul.w	r3, r2, r3
 800b1ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d4:	4413      	add	r3, r2
 800b1d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b1d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1da:	f7fd ffe1 	bl	80091a0 <VL53L0X_isqrt>
 800b1de:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e2:	041b      	lsls	r3, r3, #16
 800b1e4:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e8:	3332      	adds	r3, #50	; 0x32
 800b1ea:	4a4c      	ldr	r2, [pc, #304]	; (800b31c <VL53L0X_calc_sigma_estimate+0x498>)
 800b1ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f0:	095a      	lsrs	r2, r3, #5
 800b1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b1fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b200:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b204:	fb02 f303 	mul.w	r3, r2, r3
 800b208:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b20c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b210:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b214:	3308      	adds	r3, #8
 800b216:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b21a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b21e:	4a40      	ldr	r2, [pc, #256]	; (800b320 <VL53L0X_calc_sigma_estimate+0x49c>)
 800b220:	fba2 2303 	umull	r2, r3, r2, r3
 800b224:	0b5b      	lsrs	r3, r3, #13
 800b226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b22a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b22e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b230:	429a      	cmp	r2, r3
 800b232:	d902      	bls.n	800b23a <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b234:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b23a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b23e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b242:	4413      	add	r3, r2
 800b244:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b248:	4a36      	ldr	r2, [pc, #216]	; (800b324 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800b24a:	fba2 2303 	umull	r2, r3, r2, r3
 800b24e:	099b      	lsrs	r3, r3, #6
 800b250:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b256:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b25a:	441a      	add	r2, r3
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800b262:	4618      	mov	r0, r3
 800b264:	f7fd ff9c 	bl	80091a0 <VL53L0X_isqrt>
 800b268:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	021b      	lsls	r3, r3, #8
 800b26e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b276:	4a2b      	ldr	r2, [pc, #172]	; (800b324 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800b278:	fba2 2303 	umull	r2, r3, r2, r3
 800b27c:	099b      	lsrs	r3, r3, #6
 800b27e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b284:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b288:	fb02 f303 	mul.w	r3, r2, r3
 800b28c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	69fa      	ldr	r2, [r7, #28]
 800b292:	fb02 f303 	mul.w	r3, r2, r3
 800b296:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	4413      	add	r3, r2
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fd ff7e 	bl	80091a0 <VL53L0X_isqrt>
 800b2a4:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b2ac:	fb02 f303 	mul.w	r3, r2, r3
 800b2b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b2b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d009      	beq.n	800b2ce <VL53L0X_calc_sigma_estimate+0x44a>
 800b2ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d005      	beq.n	800b2ce <VL53L0X_calc_sigma_estimate+0x44a>
 800b2c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b2c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d903      	bls.n	800b2d6 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b2ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b2dc:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b2e8:	6939      	ldr	r1, [r7, #16]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	9303      	str	r3, [sp, #12]
 800b2ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b2f2:	9302      	str	r3, [sp, #8]
 800b2f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b2f8:	9301      	str	r3, [sp, #4]
 800b2fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b302:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f7ff fc9d 	bl	800ac44 <VL53L0X_calc_dmax>
 800b30a:	4603      	mov	r3, r0
 800b30c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b310:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b314:	4618      	mov	r0, r3
 800b316:	37c0      	adds	r7, #192	; 0xc0
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	51eb851f 	.word	0x51eb851f
 800b320:	d1b71759 	.word	0xd1b71759
 800b324:	10624dd3 	.word	0x10624dd3

0800b328 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b090      	sub	sp, #64	; 0x40
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	607a      	str	r2, [r7, #4]
 800b332:	461a      	mov	r2, r3
 800b334:	460b      	mov	r3, r1
 800b336:	72fb      	strb	r3, [r7, #11]
 800b338:	4613      	mov	r3, r2
 800b33a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b33c:	2300      	movs	r3, #0
 800b33e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b342:	2300      	movs	r3, #0
 800b344:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b348:	2300      	movs	r3, #0
 800b34a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b37a:	7afb      	ldrb	r3, [r7, #11]
 800b37c:	10db      	asrs	r3, r3, #3
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	f003 030f 	and.w	r3, r3, #15
 800b384:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b388:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d017      	beq.n	800b3c0 <VL53L0X_get_pal_range_status+0x98>
 800b390:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b394:	2b05      	cmp	r3, #5
 800b396:	d013      	beq.n	800b3c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b398:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b39c:	2b07      	cmp	r3, #7
 800b39e:	d00f      	beq.n	800b3c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b3a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b3a4:	2b0c      	cmp	r3, #12
 800b3a6:	d00b      	beq.n	800b3c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b3a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b3ac:	2b0d      	cmp	r3, #13
 800b3ae:	d007      	beq.n	800b3c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b3b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b3b4:	2b0e      	cmp	r3, #14
 800b3b6:	d003      	beq.n	800b3c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b3b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b3bc:	2b0f      	cmp	r3, #15
 800b3be:	d103      	bne.n	800b3c8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b3c6:	e002      	b.n	800b3ce <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b3ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d109      	bne.n	800b3ea <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b3d6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b3da:	461a      	mov	r2, r3
 800b3dc:	2100      	movs	r1, #0
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f7fc f9e2 	bl	80077a8 <VL53L0X_GetLimitCheckEnable>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b3ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d02e      	beq.n	800b450 <VL53L0X_get_pal_range_status+0x128>
 800b3f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d12a      	bne.n	800b450 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b3fa:	f107 0310 	add.w	r3, r7, #16
 800b3fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b402:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f7ff fd3d 	bl	800ae84 <VL53L0X_calc_sigma_estimate>
 800b40a:	4603      	mov	r3, r0
 800b40c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b410:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b414:	2b00      	cmp	r3, #0
 800b416:	d103      	bne.n	800b420 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b41e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b420:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b424:	2b00      	cmp	r3, #0
 800b426:	d113      	bne.n	800b450 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b428:	f107 0320 	add.w	r3, r7, #32
 800b42c:	461a      	mov	r2, r3
 800b42e:	2100      	movs	r1, #0
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f7fc fa3f 	bl	80078b4 <VL53L0X_GetLimitCheckValue>
 800b436:	4603      	mov	r3, r0
 800b438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d006      	beq.n	800b450 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b444:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b446:	429a      	cmp	r2, r3
 800b448:	d902      	bls.n	800b450 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b44a:	2301      	movs	r3, #1
 800b44c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b450:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b454:	2b00      	cmp	r3, #0
 800b456:	d109      	bne.n	800b46c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b458:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b45c:	461a      	mov	r2, r3
 800b45e:	2102      	movs	r1, #2
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f7fc f9a1 	bl	80077a8 <VL53L0X_GetLimitCheckEnable>
 800b466:	4603      	mov	r3, r0
 800b468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b46c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b470:	2b00      	cmp	r3, #0
 800b472:	d044      	beq.n	800b4fe <VL53L0X_get_pal_range_status+0x1d6>
 800b474:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d140      	bne.n	800b4fe <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b47c:	f107 031c 	add.w	r3, r7, #28
 800b480:	461a      	mov	r2, r3
 800b482:	2102      	movs	r1, #2
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f7fc fa15 	bl	80078b4 <VL53L0X_GetLimitCheckValue>
 800b48a:	4603      	mov	r3, r0
 800b48c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b490:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b494:	2b00      	cmp	r3, #0
 800b496:	d107      	bne.n	800b4a8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b498:	2201      	movs	r2, #1
 800b49a:	21ff      	movs	r1, #255	; 0xff
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 f9bb 	bl	800b818 <VL53L0X_WrByte>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b4a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d109      	bne.n	800b4c4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b4b0:	f107 0316 	add.w	r3, r7, #22
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	21b6      	movs	r1, #182	; 0xb6
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f000 fa59 	bl	800b970 <VL53L0X_RdWord>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b4c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d107      	bne.n	800b4dc <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	21ff      	movs	r1, #255	; 0xff
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f000 f9a1 	bl	800b818 <VL53L0X_WrByte>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b4dc:	8afb      	ldrh	r3, [r7, #22]
 800b4de:	025b      	lsls	r3, r3, #9
 800b4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4e6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d006      	beq.n	800b4fe <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b4f0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b4f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d902      	bls.n	800b4fe <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b4fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b502:	2b00      	cmp	r3, #0
 800b504:	d109      	bne.n	800b51a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b50a:	461a      	mov	r2, r3
 800b50c:	2103      	movs	r1, #3
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f7fc f94a 	bl	80077a8 <VL53L0X_GetLimitCheckEnable>
 800b514:	4603      	mov	r3, r0
 800b516:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b51a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d023      	beq.n	800b56a <VL53L0X_get_pal_range_status+0x242>
 800b522:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b526:	2b00      	cmp	r3, #0
 800b528:	d11f      	bne.n	800b56a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b52a:	893b      	ldrh	r3, [r7, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d102      	bne.n	800b536 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	637b      	str	r3, [r7, #52]	; 0x34
 800b534:	e005      	b.n	800b542 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	021a      	lsls	r2, r3, #8
 800b53a:	893b      	ldrh	r3, [r7, #8]
 800b53c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b540:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b542:	f107 0318 	add.w	r3, r7, #24
 800b546:	461a      	mov	r2, r3
 800b548:	2103      	movs	r1, #3
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f7fc f9b2 	bl	80078b4 <VL53L0X_GetLimitCheckValue>
 800b550:	4603      	mov	r3, r0
 800b552:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d006      	beq.n	800b56a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b55c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b55e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b560:	429a      	cmp	r2, r3
 800b562:	d202      	bcs.n	800b56a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b564:	2301      	movs	r3, #1
 800b566:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b56a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d14a      	bne.n	800b608 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b572:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b576:	2b01      	cmp	r3, #1
 800b578:	d103      	bne.n	800b582 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b57c:	22ff      	movs	r2, #255	; 0xff
 800b57e:	701a      	strb	r2, [r3, #0]
 800b580:	e042      	b.n	800b608 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b582:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b586:	2b01      	cmp	r3, #1
 800b588:	d007      	beq.n	800b59a <VL53L0X_get_pal_range_status+0x272>
 800b58a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d003      	beq.n	800b59a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b592:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b596:	2b03      	cmp	r3, #3
 800b598:	d103      	bne.n	800b5a2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b59c:	2205      	movs	r2, #5
 800b59e:	701a      	strb	r2, [r3, #0]
 800b5a0:	e032      	b.n	800b608 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b5a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b5a6:	2b06      	cmp	r3, #6
 800b5a8:	d003      	beq.n	800b5b2 <VL53L0X_get_pal_range_status+0x28a>
 800b5aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b5ae:	2b09      	cmp	r3, #9
 800b5b0:	d103      	bne.n	800b5ba <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5b4:	2204      	movs	r2, #4
 800b5b6:	701a      	strb	r2, [r3, #0]
 800b5b8:	e026      	b.n	800b608 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b5ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b5be:	2b08      	cmp	r3, #8
 800b5c0:	d007      	beq.n	800b5d2 <VL53L0X_get_pal_range_status+0x2aa>
 800b5c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b5c6:	2b0a      	cmp	r3, #10
 800b5c8:	d003      	beq.n	800b5d2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b5ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d103      	bne.n	800b5da <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d4:	2203      	movs	r2, #3
 800b5d6:	701a      	strb	r2, [r3, #0]
 800b5d8:	e016      	b.n	800b608 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b5da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b5de:	2b04      	cmp	r3, #4
 800b5e0:	d003      	beq.n	800b5ea <VL53L0X_get_pal_range_status+0x2c2>
 800b5e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d103      	bne.n	800b5f2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	701a      	strb	r2, [r3, #0]
 800b5f0:	e00a      	b.n	800b608 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b5f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d103      	bne.n	800b602 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	701a      	strb	r2, [r3, #0]
 800b600:	e002      	b.n	800b608 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b604:	2200      	movs	r2, #0
 800b606:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d102      	bne.n	800b616 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b612:	2200      	movs	r2, #0
 800b614:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b616:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b61a:	461a      	mov	r2, r3
 800b61c:	2101      	movs	r1, #1
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f7fc f8c2 	bl	80077a8 <VL53L0X_GetLimitCheckEnable>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b62a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d14f      	bne.n	800b6d2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b632:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b636:	2b00      	cmp	r3, #0
 800b638:	d003      	beq.n	800b642 <VL53L0X_get_pal_range_status+0x31a>
 800b63a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d103      	bne.n	800b64a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b642:	2301      	movs	r3, #1
 800b644:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b648:	e002      	b.n	800b650 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b656:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b65a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b65e:	2b04      	cmp	r3, #4
 800b660:	d003      	beq.n	800b66a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b662:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b666:	2b00      	cmp	r3, #0
 800b668:	d103      	bne.n	800b672 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b66a:	2301      	movs	r3, #1
 800b66c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b670:	e002      	b.n	800b678 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b67e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b682:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <VL53L0X_get_pal_range_status+0x36a>
 800b68a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d103      	bne.n	800b69a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b692:	2301      	movs	r3, #1
 800b694:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b698:	e002      	b.n	800b6a0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b6a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b6aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <VL53L0X_get_pal_range_status+0x392>
 800b6b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d103      	bne.n	800b6c2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6c0:	e002      	b.n	800b6c8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b6ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b6d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3740      	adds	r7, #64	; 0x40
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b088      	sub	sp, #32
 800b6e2:	af02      	add	r7, sp, #8
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	330a      	adds	r3, #10
 800b6ee:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b6fc:	b299      	uxth	r1, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	b29a      	uxth	r2, r3
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	4613      	mov	r3, r2
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	f7f7 fa99 	bl	8002c40 <HAL_I2C_Master_Transmit>
 800b70e:	4603      	mov	r3, r0
 800b710:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b712:	693b      	ldr	r3, [r7, #16]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3718      	adds	r7, #24
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b088      	sub	sp, #32
 800b720:	af02      	add	r7, sp, #8
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	330a      	adds	r3, #10
 800b72c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b73a:	f043 0301 	orr.w	r3, r3, #1
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	b299      	uxth	r1, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	b29a      	uxth	r2, r3
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	4613      	mov	r3, r2
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	f7f7 fb6b 	bl	8002e28 <HAL_I2C_Master_Receive>
 800b752:	4603      	mov	r3, r0
 800b754:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b756:	693b      	ldr	r3, [r7, #16]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	607a      	str	r2, [r7, #4]
 800b76a:	603b      	str	r3, [r7, #0]
 800b76c:	460b      	mov	r3, r1
 800b76e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b770:	2300      	movs	r3, #0
 800b772:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b3f      	cmp	r3, #63	; 0x3f
 800b778:	d902      	bls.n	800b780 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b77a:	f06f 0303 	mvn.w	r3, #3
 800b77e:	e016      	b.n	800b7ae <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b780:	4a0d      	ldr	r2, [pc, #52]	; (800b7b8 <VL53L0X_WriteMulti+0x58>)
 800b782:	7afb      	ldrb	r3, [r7, #11]
 800b784:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	6879      	ldr	r1, [r7, #4]
 800b78a:	480c      	ldr	r0, [pc, #48]	; (800b7bc <VL53L0X_WriteMulti+0x5c>)
 800b78c:	f000 f9a4 	bl	800bad8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	3301      	adds	r3, #1
 800b794:	461a      	mov	r2, r3
 800b796:	4908      	ldr	r1, [pc, #32]	; (800b7b8 <VL53L0X_WriteMulti+0x58>)
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7ff ffa0 	bl	800b6de <_I2CWrite>
 800b79e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b7a6:	23ec      	movs	r3, #236	; 0xec
 800b7a8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b7aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20000bfc 	.word	0x20000bfc
 800b7bc:	20000bfd 	.word	0x20000bfd

0800b7c0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	607a      	str	r2, [r7, #4]
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b7d4:	f107 030b 	add.w	r3, r7, #11
 800b7d8:	2201      	movs	r2, #1
 800b7da:	4619      	mov	r1, r3
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f7ff ff7e 	bl	800b6de <_I2CWrite>
 800b7e2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d002      	beq.n	800b7f0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b7ea:	23ec      	movs	r3, #236	; 0xec
 800b7ec:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b7ee:	e00c      	b.n	800b80a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f7ff ff91 	bl	800b71c <_I2CRead>
 800b7fa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b802:	23ec      	movs	r3, #236	; 0xec
 800b804:	75fb      	strb	r3, [r7, #23]
 800b806:	e000      	b.n	800b80a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b808:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b80a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3718      	adds	r7, #24
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
	...

0800b818 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	70fb      	strb	r3, [r7, #3]
 800b824:	4613      	mov	r3, r2
 800b826:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b828:	2300      	movs	r3, #0
 800b82a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b82c:	4a0b      	ldr	r2, [pc, #44]	; (800b85c <VL53L0X_WrByte+0x44>)
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b832:	4a0a      	ldr	r2, [pc, #40]	; (800b85c <VL53L0X_WrByte+0x44>)
 800b834:	78bb      	ldrb	r3, [r7, #2]
 800b836:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b838:	2202      	movs	r2, #2
 800b83a:	4908      	ldr	r1, [pc, #32]	; (800b85c <VL53L0X_WrByte+0x44>)
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7ff ff4e 	bl	800b6de <_I2CWrite>
 800b842:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b84a:	23ec      	movs	r3, #236	; 0xec
 800b84c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	20000bfc 	.word	0x20000bfc

0800b860 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
 800b86c:	4613      	mov	r3, r2
 800b86e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b870:	2300      	movs	r3, #0
 800b872:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b874:	4a0e      	ldr	r2, [pc, #56]	; (800b8b0 <VL53L0X_WrWord+0x50>)
 800b876:	78fb      	ldrb	r3, [r7, #3]
 800b878:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b87a:	883b      	ldrh	r3, [r7, #0]
 800b87c:	0a1b      	lsrs	r3, r3, #8
 800b87e:	b29b      	uxth	r3, r3
 800b880:	b2da      	uxtb	r2, r3
 800b882:	4b0b      	ldr	r3, [pc, #44]	; (800b8b0 <VL53L0X_WrWord+0x50>)
 800b884:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b886:	883b      	ldrh	r3, [r7, #0]
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	4b09      	ldr	r3, [pc, #36]	; (800b8b0 <VL53L0X_WrWord+0x50>)
 800b88c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b88e:	2203      	movs	r2, #3
 800b890:	4907      	ldr	r1, [pc, #28]	; (800b8b0 <VL53L0X_WrWord+0x50>)
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff ff23 	bl	800b6de <_I2CWrite>
 800b898:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d001      	beq.n	800b8a4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b8a0:	23ec      	movs	r3, #236	; 0xec
 800b8a2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b8a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20000bfc 	.word	0x20000bfc

0800b8b4 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	4608      	mov	r0, r1
 800b8be:	4611      	mov	r1, r2
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	70fb      	strb	r3, [r7, #3]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	70bb      	strb	r3, [r7, #2]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b8d2:	f107 020e 	add.w	r2, r7, #14
 800b8d6:	78fb      	ldrb	r3, [r7, #3]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f81e 	bl	800b91c <VL53L0X_RdByte>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b8e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d110      	bne.n	800b90e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b8ec:	7bba      	ldrb	r2, [r7, #14]
 800b8ee:	78bb      	ldrb	r3, [r7, #2]
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	b2da      	uxtb	r2, r3
 800b8f4:	787b      	ldrb	r3, [r7, #1]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b8fc:	7bba      	ldrb	r2, [r7, #14]
 800b8fe:	78fb      	ldrb	r3, [r7, #3]
 800b900:	4619      	mov	r1, r3
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7ff ff88 	bl	800b818 <VL53L0X_WrByte>
 800b908:	4603      	mov	r3, r0
 800b90a:	73fb      	strb	r3, [r7, #15]
 800b90c:	e000      	b.n	800b910 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b90e:	bf00      	nop
done:
    return Status;
 800b910:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	460b      	mov	r3, r1
 800b926:	607a      	str	r2, [r7, #4]
 800b928:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b92a:	2300      	movs	r3, #0
 800b92c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b92e:	f107 030b 	add.w	r3, r7, #11
 800b932:	2201      	movs	r2, #1
 800b934:	4619      	mov	r1, r3
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f7ff fed1 	bl	800b6de <_I2CWrite>
 800b93c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b944:	23ec      	movs	r3, #236	; 0xec
 800b946:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b948:	e00c      	b.n	800b964 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b94a:	2201      	movs	r2, #1
 800b94c:	6879      	ldr	r1, [r7, #4]
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f7ff fee4 	bl	800b71c <_I2CRead>
 800b954:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b95c:	23ec      	movs	r3, #236	; 0xec
 800b95e:	75fb      	strb	r3, [r7, #23]
 800b960:	e000      	b.n	800b964 <VL53L0X_RdByte+0x48>
    }
done:
 800b962:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b964:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	460b      	mov	r3, r1
 800b97a:	607a      	str	r2, [r7, #4]
 800b97c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b97e:	2300      	movs	r3, #0
 800b980:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b982:	f107 030b 	add.w	r3, r7, #11
 800b986:	2201      	movs	r2, #1
 800b988:	4619      	mov	r1, r3
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f7ff fea7 	bl	800b6de <_I2CWrite>
 800b990:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b998:	23ec      	movs	r3, #236	; 0xec
 800b99a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b99c:	e017      	b.n	800b9ce <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b99e:	2202      	movs	r2, #2
 800b9a0:	490e      	ldr	r1, [pc, #56]	; (800b9dc <VL53L0X_RdWord+0x6c>)
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f7ff feba 	bl	800b71c <_I2CRead>
 800b9a8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b9b0:	23ec      	movs	r3, #236	; 0xec
 800b9b2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b9b4:	e00b      	b.n	800b9ce <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b9b6:	4b09      	ldr	r3, [pc, #36]	; (800b9dc <VL53L0X_RdWord+0x6c>)
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	021b      	lsls	r3, r3, #8
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	4b06      	ldr	r3, [pc, #24]	; (800b9dc <VL53L0X_RdWord+0x6c>)
 800b9c2:	785b      	ldrb	r3, [r3, #1]
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	4413      	add	r3, r2
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20000bfc 	.word	0x20000bfc

0800b9e0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b9f2:	f107 030b 	add.w	r3, r7, #11
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f7ff fe6f 	bl	800b6de <_I2CWrite>
 800ba00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba08:	23ec      	movs	r3, #236	; 0xec
 800ba0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ba0c:	e01b      	b.n	800ba46 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ba0e:	2204      	movs	r2, #4
 800ba10:	4910      	ldr	r1, [pc, #64]	; (800ba54 <VL53L0X_RdDWord+0x74>)
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f7ff fe82 	bl	800b71c <_I2CRead>
 800ba18:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba20:	23ec      	movs	r3, #236	; 0xec
 800ba22:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ba24:	e00f      	b.n	800ba46 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800ba26:	4b0b      	ldr	r3, [pc, #44]	; (800ba54 <VL53L0X_RdDWord+0x74>)
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	061a      	lsls	r2, r3, #24
 800ba2c:	4b09      	ldr	r3, [pc, #36]	; (800ba54 <VL53L0X_RdDWord+0x74>)
 800ba2e:	785b      	ldrb	r3, [r3, #1]
 800ba30:	041b      	lsls	r3, r3, #16
 800ba32:	441a      	add	r2, r3
 800ba34:	4b07      	ldr	r3, [pc, #28]	; (800ba54 <VL53L0X_RdDWord+0x74>)
 800ba36:	789b      	ldrb	r3, [r3, #2]
 800ba38:	021b      	lsls	r3, r3, #8
 800ba3a:	4413      	add	r3, r2
 800ba3c:	4a05      	ldr	r2, [pc, #20]	; (800ba54 <VL53L0X_RdDWord+0x74>)
 800ba3e:	78d2      	ldrb	r2, [r2, #3]
 800ba40:	441a      	add	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800ba46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3718      	adds	r7, #24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	20000bfc 	.word	0x20000bfc

0800ba58 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ba60:	2300      	movs	r3, #0
 800ba62:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ba64:	2002      	movs	r0, #2
 800ba66:	f7f6 fcdf 	bl	8002428 <HAL_Delay>
    return status;
 800ba6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <atoff>:
 800ba76:	2100      	movs	r1, #0
 800ba78:	f000 be6e 	b.w	800c758 <strtof>

0800ba7c <atoi>:
 800ba7c:	220a      	movs	r2, #10
 800ba7e:	2100      	movs	r1, #0
 800ba80:	f000 bf3a 	b.w	800c8f8 <strtol>

0800ba84 <__errno>:
 800ba84:	4b01      	ldr	r3, [pc, #4]	; (800ba8c <__errno+0x8>)
 800ba86:	6818      	ldr	r0, [r3, #0]
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	200002d4 	.word	0x200002d4

0800ba90 <__libc_init_array>:
 800ba90:	b570      	push	{r4, r5, r6, lr}
 800ba92:	4e0d      	ldr	r6, [pc, #52]	; (800bac8 <__libc_init_array+0x38>)
 800ba94:	4c0d      	ldr	r4, [pc, #52]	; (800bacc <__libc_init_array+0x3c>)
 800ba96:	1ba4      	subs	r4, r4, r6
 800ba98:	10a4      	asrs	r4, r4, #2
 800ba9a:	2500      	movs	r5, #0
 800ba9c:	42a5      	cmp	r5, r4
 800ba9e:	d109      	bne.n	800bab4 <__libc_init_array+0x24>
 800baa0:	4e0b      	ldr	r6, [pc, #44]	; (800bad0 <__libc_init_array+0x40>)
 800baa2:	4c0c      	ldr	r4, [pc, #48]	; (800bad4 <__libc_init_array+0x44>)
 800baa4:	f002 ffc2 	bl	800ea2c <_init>
 800baa8:	1ba4      	subs	r4, r4, r6
 800baaa:	10a4      	asrs	r4, r4, #2
 800baac:	2500      	movs	r5, #0
 800baae:	42a5      	cmp	r5, r4
 800bab0:	d105      	bne.n	800babe <__libc_init_array+0x2e>
 800bab2:	bd70      	pop	{r4, r5, r6, pc}
 800bab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bab8:	4798      	blx	r3
 800baba:	3501      	adds	r5, #1
 800babc:	e7ee      	b.n	800ba9c <__libc_init_array+0xc>
 800babe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bac2:	4798      	blx	r3
 800bac4:	3501      	adds	r5, #1
 800bac6:	e7f2      	b.n	800baae <__libc_init_array+0x1e>
 800bac8:	0800ed68 	.word	0x0800ed68
 800bacc:	0800ed68 	.word	0x0800ed68
 800bad0:	0800ed68 	.word	0x0800ed68
 800bad4:	0800ed6c 	.word	0x0800ed6c

0800bad8 <memcpy>:
 800bad8:	b510      	push	{r4, lr}
 800bada:	1e43      	subs	r3, r0, #1
 800badc:	440a      	add	r2, r1
 800bade:	4291      	cmp	r1, r2
 800bae0:	d100      	bne.n	800bae4 <memcpy+0xc>
 800bae2:	bd10      	pop	{r4, pc}
 800bae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baec:	e7f7      	b.n	800bade <memcpy+0x6>

0800baee <memset>:
 800baee:	4402      	add	r2, r0
 800baf0:	4603      	mov	r3, r0
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d100      	bne.n	800baf8 <memset+0xa>
 800baf6:	4770      	bx	lr
 800baf8:	f803 1b01 	strb.w	r1, [r3], #1
 800bafc:	e7f9      	b.n	800baf2 <memset+0x4>

0800bafe <strcpy>:
 800bafe:	4603      	mov	r3, r0
 800bb00:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb04:	f803 2b01 	strb.w	r2, [r3], #1
 800bb08:	2a00      	cmp	r2, #0
 800bb0a:	d1f9      	bne.n	800bb00 <strcpy+0x2>
 800bb0c:	4770      	bx	lr

0800bb0e <strncmp>:
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	b16a      	cbz	r2, 800bb2e <strncmp+0x20>
 800bb12:	3901      	subs	r1, #1
 800bb14:	1884      	adds	r4, r0, r2
 800bb16:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bb1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d103      	bne.n	800bb2a <strncmp+0x1c>
 800bb22:	42a0      	cmp	r0, r4
 800bb24:	d001      	beq.n	800bb2a <strncmp+0x1c>
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1f5      	bne.n	800bb16 <strncmp+0x8>
 800bb2a:	1a98      	subs	r0, r3, r2
 800bb2c:	bd10      	pop	{r4, pc}
 800bb2e:	4610      	mov	r0, r2
 800bb30:	e7fc      	b.n	800bb2c <strncmp+0x1e>

0800bb32 <sulp>:
 800bb32:	b570      	push	{r4, r5, r6, lr}
 800bb34:	4604      	mov	r4, r0
 800bb36:	460d      	mov	r5, r1
 800bb38:	ec45 4b10 	vmov	d0, r4, r5
 800bb3c:	4616      	mov	r6, r2
 800bb3e:	f001 fcf9 	bl	800d534 <__ulp>
 800bb42:	ec51 0b10 	vmov	r0, r1, d0
 800bb46:	b17e      	cbz	r6, 800bb68 <sulp+0x36>
 800bb48:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bb4c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	dd09      	ble.n	800bb68 <sulp+0x36>
 800bb54:	051b      	lsls	r3, r3, #20
 800bb56:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bb5a:	2400      	movs	r4, #0
 800bb5c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bb60:	4622      	mov	r2, r4
 800bb62:	462b      	mov	r3, r5
 800bb64:	f7f4 fcf4 	bl	8000550 <__aeabi_dmul>
 800bb68:	bd70      	pop	{r4, r5, r6, pc}
 800bb6a:	0000      	movs	r0, r0
 800bb6c:	0000      	movs	r0, r0
	...

0800bb70 <_strtod_l>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	461f      	mov	r7, r3
 800bb76:	b0a1      	sub	sp, #132	; 0x84
 800bb78:	2300      	movs	r3, #0
 800bb7a:	4681      	mov	r9, r0
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	460e      	mov	r6, r1
 800bb80:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb82:	931c      	str	r3, [sp, #112]	; 0x70
 800bb84:	f001 f9f7 	bl	800cf76 <__localeconv_l>
 800bb88:	4680      	mov	r8, r0
 800bb8a:	6800      	ldr	r0, [r0, #0]
 800bb8c:	f7f4 fb1c 	bl	80001c8 <strlen>
 800bb90:	f04f 0a00 	mov.w	sl, #0
 800bb94:	4604      	mov	r4, r0
 800bb96:	f04f 0b00 	mov.w	fp, #0
 800bb9a:	961b      	str	r6, [sp, #108]	; 0x6c
 800bb9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb9e:	781a      	ldrb	r2, [r3, #0]
 800bba0:	2a0d      	cmp	r2, #13
 800bba2:	d832      	bhi.n	800bc0a <_strtod_l+0x9a>
 800bba4:	2a09      	cmp	r2, #9
 800bba6:	d236      	bcs.n	800bc16 <_strtod_l+0xa6>
 800bba8:	2a00      	cmp	r2, #0
 800bbaa:	d03e      	beq.n	800bc2a <_strtod_l+0xba>
 800bbac:	2300      	movs	r3, #0
 800bbae:	930d      	str	r3, [sp, #52]	; 0x34
 800bbb0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bbb2:	782b      	ldrb	r3, [r5, #0]
 800bbb4:	2b30      	cmp	r3, #48	; 0x30
 800bbb6:	f040 80ac 	bne.w	800bd12 <_strtod_l+0x1a2>
 800bbba:	786b      	ldrb	r3, [r5, #1]
 800bbbc:	2b58      	cmp	r3, #88	; 0x58
 800bbbe:	d001      	beq.n	800bbc4 <_strtod_l+0x54>
 800bbc0:	2b78      	cmp	r3, #120	; 0x78
 800bbc2:	d167      	bne.n	800bc94 <_strtod_l+0x124>
 800bbc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	ab1c      	add	r3, sp, #112	; 0x70
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	9702      	str	r7, [sp, #8]
 800bbce:	ab1d      	add	r3, sp, #116	; 0x74
 800bbd0:	4a88      	ldr	r2, [pc, #544]	; (800bdf4 <_strtod_l+0x284>)
 800bbd2:	a91b      	add	r1, sp, #108	; 0x6c
 800bbd4:	4648      	mov	r0, r9
 800bbd6:	f000 fef4 	bl	800c9c2 <__gethex>
 800bbda:	f010 0407 	ands.w	r4, r0, #7
 800bbde:	4606      	mov	r6, r0
 800bbe0:	d005      	beq.n	800bbee <_strtod_l+0x7e>
 800bbe2:	2c06      	cmp	r4, #6
 800bbe4:	d12b      	bne.n	800bc3e <_strtod_l+0xce>
 800bbe6:	3501      	adds	r5, #1
 800bbe8:	2300      	movs	r3, #0
 800bbea:	951b      	str	r5, [sp, #108]	; 0x6c
 800bbec:	930d      	str	r3, [sp, #52]	; 0x34
 800bbee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f040 859a 	bne.w	800c72a <_strtod_l+0xbba>
 800bbf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbf8:	b1e3      	cbz	r3, 800bc34 <_strtod_l+0xc4>
 800bbfa:	4652      	mov	r2, sl
 800bbfc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc00:	ec43 2b10 	vmov	d0, r2, r3
 800bc04:	b021      	add	sp, #132	; 0x84
 800bc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0a:	2a2b      	cmp	r2, #43	; 0x2b
 800bc0c:	d015      	beq.n	800bc3a <_strtod_l+0xca>
 800bc0e:	2a2d      	cmp	r2, #45	; 0x2d
 800bc10:	d004      	beq.n	800bc1c <_strtod_l+0xac>
 800bc12:	2a20      	cmp	r2, #32
 800bc14:	d1ca      	bne.n	800bbac <_strtod_l+0x3c>
 800bc16:	3301      	adds	r3, #1
 800bc18:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc1a:	e7bf      	b.n	800bb9c <_strtod_l+0x2c>
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	920d      	str	r2, [sp, #52]	; 0x34
 800bc20:	1c5a      	adds	r2, r3, #1
 800bc22:	921b      	str	r2, [sp, #108]	; 0x6c
 800bc24:	785b      	ldrb	r3, [r3, #1]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1c2      	bne.n	800bbb0 <_strtod_l+0x40>
 800bc2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc2c:	961b      	str	r6, [sp, #108]	; 0x6c
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f040 8579 	bne.w	800c726 <_strtod_l+0xbb6>
 800bc34:	4652      	mov	r2, sl
 800bc36:	465b      	mov	r3, fp
 800bc38:	e7e2      	b.n	800bc00 <_strtod_l+0x90>
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	e7ef      	b.n	800bc1e <_strtod_l+0xae>
 800bc3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bc40:	b13a      	cbz	r2, 800bc52 <_strtod_l+0xe2>
 800bc42:	2135      	movs	r1, #53	; 0x35
 800bc44:	a81e      	add	r0, sp, #120	; 0x78
 800bc46:	f001 fd6d 	bl	800d724 <__copybits>
 800bc4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc4c:	4648      	mov	r0, r9
 800bc4e:	f001 f9da 	bl	800d006 <_Bfree>
 800bc52:	3c01      	subs	r4, #1
 800bc54:	2c04      	cmp	r4, #4
 800bc56:	d806      	bhi.n	800bc66 <_strtod_l+0xf6>
 800bc58:	e8df f004 	tbb	[pc, r4]
 800bc5c:	1714030a 	.word	0x1714030a
 800bc60:	0a          	.byte	0x0a
 800bc61:	00          	.byte	0x00
 800bc62:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800bc66:	0730      	lsls	r0, r6, #28
 800bc68:	d5c1      	bpl.n	800bbee <_strtod_l+0x7e>
 800bc6a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bc6e:	e7be      	b.n	800bbee <_strtod_l+0x7e>
 800bc70:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800bc74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bc76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bc7a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bc7e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bc82:	e7f0      	b.n	800bc66 <_strtod_l+0xf6>
 800bc84:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bdf8 <_strtod_l+0x288>
 800bc88:	e7ed      	b.n	800bc66 <_strtod_l+0xf6>
 800bc8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bc8e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bc92:	e7e8      	b.n	800bc66 <_strtod_l+0xf6>
 800bc94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc96:	1c5a      	adds	r2, r3, #1
 800bc98:	921b      	str	r2, [sp, #108]	; 0x6c
 800bc9a:	785b      	ldrb	r3, [r3, #1]
 800bc9c:	2b30      	cmp	r3, #48	; 0x30
 800bc9e:	d0f9      	beq.n	800bc94 <_strtod_l+0x124>
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0a4      	beq.n	800bbee <_strtod_l+0x7e>
 800bca4:	2301      	movs	r3, #1
 800bca6:	2500      	movs	r5, #0
 800bca8:	9306      	str	r3, [sp, #24]
 800bcaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcac:	9308      	str	r3, [sp, #32]
 800bcae:	9507      	str	r5, [sp, #28]
 800bcb0:	9505      	str	r5, [sp, #20]
 800bcb2:	220a      	movs	r2, #10
 800bcb4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bcb6:	7807      	ldrb	r7, [r0, #0]
 800bcb8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bcbc:	b2d9      	uxtb	r1, r3
 800bcbe:	2909      	cmp	r1, #9
 800bcc0:	d929      	bls.n	800bd16 <_strtod_l+0x1a6>
 800bcc2:	4622      	mov	r2, r4
 800bcc4:	f8d8 1000 	ldr.w	r1, [r8]
 800bcc8:	f7ff ff21 	bl	800bb0e <strncmp>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d031      	beq.n	800bd34 <_strtod_l+0x1c4>
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	9c05      	ldr	r4, [sp, #20]
 800bcd4:	9004      	str	r0, [sp, #16]
 800bcd6:	463b      	mov	r3, r7
 800bcd8:	4602      	mov	r2, r0
 800bcda:	2b65      	cmp	r3, #101	; 0x65
 800bcdc:	d001      	beq.n	800bce2 <_strtod_l+0x172>
 800bcde:	2b45      	cmp	r3, #69	; 0x45
 800bce0:	d114      	bne.n	800bd0c <_strtod_l+0x19c>
 800bce2:	b924      	cbnz	r4, 800bcee <_strtod_l+0x17e>
 800bce4:	b910      	cbnz	r0, 800bcec <_strtod_l+0x17c>
 800bce6:	9b06      	ldr	r3, [sp, #24]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d09e      	beq.n	800bc2a <_strtod_l+0xba>
 800bcec:	2400      	movs	r4, #0
 800bcee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bcf0:	1c73      	adds	r3, r6, #1
 800bcf2:	931b      	str	r3, [sp, #108]	; 0x6c
 800bcf4:	7873      	ldrb	r3, [r6, #1]
 800bcf6:	2b2b      	cmp	r3, #43	; 0x2b
 800bcf8:	d078      	beq.n	800bdec <_strtod_l+0x27c>
 800bcfa:	2b2d      	cmp	r3, #45	; 0x2d
 800bcfc:	d070      	beq.n	800bde0 <_strtod_l+0x270>
 800bcfe:	f04f 0c00 	mov.w	ip, #0
 800bd02:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bd06:	2f09      	cmp	r7, #9
 800bd08:	d97c      	bls.n	800be04 <_strtod_l+0x294>
 800bd0a:	961b      	str	r6, [sp, #108]	; 0x6c
 800bd0c:	f04f 0e00 	mov.w	lr, #0
 800bd10:	e09a      	b.n	800be48 <_strtod_l+0x2d8>
 800bd12:	2300      	movs	r3, #0
 800bd14:	e7c7      	b.n	800bca6 <_strtod_l+0x136>
 800bd16:	9905      	ldr	r1, [sp, #20]
 800bd18:	2908      	cmp	r1, #8
 800bd1a:	bfdd      	ittte	le
 800bd1c:	9907      	ldrle	r1, [sp, #28]
 800bd1e:	fb02 3301 	mlale	r3, r2, r1, r3
 800bd22:	9307      	strle	r3, [sp, #28]
 800bd24:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bd28:	9b05      	ldr	r3, [sp, #20]
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	9305      	str	r3, [sp, #20]
 800bd30:	901b      	str	r0, [sp, #108]	; 0x6c
 800bd32:	e7bf      	b.n	800bcb4 <_strtod_l+0x144>
 800bd34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd36:	191a      	adds	r2, r3, r4
 800bd38:	921b      	str	r2, [sp, #108]	; 0x6c
 800bd3a:	9a05      	ldr	r2, [sp, #20]
 800bd3c:	5d1b      	ldrb	r3, [r3, r4]
 800bd3e:	2a00      	cmp	r2, #0
 800bd40:	d037      	beq.n	800bdb2 <_strtod_l+0x242>
 800bd42:	9c05      	ldr	r4, [sp, #20]
 800bd44:	4602      	mov	r2, r0
 800bd46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bd4a:	2909      	cmp	r1, #9
 800bd4c:	d913      	bls.n	800bd76 <_strtod_l+0x206>
 800bd4e:	2101      	movs	r1, #1
 800bd50:	9104      	str	r1, [sp, #16]
 800bd52:	e7c2      	b.n	800bcda <_strtod_l+0x16a>
 800bd54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd56:	1c5a      	adds	r2, r3, #1
 800bd58:	921b      	str	r2, [sp, #108]	; 0x6c
 800bd5a:	785b      	ldrb	r3, [r3, #1]
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	2b30      	cmp	r3, #48	; 0x30
 800bd60:	d0f8      	beq.n	800bd54 <_strtod_l+0x1e4>
 800bd62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bd66:	2a08      	cmp	r2, #8
 800bd68:	f200 84e4 	bhi.w	800c734 <_strtod_l+0xbc4>
 800bd6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bd6e:	9208      	str	r2, [sp, #32]
 800bd70:	4602      	mov	r2, r0
 800bd72:	2000      	movs	r0, #0
 800bd74:	4604      	mov	r4, r0
 800bd76:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bd7a:	f100 0101 	add.w	r1, r0, #1
 800bd7e:	d012      	beq.n	800bda6 <_strtod_l+0x236>
 800bd80:	440a      	add	r2, r1
 800bd82:	eb00 0c04 	add.w	ip, r0, r4
 800bd86:	4621      	mov	r1, r4
 800bd88:	270a      	movs	r7, #10
 800bd8a:	458c      	cmp	ip, r1
 800bd8c:	d113      	bne.n	800bdb6 <_strtod_l+0x246>
 800bd8e:	1821      	adds	r1, r4, r0
 800bd90:	2908      	cmp	r1, #8
 800bd92:	f104 0401 	add.w	r4, r4, #1
 800bd96:	4404      	add	r4, r0
 800bd98:	dc19      	bgt.n	800bdce <_strtod_l+0x25e>
 800bd9a:	9b07      	ldr	r3, [sp, #28]
 800bd9c:	210a      	movs	r1, #10
 800bd9e:	fb01 e303 	mla	r3, r1, r3, lr
 800bda2:	9307      	str	r3, [sp, #28]
 800bda4:	2100      	movs	r1, #0
 800bda6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bda8:	1c58      	adds	r0, r3, #1
 800bdaa:	901b      	str	r0, [sp, #108]	; 0x6c
 800bdac:	785b      	ldrb	r3, [r3, #1]
 800bdae:	4608      	mov	r0, r1
 800bdb0:	e7c9      	b.n	800bd46 <_strtod_l+0x1d6>
 800bdb2:	9805      	ldr	r0, [sp, #20]
 800bdb4:	e7d3      	b.n	800bd5e <_strtod_l+0x1ee>
 800bdb6:	2908      	cmp	r1, #8
 800bdb8:	f101 0101 	add.w	r1, r1, #1
 800bdbc:	dc03      	bgt.n	800bdc6 <_strtod_l+0x256>
 800bdbe:	9b07      	ldr	r3, [sp, #28]
 800bdc0:	437b      	muls	r3, r7
 800bdc2:	9307      	str	r3, [sp, #28]
 800bdc4:	e7e1      	b.n	800bd8a <_strtod_l+0x21a>
 800bdc6:	2910      	cmp	r1, #16
 800bdc8:	bfd8      	it	le
 800bdca:	437d      	mulle	r5, r7
 800bdcc:	e7dd      	b.n	800bd8a <_strtod_l+0x21a>
 800bdce:	2c10      	cmp	r4, #16
 800bdd0:	bfdc      	itt	le
 800bdd2:	210a      	movle	r1, #10
 800bdd4:	fb01 e505 	mlale	r5, r1, r5, lr
 800bdd8:	e7e4      	b.n	800bda4 <_strtod_l+0x234>
 800bdda:	2301      	movs	r3, #1
 800bddc:	9304      	str	r3, [sp, #16]
 800bdde:	e781      	b.n	800bce4 <_strtod_l+0x174>
 800bde0:	f04f 0c01 	mov.w	ip, #1
 800bde4:	1cb3      	adds	r3, r6, #2
 800bde6:	931b      	str	r3, [sp, #108]	; 0x6c
 800bde8:	78b3      	ldrb	r3, [r6, #2]
 800bdea:	e78a      	b.n	800bd02 <_strtod_l+0x192>
 800bdec:	f04f 0c00 	mov.w	ip, #0
 800bdf0:	e7f8      	b.n	800bde4 <_strtod_l+0x274>
 800bdf2:	bf00      	nop
 800bdf4:	0800eabc 	.word	0x0800eabc
 800bdf8:	7ff00000 	.word	0x7ff00000
 800bdfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdfe:	1c5f      	adds	r7, r3, #1
 800be00:	971b      	str	r7, [sp, #108]	; 0x6c
 800be02:	785b      	ldrb	r3, [r3, #1]
 800be04:	2b30      	cmp	r3, #48	; 0x30
 800be06:	d0f9      	beq.n	800bdfc <_strtod_l+0x28c>
 800be08:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800be0c:	2f08      	cmp	r7, #8
 800be0e:	f63f af7d 	bhi.w	800bd0c <_strtod_l+0x19c>
 800be12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800be16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be18:	930a      	str	r3, [sp, #40]	; 0x28
 800be1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be1c:	1c5f      	adds	r7, r3, #1
 800be1e:	971b      	str	r7, [sp, #108]	; 0x6c
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800be26:	f1b8 0f09 	cmp.w	r8, #9
 800be2a:	d937      	bls.n	800be9c <_strtod_l+0x32c>
 800be2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be2e:	1a7f      	subs	r7, r7, r1
 800be30:	2f08      	cmp	r7, #8
 800be32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800be36:	dc37      	bgt.n	800bea8 <_strtod_l+0x338>
 800be38:	45be      	cmp	lr, r7
 800be3a:	bfa8      	it	ge
 800be3c:	46be      	movge	lr, r7
 800be3e:	f1bc 0f00 	cmp.w	ip, #0
 800be42:	d001      	beq.n	800be48 <_strtod_l+0x2d8>
 800be44:	f1ce 0e00 	rsb	lr, lr, #0
 800be48:	2c00      	cmp	r4, #0
 800be4a:	d151      	bne.n	800bef0 <_strtod_l+0x380>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	f47f aece 	bne.w	800bbee <_strtod_l+0x7e>
 800be52:	9a06      	ldr	r2, [sp, #24]
 800be54:	2a00      	cmp	r2, #0
 800be56:	f47f aeca 	bne.w	800bbee <_strtod_l+0x7e>
 800be5a:	9a04      	ldr	r2, [sp, #16]
 800be5c:	2a00      	cmp	r2, #0
 800be5e:	f47f aee4 	bne.w	800bc2a <_strtod_l+0xba>
 800be62:	2b4e      	cmp	r3, #78	; 0x4e
 800be64:	d027      	beq.n	800beb6 <_strtod_l+0x346>
 800be66:	dc21      	bgt.n	800beac <_strtod_l+0x33c>
 800be68:	2b49      	cmp	r3, #73	; 0x49
 800be6a:	f47f aede 	bne.w	800bc2a <_strtod_l+0xba>
 800be6e:	49a0      	ldr	r1, [pc, #640]	; (800c0f0 <_strtod_l+0x580>)
 800be70:	a81b      	add	r0, sp, #108	; 0x6c
 800be72:	f000 ffd9 	bl	800ce28 <__match>
 800be76:	2800      	cmp	r0, #0
 800be78:	f43f aed7 	beq.w	800bc2a <_strtod_l+0xba>
 800be7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be7e:	499d      	ldr	r1, [pc, #628]	; (800c0f4 <_strtod_l+0x584>)
 800be80:	3b01      	subs	r3, #1
 800be82:	a81b      	add	r0, sp, #108	; 0x6c
 800be84:	931b      	str	r3, [sp, #108]	; 0x6c
 800be86:	f000 ffcf 	bl	800ce28 <__match>
 800be8a:	b910      	cbnz	r0, 800be92 <_strtod_l+0x322>
 800be8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be8e:	3301      	adds	r3, #1
 800be90:	931b      	str	r3, [sp, #108]	; 0x6c
 800be92:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c108 <_strtod_l+0x598>
 800be96:	f04f 0a00 	mov.w	sl, #0
 800be9a:	e6a8      	b.n	800bbee <_strtod_l+0x7e>
 800be9c:	210a      	movs	r1, #10
 800be9e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bea2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bea6:	e7b8      	b.n	800be1a <_strtod_l+0x2aa>
 800bea8:	46be      	mov	lr, r7
 800beaa:	e7c8      	b.n	800be3e <_strtod_l+0x2ce>
 800beac:	2b69      	cmp	r3, #105	; 0x69
 800beae:	d0de      	beq.n	800be6e <_strtod_l+0x2fe>
 800beb0:	2b6e      	cmp	r3, #110	; 0x6e
 800beb2:	f47f aeba 	bne.w	800bc2a <_strtod_l+0xba>
 800beb6:	4990      	ldr	r1, [pc, #576]	; (800c0f8 <_strtod_l+0x588>)
 800beb8:	a81b      	add	r0, sp, #108	; 0x6c
 800beba:	f000 ffb5 	bl	800ce28 <__match>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	f43f aeb3 	beq.w	800bc2a <_strtod_l+0xba>
 800bec4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b28      	cmp	r3, #40	; 0x28
 800beca:	d10e      	bne.n	800beea <_strtod_l+0x37a>
 800becc:	aa1e      	add	r2, sp, #120	; 0x78
 800bece:	498b      	ldr	r1, [pc, #556]	; (800c0fc <_strtod_l+0x58c>)
 800bed0:	a81b      	add	r0, sp, #108	; 0x6c
 800bed2:	f000 ffbd 	bl	800ce50 <__hexnan>
 800bed6:	2805      	cmp	r0, #5
 800bed8:	d107      	bne.n	800beea <_strtod_l+0x37a>
 800beda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bedc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800bee0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bee4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bee8:	e681      	b.n	800bbee <_strtod_l+0x7e>
 800beea:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c110 <_strtod_l+0x5a0>
 800beee:	e7d2      	b.n	800be96 <_strtod_l+0x326>
 800bef0:	ebae 0302 	sub.w	r3, lr, r2
 800bef4:	9306      	str	r3, [sp, #24]
 800bef6:	9b05      	ldr	r3, [sp, #20]
 800bef8:	9807      	ldr	r0, [sp, #28]
 800befa:	2b00      	cmp	r3, #0
 800befc:	bf08      	it	eq
 800befe:	4623      	moveq	r3, r4
 800bf00:	2c10      	cmp	r4, #16
 800bf02:	9305      	str	r3, [sp, #20]
 800bf04:	46a0      	mov	r8, r4
 800bf06:	bfa8      	it	ge
 800bf08:	f04f 0810 	movge.w	r8, #16
 800bf0c:	f7f4 faa6 	bl	800045c <__aeabi_ui2d>
 800bf10:	2c09      	cmp	r4, #9
 800bf12:	4682      	mov	sl, r0
 800bf14:	468b      	mov	fp, r1
 800bf16:	dc13      	bgt.n	800bf40 <_strtod_l+0x3d0>
 800bf18:	9b06      	ldr	r3, [sp, #24]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f43f ae67 	beq.w	800bbee <_strtod_l+0x7e>
 800bf20:	9b06      	ldr	r3, [sp, #24]
 800bf22:	dd7a      	ble.n	800c01a <_strtod_l+0x4aa>
 800bf24:	2b16      	cmp	r3, #22
 800bf26:	dc61      	bgt.n	800bfec <_strtod_l+0x47c>
 800bf28:	4a75      	ldr	r2, [pc, #468]	; (800c100 <_strtod_l+0x590>)
 800bf2a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bf2e:	e9de 0100 	ldrd	r0, r1, [lr]
 800bf32:	4652      	mov	r2, sl
 800bf34:	465b      	mov	r3, fp
 800bf36:	f7f4 fb0b 	bl	8000550 <__aeabi_dmul>
 800bf3a:	4682      	mov	sl, r0
 800bf3c:	468b      	mov	fp, r1
 800bf3e:	e656      	b.n	800bbee <_strtod_l+0x7e>
 800bf40:	4b6f      	ldr	r3, [pc, #444]	; (800c100 <_strtod_l+0x590>)
 800bf42:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bf46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bf4a:	f7f4 fb01 	bl	8000550 <__aeabi_dmul>
 800bf4e:	4606      	mov	r6, r0
 800bf50:	4628      	mov	r0, r5
 800bf52:	460f      	mov	r7, r1
 800bf54:	f7f4 fa82 	bl	800045c <__aeabi_ui2d>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	4639      	mov	r1, r7
 800bf60:	f7f4 f940 	bl	80001e4 <__adddf3>
 800bf64:	2c0f      	cmp	r4, #15
 800bf66:	4682      	mov	sl, r0
 800bf68:	468b      	mov	fp, r1
 800bf6a:	ddd5      	ble.n	800bf18 <_strtod_l+0x3a8>
 800bf6c:	9b06      	ldr	r3, [sp, #24]
 800bf6e:	eba4 0808 	sub.w	r8, r4, r8
 800bf72:	4498      	add	r8, r3
 800bf74:	f1b8 0f00 	cmp.w	r8, #0
 800bf78:	f340 8096 	ble.w	800c0a8 <_strtod_l+0x538>
 800bf7c:	f018 030f 	ands.w	r3, r8, #15
 800bf80:	d00a      	beq.n	800bf98 <_strtod_l+0x428>
 800bf82:	495f      	ldr	r1, [pc, #380]	; (800c100 <_strtod_l+0x590>)
 800bf84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bf88:	4652      	mov	r2, sl
 800bf8a:	465b      	mov	r3, fp
 800bf8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf90:	f7f4 fade 	bl	8000550 <__aeabi_dmul>
 800bf94:	4682      	mov	sl, r0
 800bf96:	468b      	mov	fp, r1
 800bf98:	f038 080f 	bics.w	r8, r8, #15
 800bf9c:	d073      	beq.n	800c086 <_strtod_l+0x516>
 800bf9e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bfa2:	dd47      	ble.n	800c034 <_strtod_l+0x4c4>
 800bfa4:	2400      	movs	r4, #0
 800bfa6:	46a0      	mov	r8, r4
 800bfa8:	9407      	str	r4, [sp, #28]
 800bfaa:	9405      	str	r4, [sp, #20]
 800bfac:	2322      	movs	r3, #34	; 0x22
 800bfae:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c108 <_strtod_l+0x598>
 800bfb2:	f8c9 3000 	str.w	r3, [r9]
 800bfb6:	f04f 0a00 	mov.w	sl, #0
 800bfba:	9b07      	ldr	r3, [sp, #28]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f43f ae16 	beq.w	800bbee <_strtod_l+0x7e>
 800bfc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bfc4:	4648      	mov	r0, r9
 800bfc6:	f001 f81e 	bl	800d006 <_Bfree>
 800bfca:	9905      	ldr	r1, [sp, #20]
 800bfcc:	4648      	mov	r0, r9
 800bfce:	f001 f81a 	bl	800d006 <_Bfree>
 800bfd2:	4641      	mov	r1, r8
 800bfd4:	4648      	mov	r0, r9
 800bfd6:	f001 f816 	bl	800d006 <_Bfree>
 800bfda:	9907      	ldr	r1, [sp, #28]
 800bfdc:	4648      	mov	r0, r9
 800bfde:	f001 f812 	bl	800d006 <_Bfree>
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	4648      	mov	r0, r9
 800bfe6:	f001 f80e 	bl	800d006 <_Bfree>
 800bfea:	e600      	b.n	800bbee <_strtod_l+0x7e>
 800bfec:	9a06      	ldr	r2, [sp, #24]
 800bfee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bff2:	4293      	cmp	r3, r2
 800bff4:	dbba      	blt.n	800bf6c <_strtod_l+0x3fc>
 800bff6:	4d42      	ldr	r5, [pc, #264]	; (800c100 <_strtod_l+0x590>)
 800bff8:	f1c4 040f 	rsb	r4, r4, #15
 800bffc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c000:	4652      	mov	r2, sl
 800c002:	465b      	mov	r3, fp
 800c004:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c008:	f7f4 faa2 	bl	8000550 <__aeabi_dmul>
 800c00c:	9b06      	ldr	r3, [sp, #24]
 800c00e:	1b1c      	subs	r4, r3, r4
 800c010:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c014:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c018:	e78d      	b.n	800bf36 <_strtod_l+0x3c6>
 800c01a:	f113 0f16 	cmn.w	r3, #22
 800c01e:	dba5      	blt.n	800bf6c <_strtod_l+0x3fc>
 800c020:	4a37      	ldr	r2, [pc, #220]	; (800c100 <_strtod_l+0x590>)
 800c022:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c026:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c02a:	4650      	mov	r0, sl
 800c02c:	4659      	mov	r1, fp
 800c02e:	f7f4 fbb9 	bl	80007a4 <__aeabi_ddiv>
 800c032:	e782      	b.n	800bf3a <_strtod_l+0x3ca>
 800c034:	2300      	movs	r3, #0
 800c036:	4e33      	ldr	r6, [pc, #204]	; (800c104 <_strtod_l+0x594>)
 800c038:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c03c:	4650      	mov	r0, sl
 800c03e:	4659      	mov	r1, fp
 800c040:	461d      	mov	r5, r3
 800c042:	f1b8 0f01 	cmp.w	r8, #1
 800c046:	dc21      	bgt.n	800c08c <_strtod_l+0x51c>
 800c048:	b10b      	cbz	r3, 800c04e <_strtod_l+0x4de>
 800c04a:	4682      	mov	sl, r0
 800c04c:	468b      	mov	fp, r1
 800c04e:	4b2d      	ldr	r3, [pc, #180]	; (800c104 <_strtod_l+0x594>)
 800c050:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c054:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c058:	4652      	mov	r2, sl
 800c05a:	465b      	mov	r3, fp
 800c05c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c060:	f7f4 fa76 	bl	8000550 <__aeabi_dmul>
 800c064:	4b28      	ldr	r3, [pc, #160]	; (800c108 <_strtod_l+0x598>)
 800c066:	460a      	mov	r2, r1
 800c068:	400b      	ands	r3, r1
 800c06a:	4928      	ldr	r1, [pc, #160]	; (800c10c <_strtod_l+0x59c>)
 800c06c:	428b      	cmp	r3, r1
 800c06e:	4682      	mov	sl, r0
 800c070:	d898      	bhi.n	800bfa4 <_strtod_l+0x434>
 800c072:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c076:	428b      	cmp	r3, r1
 800c078:	bf86      	itte	hi
 800c07a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c114 <_strtod_l+0x5a4>
 800c07e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800c082:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c086:	2300      	movs	r3, #0
 800c088:	9304      	str	r3, [sp, #16]
 800c08a:	e077      	b.n	800c17c <_strtod_l+0x60c>
 800c08c:	f018 0f01 	tst.w	r8, #1
 800c090:	d006      	beq.n	800c0a0 <_strtod_l+0x530>
 800c092:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	f7f4 fa59 	bl	8000550 <__aeabi_dmul>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	3501      	adds	r5, #1
 800c0a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c0a6:	e7cc      	b.n	800c042 <_strtod_l+0x4d2>
 800c0a8:	d0ed      	beq.n	800c086 <_strtod_l+0x516>
 800c0aa:	f1c8 0800 	rsb	r8, r8, #0
 800c0ae:	f018 020f 	ands.w	r2, r8, #15
 800c0b2:	d00a      	beq.n	800c0ca <_strtod_l+0x55a>
 800c0b4:	4b12      	ldr	r3, [pc, #72]	; (800c100 <_strtod_l+0x590>)
 800c0b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0ba:	4650      	mov	r0, sl
 800c0bc:	4659      	mov	r1, fp
 800c0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c2:	f7f4 fb6f 	bl	80007a4 <__aeabi_ddiv>
 800c0c6:	4682      	mov	sl, r0
 800c0c8:	468b      	mov	fp, r1
 800c0ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c0ce:	d0da      	beq.n	800c086 <_strtod_l+0x516>
 800c0d0:	f1b8 0f1f 	cmp.w	r8, #31
 800c0d4:	dd20      	ble.n	800c118 <_strtod_l+0x5a8>
 800c0d6:	2400      	movs	r4, #0
 800c0d8:	46a0      	mov	r8, r4
 800c0da:	9407      	str	r4, [sp, #28]
 800c0dc:	9405      	str	r4, [sp, #20]
 800c0de:	2322      	movs	r3, #34	; 0x22
 800c0e0:	f04f 0a00 	mov.w	sl, #0
 800c0e4:	f04f 0b00 	mov.w	fp, #0
 800c0e8:	f8c9 3000 	str.w	r3, [r9]
 800c0ec:	e765      	b.n	800bfba <_strtod_l+0x44a>
 800c0ee:	bf00      	nop
 800c0f0:	0800eab0 	.word	0x0800eab0
 800c0f4:	0800eab3 	.word	0x0800eab3
 800c0f8:	0800eab9 	.word	0x0800eab9
 800c0fc:	0800ead0 	.word	0x0800ead0
 800c100:	0800eb48 	.word	0x0800eb48
 800c104:	0800eb20 	.word	0x0800eb20
 800c108:	7ff00000 	.word	0x7ff00000
 800c10c:	7ca00000 	.word	0x7ca00000
 800c110:	fff80000 	.word	0xfff80000
 800c114:	7fefffff 	.word	0x7fefffff
 800c118:	f018 0310 	ands.w	r3, r8, #16
 800c11c:	bf18      	it	ne
 800c11e:	236a      	movne	r3, #106	; 0x6a
 800c120:	4da0      	ldr	r5, [pc, #640]	; (800c3a4 <_strtod_l+0x834>)
 800c122:	9304      	str	r3, [sp, #16]
 800c124:	4650      	mov	r0, sl
 800c126:	4659      	mov	r1, fp
 800c128:	2300      	movs	r3, #0
 800c12a:	f1b8 0f00 	cmp.w	r8, #0
 800c12e:	f300 810a 	bgt.w	800c346 <_strtod_l+0x7d6>
 800c132:	b10b      	cbz	r3, 800c138 <_strtod_l+0x5c8>
 800c134:	4682      	mov	sl, r0
 800c136:	468b      	mov	fp, r1
 800c138:	9b04      	ldr	r3, [sp, #16]
 800c13a:	b1bb      	cbz	r3, 800c16c <_strtod_l+0x5fc>
 800c13c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c140:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c144:	2b00      	cmp	r3, #0
 800c146:	4659      	mov	r1, fp
 800c148:	dd10      	ble.n	800c16c <_strtod_l+0x5fc>
 800c14a:	2b1f      	cmp	r3, #31
 800c14c:	f340 8107 	ble.w	800c35e <_strtod_l+0x7ee>
 800c150:	2b34      	cmp	r3, #52	; 0x34
 800c152:	bfde      	ittt	le
 800c154:	3b20      	suble	r3, #32
 800c156:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800c15a:	fa02 f303 	lslle.w	r3, r2, r3
 800c15e:	f04f 0a00 	mov.w	sl, #0
 800c162:	bfcc      	ite	gt
 800c164:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c168:	ea03 0b01 	andle.w	fp, r3, r1
 800c16c:	2200      	movs	r2, #0
 800c16e:	2300      	movs	r3, #0
 800c170:	4650      	mov	r0, sl
 800c172:	4659      	mov	r1, fp
 800c174:	f7f4 fc54 	bl	8000a20 <__aeabi_dcmpeq>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d1ac      	bne.n	800c0d6 <_strtod_l+0x566>
 800c17c:	9b07      	ldr	r3, [sp, #28]
 800c17e:	9300      	str	r3, [sp, #0]
 800c180:	9a05      	ldr	r2, [sp, #20]
 800c182:	9908      	ldr	r1, [sp, #32]
 800c184:	4623      	mov	r3, r4
 800c186:	4648      	mov	r0, r9
 800c188:	f000 ff8f 	bl	800d0aa <__s2b>
 800c18c:	9007      	str	r0, [sp, #28]
 800c18e:	2800      	cmp	r0, #0
 800c190:	f43f af08 	beq.w	800bfa4 <_strtod_l+0x434>
 800c194:	9a06      	ldr	r2, [sp, #24]
 800c196:	9b06      	ldr	r3, [sp, #24]
 800c198:	2a00      	cmp	r2, #0
 800c19a:	f1c3 0300 	rsb	r3, r3, #0
 800c19e:	bfa8      	it	ge
 800c1a0:	2300      	movge	r3, #0
 800c1a2:	930e      	str	r3, [sp, #56]	; 0x38
 800c1a4:	2400      	movs	r4, #0
 800c1a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c1aa:	9316      	str	r3, [sp, #88]	; 0x58
 800c1ac:	46a0      	mov	r8, r4
 800c1ae:	9b07      	ldr	r3, [sp, #28]
 800c1b0:	4648      	mov	r0, r9
 800c1b2:	6859      	ldr	r1, [r3, #4]
 800c1b4:	f000 fef3 	bl	800cf9e <_Balloc>
 800c1b8:	9005      	str	r0, [sp, #20]
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	f43f aef6 	beq.w	800bfac <_strtod_l+0x43c>
 800c1c0:	9b07      	ldr	r3, [sp, #28]
 800c1c2:	691a      	ldr	r2, [r3, #16]
 800c1c4:	3202      	adds	r2, #2
 800c1c6:	f103 010c 	add.w	r1, r3, #12
 800c1ca:	0092      	lsls	r2, r2, #2
 800c1cc:	300c      	adds	r0, #12
 800c1ce:	f7ff fc83 	bl	800bad8 <memcpy>
 800c1d2:	aa1e      	add	r2, sp, #120	; 0x78
 800c1d4:	a91d      	add	r1, sp, #116	; 0x74
 800c1d6:	ec4b ab10 	vmov	d0, sl, fp
 800c1da:	4648      	mov	r0, r9
 800c1dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c1e0:	f001 fa1e 	bl	800d620 <__d2b>
 800c1e4:	901c      	str	r0, [sp, #112]	; 0x70
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	f43f aee0 	beq.w	800bfac <_strtod_l+0x43c>
 800c1ec:	2101      	movs	r1, #1
 800c1ee:	4648      	mov	r0, r9
 800c1f0:	f000 ffe7 	bl	800d1c2 <__i2b>
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f43f aed8 	beq.w	800bfac <_strtod_l+0x43c>
 800c1fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c1fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c200:	2e00      	cmp	r6, #0
 800c202:	bfab      	itete	ge
 800c204:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c206:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c208:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c20a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c20c:	bfac      	ite	ge
 800c20e:	18f7      	addge	r7, r6, r3
 800c210:	1b9d      	sublt	r5, r3, r6
 800c212:	9b04      	ldr	r3, [sp, #16]
 800c214:	1af6      	subs	r6, r6, r3
 800c216:	4416      	add	r6, r2
 800c218:	4b63      	ldr	r3, [pc, #396]	; (800c3a8 <_strtod_l+0x838>)
 800c21a:	3e01      	subs	r6, #1
 800c21c:	429e      	cmp	r6, r3
 800c21e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c222:	f280 80af 	bge.w	800c384 <_strtod_l+0x814>
 800c226:	1b9b      	subs	r3, r3, r6
 800c228:	2b1f      	cmp	r3, #31
 800c22a:	eba2 0203 	sub.w	r2, r2, r3
 800c22e:	f04f 0101 	mov.w	r1, #1
 800c232:	f300 809b 	bgt.w	800c36c <_strtod_l+0x7fc>
 800c236:	fa01 f303 	lsl.w	r3, r1, r3
 800c23a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c23c:	2300      	movs	r3, #0
 800c23e:	930a      	str	r3, [sp, #40]	; 0x28
 800c240:	18be      	adds	r6, r7, r2
 800c242:	9b04      	ldr	r3, [sp, #16]
 800c244:	42b7      	cmp	r7, r6
 800c246:	4415      	add	r5, r2
 800c248:	441d      	add	r5, r3
 800c24a:	463b      	mov	r3, r7
 800c24c:	bfa8      	it	ge
 800c24e:	4633      	movge	r3, r6
 800c250:	42ab      	cmp	r3, r5
 800c252:	bfa8      	it	ge
 800c254:	462b      	movge	r3, r5
 800c256:	2b00      	cmp	r3, #0
 800c258:	bfc2      	ittt	gt
 800c25a:	1af6      	subgt	r6, r6, r3
 800c25c:	1aed      	subgt	r5, r5, r3
 800c25e:	1aff      	subgt	r7, r7, r3
 800c260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c262:	b1bb      	cbz	r3, 800c294 <_strtod_l+0x724>
 800c264:	4641      	mov	r1, r8
 800c266:	461a      	mov	r2, r3
 800c268:	4648      	mov	r0, r9
 800c26a:	f001 f849 	bl	800d300 <__pow5mult>
 800c26e:	4680      	mov	r8, r0
 800c270:	2800      	cmp	r0, #0
 800c272:	f43f ae9b 	beq.w	800bfac <_strtod_l+0x43c>
 800c276:	4601      	mov	r1, r0
 800c278:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c27a:	4648      	mov	r0, r9
 800c27c:	f000 ffaa 	bl	800d1d4 <__multiply>
 800c280:	900c      	str	r0, [sp, #48]	; 0x30
 800c282:	2800      	cmp	r0, #0
 800c284:	f43f ae92 	beq.w	800bfac <_strtod_l+0x43c>
 800c288:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c28a:	4648      	mov	r0, r9
 800c28c:	f000 febb 	bl	800d006 <_Bfree>
 800c290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c292:	931c      	str	r3, [sp, #112]	; 0x70
 800c294:	2e00      	cmp	r6, #0
 800c296:	dc7a      	bgt.n	800c38e <_strtod_l+0x81e>
 800c298:	9b06      	ldr	r3, [sp, #24]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	dd08      	ble.n	800c2b0 <_strtod_l+0x740>
 800c29e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c2a0:	9905      	ldr	r1, [sp, #20]
 800c2a2:	4648      	mov	r0, r9
 800c2a4:	f001 f82c 	bl	800d300 <__pow5mult>
 800c2a8:	9005      	str	r0, [sp, #20]
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	f43f ae7e 	beq.w	800bfac <_strtod_l+0x43c>
 800c2b0:	2d00      	cmp	r5, #0
 800c2b2:	dd08      	ble.n	800c2c6 <_strtod_l+0x756>
 800c2b4:	462a      	mov	r2, r5
 800c2b6:	9905      	ldr	r1, [sp, #20]
 800c2b8:	4648      	mov	r0, r9
 800c2ba:	f001 f86f 	bl	800d39c <__lshift>
 800c2be:	9005      	str	r0, [sp, #20]
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	f43f ae73 	beq.w	800bfac <_strtod_l+0x43c>
 800c2c6:	2f00      	cmp	r7, #0
 800c2c8:	dd08      	ble.n	800c2dc <_strtod_l+0x76c>
 800c2ca:	4641      	mov	r1, r8
 800c2cc:	463a      	mov	r2, r7
 800c2ce:	4648      	mov	r0, r9
 800c2d0:	f001 f864 	bl	800d39c <__lshift>
 800c2d4:	4680      	mov	r8, r0
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	f43f ae68 	beq.w	800bfac <_strtod_l+0x43c>
 800c2dc:	9a05      	ldr	r2, [sp, #20]
 800c2de:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c2e0:	4648      	mov	r0, r9
 800c2e2:	f001 f8c9 	bl	800d478 <__mdiff>
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	f43f ae5f 	beq.w	800bfac <_strtod_l+0x43c>
 800c2ee:	68c3      	ldr	r3, [r0, #12]
 800c2f0:	930c      	str	r3, [sp, #48]	; 0x30
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60c3      	str	r3, [r0, #12]
 800c2f6:	4641      	mov	r1, r8
 800c2f8:	f001 f8a4 	bl	800d444 <__mcmp>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	da55      	bge.n	800c3ac <_strtod_l+0x83c>
 800c300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c302:	b9e3      	cbnz	r3, 800c33e <_strtod_l+0x7ce>
 800c304:	f1ba 0f00 	cmp.w	sl, #0
 800c308:	d119      	bne.n	800c33e <_strtod_l+0x7ce>
 800c30a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c30e:	b9b3      	cbnz	r3, 800c33e <_strtod_l+0x7ce>
 800c310:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c314:	0d1b      	lsrs	r3, r3, #20
 800c316:	051b      	lsls	r3, r3, #20
 800c318:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c31c:	d90f      	bls.n	800c33e <_strtod_l+0x7ce>
 800c31e:	6963      	ldr	r3, [r4, #20]
 800c320:	b913      	cbnz	r3, 800c328 <_strtod_l+0x7b8>
 800c322:	6923      	ldr	r3, [r4, #16]
 800c324:	2b01      	cmp	r3, #1
 800c326:	dd0a      	ble.n	800c33e <_strtod_l+0x7ce>
 800c328:	4621      	mov	r1, r4
 800c32a:	2201      	movs	r2, #1
 800c32c:	4648      	mov	r0, r9
 800c32e:	f001 f835 	bl	800d39c <__lshift>
 800c332:	4641      	mov	r1, r8
 800c334:	4604      	mov	r4, r0
 800c336:	f001 f885 	bl	800d444 <__mcmp>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	dc67      	bgt.n	800c40e <_strtod_l+0x89e>
 800c33e:	9b04      	ldr	r3, [sp, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d171      	bne.n	800c428 <_strtod_l+0x8b8>
 800c344:	e63d      	b.n	800bfc2 <_strtod_l+0x452>
 800c346:	f018 0f01 	tst.w	r8, #1
 800c34a:	d004      	beq.n	800c356 <_strtod_l+0x7e6>
 800c34c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c350:	f7f4 f8fe 	bl	8000550 <__aeabi_dmul>
 800c354:	2301      	movs	r3, #1
 800c356:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c35a:	3508      	adds	r5, #8
 800c35c:	e6e5      	b.n	800c12a <_strtod_l+0x5ba>
 800c35e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c362:	fa02 f303 	lsl.w	r3, r2, r3
 800c366:	ea03 0a0a 	and.w	sl, r3, sl
 800c36a:	e6ff      	b.n	800c16c <_strtod_l+0x5fc>
 800c36c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c370:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c374:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c378:	36e2      	adds	r6, #226	; 0xe2
 800c37a:	fa01 f306 	lsl.w	r3, r1, r6
 800c37e:	930a      	str	r3, [sp, #40]	; 0x28
 800c380:	910f      	str	r1, [sp, #60]	; 0x3c
 800c382:	e75d      	b.n	800c240 <_strtod_l+0x6d0>
 800c384:	2300      	movs	r3, #0
 800c386:	930a      	str	r3, [sp, #40]	; 0x28
 800c388:	2301      	movs	r3, #1
 800c38a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c38c:	e758      	b.n	800c240 <_strtod_l+0x6d0>
 800c38e:	4632      	mov	r2, r6
 800c390:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c392:	4648      	mov	r0, r9
 800c394:	f001 f802 	bl	800d39c <__lshift>
 800c398:	901c      	str	r0, [sp, #112]	; 0x70
 800c39a:	2800      	cmp	r0, #0
 800c39c:	f47f af7c 	bne.w	800c298 <_strtod_l+0x728>
 800c3a0:	e604      	b.n	800bfac <_strtod_l+0x43c>
 800c3a2:	bf00      	nop
 800c3a4:	0800eae8 	.word	0x0800eae8
 800c3a8:	fffffc02 	.word	0xfffffc02
 800c3ac:	465d      	mov	r5, fp
 800c3ae:	f040 8086 	bne.w	800c4be <_strtod_l+0x94e>
 800c3b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3b8:	b32a      	cbz	r2, 800c406 <_strtod_l+0x896>
 800c3ba:	4aaf      	ldr	r2, [pc, #700]	; (800c678 <_strtod_l+0xb08>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d153      	bne.n	800c468 <_strtod_l+0x8f8>
 800c3c0:	9b04      	ldr	r3, [sp, #16]
 800c3c2:	4650      	mov	r0, sl
 800c3c4:	b1d3      	cbz	r3, 800c3fc <_strtod_l+0x88c>
 800c3c6:	4aad      	ldr	r2, [pc, #692]	; (800c67c <_strtod_l+0xb0c>)
 800c3c8:	402a      	ands	r2, r5
 800c3ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c3ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c3d2:	d816      	bhi.n	800c402 <_strtod_l+0x892>
 800c3d4:	0d12      	lsrs	r2, r2, #20
 800c3d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c3da:	fa01 f303 	lsl.w	r3, r1, r3
 800c3de:	4298      	cmp	r0, r3
 800c3e0:	d142      	bne.n	800c468 <_strtod_l+0x8f8>
 800c3e2:	4ba7      	ldr	r3, [pc, #668]	; (800c680 <_strtod_l+0xb10>)
 800c3e4:	429d      	cmp	r5, r3
 800c3e6:	d102      	bne.n	800c3ee <_strtod_l+0x87e>
 800c3e8:	3001      	adds	r0, #1
 800c3ea:	f43f addf 	beq.w	800bfac <_strtod_l+0x43c>
 800c3ee:	4ba3      	ldr	r3, [pc, #652]	; (800c67c <_strtod_l+0xb0c>)
 800c3f0:	402b      	ands	r3, r5
 800c3f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c3f6:	f04f 0a00 	mov.w	sl, #0
 800c3fa:	e7a0      	b.n	800c33e <_strtod_l+0x7ce>
 800c3fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c400:	e7ed      	b.n	800c3de <_strtod_l+0x86e>
 800c402:	460b      	mov	r3, r1
 800c404:	e7eb      	b.n	800c3de <_strtod_l+0x86e>
 800c406:	bb7b      	cbnz	r3, 800c468 <_strtod_l+0x8f8>
 800c408:	f1ba 0f00 	cmp.w	sl, #0
 800c40c:	d12c      	bne.n	800c468 <_strtod_l+0x8f8>
 800c40e:	9904      	ldr	r1, [sp, #16]
 800c410:	4a9a      	ldr	r2, [pc, #616]	; (800c67c <_strtod_l+0xb0c>)
 800c412:	465b      	mov	r3, fp
 800c414:	b1f1      	cbz	r1, 800c454 <_strtod_l+0x8e4>
 800c416:	ea02 010b 	and.w	r1, r2, fp
 800c41a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c41e:	dc19      	bgt.n	800c454 <_strtod_l+0x8e4>
 800c420:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c424:	f77f ae5b 	ble.w	800c0de <_strtod_l+0x56e>
 800c428:	4a96      	ldr	r2, [pc, #600]	; (800c684 <_strtod_l+0xb14>)
 800c42a:	2300      	movs	r3, #0
 800c42c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c430:	4650      	mov	r0, sl
 800c432:	4659      	mov	r1, fp
 800c434:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c438:	f7f4 f88a 	bl	8000550 <__aeabi_dmul>
 800c43c:	4682      	mov	sl, r0
 800c43e:	468b      	mov	fp, r1
 800c440:	2900      	cmp	r1, #0
 800c442:	f47f adbe 	bne.w	800bfc2 <_strtod_l+0x452>
 800c446:	2800      	cmp	r0, #0
 800c448:	f47f adbb 	bne.w	800bfc2 <_strtod_l+0x452>
 800c44c:	2322      	movs	r3, #34	; 0x22
 800c44e:	f8c9 3000 	str.w	r3, [r9]
 800c452:	e5b6      	b.n	800bfc2 <_strtod_l+0x452>
 800c454:	4013      	ands	r3, r2
 800c456:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c45a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c45e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c462:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c466:	e76a      	b.n	800c33e <_strtod_l+0x7ce>
 800c468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c46a:	b193      	cbz	r3, 800c492 <_strtod_l+0x922>
 800c46c:	422b      	tst	r3, r5
 800c46e:	f43f af66 	beq.w	800c33e <_strtod_l+0x7ce>
 800c472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c474:	9a04      	ldr	r2, [sp, #16]
 800c476:	4650      	mov	r0, sl
 800c478:	4659      	mov	r1, fp
 800c47a:	b173      	cbz	r3, 800c49a <_strtod_l+0x92a>
 800c47c:	f7ff fb59 	bl	800bb32 <sulp>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c488:	f7f3 feac 	bl	80001e4 <__adddf3>
 800c48c:	4682      	mov	sl, r0
 800c48e:	468b      	mov	fp, r1
 800c490:	e755      	b.n	800c33e <_strtod_l+0x7ce>
 800c492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c494:	ea13 0f0a 	tst.w	r3, sl
 800c498:	e7e9      	b.n	800c46e <_strtod_l+0x8fe>
 800c49a:	f7ff fb4a 	bl	800bb32 <sulp>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c4a6:	f7f3 fe9b 	bl	80001e0 <__aeabi_dsub>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	4682      	mov	sl, r0
 800c4b0:	468b      	mov	fp, r1
 800c4b2:	f7f4 fab5 	bl	8000a20 <__aeabi_dcmpeq>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	f47f ae11 	bne.w	800c0de <_strtod_l+0x56e>
 800c4bc:	e73f      	b.n	800c33e <_strtod_l+0x7ce>
 800c4be:	4641      	mov	r1, r8
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f001 f8fc 	bl	800d6be <__ratio>
 800c4c6:	ec57 6b10 	vmov	r6, r7, d0
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4d0:	ee10 0a10 	vmov	r0, s0
 800c4d4:	4639      	mov	r1, r7
 800c4d6:	f7f4 fab7 	bl	8000a48 <__aeabi_dcmple>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d077      	beq.n	800c5ce <_strtod_l+0xa5e>
 800c4de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d04a      	beq.n	800c57a <_strtod_l+0xa0a>
 800c4e4:	4b68      	ldr	r3, [pc, #416]	; (800c688 <_strtod_l+0xb18>)
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c4ec:	4f66      	ldr	r7, [pc, #408]	; (800c688 <_strtod_l+0xb18>)
 800c4ee:	2600      	movs	r6, #0
 800c4f0:	4b62      	ldr	r3, [pc, #392]	; (800c67c <_strtod_l+0xb0c>)
 800c4f2:	402b      	ands	r3, r5
 800c4f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4f8:	4b64      	ldr	r3, [pc, #400]	; (800c68c <_strtod_l+0xb1c>)
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	f040 80ce 	bne.w	800c69c <_strtod_l+0xb2c>
 800c500:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c504:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c508:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c50c:	ec4b ab10 	vmov	d0, sl, fp
 800c510:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c514:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c518:	f001 f80c 	bl	800d534 <__ulp>
 800c51c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c520:	ec53 2b10 	vmov	r2, r3, d0
 800c524:	f7f4 f814 	bl	8000550 <__aeabi_dmul>
 800c528:	4652      	mov	r2, sl
 800c52a:	465b      	mov	r3, fp
 800c52c:	f7f3 fe5a 	bl	80001e4 <__adddf3>
 800c530:	460b      	mov	r3, r1
 800c532:	4952      	ldr	r1, [pc, #328]	; (800c67c <_strtod_l+0xb0c>)
 800c534:	4a56      	ldr	r2, [pc, #344]	; (800c690 <_strtod_l+0xb20>)
 800c536:	4019      	ands	r1, r3
 800c538:	4291      	cmp	r1, r2
 800c53a:	4682      	mov	sl, r0
 800c53c:	d95b      	bls.n	800c5f6 <_strtod_l+0xa86>
 800c53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c540:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c544:	4293      	cmp	r3, r2
 800c546:	d103      	bne.n	800c550 <_strtod_l+0x9e0>
 800c548:	9b08      	ldr	r3, [sp, #32]
 800c54a:	3301      	adds	r3, #1
 800c54c:	f43f ad2e 	beq.w	800bfac <_strtod_l+0x43c>
 800c550:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c680 <_strtod_l+0xb10>
 800c554:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c558:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c55a:	4648      	mov	r0, r9
 800c55c:	f000 fd53 	bl	800d006 <_Bfree>
 800c560:	9905      	ldr	r1, [sp, #20]
 800c562:	4648      	mov	r0, r9
 800c564:	f000 fd4f 	bl	800d006 <_Bfree>
 800c568:	4641      	mov	r1, r8
 800c56a:	4648      	mov	r0, r9
 800c56c:	f000 fd4b 	bl	800d006 <_Bfree>
 800c570:	4621      	mov	r1, r4
 800c572:	4648      	mov	r0, r9
 800c574:	f000 fd47 	bl	800d006 <_Bfree>
 800c578:	e619      	b.n	800c1ae <_strtod_l+0x63e>
 800c57a:	f1ba 0f00 	cmp.w	sl, #0
 800c57e:	d11a      	bne.n	800c5b6 <_strtod_l+0xa46>
 800c580:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c584:	b9eb      	cbnz	r3, 800c5c2 <_strtod_l+0xa52>
 800c586:	2200      	movs	r2, #0
 800c588:	4b3f      	ldr	r3, [pc, #252]	; (800c688 <_strtod_l+0xb18>)
 800c58a:	4630      	mov	r0, r6
 800c58c:	4639      	mov	r1, r7
 800c58e:	f7f4 fa51 	bl	8000a34 <__aeabi_dcmplt>
 800c592:	b9c8      	cbnz	r0, 800c5c8 <_strtod_l+0xa58>
 800c594:	4630      	mov	r0, r6
 800c596:	4639      	mov	r1, r7
 800c598:	2200      	movs	r2, #0
 800c59a:	4b3e      	ldr	r3, [pc, #248]	; (800c694 <_strtod_l+0xb24>)
 800c59c:	f7f3 ffd8 	bl	8000550 <__aeabi_dmul>
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	460f      	mov	r7, r1
 800c5a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c5a8:	9618      	str	r6, [sp, #96]	; 0x60
 800c5aa:	9319      	str	r3, [sp, #100]	; 0x64
 800c5ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c5b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c5b4:	e79c      	b.n	800c4f0 <_strtod_l+0x980>
 800c5b6:	f1ba 0f01 	cmp.w	sl, #1
 800c5ba:	d102      	bne.n	800c5c2 <_strtod_l+0xa52>
 800c5bc:	2d00      	cmp	r5, #0
 800c5be:	f43f ad8e 	beq.w	800c0de <_strtod_l+0x56e>
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	4b34      	ldr	r3, [pc, #208]	; (800c698 <_strtod_l+0xb28>)
 800c5c6:	e78f      	b.n	800c4e8 <_strtod_l+0x978>
 800c5c8:	2600      	movs	r6, #0
 800c5ca:	4f32      	ldr	r7, [pc, #200]	; (800c694 <_strtod_l+0xb24>)
 800c5cc:	e7ea      	b.n	800c5a4 <_strtod_l+0xa34>
 800c5ce:	4b31      	ldr	r3, [pc, #196]	; (800c694 <_strtod_l+0xb24>)
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	4639      	mov	r1, r7
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f7f3 ffbb 	bl	8000550 <__aeabi_dmul>
 800c5da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5dc:	4606      	mov	r6, r0
 800c5de:	460f      	mov	r7, r1
 800c5e0:	b933      	cbnz	r3, 800c5f0 <_strtod_l+0xa80>
 800c5e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5e6:	9010      	str	r0, [sp, #64]	; 0x40
 800c5e8:	9311      	str	r3, [sp, #68]	; 0x44
 800c5ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c5ee:	e7df      	b.n	800c5b0 <_strtod_l+0xa40>
 800c5f0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c5f4:	e7f9      	b.n	800c5ea <_strtod_l+0xa7a>
 800c5f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c5fa:	9b04      	ldr	r3, [sp, #16]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1ab      	bne.n	800c558 <_strtod_l+0x9e8>
 800c600:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c604:	0d1b      	lsrs	r3, r3, #20
 800c606:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c608:	051b      	lsls	r3, r3, #20
 800c60a:	429a      	cmp	r2, r3
 800c60c:	465d      	mov	r5, fp
 800c60e:	d1a3      	bne.n	800c558 <_strtod_l+0x9e8>
 800c610:	4639      	mov	r1, r7
 800c612:	4630      	mov	r0, r6
 800c614:	f7f4 fa4c 	bl	8000ab0 <__aeabi_d2iz>
 800c618:	f7f3 ff30 	bl	800047c <__aeabi_i2d>
 800c61c:	460b      	mov	r3, r1
 800c61e:	4602      	mov	r2, r0
 800c620:	4639      	mov	r1, r7
 800c622:	4630      	mov	r0, r6
 800c624:	f7f3 fddc 	bl	80001e0 <__aeabi_dsub>
 800c628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c62a:	4606      	mov	r6, r0
 800c62c:	460f      	mov	r7, r1
 800c62e:	b933      	cbnz	r3, 800c63e <_strtod_l+0xace>
 800c630:	f1ba 0f00 	cmp.w	sl, #0
 800c634:	d103      	bne.n	800c63e <_strtod_l+0xace>
 800c636:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c63a:	2d00      	cmp	r5, #0
 800c63c:	d06d      	beq.n	800c71a <_strtod_l+0xbaa>
 800c63e:	a30a      	add	r3, pc, #40	; (adr r3, 800c668 <_strtod_l+0xaf8>)
 800c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c644:	4630      	mov	r0, r6
 800c646:	4639      	mov	r1, r7
 800c648:	f7f4 f9f4 	bl	8000a34 <__aeabi_dcmplt>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	f47f acb8 	bne.w	800bfc2 <_strtod_l+0x452>
 800c652:	a307      	add	r3, pc, #28	; (adr r3, 800c670 <_strtod_l+0xb00>)
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	4630      	mov	r0, r6
 800c65a:	4639      	mov	r1, r7
 800c65c:	f7f4 fa08 	bl	8000a70 <__aeabi_dcmpgt>
 800c660:	2800      	cmp	r0, #0
 800c662:	f43f af79 	beq.w	800c558 <_strtod_l+0x9e8>
 800c666:	e4ac      	b.n	800bfc2 <_strtod_l+0x452>
 800c668:	94a03595 	.word	0x94a03595
 800c66c:	3fdfffff 	.word	0x3fdfffff
 800c670:	35afe535 	.word	0x35afe535
 800c674:	3fe00000 	.word	0x3fe00000
 800c678:	000fffff 	.word	0x000fffff
 800c67c:	7ff00000 	.word	0x7ff00000
 800c680:	7fefffff 	.word	0x7fefffff
 800c684:	39500000 	.word	0x39500000
 800c688:	3ff00000 	.word	0x3ff00000
 800c68c:	7fe00000 	.word	0x7fe00000
 800c690:	7c9fffff 	.word	0x7c9fffff
 800c694:	3fe00000 	.word	0x3fe00000
 800c698:	bff00000 	.word	0xbff00000
 800c69c:	9b04      	ldr	r3, [sp, #16]
 800c69e:	b333      	cbz	r3, 800c6ee <_strtod_l+0xb7e>
 800c6a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c6a6:	d822      	bhi.n	800c6ee <_strtod_l+0xb7e>
 800c6a8:	a327      	add	r3, pc, #156	; (adr r3, 800c748 <_strtod_l+0xbd8>)
 800c6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	f7f4 f9c9 	bl	8000a48 <__aeabi_dcmple>
 800c6b6:	b1a0      	cbz	r0, 800c6e2 <_strtod_l+0xb72>
 800c6b8:	4639      	mov	r1, r7
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f7f4 fa20 	bl	8000b00 <__aeabi_d2uiz>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	bf08      	it	eq
 800c6c4:	2001      	moveq	r0, #1
 800c6c6:	f7f3 fec9 	bl	800045c <__aeabi_ui2d>
 800c6ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6cc:	4606      	mov	r6, r0
 800c6ce:	460f      	mov	r7, r1
 800c6d0:	bb03      	cbnz	r3, 800c714 <_strtod_l+0xba4>
 800c6d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6d6:	9012      	str	r0, [sp, #72]	; 0x48
 800c6d8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c6da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c6de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c6e6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c6ea:	1a9b      	subs	r3, r3, r2
 800c6ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6ee:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c6f2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c6f6:	f000 ff1d 	bl	800d534 <__ulp>
 800c6fa:	4650      	mov	r0, sl
 800c6fc:	ec53 2b10 	vmov	r2, r3, d0
 800c700:	4659      	mov	r1, fp
 800c702:	f7f3 ff25 	bl	8000550 <__aeabi_dmul>
 800c706:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c70a:	f7f3 fd6b 	bl	80001e4 <__adddf3>
 800c70e:	4682      	mov	sl, r0
 800c710:	468b      	mov	fp, r1
 800c712:	e772      	b.n	800c5fa <_strtod_l+0xa8a>
 800c714:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c718:	e7df      	b.n	800c6da <_strtod_l+0xb6a>
 800c71a:	a30d      	add	r3, pc, #52	; (adr r3, 800c750 <_strtod_l+0xbe0>)
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	f7f4 f988 	bl	8000a34 <__aeabi_dcmplt>
 800c724:	e79c      	b.n	800c660 <_strtod_l+0xaf0>
 800c726:	2300      	movs	r3, #0
 800c728:	930d      	str	r3, [sp, #52]	; 0x34
 800c72a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c72c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c72e:	6013      	str	r3, [r2, #0]
 800c730:	f7ff ba61 	b.w	800bbf6 <_strtod_l+0x86>
 800c734:	2b65      	cmp	r3, #101	; 0x65
 800c736:	f04f 0200 	mov.w	r2, #0
 800c73a:	f43f ab4e 	beq.w	800bdda <_strtod_l+0x26a>
 800c73e:	2101      	movs	r1, #1
 800c740:	4614      	mov	r4, r2
 800c742:	9104      	str	r1, [sp, #16]
 800c744:	f7ff bacb 	b.w	800bcde <_strtod_l+0x16e>
 800c748:	ffc00000 	.word	0xffc00000
 800c74c:	41dfffff 	.word	0x41dfffff
 800c750:	94a03595 	.word	0x94a03595
 800c754:	3fcfffff 	.word	0x3fcfffff

0800c758 <strtof>:
 800c758:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c75c:	4e24      	ldr	r6, [pc, #144]	; (800c7f0 <strtof+0x98>)
 800c75e:	4a25      	ldr	r2, [pc, #148]	; (800c7f4 <strtof+0x9c>)
 800c760:	6834      	ldr	r4, [r6, #0]
 800c762:	6a23      	ldr	r3, [r4, #32]
 800c764:	ed2d 8b02 	vpush	{d8}
 800c768:	2b00      	cmp	r3, #0
 800c76a:	bf08      	it	eq
 800c76c:	4613      	moveq	r3, r2
 800c76e:	460a      	mov	r2, r1
 800c770:	4601      	mov	r1, r0
 800c772:	4620      	mov	r0, r4
 800c774:	f7ff f9fc 	bl	800bb70 <_strtod_l>
 800c778:	ec55 4b10 	vmov	r4, r5, d0
 800c77c:	ee10 2a10 	vmov	r2, s0
 800c780:	462b      	mov	r3, r5
 800c782:	ee10 0a10 	vmov	r0, s0
 800c786:	4629      	mov	r1, r5
 800c788:	f7f4 f97c 	bl	8000a84 <__aeabi_dcmpun>
 800c78c:	b130      	cbz	r0, 800c79c <strtof+0x44>
 800c78e:	ecbd 8b02 	vpop	{d8}
 800c792:	2000      	movs	r0, #0
 800c794:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800c798:	f001 b878 	b.w	800d88c <nanf>
 800c79c:	4620      	mov	r0, r4
 800c79e:	4629      	mov	r1, r5
 800c7a0:	f7f4 f9ce 	bl	8000b40 <__aeabi_d2f>
 800c7a4:	ee08 0a10 	vmov	s16, r0
 800c7a8:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c7f8 <strtof+0xa0>
 800c7ac:	eeb0 7ac8 	vabs.f32	s14, s16
 800c7b0:	eeb4 7a67 	vcmp.f32	s14, s15
 800c7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b8:	dd14      	ble.n	800c7e4 <strtof+0x8c>
 800c7ba:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 800c7be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7c2:	4b0e      	ldr	r3, [pc, #56]	; (800c7fc <strtof+0xa4>)
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	4649      	mov	r1, r9
 800c7c8:	f7f4 f95c 	bl	8000a84 <__aeabi_dcmpun>
 800c7cc:	b938      	cbnz	r0, 800c7de <strtof+0x86>
 800c7ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7d2:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <strtof+0xa4>)
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	f7f4 f936 	bl	8000a48 <__aeabi_dcmple>
 800c7dc:	b110      	cbz	r0, 800c7e4 <strtof+0x8c>
 800c7de:	6833      	ldr	r3, [r6, #0]
 800c7e0:	2222      	movs	r2, #34	; 0x22
 800c7e2:	601a      	str	r2, [r3, #0]
 800c7e4:	eeb0 0a48 	vmov.f32	s0, s16
 800c7e8:	ecbd 8b02 	vpop	{d8}
 800c7ec:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c7f0:	200002d4 	.word	0x200002d4
 800c7f4:	20000338 	.word	0x20000338
 800c7f8:	7f7fffff 	.word	0x7f7fffff
 800c7fc:	7fefffff 	.word	0x7fefffff

0800c800 <_strtol_l.isra.0>:
 800c800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c804:	4680      	mov	r8, r0
 800c806:	4689      	mov	r9, r1
 800c808:	4692      	mov	sl, r2
 800c80a:	461e      	mov	r6, r3
 800c80c:	460f      	mov	r7, r1
 800c80e:	463d      	mov	r5, r7
 800c810:	9808      	ldr	r0, [sp, #32]
 800c812:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c816:	f000 fbab 	bl	800cf70 <__locale_ctype_ptr_l>
 800c81a:	4420      	add	r0, r4
 800c81c:	7843      	ldrb	r3, [r0, #1]
 800c81e:	f013 0308 	ands.w	r3, r3, #8
 800c822:	d132      	bne.n	800c88a <_strtol_l.isra.0+0x8a>
 800c824:	2c2d      	cmp	r4, #45	; 0x2d
 800c826:	d132      	bne.n	800c88e <_strtol_l.isra.0+0x8e>
 800c828:	787c      	ldrb	r4, [r7, #1]
 800c82a:	1cbd      	adds	r5, r7, #2
 800c82c:	2201      	movs	r2, #1
 800c82e:	2e00      	cmp	r6, #0
 800c830:	d05d      	beq.n	800c8ee <_strtol_l.isra.0+0xee>
 800c832:	2e10      	cmp	r6, #16
 800c834:	d109      	bne.n	800c84a <_strtol_l.isra.0+0x4a>
 800c836:	2c30      	cmp	r4, #48	; 0x30
 800c838:	d107      	bne.n	800c84a <_strtol_l.isra.0+0x4a>
 800c83a:	782b      	ldrb	r3, [r5, #0]
 800c83c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c840:	2b58      	cmp	r3, #88	; 0x58
 800c842:	d14f      	bne.n	800c8e4 <_strtol_l.isra.0+0xe4>
 800c844:	786c      	ldrb	r4, [r5, #1]
 800c846:	2610      	movs	r6, #16
 800c848:	3502      	adds	r5, #2
 800c84a:	2a00      	cmp	r2, #0
 800c84c:	bf14      	ite	ne
 800c84e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c852:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c856:	2700      	movs	r7, #0
 800c858:	fbb1 fcf6 	udiv	ip, r1, r6
 800c85c:	4638      	mov	r0, r7
 800c85e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c862:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c866:	2b09      	cmp	r3, #9
 800c868:	d817      	bhi.n	800c89a <_strtol_l.isra.0+0x9a>
 800c86a:	461c      	mov	r4, r3
 800c86c:	42a6      	cmp	r6, r4
 800c86e:	dd23      	ble.n	800c8b8 <_strtol_l.isra.0+0xb8>
 800c870:	1c7b      	adds	r3, r7, #1
 800c872:	d007      	beq.n	800c884 <_strtol_l.isra.0+0x84>
 800c874:	4584      	cmp	ip, r0
 800c876:	d31c      	bcc.n	800c8b2 <_strtol_l.isra.0+0xb2>
 800c878:	d101      	bne.n	800c87e <_strtol_l.isra.0+0x7e>
 800c87a:	45a6      	cmp	lr, r4
 800c87c:	db19      	blt.n	800c8b2 <_strtol_l.isra.0+0xb2>
 800c87e:	fb00 4006 	mla	r0, r0, r6, r4
 800c882:	2701      	movs	r7, #1
 800c884:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c888:	e7eb      	b.n	800c862 <_strtol_l.isra.0+0x62>
 800c88a:	462f      	mov	r7, r5
 800c88c:	e7bf      	b.n	800c80e <_strtol_l.isra.0+0xe>
 800c88e:	2c2b      	cmp	r4, #43	; 0x2b
 800c890:	bf04      	itt	eq
 800c892:	1cbd      	addeq	r5, r7, #2
 800c894:	787c      	ldrbeq	r4, [r7, #1]
 800c896:	461a      	mov	r2, r3
 800c898:	e7c9      	b.n	800c82e <_strtol_l.isra.0+0x2e>
 800c89a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c89e:	2b19      	cmp	r3, #25
 800c8a0:	d801      	bhi.n	800c8a6 <_strtol_l.isra.0+0xa6>
 800c8a2:	3c37      	subs	r4, #55	; 0x37
 800c8a4:	e7e2      	b.n	800c86c <_strtol_l.isra.0+0x6c>
 800c8a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c8aa:	2b19      	cmp	r3, #25
 800c8ac:	d804      	bhi.n	800c8b8 <_strtol_l.isra.0+0xb8>
 800c8ae:	3c57      	subs	r4, #87	; 0x57
 800c8b0:	e7dc      	b.n	800c86c <_strtol_l.isra.0+0x6c>
 800c8b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c8b6:	e7e5      	b.n	800c884 <_strtol_l.isra.0+0x84>
 800c8b8:	1c7b      	adds	r3, r7, #1
 800c8ba:	d108      	bne.n	800c8ce <_strtol_l.isra.0+0xce>
 800c8bc:	2322      	movs	r3, #34	; 0x22
 800c8be:	f8c8 3000 	str.w	r3, [r8]
 800c8c2:	4608      	mov	r0, r1
 800c8c4:	f1ba 0f00 	cmp.w	sl, #0
 800c8c8:	d107      	bne.n	800c8da <_strtol_l.isra.0+0xda>
 800c8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ce:	b102      	cbz	r2, 800c8d2 <_strtol_l.isra.0+0xd2>
 800c8d0:	4240      	negs	r0, r0
 800c8d2:	f1ba 0f00 	cmp.w	sl, #0
 800c8d6:	d0f8      	beq.n	800c8ca <_strtol_l.isra.0+0xca>
 800c8d8:	b10f      	cbz	r7, 800c8de <_strtol_l.isra.0+0xde>
 800c8da:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c8de:	f8ca 9000 	str.w	r9, [sl]
 800c8e2:	e7f2      	b.n	800c8ca <_strtol_l.isra.0+0xca>
 800c8e4:	2430      	movs	r4, #48	; 0x30
 800c8e6:	2e00      	cmp	r6, #0
 800c8e8:	d1af      	bne.n	800c84a <_strtol_l.isra.0+0x4a>
 800c8ea:	2608      	movs	r6, #8
 800c8ec:	e7ad      	b.n	800c84a <_strtol_l.isra.0+0x4a>
 800c8ee:	2c30      	cmp	r4, #48	; 0x30
 800c8f0:	d0a3      	beq.n	800c83a <_strtol_l.isra.0+0x3a>
 800c8f2:	260a      	movs	r6, #10
 800c8f4:	e7a9      	b.n	800c84a <_strtol_l.isra.0+0x4a>
	...

0800c8f8 <strtol>:
 800c8f8:	4b08      	ldr	r3, [pc, #32]	; (800c91c <strtol+0x24>)
 800c8fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8fc:	681c      	ldr	r4, [r3, #0]
 800c8fe:	4d08      	ldr	r5, [pc, #32]	; (800c920 <strtol+0x28>)
 800c900:	6a23      	ldr	r3, [r4, #32]
 800c902:	2b00      	cmp	r3, #0
 800c904:	bf08      	it	eq
 800c906:	462b      	moveq	r3, r5
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	4613      	mov	r3, r2
 800c90c:	460a      	mov	r2, r1
 800c90e:	4601      	mov	r1, r0
 800c910:	4620      	mov	r0, r4
 800c912:	f7ff ff75 	bl	800c800 <_strtol_l.isra.0>
 800c916:	b003      	add	sp, #12
 800c918:	bd30      	pop	{r4, r5, pc}
 800c91a:	bf00      	nop
 800c91c:	200002d4 	.word	0x200002d4
 800c920:	20000338 	.word	0x20000338

0800c924 <rshift>:
 800c924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c926:	6906      	ldr	r6, [r0, #16]
 800c928:	114b      	asrs	r3, r1, #5
 800c92a:	429e      	cmp	r6, r3
 800c92c:	f100 0414 	add.w	r4, r0, #20
 800c930:	dd30      	ble.n	800c994 <rshift+0x70>
 800c932:	f011 011f 	ands.w	r1, r1, #31
 800c936:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c93a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c93e:	d108      	bne.n	800c952 <rshift+0x2e>
 800c940:	4621      	mov	r1, r4
 800c942:	42b2      	cmp	r2, r6
 800c944:	460b      	mov	r3, r1
 800c946:	d211      	bcs.n	800c96c <rshift+0x48>
 800c948:	f852 3b04 	ldr.w	r3, [r2], #4
 800c94c:	f841 3b04 	str.w	r3, [r1], #4
 800c950:	e7f7      	b.n	800c942 <rshift+0x1e>
 800c952:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c956:	f1c1 0c20 	rsb	ip, r1, #32
 800c95a:	40cd      	lsrs	r5, r1
 800c95c:	3204      	adds	r2, #4
 800c95e:	4623      	mov	r3, r4
 800c960:	42b2      	cmp	r2, r6
 800c962:	4617      	mov	r7, r2
 800c964:	d30c      	bcc.n	800c980 <rshift+0x5c>
 800c966:	601d      	str	r5, [r3, #0]
 800c968:	b105      	cbz	r5, 800c96c <rshift+0x48>
 800c96a:	3304      	adds	r3, #4
 800c96c:	1b1a      	subs	r2, r3, r4
 800c96e:	42a3      	cmp	r3, r4
 800c970:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c974:	bf08      	it	eq
 800c976:	2300      	moveq	r3, #0
 800c978:	6102      	str	r2, [r0, #16]
 800c97a:	bf08      	it	eq
 800c97c:	6143      	streq	r3, [r0, #20]
 800c97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c980:	683f      	ldr	r7, [r7, #0]
 800c982:	fa07 f70c 	lsl.w	r7, r7, ip
 800c986:	433d      	orrs	r5, r7
 800c988:	f843 5b04 	str.w	r5, [r3], #4
 800c98c:	f852 5b04 	ldr.w	r5, [r2], #4
 800c990:	40cd      	lsrs	r5, r1
 800c992:	e7e5      	b.n	800c960 <rshift+0x3c>
 800c994:	4623      	mov	r3, r4
 800c996:	e7e9      	b.n	800c96c <rshift+0x48>

0800c998 <__hexdig_fun>:
 800c998:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c99c:	2b09      	cmp	r3, #9
 800c99e:	d802      	bhi.n	800c9a6 <__hexdig_fun+0xe>
 800c9a0:	3820      	subs	r0, #32
 800c9a2:	b2c0      	uxtb	r0, r0
 800c9a4:	4770      	bx	lr
 800c9a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c9aa:	2b05      	cmp	r3, #5
 800c9ac:	d801      	bhi.n	800c9b2 <__hexdig_fun+0x1a>
 800c9ae:	3847      	subs	r0, #71	; 0x47
 800c9b0:	e7f7      	b.n	800c9a2 <__hexdig_fun+0xa>
 800c9b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c9b6:	2b05      	cmp	r3, #5
 800c9b8:	d801      	bhi.n	800c9be <__hexdig_fun+0x26>
 800c9ba:	3827      	subs	r0, #39	; 0x27
 800c9bc:	e7f1      	b.n	800c9a2 <__hexdig_fun+0xa>
 800c9be:	2000      	movs	r0, #0
 800c9c0:	4770      	bx	lr

0800c9c2 <__gethex>:
 800c9c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c6:	b08b      	sub	sp, #44	; 0x2c
 800c9c8:	468a      	mov	sl, r1
 800c9ca:	9002      	str	r0, [sp, #8]
 800c9cc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c9ce:	9306      	str	r3, [sp, #24]
 800c9d0:	4690      	mov	r8, r2
 800c9d2:	f000 fad0 	bl	800cf76 <__localeconv_l>
 800c9d6:	6803      	ldr	r3, [r0, #0]
 800c9d8:	9303      	str	r3, [sp, #12]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7f3 fbf4 	bl	80001c8 <strlen>
 800c9e0:	9b03      	ldr	r3, [sp, #12]
 800c9e2:	9001      	str	r0, [sp, #4]
 800c9e4:	4403      	add	r3, r0
 800c9e6:	f04f 0b00 	mov.w	fp, #0
 800c9ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c9ee:	9307      	str	r3, [sp, #28]
 800c9f0:	f8da 3000 	ldr.w	r3, [sl]
 800c9f4:	3302      	adds	r3, #2
 800c9f6:	461f      	mov	r7, r3
 800c9f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c9fc:	2830      	cmp	r0, #48	; 0x30
 800c9fe:	d06c      	beq.n	800cada <__gethex+0x118>
 800ca00:	f7ff ffca 	bl	800c998 <__hexdig_fun>
 800ca04:	4604      	mov	r4, r0
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d16a      	bne.n	800cae0 <__gethex+0x11e>
 800ca0a:	9a01      	ldr	r2, [sp, #4]
 800ca0c:	9903      	ldr	r1, [sp, #12]
 800ca0e:	4638      	mov	r0, r7
 800ca10:	f7ff f87d 	bl	800bb0e <strncmp>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d166      	bne.n	800cae6 <__gethex+0x124>
 800ca18:	9b01      	ldr	r3, [sp, #4]
 800ca1a:	5cf8      	ldrb	r0, [r7, r3]
 800ca1c:	18fe      	adds	r6, r7, r3
 800ca1e:	f7ff ffbb 	bl	800c998 <__hexdig_fun>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d062      	beq.n	800caec <__gethex+0x12a>
 800ca26:	4633      	mov	r3, r6
 800ca28:	7818      	ldrb	r0, [r3, #0]
 800ca2a:	2830      	cmp	r0, #48	; 0x30
 800ca2c:	461f      	mov	r7, r3
 800ca2e:	f103 0301 	add.w	r3, r3, #1
 800ca32:	d0f9      	beq.n	800ca28 <__gethex+0x66>
 800ca34:	f7ff ffb0 	bl	800c998 <__hexdig_fun>
 800ca38:	fab0 f580 	clz	r5, r0
 800ca3c:	096d      	lsrs	r5, r5, #5
 800ca3e:	4634      	mov	r4, r6
 800ca40:	f04f 0b01 	mov.w	fp, #1
 800ca44:	463a      	mov	r2, r7
 800ca46:	4616      	mov	r6, r2
 800ca48:	3201      	adds	r2, #1
 800ca4a:	7830      	ldrb	r0, [r6, #0]
 800ca4c:	f7ff ffa4 	bl	800c998 <__hexdig_fun>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d1f8      	bne.n	800ca46 <__gethex+0x84>
 800ca54:	9a01      	ldr	r2, [sp, #4]
 800ca56:	9903      	ldr	r1, [sp, #12]
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f7ff f858 	bl	800bb0e <strncmp>
 800ca5e:	b950      	cbnz	r0, 800ca76 <__gethex+0xb4>
 800ca60:	b954      	cbnz	r4, 800ca78 <__gethex+0xb6>
 800ca62:	9b01      	ldr	r3, [sp, #4]
 800ca64:	18f4      	adds	r4, r6, r3
 800ca66:	4622      	mov	r2, r4
 800ca68:	4616      	mov	r6, r2
 800ca6a:	3201      	adds	r2, #1
 800ca6c:	7830      	ldrb	r0, [r6, #0]
 800ca6e:	f7ff ff93 	bl	800c998 <__hexdig_fun>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d1f8      	bne.n	800ca68 <__gethex+0xa6>
 800ca76:	b10c      	cbz	r4, 800ca7c <__gethex+0xba>
 800ca78:	1ba4      	subs	r4, r4, r6
 800ca7a:	00a4      	lsls	r4, r4, #2
 800ca7c:	7833      	ldrb	r3, [r6, #0]
 800ca7e:	2b50      	cmp	r3, #80	; 0x50
 800ca80:	d001      	beq.n	800ca86 <__gethex+0xc4>
 800ca82:	2b70      	cmp	r3, #112	; 0x70
 800ca84:	d140      	bne.n	800cb08 <__gethex+0x146>
 800ca86:	7873      	ldrb	r3, [r6, #1]
 800ca88:	2b2b      	cmp	r3, #43	; 0x2b
 800ca8a:	d031      	beq.n	800caf0 <__gethex+0x12e>
 800ca8c:	2b2d      	cmp	r3, #45	; 0x2d
 800ca8e:	d033      	beq.n	800caf8 <__gethex+0x136>
 800ca90:	1c71      	adds	r1, r6, #1
 800ca92:	f04f 0900 	mov.w	r9, #0
 800ca96:	7808      	ldrb	r0, [r1, #0]
 800ca98:	f7ff ff7e 	bl	800c998 <__hexdig_fun>
 800ca9c:	1e43      	subs	r3, r0, #1
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	2b18      	cmp	r3, #24
 800caa2:	d831      	bhi.n	800cb08 <__gethex+0x146>
 800caa4:	f1a0 0210 	sub.w	r2, r0, #16
 800caa8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800caac:	f7ff ff74 	bl	800c998 <__hexdig_fun>
 800cab0:	1e43      	subs	r3, r0, #1
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	2b18      	cmp	r3, #24
 800cab6:	d922      	bls.n	800cafe <__gethex+0x13c>
 800cab8:	f1b9 0f00 	cmp.w	r9, #0
 800cabc:	d000      	beq.n	800cac0 <__gethex+0xfe>
 800cabe:	4252      	negs	r2, r2
 800cac0:	4414      	add	r4, r2
 800cac2:	f8ca 1000 	str.w	r1, [sl]
 800cac6:	b30d      	cbz	r5, 800cb0c <__gethex+0x14a>
 800cac8:	f1bb 0f00 	cmp.w	fp, #0
 800cacc:	bf0c      	ite	eq
 800cace:	2706      	moveq	r7, #6
 800cad0:	2700      	movne	r7, #0
 800cad2:	4638      	mov	r0, r7
 800cad4:	b00b      	add	sp, #44	; 0x2c
 800cad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cada:	f10b 0b01 	add.w	fp, fp, #1
 800cade:	e78a      	b.n	800c9f6 <__gethex+0x34>
 800cae0:	2500      	movs	r5, #0
 800cae2:	462c      	mov	r4, r5
 800cae4:	e7ae      	b.n	800ca44 <__gethex+0x82>
 800cae6:	463e      	mov	r6, r7
 800cae8:	2501      	movs	r5, #1
 800caea:	e7c7      	b.n	800ca7c <__gethex+0xba>
 800caec:	4604      	mov	r4, r0
 800caee:	e7fb      	b.n	800cae8 <__gethex+0x126>
 800caf0:	f04f 0900 	mov.w	r9, #0
 800caf4:	1cb1      	adds	r1, r6, #2
 800caf6:	e7ce      	b.n	800ca96 <__gethex+0xd4>
 800caf8:	f04f 0901 	mov.w	r9, #1
 800cafc:	e7fa      	b.n	800caf4 <__gethex+0x132>
 800cafe:	230a      	movs	r3, #10
 800cb00:	fb03 0202 	mla	r2, r3, r2, r0
 800cb04:	3a10      	subs	r2, #16
 800cb06:	e7cf      	b.n	800caa8 <__gethex+0xe6>
 800cb08:	4631      	mov	r1, r6
 800cb0a:	e7da      	b.n	800cac2 <__gethex+0x100>
 800cb0c:	1bf3      	subs	r3, r6, r7
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	4629      	mov	r1, r5
 800cb12:	2b07      	cmp	r3, #7
 800cb14:	dc49      	bgt.n	800cbaa <__gethex+0x1e8>
 800cb16:	9802      	ldr	r0, [sp, #8]
 800cb18:	f000 fa41 	bl	800cf9e <_Balloc>
 800cb1c:	9b01      	ldr	r3, [sp, #4]
 800cb1e:	f100 0914 	add.w	r9, r0, #20
 800cb22:	f04f 0b00 	mov.w	fp, #0
 800cb26:	f1c3 0301 	rsb	r3, r3, #1
 800cb2a:	4605      	mov	r5, r0
 800cb2c:	f8cd 9010 	str.w	r9, [sp, #16]
 800cb30:	46da      	mov	sl, fp
 800cb32:	9308      	str	r3, [sp, #32]
 800cb34:	42b7      	cmp	r7, r6
 800cb36:	d33b      	bcc.n	800cbb0 <__gethex+0x1ee>
 800cb38:	9804      	ldr	r0, [sp, #16]
 800cb3a:	f840 ab04 	str.w	sl, [r0], #4
 800cb3e:	eba0 0009 	sub.w	r0, r0, r9
 800cb42:	1080      	asrs	r0, r0, #2
 800cb44:	6128      	str	r0, [r5, #16]
 800cb46:	0147      	lsls	r7, r0, #5
 800cb48:	4650      	mov	r0, sl
 800cb4a:	f000 faec 	bl	800d126 <__hi0bits>
 800cb4e:	f8d8 6000 	ldr.w	r6, [r8]
 800cb52:	1a3f      	subs	r7, r7, r0
 800cb54:	42b7      	cmp	r7, r6
 800cb56:	dd64      	ble.n	800cc22 <__gethex+0x260>
 800cb58:	1bbf      	subs	r7, r7, r6
 800cb5a:	4639      	mov	r1, r7
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	f000 fdfb 	bl	800d758 <__any_on>
 800cb62:	4682      	mov	sl, r0
 800cb64:	b178      	cbz	r0, 800cb86 <__gethex+0x1c4>
 800cb66:	1e7b      	subs	r3, r7, #1
 800cb68:	1159      	asrs	r1, r3, #5
 800cb6a:	f003 021f 	and.w	r2, r3, #31
 800cb6e:	f04f 0a01 	mov.w	sl, #1
 800cb72:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cb76:	fa0a f202 	lsl.w	r2, sl, r2
 800cb7a:	420a      	tst	r2, r1
 800cb7c:	d003      	beq.n	800cb86 <__gethex+0x1c4>
 800cb7e:	4553      	cmp	r3, sl
 800cb80:	dc46      	bgt.n	800cc10 <__gethex+0x24e>
 800cb82:	f04f 0a02 	mov.w	sl, #2
 800cb86:	4639      	mov	r1, r7
 800cb88:	4628      	mov	r0, r5
 800cb8a:	f7ff fecb 	bl	800c924 <rshift>
 800cb8e:	443c      	add	r4, r7
 800cb90:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb94:	42a3      	cmp	r3, r4
 800cb96:	da52      	bge.n	800cc3e <__gethex+0x27c>
 800cb98:	4629      	mov	r1, r5
 800cb9a:	9802      	ldr	r0, [sp, #8]
 800cb9c:	f000 fa33 	bl	800d006 <_Bfree>
 800cba0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cba2:	2300      	movs	r3, #0
 800cba4:	6013      	str	r3, [r2, #0]
 800cba6:	27a3      	movs	r7, #163	; 0xa3
 800cba8:	e793      	b.n	800cad2 <__gethex+0x110>
 800cbaa:	3101      	adds	r1, #1
 800cbac:	105b      	asrs	r3, r3, #1
 800cbae:	e7b0      	b.n	800cb12 <__gethex+0x150>
 800cbb0:	1e73      	subs	r3, r6, #1
 800cbb2:	9305      	str	r3, [sp, #20]
 800cbb4:	9a07      	ldr	r2, [sp, #28]
 800cbb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d018      	beq.n	800cbf0 <__gethex+0x22e>
 800cbbe:	f1bb 0f20 	cmp.w	fp, #32
 800cbc2:	d107      	bne.n	800cbd4 <__gethex+0x212>
 800cbc4:	9b04      	ldr	r3, [sp, #16]
 800cbc6:	f8c3 a000 	str.w	sl, [r3]
 800cbca:	3304      	adds	r3, #4
 800cbcc:	f04f 0a00 	mov.w	sl, #0
 800cbd0:	9304      	str	r3, [sp, #16]
 800cbd2:	46d3      	mov	fp, sl
 800cbd4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cbd8:	f7ff fede 	bl	800c998 <__hexdig_fun>
 800cbdc:	f000 000f 	and.w	r0, r0, #15
 800cbe0:	fa00 f00b 	lsl.w	r0, r0, fp
 800cbe4:	ea4a 0a00 	orr.w	sl, sl, r0
 800cbe8:	f10b 0b04 	add.w	fp, fp, #4
 800cbec:	9b05      	ldr	r3, [sp, #20]
 800cbee:	e00d      	b.n	800cc0c <__gethex+0x24a>
 800cbf0:	9b05      	ldr	r3, [sp, #20]
 800cbf2:	9a08      	ldr	r2, [sp, #32]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	42bb      	cmp	r3, r7
 800cbf8:	d3e1      	bcc.n	800cbbe <__gethex+0x1fc>
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	9a01      	ldr	r2, [sp, #4]
 800cbfe:	9903      	ldr	r1, [sp, #12]
 800cc00:	9309      	str	r3, [sp, #36]	; 0x24
 800cc02:	f7fe ff84 	bl	800bb0e <strncmp>
 800cc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d1d8      	bne.n	800cbbe <__gethex+0x1fc>
 800cc0c:	461e      	mov	r6, r3
 800cc0e:	e791      	b.n	800cb34 <__gethex+0x172>
 800cc10:	1eb9      	subs	r1, r7, #2
 800cc12:	4628      	mov	r0, r5
 800cc14:	f000 fda0 	bl	800d758 <__any_on>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d0b2      	beq.n	800cb82 <__gethex+0x1c0>
 800cc1c:	f04f 0a03 	mov.w	sl, #3
 800cc20:	e7b1      	b.n	800cb86 <__gethex+0x1c4>
 800cc22:	da09      	bge.n	800cc38 <__gethex+0x276>
 800cc24:	1bf7      	subs	r7, r6, r7
 800cc26:	4629      	mov	r1, r5
 800cc28:	463a      	mov	r2, r7
 800cc2a:	9802      	ldr	r0, [sp, #8]
 800cc2c:	f000 fbb6 	bl	800d39c <__lshift>
 800cc30:	1be4      	subs	r4, r4, r7
 800cc32:	4605      	mov	r5, r0
 800cc34:	f100 0914 	add.w	r9, r0, #20
 800cc38:	f04f 0a00 	mov.w	sl, #0
 800cc3c:	e7a8      	b.n	800cb90 <__gethex+0x1ce>
 800cc3e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cc42:	42a0      	cmp	r0, r4
 800cc44:	dd6a      	ble.n	800cd1c <__gethex+0x35a>
 800cc46:	1b04      	subs	r4, r0, r4
 800cc48:	42a6      	cmp	r6, r4
 800cc4a:	dc2e      	bgt.n	800ccaa <__gethex+0x2e8>
 800cc4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc50:	2b02      	cmp	r3, #2
 800cc52:	d022      	beq.n	800cc9a <__gethex+0x2d8>
 800cc54:	2b03      	cmp	r3, #3
 800cc56:	d024      	beq.n	800cca2 <__gethex+0x2e0>
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d115      	bne.n	800cc88 <__gethex+0x2c6>
 800cc5c:	42a6      	cmp	r6, r4
 800cc5e:	d113      	bne.n	800cc88 <__gethex+0x2c6>
 800cc60:	2e01      	cmp	r6, #1
 800cc62:	dc0b      	bgt.n	800cc7c <__gethex+0x2ba>
 800cc64:	9a06      	ldr	r2, [sp, #24]
 800cc66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc6a:	6013      	str	r3, [r2, #0]
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	612b      	str	r3, [r5, #16]
 800cc70:	f8c9 3000 	str.w	r3, [r9]
 800cc74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc76:	2762      	movs	r7, #98	; 0x62
 800cc78:	601d      	str	r5, [r3, #0]
 800cc7a:	e72a      	b.n	800cad2 <__gethex+0x110>
 800cc7c:	1e71      	subs	r1, r6, #1
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f000 fd6a 	bl	800d758 <__any_on>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d1ed      	bne.n	800cc64 <__gethex+0x2a2>
 800cc88:	4629      	mov	r1, r5
 800cc8a:	9802      	ldr	r0, [sp, #8]
 800cc8c:	f000 f9bb 	bl	800d006 <_Bfree>
 800cc90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc92:	2300      	movs	r3, #0
 800cc94:	6013      	str	r3, [r2, #0]
 800cc96:	2750      	movs	r7, #80	; 0x50
 800cc98:	e71b      	b.n	800cad2 <__gethex+0x110>
 800cc9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d0e1      	beq.n	800cc64 <__gethex+0x2a2>
 800cca0:	e7f2      	b.n	800cc88 <__gethex+0x2c6>
 800cca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d1dd      	bne.n	800cc64 <__gethex+0x2a2>
 800cca8:	e7ee      	b.n	800cc88 <__gethex+0x2c6>
 800ccaa:	1e67      	subs	r7, r4, #1
 800ccac:	f1ba 0f00 	cmp.w	sl, #0
 800ccb0:	d131      	bne.n	800cd16 <__gethex+0x354>
 800ccb2:	b127      	cbz	r7, 800ccbe <__gethex+0x2fc>
 800ccb4:	4639      	mov	r1, r7
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	f000 fd4e 	bl	800d758 <__any_on>
 800ccbc:	4682      	mov	sl, r0
 800ccbe:	117a      	asrs	r2, r7, #5
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	f007 071f 	and.w	r7, r7, #31
 800ccc6:	fa03 f707 	lsl.w	r7, r3, r7
 800ccca:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ccce:	4621      	mov	r1, r4
 800ccd0:	421f      	tst	r7, r3
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	bf18      	it	ne
 800ccd6:	f04a 0a02 	orrne.w	sl, sl, #2
 800ccda:	1b36      	subs	r6, r6, r4
 800ccdc:	f7ff fe22 	bl	800c924 <rshift>
 800cce0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800cce4:	2702      	movs	r7, #2
 800cce6:	f1ba 0f00 	cmp.w	sl, #0
 800ccea:	d048      	beq.n	800cd7e <__gethex+0x3bc>
 800ccec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d015      	beq.n	800cd20 <__gethex+0x35e>
 800ccf4:	2b03      	cmp	r3, #3
 800ccf6:	d017      	beq.n	800cd28 <__gethex+0x366>
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d109      	bne.n	800cd10 <__gethex+0x34e>
 800ccfc:	f01a 0f02 	tst.w	sl, #2
 800cd00:	d006      	beq.n	800cd10 <__gethex+0x34e>
 800cd02:	f8d9 3000 	ldr.w	r3, [r9]
 800cd06:	ea4a 0a03 	orr.w	sl, sl, r3
 800cd0a:	f01a 0f01 	tst.w	sl, #1
 800cd0e:	d10e      	bne.n	800cd2e <__gethex+0x36c>
 800cd10:	f047 0710 	orr.w	r7, r7, #16
 800cd14:	e033      	b.n	800cd7e <__gethex+0x3bc>
 800cd16:	f04f 0a01 	mov.w	sl, #1
 800cd1a:	e7d0      	b.n	800ccbe <__gethex+0x2fc>
 800cd1c:	2701      	movs	r7, #1
 800cd1e:	e7e2      	b.n	800cce6 <__gethex+0x324>
 800cd20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd22:	f1c3 0301 	rsb	r3, r3, #1
 800cd26:	9315      	str	r3, [sp, #84]	; 0x54
 800cd28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d0f0      	beq.n	800cd10 <__gethex+0x34e>
 800cd2e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800cd32:	f105 0314 	add.w	r3, r5, #20
 800cd36:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800cd3a:	eb03 010a 	add.w	r1, r3, sl
 800cd3e:	f04f 0c00 	mov.w	ip, #0
 800cd42:	4618      	mov	r0, r3
 800cd44:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd48:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800cd4c:	d01c      	beq.n	800cd88 <__gethex+0x3c6>
 800cd4e:	3201      	adds	r2, #1
 800cd50:	6002      	str	r2, [r0, #0]
 800cd52:	2f02      	cmp	r7, #2
 800cd54:	f105 0314 	add.w	r3, r5, #20
 800cd58:	d138      	bne.n	800cdcc <__gethex+0x40a>
 800cd5a:	f8d8 2000 	ldr.w	r2, [r8]
 800cd5e:	3a01      	subs	r2, #1
 800cd60:	42b2      	cmp	r2, r6
 800cd62:	d10a      	bne.n	800cd7a <__gethex+0x3b8>
 800cd64:	1171      	asrs	r1, r6, #5
 800cd66:	2201      	movs	r2, #1
 800cd68:	f006 061f 	and.w	r6, r6, #31
 800cd6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd70:	fa02 f606 	lsl.w	r6, r2, r6
 800cd74:	421e      	tst	r6, r3
 800cd76:	bf18      	it	ne
 800cd78:	4617      	movne	r7, r2
 800cd7a:	f047 0720 	orr.w	r7, r7, #32
 800cd7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd80:	601d      	str	r5, [r3, #0]
 800cd82:	9b06      	ldr	r3, [sp, #24]
 800cd84:	601c      	str	r4, [r3, #0]
 800cd86:	e6a4      	b.n	800cad2 <__gethex+0x110>
 800cd88:	4299      	cmp	r1, r3
 800cd8a:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd8e:	d8d8      	bhi.n	800cd42 <__gethex+0x380>
 800cd90:	68ab      	ldr	r3, [r5, #8]
 800cd92:	4599      	cmp	r9, r3
 800cd94:	db12      	blt.n	800cdbc <__gethex+0x3fa>
 800cd96:	6869      	ldr	r1, [r5, #4]
 800cd98:	9802      	ldr	r0, [sp, #8]
 800cd9a:	3101      	adds	r1, #1
 800cd9c:	f000 f8ff 	bl	800cf9e <_Balloc>
 800cda0:	692a      	ldr	r2, [r5, #16]
 800cda2:	3202      	adds	r2, #2
 800cda4:	f105 010c 	add.w	r1, r5, #12
 800cda8:	4683      	mov	fp, r0
 800cdaa:	0092      	lsls	r2, r2, #2
 800cdac:	300c      	adds	r0, #12
 800cdae:	f7fe fe93 	bl	800bad8 <memcpy>
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	9802      	ldr	r0, [sp, #8]
 800cdb6:	f000 f926 	bl	800d006 <_Bfree>
 800cdba:	465d      	mov	r5, fp
 800cdbc:	692b      	ldr	r3, [r5, #16]
 800cdbe:	1c5a      	adds	r2, r3, #1
 800cdc0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cdc4:	612a      	str	r2, [r5, #16]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	615a      	str	r2, [r3, #20]
 800cdca:	e7c2      	b.n	800cd52 <__gethex+0x390>
 800cdcc:	692a      	ldr	r2, [r5, #16]
 800cdce:	454a      	cmp	r2, r9
 800cdd0:	dd0b      	ble.n	800cdea <__gethex+0x428>
 800cdd2:	2101      	movs	r1, #1
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	f7ff fda5 	bl	800c924 <rshift>
 800cdda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdde:	3401      	adds	r4, #1
 800cde0:	42a3      	cmp	r3, r4
 800cde2:	f6ff aed9 	blt.w	800cb98 <__gethex+0x1d6>
 800cde6:	2701      	movs	r7, #1
 800cde8:	e7c7      	b.n	800cd7a <__gethex+0x3b8>
 800cdea:	f016 061f 	ands.w	r6, r6, #31
 800cdee:	d0fa      	beq.n	800cde6 <__gethex+0x424>
 800cdf0:	449a      	add	sl, r3
 800cdf2:	f1c6 0620 	rsb	r6, r6, #32
 800cdf6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cdfa:	f000 f994 	bl	800d126 <__hi0bits>
 800cdfe:	42b0      	cmp	r0, r6
 800ce00:	dbe7      	blt.n	800cdd2 <__gethex+0x410>
 800ce02:	e7f0      	b.n	800cde6 <__gethex+0x424>

0800ce04 <L_shift>:
 800ce04:	f1c2 0208 	rsb	r2, r2, #8
 800ce08:	0092      	lsls	r2, r2, #2
 800ce0a:	b570      	push	{r4, r5, r6, lr}
 800ce0c:	f1c2 0620 	rsb	r6, r2, #32
 800ce10:	6843      	ldr	r3, [r0, #4]
 800ce12:	6804      	ldr	r4, [r0, #0]
 800ce14:	fa03 f506 	lsl.w	r5, r3, r6
 800ce18:	432c      	orrs	r4, r5
 800ce1a:	40d3      	lsrs	r3, r2
 800ce1c:	6004      	str	r4, [r0, #0]
 800ce1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce22:	4288      	cmp	r0, r1
 800ce24:	d3f4      	bcc.n	800ce10 <L_shift+0xc>
 800ce26:	bd70      	pop	{r4, r5, r6, pc}

0800ce28 <__match>:
 800ce28:	b530      	push	{r4, r5, lr}
 800ce2a:	6803      	ldr	r3, [r0, #0]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce32:	b914      	cbnz	r4, 800ce3a <__match+0x12>
 800ce34:	6003      	str	r3, [r0, #0]
 800ce36:	2001      	movs	r0, #1
 800ce38:	bd30      	pop	{r4, r5, pc}
 800ce3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce42:	2d19      	cmp	r5, #25
 800ce44:	bf98      	it	ls
 800ce46:	3220      	addls	r2, #32
 800ce48:	42a2      	cmp	r2, r4
 800ce4a:	d0f0      	beq.n	800ce2e <__match+0x6>
 800ce4c:	2000      	movs	r0, #0
 800ce4e:	e7f3      	b.n	800ce38 <__match+0x10>

0800ce50 <__hexnan>:
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	680b      	ldr	r3, [r1, #0]
 800ce56:	6801      	ldr	r1, [r0, #0]
 800ce58:	115f      	asrs	r7, r3, #5
 800ce5a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ce5e:	f013 031f 	ands.w	r3, r3, #31
 800ce62:	b087      	sub	sp, #28
 800ce64:	bf18      	it	ne
 800ce66:	3704      	addne	r7, #4
 800ce68:	2500      	movs	r5, #0
 800ce6a:	1f3e      	subs	r6, r7, #4
 800ce6c:	4682      	mov	sl, r0
 800ce6e:	4690      	mov	r8, r2
 800ce70:	9301      	str	r3, [sp, #4]
 800ce72:	f847 5c04 	str.w	r5, [r7, #-4]
 800ce76:	46b1      	mov	r9, r6
 800ce78:	4634      	mov	r4, r6
 800ce7a:	9502      	str	r5, [sp, #8]
 800ce7c:	46ab      	mov	fp, r5
 800ce7e:	784a      	ldrb	r2, [r1, #1]
 800ce80:	1c4b      	adds	r3, r1, #1
 800ce82:	9303      	str	r3, [sp, #12]
 800ce84:	b342      	cbz	r2, 800ced8 <__hexnan+0x88>
 800ce86:	4610      	mov	r0, r2
 800ce88:	9105      	str	r1, [sp, #20]
 800ce8a:	9204      	str	r2, [sp, #16]
 800ce8c:	f7ff fd84 	bl	800c998 <__hexdig_fun>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d143      	bne.n	800cf1c <__hexnan+0xcc>
 800ce94:	9a04      	ldr	r2, [sp, #16]
 800ce96:	9905      	ldr	r1, [sp, #20]
 800ce98:	2a20      	cmp	r2, #32
 800ce9a:	d818      	bhi.n	800cece <__hexnan+0x7e>
 800ce9c:	9b02      	ldr	r3, [sp, #8]
 800ce9e:	459b      	cmp	fp, r3
 800cea0:	dd13      	ble.n	800ceca <__hexnan+0x7a>
 800cea2:	454c      	cmp	r4, r9
 800cea4:	d206      	bcs.n	800ceb4 <__hexnan+0x64>
 800cea6:	2d07      	cmp	r5, #7
 800cea8:	dc04      	bgt.n	800ceb4 <__hexnan+0x64>
 800ceaa:	462a      	mov	r2, r5
 800ceac:	4649      	mov	r1, r9
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f7ff ffa8 	bl	800ce04 <L_shift>
 800ceb4:	4544      	cmp	r4, r8
 800ceb6:	d944      	bls.n	800cf42 <__hexnan+0xf2>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	f1a4 0904 	sub.w	r9, r4, #4
 800cebe:	f844 3c04 	str.w	r3, [r4, #-4]
 800cec2:	f8cd b008 	str.w	fp, [sp, #8]
 800cec6:	464c      	mov	r4, r9
 800cec8:	461d      	mov	r5, r3
 800ceca:	9903      	ldr	r1, [sp, #12]
 800cecc:	e7d7      	b.n	800ce7e <__hexnan+0x2e>
 800cece:	2a29      	cmp	r2, #41	; 0x29
 800ced0:	d14a      	bne.n	800cf68 <__hexnan+0x118>
 800ced2:	3102      	adds	r1, #2
 800ced4:	f8ca 1000 	str.w	r1, [sl]
 800ced8:	f1bb 0f00 	cmp.w	fp, #0
 800cedc:	d044      	beq.n	800cf68 <__hexnan+0x118>
 800cede:	454c      	cmp	r4, r9
 800cee0:	d206      	bcs.n	800cef0 <__hexnan+0xa0>
 800cee2:	2d07      	cmp	r5, #7
 800cee4:	dc04      	bgt.n	800cef0 <__hexnan+0xa0>
 800cee6:	462a      	mov	r2, r5
 800cee8:	4649      	mov	r1, r9
 800ceea:	4620      	mov	r0, r4
 800ceec:	f7ff ff8a 	bl	800ce04 <L_shift>
 800cef0:	4544      	cmp	r4, r8
 800cef2:	d928      	bls.n	800cf46 <__hexnan+0xf6>
 800cef4:	4643      	mov	r3, r8
 800cef6:	f854 2b04 	ldr.w	r2, [r4], #4
 800cefa:	f843 2b04 	str.w	r2, [r3], #4
 800cefe:	42a6      	cmp	r6, r4
 800cf00:	d2f9      	bcs.n	800cef6 <__hexnan+0xa6>
 800cf02:	2200      	movs	r2, #0
 800cf04:	f843 2b04 	str.w	r2, [r3], #4
 800cf08:	429e      	cmp	r6, r3
 800cf0a:	d2fb      	bcs.n	800cf04 <__hexnan+0xb4>
 800cf0c:	6833      	ldr	r3, [r6, #0]
 800cf0e:	b91b      	cbnz	r3, 800cf18 <__hexnan+0xc8>
 800cf10:	4546      	cmp	r6, r8
 800cf12:	d127      	bne.n	800cf64 <__hexnan+0x114>
 800cf14:	2301      	movs	r3, #1
 800cf16:	6033      	str	r3, [r6, #0]
 800cf18:	2005      	movs	r0, #5
 800cf1a:	e026      	b.n	800cf6a <__hexnan+0x11a>
 800cf1c:	3501      	adds	r5, #1
 800cf1e:	2d08      	cmp	r5, #8
 800cf20:	f10b 0b01 	add.w	fp, fp, #1
 800cf24:	dd06      	ble.n	800cf34 <__hexnan+0xe4>
 800cf26:	4544      	cmp	r4, r8
 800cf28:	d9cf      	bls.n	800ceca <__hexnan+0x7a>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf30:	2501      	movs	r5, #1
 800cf32:	3c04      	subs	r4, #4
 800cf34:	6822      	ldr	r2, [r4, #0]
 800cf36:	f000 000f 	and.w	r0, r0, #15
 800cf3a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf3e:	6020      	str	r0, [r4, #0]
 800cf40:	e7c3      	b.n	800ceca <__hexnan+0x7a>
 800cf42:	2508      	movs	r5, #8
 800cf44:	e7c1      	b.n	800ceca <__hexnan+0x7a>
 800cf46:	9b01      	ldr	r3, [sp, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d0df      	beq.n	800cf0c <__hexnan+0xbc>
 800cf4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf50:	f1c3 0320 	rsb	r3, r3, #32
 800cf54:	fa22 f303 	lsr.w	r3, r2, r3
 800cf58:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800cf5c:	401a      	ands	r2, r3
 800cf5e:	f847 2c04 	str.w	r2, [r7, #-4]
 800cf62:	e7d3      	b.n	800cf0c <__hexnan+0xbc>
 800cf64:	3e04      	subs	r6, #4
 800cf66:	e7d1      	b.n	800cf0c <__hexnan+0xbc>
 800cf68:	2004      	movs	r0, #4
 800cf6a:	b007      	add	sp, #28
 800cf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf70 <__locale_ctype_ptr_l>:
 800cf70:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cf74:	4770      	bx	lr

0800cf76 <__localeconv_l>:
 800cf76:	30f0      	adds	r0, #240	; 0xf0
 800cf78:	4770      	bx	lr

0800cf7a <__ascii_mbtowc>:
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	b901      	cbnz	r1, 800cf80 <__ascii_mbtowc+0x6>
 800cf7e:	a901      	add	r1, sp, #4
 800cf80:	b142      	cbz	r2, 800cf94 <__ascii_mbtowc+0x1a>
 800cf82:	b14b      	cbz	r3, 800cf98 <__ascii_mbtowc+0x1e>
 800cf84:	7813      	ldrb	r3, [r2, #0]
 800cf86:	600b      	str	r3, [r1, #0]
 800cf88:	7812      	ldrb	r2, [r2, #0]
 800cf8a:	1c10      	adds	r0, r2, #0
 800cf8c:	bf18      	it	ne
 800cf8e:	2001      	movne	r0, #1
 800cf90:	b002      	add	sp, #8
 800cf92:	4770      	bx	lr
 800cf94:	4610      	mov	r0, r2
 800cf96:	e7fb      	b.n	800cf90 <__ascii_mbtowc+0x16>
 800cf98:	f06f 0001 	mvn.w	r0, #1
 800cf9c:	e7f8      	b.n	800cf90 <__ascii_mbtowc+0x16>

0800cf9e <_Balloc>:
 800cf9e:	b570      	push	{r4, r5, r6, lr}
 800cfa0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	460e      	mov	r6, r1
 800cfa6:	b93d      	cbnz	r5, 800cfb8 <_Balloc+0x1a>
 800cfa8:	2010      	movs	r0, #16
 800cfaa:	f000 fc83 	bl	800d8b4 <malloc>
 800cfae:	6260      	str	r0, [r4, #36]	; 0x24
 800cfb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cfb4:	6005      	str	r5, [r0, #0]
 800cfb6:	60c5      	str	r5, [r0, #12]
 800cfb8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cfba:	68eb      	ldr	r3, [r5, #12]
 800cfbc:	b183      	cbz	r3, 800cfe0 <_Balloc+0x42>
 800cfbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cfc6:	b9b8      	cbnz	r0, 800cff8 <_Balloc+0x5a>
 800cfc8:	2101      	movs	r1, #1
 800cfca:	fa01 f506 	lsl.w	r5, r1, r6
 800cfce:	1d6a      	adds	r2, r5, #5
 800cfd0:	0092      	lsls	r2, r2, #2
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f000 fbe1 	bl	800d79a <_calloc_r>
 800cfd8:	b160      	cbz	r0, 800cff4 <_Balloc+0x56>
 800cfda:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cfde:	e00e      	b.n	800cffe <_Balloc+0x60>
 800cfe0:	2221      	movs	r2, #33	; 0x21
 800cfe2:	2104      	movs	r1, #4
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f000 fbd8 	bl	800d79a <_calloc_r>
 800cfea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfec:	60e8      	str	r0, [r5, #12]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1e4      	bne.n	800cfbe <_Balloc+0x20>
 800cff4:	2000      	movs	r0, #0
 800cff6:	bd70      	pop	{r4, r5, r6, pc}
 800cff8:	6802      	ldr	r2, [r0, #0]
 800cffa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cffe:	2300      	movs	r3, #0
 800d000:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d004:	e7f7      	b.n	800cff6 <_Balloc+0x58>

0800d006 <_Bfree>:
 800d006:	b570      	push	{r4, r5, r6, lr}
 800d008:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d00a:	4606      	mov	r6, r0
 800d00c:	460d      	mov	r5, r1
 800d00e:	b93c      	cbnz	r4, 800d020 <_Bfree+0x1a>
 800d010:	2010      	movs	r0, #16
 800d012:	f000 fc4f 	bl	800d8b4 <malloc>
 800d016:	6270      	str	r0, [r6, #36]	; 0x24
 800d018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d01c:	6004      	str	r4, [r0, #0]
 800d01e:	60c4      	str	r4, [r0, #12]
 800d020:	b13d      	cbz	r5, 800d032 <_Bfree+0x2c>
 800d022:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d024:	686a      	ldr	r2, [r5, #4]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d02c:	6029      	str	r1, [r5, #0]
 800d02e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d032:	bd70      	pop	{r4, r5, r6, pc}

0800d034 <__multadd>:
 800d034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d038:	690d      	ldr	r5, [r1, #16]
 800d03a:	461f      	mov	r7, r3
 800d03c:	4606      	mov	r6, r0
 800d03e:	460c      	mov	r4, r1
 800d040:	f101 0c14 	add.w	ip, r1, #20
 800d044:	2300      	movs	r3, #0
 800d046:	f8dc 0000 	ldr.w	r0, [ip]
 800d04a:	b281      	uxth	r1, r0
 800d04c:	fb02 7101 	mla	r1, r2, r1, r7
 800d050:	0c0f      	lsrs	r7, r1, #16
 800d052:	0c00      	lsrs	r0, r0, #16
 800d054:	fb02 7000 	mla	r0, r2, r0, r7
 800d058:	b289      	uxth	r1, r1
 800d05a:	3301      	adds	r3, #1
 800d05c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d060:	429d      	cmp	r5, r3
 800d062:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d066:	f84c 1b04 	str.w	r1, [ip], #4
 800d06a:	dcec      	bgt.n	800d046 <__multadd+0x12>
 800d06c:	b1d7      	cbz	r7, 800d0a4 <__multadd+0x70>
 800d06e:	68a3      	ldr	r3, [r4, #8]
 800d070:	42ab      	cmp	r3, r5
 800d072:	dc12      	bgt.n	800d09a <__multadd+0x66>
 800d074:	6861      	ldr	r1, [r4, #4]
 800d076:	4630      	mov	r0, r6
 800d078:	3101      	adds	r1, #1
 800d07a:	f7ff ff90 	bl	800cf9e <_Balloc>
 800d07e:	6922      	ldr	r2, [r4, #16]
 800d080:	3202      	adds	r2, #2
 800d082:	f104 010c 	add.w	r1, r4, #12
 800d086:	4680      	mov	r8, r0
 800d088:	0092      	lsls	r2, r2, #2
 800d08a:	300c      	adds	r0, #12
 800d08c:	f7fe fd24 	bl	800bad8 <memcpy>
 800d090:	4621      	mov	r1, r4
 800d092:	4630      	mov	r0, r6
 800d094:	f7ff ffb7 	bl	800d006 <_Bfree>
 800d098:	4644      	mov	r4, r8
 800d09a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d09e:	3501      	adds	r5, #1
 800d0a0:	615f      	str	r7, [r3, #20]
 800d0a2:	6125      	str	r5, [r4, #16]
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d0aa <__s2b>:
 800d0aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	4615      	mov	r5, r2
 800d0b2:	461f      	mov	r7, r3
 800d0b4:	2209      	movs	r2, #9
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	4606      	mov	r6, r0
 800d0ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0be:	2100      	movs	r1, #0
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	db20      	blt.n	800d108 <__s2b+0x5e>
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	f7ff ff69 	bl	800cf9e <_Balloc>
 800d0cc:	9b08      	ldr	r3, [sp, #32]
 800d0ce:	6143      	str	r3, [r0, #20]
 800d0d0:	2d09      	cmp	r5, #9
 800d0d2:	f04f 0301 	mov.w	r3, #1
 800d0d6:	6103      	str	r3, [r0, #16]
 800d0d8:	dd19      	ble.n	800d10e <__s2b+0x64>
 800d0da:	f104 0809 	add.w	r8, r4, #9
 800d0de:	46c1      	mov	r9, r8
 800d0e0:	442c      	add	r4, r5
 800d0e2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	3b30      	subs	r3, #48	; 0x30
 800d0ea:	220a      	movs	r2, #10
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f7ff ffa1 	bl	800d034 <__multadd>
 800d0f2:	45a1      	cmp	r9, r4
 800d0f4:	d1f5      	bne.n	800d0e2 <__s2b+0x38>
 800d0f6:	eb08 0405 	add.w	r4, r8, r5
 800d0fa:	3c08      	subs	r4, #8
 800d0fc:	1b2d      	subs	r5, r5, r4
 800d0fe:	1963      	adds	r3, r4, r5
 800d100:	42bb      	cmp	r3, r7
 800d102:	db07      	blt.n	800d114 <__s2b+0x6a>
 800d104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d108:	0052      	lsls	r2, r2, #1
 800d10a:	3101      	adds	r1, #1
 800d10c:	e7d9      	b.n	800d0c2 <__s2b+0x18>
 800d10e:	340a      	adds	r4, #10
 800d110:	2509      	movs	r5, #9
 800d112:	e7f3      	b.n	800d0fc <__s2b+0x52>
 800d114:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d118:	4601      	mov	r1, r0
 800d11a:	3b30      	subs	r3, #48	; 0x30
 800d11c:	220a      	movs	r2, #10
 800d11e:	4630      	mov	r0, r6
 800d120:	f7ff ff88 	bl	800d034 <__multadd>
 800d124:	e7eb      	b.n	800d0fe <__s2b+0x54>

0800d126 <__hi0bits>:
 800d126:	0c02      	lsrs	r2, r0, #16
 800d128:	0412      	lsls	r2, r2, #16
 800d12a:	4603      	mov	r3, r0
 800d12c:	b9b2      	cbnz	r2, 800d15c <__hi0bits+0x36>
 800d12e:	0403      	lsls	r3, r0, #16
 800d130:	2010      	movs	r0, #16
 800d132:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d136:	bf04      	itt	eq
 800d138:	021b      	lsleq	r3, r3, #8
 800d13a:	3008      	addeq	r0, #8
 800d13c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d140:	bf04      	itt	eq
 800d142:	011b      	lsleq	r3, r3, #4
 800d144:	3004      	addeq	r0, #4
 800d146:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d14a:	bf04      	itt	eq
 800d14c:	009b      	lsleq	r3, r3, #2
 800d14e:	3002      	addeq	r0, #2
 800d150:	2b00      	cmp	r3, #0
 800d152:	db06      	blt.n	800d162 <__hi0bits+0x3c>
 800d154:	005b      	lsls	r3, r3, #1
 800d156:	d503      	bpl.n	800d160 <__hi0bits+0x3a>
 800d158:	3001      	adds	r0, #1
 800d15a:	4770      	bx	lr
 800d15c:	2000      	movs	r0, #0
 800d15e:	e7e8      	b.n	800d132 <__hi0bits+0xc>
 800d160:	2020      	movs	r0, #32
 800d162:	4770      	bx	lr

0800d164 <__lo0bits>:
 800d164:	6803      	ldr	r3, [r0, #0]
 800d166:	f013 0207 	ands.w	r2, r3, #7
 800d16a:	4601      	mov	r1, r0
 800d16c:	d00b      	beq.n	800d186 <__lo0bits+0x22>
 800d16e:	07da      	lsls	r2, r3, #31
 800d170:	d423      	bmi.n	800d1ba <__lo0bits+0x56>
 800d172:	0798      	lsls	r0, r3, #30
 800d174:	bf49      	itett	mi
 800d176:	085b      	lsrmi	r3, r3, #1
 800d178:	089b      	lsrpl	r3, r3, #2
 800d17a:	2001      	movmi	r0, #1
 800d17c:	600b      	strmi	r3, [r1, #0]
 800d17e:	bf5c      	itt	pl
 800d180:	600b      	strpl	r3, [r1, #0]
 800d182:	2002      	movpl	r0, #2
 800d184:	4770      	bx	lr
 800d186:	b298      	uxth	r0, r3
 800d188:	b9a8      	cbnz	r0, 800d1b6 <__lo0bits+0x52>
 800d18a:	0c1b      	lsrs	r3, r3, #16
 800d18c:	2010      	movs	r0, #16
 800d18e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d192:	bf04      	itt	eq
 800d194:	0a1b      	lsreq	r3, r3, #8
 800d196:	3008      	addeq	r0, #8
 800d198:	071a      	lsls	r2, r3, #28
 800d19a:	bf04      	itt	eq
 800d19c:	091b      	lsreq	r3, r3, #4
 800d19e:	3004      	addeq	r0, #4
 800d1a0:	079a      	lsls	r2, r3, #30
 800d1a2:	bf04      	itt	eq
 800d1a4:	089b      	lsreq	r3, r3, #2
 800d1a6:	3002      	addeq	r0, #2
 800d1a8:	07da      	lsls	r2, r3, #31
 800d1aa:	d402      	bmi.n	800d1b2 <__lo0bits+0x4e>
 800d1ac:	085b      	lsrs	r3, r3, #1
 800d1ae:	d006      	beq.n	800d1be <__lo0bits+0x5a>
 800d1b0:	3001      	adds	r0, #1
 800d1b2:	600b      	str	r3, [r1, #0]
 800d1b4:	4770      	bx	lr
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	e7e9      	b.n	800d18e <__lo0bits+0x2a>
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	4770      	bx	lr
 800d1be:	2020      	movs	r0, #32
 800d1c0:	4770      	bx	lr

0800d1c2 <__i2b>:
 800d1c2:	b510      	push	{r4, lr}
 800d1c4:	460c      	mov	r4, r1
 800d1c6:	2101      	movs	r1, #1
 800d1c8:	f7ff fee9 	bl	800cf9e <_Balloc>
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	6144      	str	r4, [r0, #20]
 800d1d0:	6102      	str	r2, [r0, #16]
 800d1d2:	bd10      	pop	{r4, pc}

0800d1d4 <__multiply>:
 800d1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d8:	4614      	mov	r4, r2
 800d1da:	690a      	ldr	r2, [r1, #16]
 800d1dc:	6923      	ldr	r3, [r4, #16]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	bfb8      	it	lt
 800d1e2:	460b      	movlt	r3, r1
 800d1e4:	4688      	mov	r8, r1
 800d1e6:	bfbc      	itt	lt
 800d1e8:	46a0      	movlt	r8, r4
 800d1ea:	461c      	movlt	r4, r3
 800d1ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d1f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d1f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d1f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d1fc:	eb07 0609 	add.w	r6, r7, r9
 800d200:	42b3      	cmp	r3, r6
 800d202:	bfb8      	it	lt
 800d204:	3101      	addlt	r1, #1
 800d206:	f7ff feca 	bl	800cf9e <_Balloc>
 800d20a:	f100 0514 	add.w	r5, r0, #20
 800d20e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d212:	462b      	mov	r3, r5
 800d214:	2200      	movs	r2, #0
 800d216:	4573      	cmp	r3, lr
 800d218:	d316      	bcc.n	800d248 <__multiply+0x74>
 800d21a:	f104 0214 	add.w	r2, r4, #20
 800d21e:	f108 0114 	add.w	r1, r8, #20
 800d222:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d226:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d22a:	9300      	str	r3, [sp, #0]
 800d22c:	9b00      	ldr	r3, [sp, #0]
 800d22e:	9201      	str	r2, [sp, #4]
 800d230:	4293      	cmp	r3, r2
 800d232:	d80c      	bhi.n	800d24e <__multiply+0x7a>
 800d234:	2e00      	cmp	r6, #0
 800d236:	dd03      	ble.n	800d240 <__multiply+0x6c>
 800d238:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d05d      	beq.n	800d2fc <__multiply+0x128>
 800d240:	6106      	str	r6, [r0, #16]
 800d242:	b003      	add	sp, #12
 800d244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d248:	f843 2b04 	str.w	r2, [r3], #4
 800d24c:	e7e3      	b.n	800d216 <__multiply+0x42>
 800d24e:	f8b2 b000 	ldrh.w	fp, [r2]
 800d252:	f1bb 0f00 	cmp.w	fp, #0
 800d256:	d023      	beq.n	800d2a0 <__multiply+0xcc>
 800d258:	4689      	mov	r9, r1
 800d25a:	46ac      	mov	ip, r5
 800d25c:	f04f 0800 	mov.w	r8, #0
 800d260:	f859 4b04 	ldr.w	r4, [r9], #4
 800d264:	f8dc a000 	ldr.w	sl, [ip]
 800d268:	b2a3      	uxth	r3, r4
 800d26a:	fa1f fa8a 	uxth.w	sl, sl
 800d26e:	fb0b a303 	mla	r3, fp, r3, sl
 800d272:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d276:	f8dc 4000 	ldr.w	r4, [ip]
 800d27a:	4443      	add	r3, r8
 800d27c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d280:	fb0b 840a 	mla	r4, fp, sl, r8
 800d284:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d288:	46e2      	mov	sl, ip
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d290:	454f      	cmp	r7, r9
 800d292:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d296:	f84a 3b04 	str.w	r3, [sl], #4
 800d29a:	d82b      	bhi.n	800d2f4 <__multiply+0x120>
 800d29c:	f8cc 8004 	str.w	r8, [ip, #4]
 800d2a0:	9b01      	ldr	r3, [sp, #4]
 800d2a2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d2a6:	3204      	adds	r2, #4
 800d2a8:	f1ba 0f00 	cmp.w	sl, #0
 800d2ac:	d020      	beq.n	800d2f0 <__multiply+0x11c>
 800d2ae:	682b      	ldr	r3, [r5, #0]
 800d2b0:	4689      	mov	r9, r1
 800d2b2:	46a8      	mov	r8, r5
 800d2b4:	f04f 0b00 	mov.w	fp, #0
 800d2b8:	f8b9 c000 	ldrh.w	ip, [r9]
 800d2bc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d2c0:	fb0a 440c 	mla	r4, sl, ip, r4
 800d2c4:	445c      	add	r4, fp
 800d2c6:	46c4      	mov	ip, r8
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d2ce:	f84c 3b04 	str.w	r3, [ip], #4
 800d2d2:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2d6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d2da:	0c1b      	lsrs	r3, r3, #16
 800d2dc:	fb0a b303 	mla	r3, sl, r3, fp
 800d2e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d2e4:	454f      	cmp	r7, r9
 800d2e6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d2ea:	d805      	bhi.n	800d2f8 <__multiply+0x124>
 800d2ec:	f8c8 3004 	str.w	r3, [r8, #4]
 800d2f0:	3504      	adds	r5, #4
 800d2f2:	e79b      	b.n	800d22c <__multiply+0x58>
 800d2f4:	46d4      	mov	ip, sl
 800d2f6:	e7b3      	b.n	800d260 <__multiply+0x8c>
 800d2f8:	46e0      	mov	r8, ip
 800d2fa:	e7dd      	b.n	800d2b8 <__multiply+0xe4>
 800d2fc:	3e01      	subs	r6, #1
 800d2fe:	e799      	b.n	800d234 <__multiply+0x60>

0800d300 <__pow5mult>:
 800d300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d304:	4615      	mov	r5, r2
 800d306:	f012 0203 	ands.w	r2, r2, #3
 800d30a:	4606      	mov	r6, r0
 800d30c:	460f      	mov	r7, r1
 800d30e:	d007      	beq.n	800d320 <__pow5mult+0x20>
 800d310:	3a01      	subs	r2, #1
 800d312:	4c21      	ldr	r4, [pc, #132]	; (800d398 <__pow5mult+0x98>)
 800d314:	2300      	movs	r3, #0
 800d316:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d31a:	f7ff fe8b 	bl	800d034 <__multadd>
 800d31e:	4607      	mov	r7, r0
 800d320:	10ad      	asrs	r5, r5, #2
 800d322:	d035      	beq.n	800d390 <__pow5mult+0x90>
 800d324:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d326:	b93c      	cbnz	r4, 800d338 <__pow5mult+0x38>
 800d328:	2010      	movs	r0, #16
 800d32a:	f000 fac3 	bl	800d8b4 <malloc>
 800d32e:	6270      	str	r0, [r6, #36]	; 0x24
 800d330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d334:	6004      	str	r4, [r0, #0]
 800d336:	60c4      	str	r4, [r0, #12]
 800d338:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d33c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d340:	b94c      	cbnz	r4, 800d356 <__pow5mult+0x56>
 800d342:	f240 2171 	movw	r1, #625	; 0x271
 800d346:	4630      	mov	r0, r6
 800d348:	f7ff ff3b 	bl	800d1c2 <__i2b>
 800d34c:	2300      	movs	r3, #0
 800d34e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d352:	4604      	mov	r4, r0
 800d354:	6003      	str	r3, [r0, #0]
 800d356:	f04f 0800 	mov.w	r8, #0
 800d35a:	07eb      	lsls	r3, r5, #31
 800d35c:	d50a      	bpl.n	800d374 <__pow5mult+0x74>
 800d35e:	4639      	mov	r1, r7
 800d360:	4622      	mov	r2, r4
 800d362:	4630      	mov	r0, r6
 800d364:	f7ff ff36 	bl	800d1d4 <__multiply>
 800d368:	4639      	mov	r1, r7
 800d36a:	4681      	mov	r9, r0
 800d36c:	4630      	mov	r0, r6
 800d36e:	f7ff fe4a 	bl	800d006 <_Bfree>
 800d372:	464f      	mov	r7, r9
 800d374:	106d      	asrs	r5, r5, #1
 800d376:	d00b      	beq.n	800d390 <__pow5mult+0x90>
 800d378:	6820      	ldr	r0, [r4, #0]
 800d37a:	b938      	cbnz	r0, 800d38c <__pow5mult+0x8c>
 800d37c:	4622      	mov	r2, r4
 800d37e:	4621      	mov	r1, r4
 800d380:	4630      	mov	r0, r6
 800d382:	f7ff ff27 	bl	800d1d4 <__multiply>
 800d386:	6020      	str	r0, [r4, #0]
 800d388:	f8c0 8000 	str.w	r8, [r0]
 800d38c:	4604      	mov	r4, r0
 800d38e:	e7e4      	b.n	800d35a <__pow5mult+0x5a>
 800d390:	4638      	mov	r0, r7
 800d392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d396:	bf00      	nop
 800d398:	0800ec10 	.word	0x0800ec10

0800d39c <__lshift>:
 800d39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a0:	460c      	mov	r4, r1
 800d3a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3a6:	6923      	ldr	r3, [r4, #16]
 800d3a8:	6849      	ldr	r1, [r1, #4]
 800d3aa:	eb0a 0903 	add.w	r9, sl, r3
 800d3ae:	68a3      	ldr	r3, [r4, #8]
 800d3b0:	4607      	mov	r7, r0
 800d3b2:	4616      	mov	r6, r2
 800d3b4:	f109 0501 	add.w	r5, r9, #1
 800d3b8:	42ab      	cmp	r3, r5
 800d3ba:	db32      	blt.n	800d422 <__lshift+0x86>
 800d3bc:	4638      	mov	r0, r7
 800d3be:	f7ff fdee 	bl	800cf9e <_Balloc>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	4680      	mov	r8, r0
 800d3c6:	f100 0114 	add.w	r1, r0, #20
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	4553      	cmp	r3, sl
 800d3ce:	db2b      	blt.n	800d428 <__lshift+0x8c>
 800d3d0:	6920      	ldr	r0, [r4, #16]
 800d3d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3d6:	f104 0314 	add.w	r3, r4, #20
 800d3da:	f016 021f 	ands.w	r2, r6, #31
 800d3de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d3e6:	d025      	beq.n	800d434 <__lshift+0x98>
 800d3e8:	f1c2 0e20 	rsb	lr, r2, #32
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	681e      	ldr	r6, [r3, #0]
 800d3f0:	468a      	mov	sl, r1
 800d3f2:	4096      	lsls	r6, r2
 800d3f4:	4330      	orrs	r0, r6
 800d3f6:	f84a 0b04 	str.w	r0, [sl], #4
 800d3fa:	f853 0b04 	ldr.w	r0, [r3], #4
 800d3fe:	459c      	cmp	ip, r3
 800d400:	fa20 f00e 	lsr.w	r0, r0, lr
 800d404:	d814      	bhi.n	800d430 <__lshift+0x94>
 800d406:	6048      	str	r0, [r1, #4]
 800d408:	b108      	cbz	r0, 800d40e <__lshift+0x72>
 800d40a:	f109 0502 	add.w	r5, r9, #2
 800d40e:	3d01      	subs	r5, #1
 800d410:	4638      	mov	r0, r7
 800d412:	f8c8 5010 	str.w	r5, [r8, #16]
 800d416:	4621      	mov	r1, r4
 800d418:	f7ff fdf5 	bl	800d006 <_Bfree>
 800d41c:	4640      	mov	r0, r8
 800d41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d422:	3101      	adds	r1, #1
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	e7c7      	b.n	800d3b8 <__lshift+0x1c>
 800d428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d42c:	3301      	adds	r3, #1
 800d42e:	e7cd      	b.n	800d3cc <__lshift+0x30>
 800d430:	4651      	mov	r1, sl
 800d432:	e7dc      	b.n	800d3ee <__lshift+0x52>
 800d434:	3904      	subs	r1, #4
 800d436:	f853 2b04 	ldr.w	r2, [r3], #4
 800d43a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d43e:	459c      	cmp	ip, r3
 800d440:	d8f9      	bhi.n	800d436 <__lshift+0x9a>
 800d442:	e7e4      	b.n	800d40e <__lshift+0x72>

0800d444 <__mcmp>:
 800d444:	6903      	ldr	r3, [r0, #16]
 800d446:	690a      	ldr	r2, [r1, #16]
 800d448:	1a9b      	subs	r3, r3, r2
 800d44a:	b530      	push	{r4, r5, lr}
 800d44c:	d10c      	bne.n	800d468 <__mcmp+0x24>
 800d44e:	0092      	lsls	r2, r2, #2
 800d450:	3014      	adds	r0, #20
 800d452:	3114      	adds	r1, #20
 800d454:	1884      	adds	r4, r0, r2
 800d456:	4411      	add	r1, r2
 800d458:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d45c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d460:	4295      	cmp	r5, r2
 800d462:	d003      	beq.n	800d46c <__mcmp+0x28>
 800d464:	d305      	bcc.n	800d472 <__mcmp+0x2e>
 800d466:	2301      	movs	r3, #1
 800d468:	4618      	mov	r0, r3
 800d46a:	bd30      	pop	{r4, r5, pc}
 800d46c:	42a0      	cmp	r0, r4
 800d46e:	d3f3      	bcc.n	800d458 <__mcmp+0x14>
 800d470:	e7fa      	b.n	800d468 <__mcmp+0x24>
 800d472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d476:	e7f7      	b.n	800d468 <__mcmp+0x24>

0800d478 <__mdiff>:
 800d478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d47c:	460d      	mov	r5, r1
 800d47e:	4607      	mov	r7, r0
 800d480:	4611      	mov	r1, r2
 800d482:	4628      	mov	r0, r5
 800d484:	4614      	mov	r4, r2
 800d486:	f7ff ffdd 	bl	800d444 <__mcmp>
 800d48a:	1e06      	subs	r6, r0, #0
 800d48c:	d108      	bne.n	800d4a0 <__mdiff+0x28>
 800d48e:	4631      	mov	r1, r6
 800d490:	4638      	mov	r0, r7
 800d492:	f7ff fd84 	bl	800cf9e <_Balloc>
 800d496:	2301      	movs	r3, #1
 800d498:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a0:	bfa4      	itt	ge
 800d4a2:	4623      	movge	r3, r4
 800d4a4:	462c      	movge	r4, r5
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	6861      	ldr	r1, [r4, #4]
 800d4aa:	bfa6      	itte	ge
 800d4ac:	461d      	movge	r5, r3
 800d4ae:	2600      	movge	r6, #0
 800d4b0:	2601      	movlt	r6, #1
 800d4b2:	f7ff fd74 	bl	800cf9e <_Balloc>
 800d4b6:	692b      	ldr	r3, [r5, #16]
 800d4b8:	60c6      	str	r6, [r0, #12]
 800d4ba:	6926      	ldr	r6, [r4, #16]
 800d4bc:	f105 0914 	add.w	r9, r5, #20
 800d4c0:	f104 0214 	add.w	r2, r4, #20
 800d4c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d4c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d4cc:	f100 0514 	add.w	r5, r0, #20
 800d4d0:	f04f 0e00 	mov.w	lr, #0
 800d4d4:	f852 ab04 	ldr.w	sl, [r2], #4
 800d4d8:	f859 4b04 	ldr.w	r4, [r9], #4
 800d4dc:	fa1e f18a 	uxtah	r1, lr, sl
 800d4e0:	b2a3      	uxth	r3, r4
 800d4e2:	1ac9      	subs	r1, r1, r3
 800d4e4:	0c23      	lsrs	r3, r4, #16
 800d4e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d4ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d4ee:	b289      	uxth	r1, r1
 800d4f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d4f4:	45c8      	cmp	r8, r9
 800d4f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d4fa:	4694      	mov	ip, r2
 800d4fc:	f845 3b04 	str.w	r3, [r5], #4
 800d500:	d8e8      	bhi.n	800d4d4 <__mdiff+0x5c>
 800d502:	45bc      	cmp	ip, r7
 800d504:	d304      	bcc.n	800d510 <__mdiff+0x98>
 800d506:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d50a:	b183      	cbz	r3, 800d52e <__mdiff+0xb6>
 800d50c:	6106      	str	r6, [r0, #16]
 800d50e:	e7c5      	b.n	800d49c <__mdiff+0x24>
 800d510:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d514:	fa1e f381 	uxtah	r3, lr, r1
 800d518:	141a      	asrs	r2, r3, #16
 800d51a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d51e:	b29b      	uxth	r3, r3
 800d520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d524:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d528:	f845 3b04 	str.w	r3, [r5], #4
 800d52c:	e7e9      	b.n	800d502 <__mdiff+0x8a>
 800d52e:	3e01      	subs	r6, #1
 800d530:	e7e9      	b.n	800d506 <__mdiff+0x8e>
	...

0800d534 <__ulp>:
 800d534:	4b12      	ldr	r3, [pc, #72]	; (800d580 <__ulp+0x4c>)
 800d536:	ee10 2a90 	vmov	r2, s1
 800d53a:	401a      	ands	r2, r3
 800d53c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d540:	2b00      	cmp	r3, #0
 800d542:	dd04      	ble.n	800d54e <__ulp+0x1a>
 800d544:	2000      	movs	r0, #0
 800d546:	4619      	mov	r1, r3
 800d548:	ec41 0b10 	vmov	d0, r0, r1
 800d54c:	4770      	bx	lr
 800d54e:	425b      	negs	r3, r3
 800d550:	151b      	asrs	r3, r3, #20
 800d552:	2b13      	cmp	r3, #19
 800d554:	f04f 0000 	mov.w	r0, #0
 800d558:	f04f 0100 	mov.w	r1, #0
 800d55c:	dc04      	bgt.n	800d568 <__ulp+0x34>
 800d55e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d562:	fa42 f103 	asr.w	r1, r2, r3
 800d566:	e7ef      	b.n	800d548 <__ulp+0x14>
 800d568:	3b14      	subs	r3, #20
 800d56a:	2b1e      	cmp	r3, #30
 800d56c:	f04f 0201 	mov.w	r2, #1
 800d570:	bfda      	itte	le
 800d572:	f1c3 031f 	rsble	r3, r3, #31
 800d576:	fa02 f303 	lslle.w	r3, r2, r3
 800d57a:	4613      	movgt	r3, r2
 800d57c:	4618      	mov	r0, r3
 800d57e:	e7e3      	b.n	800d548 <__ulp+0x14>
 800d580:	7ff00000 	.word	0x7ff00000

0800d584 <__b2d>:
 800d584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d586:	6905      	ldr	r5, [r0, #16]
 800d588:	f100 0714 	add.w	r7, r0, #20
 800d58c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d590:	1f2e      	subs	r6, r5, #4
 800d592:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d596:	4620      	mov	r0, r4
 800d598:	f7ff fdc5 	bl	800d126 <__hi0bits>
 800d59c:	f1c0 0320 	rsb	r3, r0, #32
 800d5a0:	280a      	cmp	r0, #10
 800d5a2:	600b      	str	r3, [r1, #0]
 800d5a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d61c <__b2d+0x98>
 800d5a8:	dc14      	bgt.n	800d5d4 <__b2d+0x50>
 800d5aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800d5ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800d5b2:	42b7      	cmp	r7, r6
 800d5b4:	ea41 030c 	orr.w	r3, r1, ip
 800d5b8:	bf34      	ite	cc
 800d5ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d5be:	2100      	movcs	r1, #0
 800d5c0:	3015      	adds	r0, #21
 800d5c2:	fa04 f000 	lsl.w	r0, r4, r0
 800d5c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800d5ca:	ea40 0201 	orr.w	r2, r0, r1
 800d5ce:	ec43 2b10 	vmov	d0, r2, r3
 800d5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d4:	42b7      	cmp	r7, r6
 800d5d6:	bf3a      	itte	cc
 800d5d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800d5dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d5e0:	2100      	movcs	r1, #0
 800d5e2:	380b      	subs	r0, #11
 800d5e4:	d015      	beq.n	800d612 <__b2d+0x8e>
 800d5e6:	4084      	lsls	r4, r0
 800d5e8:	f1c0 0520 	rsb	r5, r0, #32
 800d5ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d5f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d5f4:	42be      	cmp	r6, r7
 800d5f6:	fa21 fc05 	lsr.w	ip, r1, r5
 800d5fa:	ea44 030c 	orr.w	r3, r4, ip
 800d5fe:	bf8c      	ite	hi
 800d600:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d604:	2400      	movls	r4, #0
 800d606:	fa01 f000 	lsl.w	r0, r1, r0
 800d60a:	40ec      	lsrs	r4, r5
 800d60c:	ea40 0204 	orr.w	r2, r0, r4
 800d610:	e7dd      	b.n	800d5ce <__b2d+0x4a>
 800d612:	ea44 030c 	orr.w	r3, r4, ip
 800d616:	460a      	mov	r2, r1
 800d618:	e7d9      	b.n	800d5ce <__b2d+0x4a>
 800d61a:	bf00      	nop
 800d61c:	3ff00000 	.word	0x3ff00000

0800d620 <__d2b>:
 800d620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d624:	460e      	mov	r6, r1
 800d626:	2101      	movs	r1, #1
 800d628:	ec59 8b10 	vmov	r8, r9, d0
 800d62c:	4615      	mov	r5, r2
 800d62e:	f7ff fcb6 	bl	800cf9e <_Balloc>
 800d632:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d636:	4607      	mov	r7, r0
 800d638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d63c:	bb34      	cbnz	r4, 800d68c <__d2b+0x6c>
 800d63e:	9301      	str	r3, [sp, #4]
 800d640:	f1b8 0300 	subs.w	r3, r8, #0
 800d644:	d027      	beq.n	800d696 <__d2b+0x76>
 800d646:	a802      	add	r0, sp, #8
 800d648:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d64c:	f7ff fd8a 	bl	800d164 <__lo0bits>
 800d650:	9900      	ldr	r1, [sp, #0]
 800d652:	b1f0      	cbz	r0, 800d692 <__d2b+0x72>
 800d654:	9a01      	ldr	r2, [sp, #4]
 800d656:	f1c0 0320 	rsb	r3, r0, #32
 800d65a:	fa02 f303 	lsl.w	r3, r2, r3
 800d65e:	430b      	orrs	r3, r1
 800d660:	40c2      	lsrs	r2, r0
 800d662:	617b      	str	r3, [r7, #20]
 800d664:	9201      	str	r2, [sp, #4]
 800d666:	9b01      	ldr	r3, [sp, #4]
 800d668:	61bb      	str	r3, [r7, #24]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	bf14      	ite	ne
 800d66e:	2102      	movne	r1, #2
 800d670:	2101      	moveq	r1, #1
 800d672:	6139      	str	r1, [r7, #16]
 800d674:	b1c4      	cbz	r4, 800d6a8 <__d2b+0x88>
 800d676:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d67a:	4404      	add	r4, r0
 800d67c:	6034      	str	r4, [r6, #0]
 800d67e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d682:	6028      	str	r0, [r5, #0]
 800d684:	4638      	mov	r0, r7
 800d686:	b003      	add	sp, #12
 800d688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d68c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d690:	e7d5      	b.n	800d63e <__d2b+0x1e>
 800d692:	6179      	str	r1, [r7, #20]
 800d694:	e7e7      	b.n	800d666 <__d2b+0x46>
 800d696:	a801      	add	r0, sp, #4
 800d698:	f7ff fd64 	bl	800d164 <__lo0bits>
 800d69c:	9b01      	ldr	r3, [sp, #4]
 800d69e:	617b      	str	r3, [r7, #20]
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	6139      	str	r1, [r7, #16]
 800d6a4:	3020      	adds	r0, #32
 800d6a6:	e7e5      	b.n	800d674 <__d2b+0x54>
 800d6a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d6ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d6b0:	6030      	str	r0, [r6, #0]
 800d6b2:	6918      	ldr	r0, [r3, #16]
 800d6b4:	f7ff fd37 	bl	800d126 <__hi0bits>
 800d6b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d6bc:	e7e1      	b.n	800d682 <__d2b+0x62>

0800d6be <__ratio>:
 800d6be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c2:	4688      	mov	r8, r1
 800d6c4:	4669      	mov	r1, sp
 800d6c6:	4681      	mov	r9, r0
 800d6c8:	f7ff ff5c 	bl	800d584 <__b2d>
 800d6cc:	a901      	add	r1, sp, #4
 800d6ce:	4640      	mov	r0, r8
 800d6d0:	ec57 6b10 	vmov	r6, r7, d0
 800d6d4:	f7ff ff56 	bl	800d584 <__b2d>
 800d6d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d6dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d6e0:	eba3 0c02 	sub.w	ip, r3, r2
 800d6e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d6e8:	1a9b      	subs	r3, r3, r2
 800d6ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d6ee:	ec5b ab10 	vmov	sl, fp, d0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	bfce      	itee	gt
 800d6f6:	463a      	movgt	r2, r7
 800d6f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d6fc:	465a      	movle	r2, fp
 800d6fe:	4659      	mov	r1, fp
 800d700:	463d      	mov	r5, r7
 800d702:	bfd4      	ite	le
 800d704:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d708:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d70c:	4630      	mov	r0, r6
 800d70e:	ee10 2a10 	vmov	r2, s0
 800d712:	460b      	mov	r3, r1
 800d714:	4629      	mov	r1, r5
 800d716:	f7f3 f845 	bl	80007a4 <__aeabi_ddiv>
 800d71a:	ec41 0b10 	vmov	d0, r0, r1
 800d71e:	b003      	add	sp, #12
 800d720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d724 <__copybits>:
 800d724:	3901      	subs	r1, #1
 800d726:	b510      	push	{r4, lr}
 800d728:	1149      	asrs	r1, r1, #5
 800d72a:	6914      	ldr	r4, [r2, #16]
 800d72c:	3101      	adds	r1, #1
 800d72e:	f102 0314 	add.w	r3, r2, #20
 800d732:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d736:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d73a:	42a3      	cmp	r3, r4
 800d73c:	4602      	mov	r2, r0
 800d73e:	d303      	bcc.n	800d748 <__copybits+0x24>
 800d740:	2300      	movs	r3, #0
 800d742:	428a      	cmp	r2, r1
 800d744:	d305      	bcc.n	800d752 <__copybits+0x2e>
 800d746:	bd10      	pop	{r4, pc}
 800d748:	f853 2b04 	ldr.w	r2, [r3], #4
 800d74c:	f840 2b04 	str.w	r2, [r0], #4
 800d750:	e7f3      	b.n	800d73a <__copybits+0x16>
 800d752:	f842 3b04 	str.w	r3, [r2], #4
 800d756:	e7f4      	b.n	800d742 <__copybits+0x1e>

0800d758 <__any_on>:
 800d758:	f100 0214 	add.w	r2, r0, #20
 800d75c:	6900      	ldr	r0, [r0, #16]
 800d75e:	114b      	asrs	r3, r1, #5
 800d760:	4298      	cmp	r0, r3
 800d762:	b510      	push	{r4, lr}
 800d764:	db11      	blt.n	800d78a <__any_on+0x32>
 800d766:	dd0a      	ble.n	800d77e <__any_on+0x26>
 800d768:	f011 011f 	ands.w	r1, r1, #31
 800d76c:	d007      	beq.n	800d77e <__any_on+0x26>
 800d76e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d772:	fa24 f001 	lsr.w	r0, r4, r1
 800d776:	fa00 f101 	lsl.w	r1, r0, r1
 800d77a:	428c      	cmp	r4, r1
 800d77c:	d10b      	bne.n	800d796 <__any_on+0x3e>
 800d77e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d782:	4293      	cmp	r3, r2
 800d784:	d803      	bhi.n	800d78e <__any_on+0x36>
 800d786:	2000      	movs	r0, #0
 800d788:	bd10      	pop	{r4, pc}
 800d78a:	4603      	mov	r3, r0
 800d78c:	e7f7      	b.n	800d77e <__any_on+0x26>
 800d78e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d792:	2900      	cmp	r1, #0
 800d794:	d0f5      	beq.n	800d782 <__any_on+0x2a>
 800d796:	2001      	movs	r0, #1
 800d798:	e7f6      	b.n	800d788 <__any_on+0x30>

0800d79a <_calloc_r>:
 800d79a:	b538      	push	{r3, r4, r5, lr}
 800d79c:	fb02 f401 	mul.w	r4, r2, r1
 800d7a0:	4621      	mov	r1, r4
 800d7a2:	f000 f809 	bl	800d7b8 <_malloc_r>
 800d7a6:	4605      	mov	r5, r0
 800d7a8:	b118      	cbz	r0, 800d7b2 <_calloc_r+0x18>
 800d7aa:	4622      	mov	r2, r4
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	f7fe f99e 	bl	800baee <memset>
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d7b8 <_malloc_r>:
 800d7b8:	b570      	push	{r4, r5, r6, lr}
 800d7ba:	1ccd      	adds	r5, r1, #3
 800d7bc:	f025 0503 	bic.w	r5, r5, #3
 800d7c0:	3508      	adds	r5, #8
 800d7c2:	2d0c      	cmp	r5, #12
 800d7c4:	bf38      	it	cc
 800d7c6:	250c      	movcc	r5, #12
 800d7c8:	2d00      	cmp	r5, #0
 800d7ca:	4606      	mov	r6, r0
 800d7cc:	db01      	blt.n	800d7d2 <_malloc_r+0x1a>
 800d7ce:	42a9      	cmp	r1, r5
 800d7d0:	d903      	bls.n	800d7da <_malloc_r+0x22>
 800d7d2:	230c      	movs	r3, #12
 800d7d4:	6033      	str	r3, [r6, #0]
 800d7d6:	2000      	movs	r0, #0
 800d7d8:	bd70      	pop	{r4, r5, r6, pc}
 800d7da:	f000 f873 	bl	800d8c4 <__malloc_lock>
 800d7de:	4a21      	ldr	r2, [pc, #132]	; (800d864 <_malloc_r+0xac>)
 800d7e0:	6814      	ldr	r4, [r2, #0]
 800d7e2:	4621      	mov	r1, r4
 800d7e4:	b991      	cbnz	r1, 800d80c <_malloc_r+0x54>
 800d7e6:	4c20      	ldr	r4, [pc, #128]	; (800d868 <_malloc_r+0xb0>)
 800d7e8:	6823      	ldr	r3, [r4, #0]
 800d7ea:	b91b      	cbnz	r3, 800d7f4 <_malloc_r+0x3c>
 800d7ec:	4630      	mov	r0, r6
 800d7ee:	f000 f83d 	bl	800d86c <_sbrk_r>
 800d7f2:	6020      	str	r0, [r4, #0]
 800d7f4:	4629      	mov	r1, r5
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	f000 f838 	bl	800d86c <_sbrk_r>
 800d7fc:	1c43      	adds	r3, r0, #1
 800d7fe:	d124      	bne.n	800d84a <_malloc_r+0x92>
 800d800:	230c      	movs	r3, #12
 800d802:	6033      	str	r3, [r6, #0]
 800d804:	4630      	mov	r0, r6
 800d806:	f000 f85e 	bl	800d8c6 <__malloc_unlock>
 800d80a:	e7e4      	b.n	800d7d6 <_malloc_r+0x1e>
 800d80c:	680b      	ldr	r3, [r1, #0]
 800d80e:	1b5b      	subs	r3, r3, r5
 800d810:	d418      	bmi.n	800d844 <_malloc_r+0x8c>
 800d812:	2b0b      	cmp	r3, #11
 800d814:	d90f      	bls.n	800d836 <_malloc_r+0x7e>
 800d816:	600b      	str	r3, [r1, #0]
 800d818:	50cd      	str	r5, [r1, r3]
 800d81a:	18cc      	adds	r4, r1, r3
 800d81c:	4630      	mov	r0, r6
 800d81e:	f000 f852 	bl	800d8c6 <__malloc_unlock>
 800d822:	f104 000b 	add.w	r0, r4, #11
 800d826:	1d23      	adds	r3, r4, #4
 800d828:	f020 0007 	bic.w	r0, r0, #7
 800d82c:	1ac3      	subs	r3, r0, r3
 800d82e:	d0d3      	beq.n	800d7d8 <_malloc_r+0x20>
 800d830:	425a      	negs	r2, r3
 800d832:	50e2      	str	r2, [r4, r3]
 800d834:	e7d0      	b.n	800d7d8 <_malloc_r+0x20>
 800d836:	428c      	cmp	r4, r1
 800d838:	684b      	ldr	r3, [r1, #4]
 800d83a:	bf16      	itet	ne
 800d83c:	6063      	strne	r3, [r4, #4]
 800d83e:	6013      	streq	r3, [r2, #0]
 800d840:	460c      	movne	r4, r1
 800d842:	e7eb      	b.n	800d81c <_malloc_r+0x64>
 800d844:	460c      	mov	r4, r1
 800d846:	6849      	ldr	r1, [r1, #4]
 800d848:	e7cc      	b.n	800d7e4 <_malloc_r+0x2c>
 800d84a:	1cc4      	adds	r4, r0, #3
 800d84c:	f024 0403 	bic.w	r4, r4, #3
 800d850:	42a0      	cmp	r0, r4
 800d852:	d005      	beq.n	800d860 <_malloc_r+0xa8>
 800d854:	1a21      	subs	r1, r4, r0
 800d856:	4630      	mov	r0, r6
 800d858:	f000 f808 	bl	800d86c <_sbrk_r>
 800d85c:	3001      	adds	r0, #1
 800d85e:	d0cf      	beq.n	800d800 <_malloc_r+0x48>
 800d860:	6025      	str	r5, [r4, #0]
 800d862:	e7db      	b.n	800d81c <_malloc_r+0x64>
 800d864:	200004c8 	.word	0x200004c8
 800d868:	200004cc 	.word	0x200004cc

0800d86c <_sbrk_r>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	4c06      	ldr	r4, [pc, #24]	; (800d888 <_sbrk_r+0x1c>)
 800d870:	2300      	movs	r3, #0
 800d872:	4605      	mov	r5, r0
 800d874:	4608      	mov	r0, r1
 800d876:	6023      	str	r3, [r4, #0]
 800d878:	f7f4 fcfe 	bl	8002278 <_sbrk>
 800d87c:	1c43      	adds	r3, r0, #1
 800d87e:	d102      	bne.n	800d886 <_sbrk_r+0x1a>
 800d880:	6823      	ldr	r3, [r4, #0]
 800d882:	b103      	cbz	r3, 800d886 <_sbrk_r+0x1a>
 800d884:	602b      	str	r3, [r5, #0]
 800d886:	bd38      	pop	{r3, r4, r5, pc}
 800d888:	20000c3c 	.word	0x20000c3c

0800d88c <nanf>:
 800d88c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d894 <nanf+0x8>
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	7fc00000 	.word	0x7fc00000

0800d898 <__ascii_wctomb>:
 800d898:	b149      	cbz	r1, 800d8ae <__ascii_wctomb+0x16>
 800d89a:	2aff      	cmp	r2, #255	; 0xff
 800d89c:	bf85      	ittet	hi
 800d89e:	238a      	movhi	r3, #138	; 0x8a
 800d8a0:	6003      	strhi	r3, [r0, #0]
 800d8a2:	700a      	strbls	r2, [r1, #0]
 800d8a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d8a8:	bf98      	it	ls
 800d8aa:	2001      	movls	r0, #1
 800d8ac:	4770      	bx	lr
 800d8ae:	4608      	mov	r0, r1
 800d8b0:	4770      	bx	lr
	...

0800d8b4 <malloc>:
 800d8b4:	4b02      	ldr	r3, [pc, #8]	; (800d8c0 <malloc+0xc>)
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	f7ff bf7d 	b.w	800d7b8 <_malloc_r>
 800d8be:	bf00      	nop
 800d8c0:	200002d4 	.word	0x200002d4

0800d8c4 <__malloc_lock>:
 800d8c4:	4770      	bx	lr

0800d8c6 <__malloc_unlock>:
 800d8c6:	4770      	bx	lr

0800d8c8 <pow>:
 800d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8cc:	ed2d 8b04 	vpush	{d8-d9}
 800d8d0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800dba4 <pow+0x2dc>
 800d8d4:	b08d      	sub	sp, #52	; 0x34
 800d8d6:	ec57 6b10 	vmov	r6, r7, d0
 800d8da:	ec55 4b11 	vmov	r4, r5, d1
 800d8de:	f000 f9bf 	bl	800dc60 <__ieee754_pow>
 800d8e2:	f999 3000 	ldrsb.w	r3, [r9]
 800d8e6:	9300      	str	r3, [sp, #0]
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	eeb0 8a40 	vmov.f32	s16, s0
 800d8ee:	eef0 8a60 	vmov.f32	s17, s1
 800d8f2:	46c8      	mov	r8, r9
 800d8f4:	d05f      	beq.n	800d9b6 <pow+0xee>
 800d8f6:	4622      	mov	r2, r4
 800d8f8:	462b      	mov	r3, r5
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	f7f3 f8c1 	bl	8000a84 <__aeabi_dcmpun>
 800d902:	4683      	mov	fp, r0
 800d904:	2800      	cmp	r0, #0
 800d906:	d156      	bne.n	800d9b6 <pow+0xee>
 800d908:	4632      	mov	r2, r6
 800d90a:	463b      	mov	r3, r7
 800d90c:	4630      	mov	r0, r6
 800d90e:	4639      	mov	r1, r7
 800d910:	f7f3 f8b8 	bl	8000a84 <__aeabi_dcmpun>
 800d914:	9001      	str	r0, [sp, #4]
 800d916:	b1e8      	cbz	r0, 800d954 <pow+0x8c>
 800d918:	2200      	movs	r2, #0
 800d91a:	2300      	movs	r3, #0
 800d91c:	4620      	mov	r0, r4
 800d91e:	4629      	mov	r1, r5
 800d920:	f7f3 f87e 	bl	8000a20 <__aeabi_dcmpeq>
 800d924:	2800      	cmp	r0, #0
 800d926:	d046      	beq.n	800d9b6 <pow+0xee>
 800d928:	2301      	movs	r3, #1
 800d92a:	9302      	str	r3, [sp, #8]
 800d92c:	4b96      	ldr	r3, [pc, #600]	; (800db88 <pow+0x2c0>)
 800d92e:	9303      	str	r3, [sp, #12]
 800d930:	4b96      	ldr	r3, [pc, #600]	; (800db8c <pow+0x2c4>)
 800d932:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d936:	2200      	movs	r2, #0
 800d938:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d93c:	9b00      	ldr	r3, [sp, #0]
 800d93e:	2b02      	cmp	r3, #2
 800d940:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d944:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d948:	d033      	beq.n	800d9b2 <pow+0xea>
 800d94a:	a802      	add	r0, sp, #8
 800d94c:	f000 ff57 	bl	800e7fe <matherr>
 800d950:	bb48      	cbnz	r0, 800d9a6 <pow+0xde>
 800d952:	e05d      	b.n	800da10 <pow+0x148>
 800d954:	f04f 0a00 	mov.w	sl, #0
 800d958:	f04f 0b00 	mov.w	fp, #0
 800d95c:	4652      	mov	r2, sl
 800d95e:	465b      	mov	r3, fp
 800d960:	4630      	mov	r0, r6
 800d962:	4639      	mov	r1, r7
 800d964:	f7f3 f85c 	bl	8000a20 <__aeabi_dcmpeq>
 800d968:	ec4b ab19 	vmov	d9, sl, fp
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d054      	beq.n	800da1a <pow+0x152>
 800d970:	4652      	mov	r2, sl
 800d972:	465b      	mov	r3, fp
 800d974:	4620      	mov	r0, r4
 800d976:	4629      	mov	r1, r5
 800d978:	f7f3 f852 	bl	8000a20 <__aeabi_dcmpeq>
 800d97c:	4680      	mov	r8, r0
 800d97e:	b318      	cbz	r0, 800d9c8 <pow+0x100>
 800d980:	2301      	movs	r3, #1
 800d982:	9302      	str	r3, [sp, #8]
 800d984:	4b80      	ldr	r3, [pc, #512]	; (800db88 <pow+0x2c0>)
 800d986:	9303      	str	r3, [sp, #12]
 800d988:	9b01      	ldr	r3, [sp, #4]
 800d98a:	930a      	str	r3, [sp, #40]	; 0x28
 800d98c:	9b00      	ldr	r3, [sp, #0]
 800d98e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d992:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d996:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d0d5      	beq.n	800d94a <pow+0x82>
 800d99e:	4b7b      	ldr	r3, [pc, #492]	; (800db8c <pow+0x2c4>)
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9a8:	b11b      	cbz	r3, 800d9b2 <pow+0xea>
 800d9aa:	f7fe f86b 	bl	800ba84 <__errno>
 800d9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9b0:	6003      	str	r3, [r0, #0]
 800d9b2:	ed9d 8b08 	vldr	d8, [sp, #32]
 800d9b6:	eeb0 0a48 	vmov.f32	s0, s16
 800d9ba:	eef0 0a68 	vmov.f32	s1, s17
 800d9be:	b00d      	add	sp, #52	; 0x34
 800d9c0:	ecbd 8b04 	vpop	{d8-d9}
 800d9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c8:	ec45 4b10 	vmov	d0, r4, r5
 800d9cc:	f000 ff0f 	bl	800e7ee <finite>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d0f0      	beq.n	800d9b6 <pow+0xee>
 800d9d4:	4652      	mov	r2, sl
 800d9d6:	465b      	mov	r3, fp
 800d9d8:	4620      	mov	r0, r4
 800d9da:	4629      	mov	r1, r5
 800d9dc:	f7f3 f82a 	bl	8000a34 <__aeabi_dcmplt>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d0e8      	beq.n	800d9b6 <pow+0xee>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	9302      	str	r3, [sp, #8]
 800d9e8:	4b67      	ldr	r3, [pc, #412]	; (800db88 <pow+0x2c0>)
 800d9ea:	9303      	str	r3, [sp, #12]
 800d9ec:	f999 3000 	ldrsb.w	r3, [r9]
 800d9f0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800d9f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d9f8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d9fc:	b913      	cbnz	r3, 800da04 <pow+0x13c>
 800d9fe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800da02:	e7a2      	b.n	800d94a <pow+0x82>
 800da04:	4962      	ldr	r1, [pc, #392]	; (800db90 <pow+0x2c8>)
 800da06:	2000      	movs	r0, #0
 800da08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da0c:	2b02      	cmp	r3, #2
 800da0e:	d19c      	bne.n	800d94a <pow+0x82>
 800da10:	f7fe f838 	bl	800ba84 <__errno>
 800da14:	2321      	movs	r3, #33	; 0x21
 800da16:	6003      	str	r3, [r0, #0]
 800da18:	e7c5      	b.n	800d9a6 <pow+0xde>
 800da1a:	eeb0 0a48 	vmov.f32	s0, s16
 800da1e:	eef0 0a68 	vmov.f32	s1, s17
 800da22:	f000 fee4 	bl	800e7ee <finite>
 800da26:	9000      	str	r0, [sp, #0]
 800da28:	2800      	cmp	r0, #0
 800da2a:	f040 8081 	bne.w	800db30 <pow+0x268>
 800da2e:	ec47 6b10 	vmov	d0, r6, r7
 800da32:	f000 fedc 	bl	800e7ee <finite>
 800da36:	2800      	cmp	r0, #0
 800da38:	d07a      	beq.n	800db30 <pow+0x268>
 800da3a:	ec45 4b10 	vmov	d0, r4, r5
 800da3e:	f000 fed6 	bl	800e7ee <finite>
 800da42:	2800      	cmp	r0, #0
 800da44:	d074      	beq.n	800db30 <pow+0x268>
 800da46:	ec53 2b18 	vmov	r2, r3, d8
 800da4a:	ee18 0a10 	vmov	r0, s16
 800da4e:	4619      	mov	r1, r3
 800da50:	f7f3 f818 	bl	8000a84 <__aeabi_dcmpun>
 800da54:	f999 9000 	ldrsb.w	r9, [r9]
 800da58:	4b4b      	ldr	r3, [pc, #300]	; (800db88 <pow+0x2c0>)
 800da5a:	b1b0      	cbz	r0, 800da8a <pow+0x1c2>
 800da5c:	2201      	movs	r2, #1
 800da5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da62:	9b00      	ldr	r3, [sp, #0]
 800da64:	930a      	str	r3, [sp, #40]	; 0x28
 800da66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800da6a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800da6e:	f1b9 0f00 	cmp.w	r9, #0
 800da72:	d0c4      	beq.n	800d9fe <pow+0x136>
 800da74:	4652      	mov	r2, sl
 800da76:	465b      	mov	r3, fp
 800da78:	4650      	mov	r0, sl
 800da7a:	4659      	mov	r1, fp
 800da7c:	f7f2 fe92 	bl	80007a4 <__aeabi_ddiv>
 800da80:	f1b9 0f02 	cmp.w	r9, #2
 800da84:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da88:	e7c1      	b.n	800da0e <pow+0x146>
 800da8a:	2203      	movs	r2, #3
 800da8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da90:	900a      	str	r0, [sp, #40]	; 0x28
 800da92:	4629      	mov	r1, r5
 800da94:	4620      	mov	r0, r4
 800da96:	2200      	movs	r2, #0
 800da98:	4b3e      	ldr	r3, [pc, #248]	; (800db94 <pow+0x2cc>)
 800da9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800da9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800daa2:	f7f2 fd55 	bl	8000550 <__aeabi_dmul>
 800daa6:	4604      	mov	r4, r0
 800daa8:	460d      	mov	r5, r1
 800daaa:	f1b9 0f00 	cmp.w	r9, #0
 800daae:	d124      	bne.n	800dafa <pow+0x232>
 800dab0:	4b39      	ldr	r3, [pc, #228]	; (800db98 <pow+0x2d0>)
 800dab2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800dab6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800daba:	4630      	mov	r0, r6
 800dabc:	4652      	mov	r2, sl
 800dabe:	465b      	mov	r3, fp
 800dac0:	4639      	mov	r1, r7
 800dac2:	f7f2 ffb7 	bl	8000a34 <__aeabi_dcmplt>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d056      	beq.n	800db78 <pow+0x2b0>
 800daca:	ec45 4b10 	vmov	d0, r4, r5
 800dace:	f000 fea3 	bl	800e818 <rint>
 800dad2:	4622      	mov	r2, r4
 800dad4:	462b      	mov	r3, r5
 800dad6:	ec51 0b10 	vmov	r0, r1, d0
 800dada:	f7f2 ffa1 	bl	8000a20 <__aeabi_dcmpeq>
 800dade:	b920      	cbnz	r0, 800daea <pow+0x222>
 800dae0:	4b2e      	ldr	r3, [pc, #184]	; (800db9c <pow+0x2d4>)
 800dae2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800dae6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800daea:	f998 3000 	ldrsb.w	r3, [r8]
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d142      	bne.n	800db78 <pow+0x2b0>
 800daf2:	f7fd ffc7 	bl	800ba84 <__errno>
 800daf6:	2322      	movs	r3, #34	; 0x22
 800daf8:	e78d      	b.n	800da16 <pow+0x14e>
 800dafa:	4b29      	ldr	r3, [pc, #164]	; (800dba0 <pow+0x2d8>)
 800dafc:	2200      	movs	r2, #0
 800dafe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800db02:	4630      	mov	r0, r6
 800db04:	4652      	mov	r2, sl
 800db06:	465b      	mov	r3, fp
 800db08:	4639      	mov	r1, r7
 800db0a:	f7f2 ff93 	bl	8000a34 <__aeabi_dcmplt>
 800db0e:	2800      	cmp	r0, #0
 800db10:	d0eb      	beq.n	800daea <pow+0x222>
 800db12:	ec45 4b10 	vmov	d0, r4, r5
 800db16:	f000 fe7f 	bl	800e818 <rint>
 800db1a:	4622      	mov	r2, r4
 800db1c:	462b      	mov	r3, r5
 800db1e:	ec51 0b10 	vmov	r0, r1, d0
 800db22:	f7f2 ff7d 	bl	8000a20 <__aeabi_dcmpeq>
 800db26:	2800      	cmp	r0, #0
 800db28:	d1df      	bne.n	800daea <pow+0x222>
 800db2a:	2200      	movs	r2, #0
 800db2c:	4b18      	ldr	r3, [pc, #96]	; (800db90 <pow+0x2c8>)
 800db2e:	e7da      	b.n	800dae6 <pow+0x21e>
 800db30:	2200      	movs	r2, #0
 800db32:	2300      	movs	r3, #0
 800db34:	ec51 0b18 	vmov	r0, r1, d8
 800db38:	f7f2 ff72 	bl	8000a20 <__aeabi_dcmpeq>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	f43f af3a 	beq.w	800d9b6 <pow+0xee>
 800db42:	ec47 6b10 	vmov	d0, r6, r7
 800db46:	f000 fe52 	bl	800e7ee <finite>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	f43f af33 	beq.w	800d9b6 <pow+0xee>
 800db50:	ec45 4b10 	vmov	d0, r4, r5
 800db54:	f000 fe4b 	bl	800e7ee <finite>
 800db58:	2800      	cmp	r0, #0
 800db5a:	f43f af2c 	beq.w	800d9b6 <pow+0xee>
 800db5e:	2304      	movs	r3, #4
 800db60:	9302      	str	r3, [sp, #8]
 800db62:	4b09      	ldr	r3, [pc, #36]	; (800db88 <pow+0x2c0>)
 800db64:	9303      	str	r3, [sp, #12]
 800db66:	2300      	movs	r3, #0
 800db68:	930a      	str	r3, [sp, #40]	; 0x28
 800db6a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800db6e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800db72:	ed8d 9b08 	vstr	d9, [sp, #32]
 800db76:	e7b8      	b.n	800daea <pow+0x222>
 800db78:	a802      	add	r0, sp, #8
 800db7a:	f000 fe40 	bl	800e7fe <matherr>
 800db7e:	2800      	cmp	r0, #0
 800db80:	f47f af11 	bne.w	800d9a6 <pow+0xde>
 800db84:	e7b5      	b.n	800daf2 <pow+0x22a>
 800db86:	bf00      	nop
 800db88:	0800ed1d 	.word	0x0800ed1d
 800db8c:	3ff00000 	.word	0x3ff00000
 800db90:	fff00000 	.word	0xfff00000
 800db94:	3fe00000 	.word	0x3fe00000
 800db98:	47efffff 	.word	0x47efffff
 800db9c:	c7efffff 	.word	0xc7efffff
 800dba0:	7ff00000 	.word	0x7ff00000
 800dba4:	200004a4 	.word	0x200004a4

0800dba8 <sqrt>:
 800dba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbac:	ed2d 8b02 	vpush	{d8}
 800dbb0:	b08b      	sub	sp, #44	; 0x2c
 800dbb2:	ec55 4b10 	vmov	r4, r5, d0
 800dbb6:	f000 fd61 	bl	800e67c <__ieee754_sqrt>
 800dbba:	4b26      	ldr	r3, [pc, #152]	; (800dc54 <sqrt+0xac>)
 800dbbc:	eeb0 8a40 	vmov.f32	s16, s0
 800dbc0:	eef0 8a60 	vmov.f32	s17, s1
 800dbc4:	f993 6000 	ldrsb.w	r6, [r3]
 800dbc8:	1c73      	adds	r3, r6, #1
 800dbca:	d02a      	beq.n	800dc22 <sqrt+0x7a>
 800dbcc:	4622      	mov	r2, r4
 800dbce:	462b      	mov	r3, r5
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	f7f2 ff56 	bl	8000a84 <__aeabi_dcmpun>
 800dbd8:	4607      	mov	r7, r0
 800dbda:	bb10      	cbnz	r0, 800dc22 <sqrt+0x7a>
 800dbdc:	f04f 0800 	mov.w	r8, #0
 800dbe0:	f04f 0900 	mov.w	r9, #0
 800dbe4:	4642      	mov	r2, r8
 800dbe6:	464b      	mov	r3, r9
 800dbe8:	4620      	mov	r0, r4
 800dbea:	4629      	mov	r1, r5
 800dbec:	f7f2 ff22 	bl	8000a34 <__aeabi_dcmplt>
 800dbf0:	b1b8      	cbz	r0, 800dc22 <sqrt+0x7a>
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	4b18      	ldr	r3, [pc, #96]	; (800dc58 <sqrt+0xb0>)
 800dbf8:	9301      	str	r3, [sp, #4]
 800dbfa:	9708      	str	r7, [sp, #32]
 800dbfc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800dc00:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800dc04:	b9b6      	cbnz	r6, 800dc34 <sqrt+0x8c>
 800dc06:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800dc0a:	4668      	mov	r0, sp
 800dc0c:	f000 fdf7 	bl	800e7fe <matherr>
 800dc10:	b1d0      	cbz	r0, 800dc48 <sqrt+0xa0>
 800dc12:	9b08      	ldr	r3, [sp, #32]
 800dc14:	b11b      	cbz	r3, 800dc1e <sqrt+0x76>
 800dc16:	f7fd ff35 	bl	800ba84 <__errno>
 800dc1a:	9b08      	ldr	r3, [sp, #32]
 800dc1c:	6003      	str	r3, [r0, #0]
 800dc1e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800dc22:	eeb0 0a48 	vmov.f32	s0, s16
 800dc26:	eef0 0a68 	vmov.f32	s1, s17
 800dc2a:	b00b      	add	sp, #44	; 0x2c
 800dc2c:	ecbd 8b02 	vpop	{d8}
 800dc30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc34:	4642      	mov	r2, r8
 800dc36:	464b      	mov	r3, r9
 800dc38:	4640      	mov	r0, r8
 800dc3a:	4649      	mov	r1, r9
 800dc3c:	f7f2 fdb2 	bl	80007a4 <__aeabi_ddiv>
 800dc40:	2e02      	cmp	r6, #2
 800dc42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dc46:	d1e0      	bne.n	800dc0a <sqrt+0x62>
 800dc48:	f7fd ff1c 	bl	800ba84 <__errno>
 800dc4c:	2321      	movs	r3, #33	; 0x21
 800dc4e:	6003      	str	r3, [r0, #0]
 800dc50:	e7df      	b.n	800dc12 <sqrt+0x6a>
 800dc52:	bf00      	nop
 800dc54:	200004a4 	.word	0x200004a4
 800dc58:	0800ed21 	.word	0x0800ed21
 800dc5c:	00000000 	.word	0x00000000

0800dc60 <__ieee754_pow>:
 800dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc64:	b091      	sub	sp, #68	; 0x44
 800dc66:	ed8d 1b00 	vstr	d1, [sp]
 800dc6a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800dc6e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800dc72:	ea58 0302 	orrs.w	r3, r8, r2
 800dc76:	ec57 6b10 	vmov	r6, r7, d0
 800dc7a:	f000 84be 	beq.w	800e5fa <__ieee754_pow+0x99a>
 800dc7e:	4b7a      	ldr	r3, [pc, #488]	; (800de68 <__ieee754_pow+0x208>)
 800dc80:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800dc84:	429c      	cmp	r4, r3
 800dc86:	463d      	mov	r5, r7
 800dc88:	ee10 aa10 	vmov	sl, s0
 800dc8c:	dc09      	bgt.n	800dca2 <__ieee754_pow+0x42>
 800dc8e:	d103      	bne.n	800dc98 <__ieee754_pow+0x38>
 800dc90:	b93e      	cbnz	r6, 800dca2 <__ieee754_pow+0x42>
 800dc92:	45a0      	cmp	r8, r4
 800dc94:	dc0d      	bgt.n	800dcb2 <__ieee754_pow+0x52>
 800dc96:	e001      	b.n	800dc9c <__ieee754_pow+0x3c>
 800dc98:	4598      	cmp	r8, r3
 800dc9a:	dc02      	bgt.n	800dca2 <__ieee754_pow+0x42>
 800dc9c:	4598      	cmp	r8, r3
 800dc9e:	d10e      	bne.n	800dcbe <__ieee754_pow+0x5e>
 800dca0:	b16a      	cbz	r2, 800dcbe <__ieee754_pow+0x5e>
 800dca2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dca6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dcaa:	ea54 030a 	orrs.w	r3, r4, sl
 800dcae:	f000 84a4 	beq.w	800e5fa <__ieee754_pow+0x99a>
 800dcb2:	486e      	ldr	r0, [pc, #440]	; (800de6c <__ieee754_pow+0x20c>)
 800dcb4:	b011      	add	sp, #68	; 0x44
 800dcb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcba:	f000 bda5 	b.w	800e808 <nan>
 800dcbe:	2d00      	cmp	r5, #0
 800dcc0:	da53      	bge.n	800dd6a <__ieee754_pow+0x10a>
 800dcc2:	4b6b      	ldr	r3, [pc, #428]	; (800de70 <__ieee754_pow+0x210>)
 800dcc4:	4598      	cmp	r8, r3
 800dcc6:	dc4d      	bgt.n	800dd64 <__ieee754_pow+0x104>
 800dcc8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dccc:	4598      	cmp	r8, r3
 800dcce:	dd4c      	ble.n	800dd6a <__ieee754_pow+0x10a>
 800dcd0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dcd4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dcd8:	2b14      	cmp	r3, #20
 800dcda:	dd26      	ble.n	800dd2a <__ieee754_pow+0xca>
 800dcdc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dce0:	fa22 f103 	lsr.w	r1, r2, r3
 800dce4:	fa01 f303 	lsl.w	r3, r1, r3
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d13e      	bne.n	800dd6a <__ieee754_pow+0x10a>
 800dcec:	f001 0101 	and.w	r1, r1, #1
 800dcf0:	f1c1 0b02 	rsb	fp, r1, #2
 800dcf4:	2a00      	cmp	r2, #0
 800dcf6:	d15b      	bne.n	800ddb0 <__ieee754_pow+0x150>
 800dcf8:	4b5b      	ldr	r3, [pc, #364]	; (800de68 <__ieee754_pow+0x208>)
 800dcfa:	4598      	cmp	r8, r3
 800dcfc:	d124      	bne.n	800dd48 <__ieee754_pow+0xe8>
 800dcfe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dd02:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dd06:	ea53 030a 	orrs.w	r3, r3, sl
 800dd0a:	f000 8476 	beq.w	800e5fa <__ieee754_pow+0x99a>
 800dd0e:	4b59      	ldr	r3, [pc, #356]	; (800de74 <__ieee754_pow+0x214>)
 800dd10:	429c      	cmp	r4, r3
 800dd12:	dd2d      	ble.n	800dd70 <__ieee754_pow+0x110>
 800dd14:	f1b9 0f00 	cmp.w	r9, #0
 800dd18:	f280 8473 	bge.w	800e602 <__ieee754_pow+0x9a2>
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	2100      	movs	r1, #0
 800dd20:	ec41 0b10 	vmov	d0, r0, r1
 800dd24:	b011      	add	sp, #68	; 0x44
 800dd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd2a:	2a00      	cmp	r2, #0
 800dd2c:	d13e      	bne.n	800ddac <__ieee754_pow+0x14c>
 800dd2e:	f1c3 0314 	rsb	r3, r3, #20
 800dd32:	fa48 f103 	asr.w	r1, r8, r3
 800dd36:	fa01 f303 	lsl.w	r3, r1, r3
 800dd3a:	4543      	cmp	r3, r8
 800dd3c:	f040 8469 	bne.w	800e612 <__ieee754_pow+0x9b2>
 800dd40:	f001 0101 	and.w	r1, r1, #1
 800dd44:	f1c1 0b02 	rsb	fp, r1, #2
 800dd48:	4b4b      	ldr	r3, [pc, #300]	; (800de78 <__ieee754_pow+0x218>)
 800dd4a:	4598      	cmp	r8, r3
 800dd4c:	d118      	bne.n	800dd80 <__ieee754_pow+0x120>
 800dd4e:	f1b9 0f00 	cmp.w	r9, #0
 800dd52:	f280 845a 	bge.w	800e60a <__ieee754_pow+0x9aa>
 800dd56:	4948      	ldr	r1, [pc, #288]	; (800de78 <__ieee754_pow+0x218>)
 800dd58:	4632      	mov	r2, r6
 800dd5a:	463b      	mov	r3, r7
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	f7f2 fd21 	bl	80007a4 <__aeabi_ddiv>
 800dd62:	e7dd      	b.n	800dd20 <__ieee754_pow+0xc0>
 800dd64:	f04f 0b02 	mov.w	fp, #2
 800dd68:	e7c4      	b.n	800dcf4 <__ieee754_pow+0x94>
 800dd6a:	f04f 0b00 	mov.w	fp, #0
 800dd6e:	e7c1      	b.n	800dcf4 <__ieee754_pow+0x94>
 800dd70:	f1b9 0f00 	cmp.w	r9, #0
 800dd74:	dad2      	bge.n	800dd1c <__ieee754_pow+0xbc>
 800dd76:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dd7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dd7e:	e7cf      	b.n	800dd20 <__ieee754_pow+0xc0>
 800dd80:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800dd84:	d106      	bne.n	800dd94 <__ieee754_pow+0x134>
 800dd86:	4632      	mov	r2, r6
 800dd88:	463b      	mov	r3, r7
 800dd8a:	4610      	mov	r0, r2
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	f7f2 fbdf 	bl	8000550 <__aeabi_dmul>
 800dd92:	e7c5      	b.n	800dd20 <__ieee754_pow+0xc0>
 800dd94:	4b39      	ldr	r3, [pc, #228]	; (800de7c <__ieee754_pow+0x21c>)
 800dd96:	4599      	cmp	r9, r3
 800dd98:	d10a      	bne.n	800ddb0 <__ieee754_pow+0x150>
 800dd9a:	2d00      	cmp	r5, #0
 800dd9c:	db08      	blt.n	800ddb0 <__ieee754_pow+0x150>
 800dd9e:	ec47 6b10 	vmov	d0, r6, r7
 800dda2:	b011      	add	sp, #68	; 0x44
 800dda4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda8:	f000 bc68 	b.w	800e67c <__ieee754_sqrt>
 800ddac:	f04f 0b00 	mov.w	fp, #0
 800ddb0:	ec47 6b10 	vmov	d0, r6, r7
 800ddb4:	f000 fd12 	bl	800e7dc <fabs>
 800ddb8:	ec51 0b10 	vmov	r0, r1, d0
 800ddbc:	f1ba 0f00 	cmp.w	sl, #0
 800ddc0:	d127      	bne.n	800de12 <__ieee754_pow+0x1b2>
 800ddc2:	b124      	cbz	r4, 800ddce <__ieee754_pow+0x16e>
 800ddc4:	4b2c      	ldr	r3, [pc, #176]	; (800de78 <__ieee754_pow+0x218>)
 800ddc6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d121      	bne.n	800de12 <__ieee754_pow+0x1b2>
 800ddce:	f1b9 0f00 	cmp.w	r9, #0
 800ddd2:	da05      	bge.n	800dde0 <__ieee754_pow+0x180>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	2000      	movs	r0, #0
 800ddda:	4927      	ldr	r1, [pc, #156]	; (800de78 <__ieee754_pow+0x218>)
 800dddc:	f7f2 fce2 	bl	80007a4 <__aeabi_ddiv>
 800dde0:	2d00      	cmp	r5, #0
 800dde2:	da9d      	bge.n	800dd20 <__ieee754_pow+0xc0>
 800dde4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dde8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ddec:	ea54 030b 	orrs.w	r3, r4, fp
 800ddf0:	d108      	bne.n	800de04 <__ieee754_pow+0x1a4>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	4610      	mov	r0, r2
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	f7f2 f9f1 	bl	80001e0 <__aeabi_dsub>
 800ddfe:	4602      	mov	r2, r0
 800de00:	460b      	mov	r3, r1
 800de02:	e7ac      	b.n	800dd5e <__ieee754_pow+0xfe>
 800de04:	f1bb 0f01 	cmp.w	fp, #1
 800de08:	d18a      	bne.n	800dd20 <__ieee754_pow+0xc0>
 800de0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de0e:	4619      	mov	r1, r3
 800de10:	e786      	b.n	800dd20 <__ieee754_pow+0xc0>
 800de12:	0fed      	lsrs	r5, r5, #31
 800de14:	1e6b      	subs	r3, r5, #1
 800de16:	930d      	str	r3, [sp, #52]	; 0x34
 800de18:	ea5b 0303 	orrs.w	r3, fp, r3
 800de1c:	d102      	bne.n	800de24 <__ieee754_pow+0x1c4>
 800de1e:	4632      	mov	r2, r6
 800de20:	463b      	mov	r3, r7
 800de22:	e7e8      	b.n	800ddf6 <__ieee754_pow+0x196>
 800de24:	4b16      	ldr	r3, [pc, #88]	; (800de80 <__ieee754_pow+0x220>)
 800de26:	4598      	cmp	r8, r3
 800de28:	f340 80fe 	ble.w	800e028 <__ieee754_pow+0x3c8>
 800de2c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800de30:	4598      	cmp	r8, r3
 800de32:	dd0a      	ble.n	800de4a <__ieee754_pow+0x1ea>
 800de34:	4b0f      	ldr	r3, [pc, #60]	; (800de74 <__ieee754_pow+0x214>)
 800de36:	429c      	cmp	r4, r3
 800de38:	dc0d      	bgt.n	800de56 <__ieee754_pow+0x1f6>
 800de3a:	f1b9 0f00 	cmp.w	r9, #0
 800de3e:	f6bf af6d 	bge.w	800dd1c <__ieee754_pow+0xbc>
 800de42:	a307      	add	r3, pc, #28	; (adr r3, 800de60 <__ieee754_pow+0x200>)
 800de44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de48:	e79f      	b.n	800dd8a <__ieee754_pow+0x12a>
 800de4a:	4b0e      	ldr	r3, [pc, #56]	; (800de84 <__ieee754_pow+0x224>)
 800de4c:	429c      	cmp	r4, r3
 800de4e:	ddf4      	ble.n	800de3a <__ieee754_pow+0x1da>
 800de50:	4b09      	ldr	r3, [pc, #36]	; (800de78 <__ieee754_pow+0x218>)
 800de52:	429c      	cmp	r4, r3
 800de54:	dd18      	ble.n	800de88 <__ieee754_pow+0x228>
 800de56:	f1b9 0f00 	cmp.w	r9, #0
 800de5a:	dcf2      	bgt.n	800de42 <__ieee754_pow+0x1e2>
 800de5c:	e75e      	b.n	800dd1c <__ieee754_pow+0xbc>
 800de5e:	bf00      	nop
 800de60:	8800759c 	.word	0x8800759c
 800de64:	7e37e43c 	.word	0x7e37e43c
 800de68:	7ff00000 	.word	0x7ff00000
 800de6c:	0800eb19 	.word	0x0800eb19
 800de70:	433fffff 	.word	0x433fffff
 800de74:	3fefffff 	.word	0x3fefffff
 800de78:	3ff00000 	.word	0x3ff00000
 800de7c:	3fe00000 	.word	0x3fe00000
 800de80:	41e00000 	.word	0x41e00000
 800de84:	3feffffe 	.word	0x3feffffe
 800de88:	2200      	movs	r2, #0
 800de8a:	4b63      	ldr	r3, [pc, #396]	; (800e018 <__ieee754_pow+0x3b8>)
 800de8c:	f7f2 f9a8 	bl	80001e0 <__aeabi_dsub>
 800de90:	a355      	add	r3, pc, #340	; (adr r3, 800dfe8 <__ieee754_pow+0x388>)
 800de92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de96:	4604      	mov	r4, r0
 800de98:	460d      	mov	r5, r1
 800de9a:	f7f2 fb59 	bl	8000550 <__aeabi_dmul>
 800de9e:	a354      	add	r3, pc, #336	; (adr r3, 800dff0 <__ieee754_pow+0x390>)
 800dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea4:	4606      	mov	r6, r0
 800dea6:	460f      	mov	r7, r1
 800dea8:	4620      	mov	r0, r4
 800deaa:	4629      	mov	r1, r5
 800deac:	f7f2 fb50 	bl	8000550 <__aeabi_dmul>
 800deb0:	2200      	movs	r2, #0
 800deb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800deb6:	4b59      	ldr	r3, [pc, #356]	; (800e01c <__ieee754_pow+0x3bc>)
 800deb8:	4620      	mov	r0, r4
 800deba:	4629      	mov	r1, r5
 800debc:	f7f2 fb48 	bl	8000550 <__aeabi_dmul>
 800dec0:	4602      	mov	r2, r0
 800dec2:	460b      	mov	r3, r1
 800dec4:	a14c      	add	r1, pc, #304	; (adr r1, 800dff8 <__ieee754_pow+0x398>)
 800dec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deca:	f7f2 f989 	bl	80001e0 <__aeabi_dsub>
 800dece:	4622      	mov	r2, r4
 800ded0:	462b      	mov	r3, r5
 800ded2:	f7f2 fb3d 	bl	8000550 <__aeabi_dmul>
 800ded6:	4602      	mov	r2, r0
 800ded8:	460b      	mov	r3, r1
 800deda:	2000      	movs	r0, #0
 800dedc:	4950      	ldr	r1, [pc, #320]	; (800e020 <__ieee754_pow+0x3c0>)
 800dede:	f7f2 f97f 	bl	80001e0 <__aeabi_dsub>
 800dee2:	4622      	mov	r2, r4
 800dee4:	462b      	mov	r3, r5
 800dee6:	4680      	mov	r8, r0
 800dee8:	4689      	mov	r9, r1
 800deea:	4620      	mov	r0, r4
 800deec:	4629      	mov	r1, r5
 800deee:	f7f2 fb2f 	bl	8000550 <__aeabi_dmul>
 800def2:	4602      	mov	r2, r0
 800def4:	460b      	mov	r3, r1
 800def6:	4640      	mov	r0, r8
 800def8:	4649      	mov	r1, r9
 800defa:	f7f2 fb29 	bl	8000550 <__aeabi_dmul>
 800defe:	a340      	add	r3, pc, #256	; (adr r3, 800e000 <__ieee754_pow+0x3a0>)
 800df00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df04:	f7f2 fb24 	bl	8000550 <__aeabi_dmul>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df10:	f7f2 f966 	bl	80001e0 <__aeabi_dsub>
 800df14:	4602      	mov	r2, r0
 800df16:	460b      	mov	r3, r1
 800df18:	4604      	mov	r4, r0
 800df1a:	460d      	mov	r5, r1
 800df1c:	4630      	mov	r0, r6
 800df1e:	4639      	mov	r1, r7
 800df20:	f7f2 f960 	bl	80001e4 <__adddf3>
 800df24:	2000      	movs	r0, #0
 800df26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df2a:	4632      	mov	r2, r6
 800df2c:	463b      	mov	r3, r7
 800df2e:	f7f2 f957 	bl	80001e0 <__aeabi_dsub>
 800df32:	4602      	mov	r2, r0
 800df34:	460b      	mov	r3, r1
 800df36:	4620      	mov	r0, r4
 800df38:	4629      	mov	r1, r5
 800df3a:	f7f2 f951 	bl	80001e0 <__aeabi_dsub>
 800df3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df40:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800df44:	4313      	orrs	r3, r2
 800df46:	4606      	mov	r6, r0
 800df48:	460f      	mov	r7, r1
 800df4a:	f040 81eb 	bne.w	800e324 <__ieee754_pow+0x6c4>
 800df4e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e008 <__ieee754_pow+0x3a8>
 800df52:	e9dd 4500 	ldrd	r4, r5, [sp]
 800df56:	2400      	movs	r4, #0
 800df58:	4622      	mov	r2, r4
 800df5a:	462b      	mov	r3, r5
 800df5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df60:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df64:	f7f2 f93c 	bl	80001e0 <__aeabi_dsub>
 800df68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df6c:	f7f2 faf0 	bl	8000550 <__aeabi_dmul>
 800df70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df74:	4680      	mov	r8, r0
 800df76:	4689      	mov	r9, r1
 800df78:	4630      	mov	r0, r6
 800df7a:	4639      	mov	r1, r7
 800df7c:	f7f2 fae8 	bl	8000550 <__aeabi_dmul>
 800df80:	4602      	mov	r2, r0
 800df82:	460b      	mov	r3, r1
 800df84:	4640      	mov	r0, r8
 800df86:	4649      	mov	r1, r9
 800df88:	f7f2 f92c 	bl	80001e4 <__adddf3>
 800df8c:	4622      	mov	r2, r4
 800df8e:	462b      	mov	r3, r5
 800df90:	4680      	mov	r8, r0
 800df92:	4689      	mov	r9, r1
 800df94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df98:	f7f2 fada 	bl	8000550 <__aeabi_dmul>
 800df9c:	460b      	mov	r3, r1
 800df9e:	4604      	mov	r4, r0
 800dfa0:	460d      	mov	r5, r1
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	4649      	mov	r1, r9
 800dfa6:	4640      	mov	r0, r8
 800dfa8:	e9cd 4500 	strd	r4, r5, [sp]
 800dfac:	f7f2 f91a 	bl	80001e4 <__adddf3>
 800dfb0:	4b1c      	ldr	r3, [pc, #112]	; (800e024 <__ieee754_pow+0x3c4>)
 800dfb2:	4299      	cmp	r1, r3
 800dfb4:	4606      	mov	r6, r0
 800dfb6:	460f      	mov	r7, r1
 800dfb8:	468b      	mov	fp, r1
 800dfba:	f340 82f7 	ble.w	800e5ac <__ieee754_pow+0x94c>
 800dfbe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dfc2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dfc6:	4303      	orrs	r3, r0
 800dfc8:	f000 81ea 	beq.w	800e3a0 <__ieee754_pow+0x740>
 800dfcc:	a310      	add	r3, pc, #64	; (adr r3, 800e010 <__ieee754_pow+0x3b0>)
 800dfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfd6:	f7f2 fabb 	bl	8000550 <__aeabi_dmul>
 800dfda:	a30d      	add	r3, pc, #52	; (adr r3, 800e010 <__ieee754_pow+0x3b0>)
 800dfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe0:	e6d5      	b.n	800dd8e <__ieee754_pow+0x12e>
 800dfe2:	bf00      	nop
 800dfe4:	f3af 8000 	nop.w
 800dfe8:	60000000 	.word	0x60000000
 800dfec:	3ff71547 	.word	0x3ff71547
 800dff0:	f85ddf44 	.word	0xf85ddf44
 800dff4:	3e54ae0b 	.word	0x3e54ae0b
 800dff8:	55555555 	.word	0x55555555
 800dffc:	3fd55555 	.word	0x3fd55555
 800e000:	652b82fe 	.word	0x652b82fe
 800e004:	3ff71547 	.word	0x3ff71547
 800e008:	00000000 	.word	0x00000000
 800e00c:	bff00000 	.word	0xbff00000
 800e010:	8800759c 	.word	0x8800759c
 800e014:	7e37e43c 	.word	0x7e37e43c
 800e018:	3ff00000 	.word	0x3ff00000
 800e01c:	3fd00000 	.word	0x3fd00000
 800e020:	3fe00000 	.word	0x3fe00000
 800e024:	408fffff 	.word	0x408fffff
 800e028:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e02c:	f04f 0200 	mov.w	r2, #0
 800e030:	da05      	bge.n	800e03e <__ieee754_pow+0x3de>
 800e032:	4bd3      	ldr	r3, [pc, #844]	; (800e380 <__ieee754_pow+0x720>)
 800e034:	f7f2 fa8c 	bl	8000550 <__aeabi_dmul>
 800e038:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e03c:	460c      	mov	r4, r1
 800e03e:	1523      	asrs	r3, r4, #20
 800e040:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e044:	4413      	add	r3, r2
 800e046:	9309      	str	r3, [sp, #36]	; 0x24
 800e048:	4bce      	ldr	r3, [pc, #824]	; (800e384 <__ieee754_pow+0x724>)
 800e04a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e04e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e052:	429c      	cmp	r4, r3
 800e054:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e058:	dd08      	ble.n	800e06c <__ieee754_pow+0x40c>
 800e05a:	4bcb      	ldr	r3, [pc, #812]	; (800e388 <__ieee754_pow+0x728>)
 800e05c:	429c      	cmp	r4, r3
 800e05e:	f340 815e 	ble.w	800e31e <__ieee754_pow+0x6be>
 800e062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e064:	3301      	adds	r3, #1
 800e066:	9309      	str	r3, [sp, #36]	; 0x24
 800e068:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e06c:	f04f 0a00 	mov.w	sl, #0
 800e070:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e074:	930c      	str	r3, [sp, #48]	; 0x30
 800e076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e078:	4bc4      	ldr	r3, [pc, #784]	; (800e38c <__ieee754_pow+0x72c>)
 800e07a:	4413      	add	r3, r2
 800e07c:	ed93 7b00 	vldr	d7, [r3]
 800e080:	4629      	mov	r1, r5
 800e082:	ec53 2b17 	vmov	r2, r3, d7
 800e086:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e08a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e08e:	f7f2 f8a7 	bl	80001e0 <__aeabi_dsub>
 800e092:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e096:	4606      	mov	r6, r0
 800e098:	460f      	mov	r7, r1
 800e09a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e09e:	f7f2 f8a1 	bl	80001e4 <__adddf3>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	49b9      	ldr	r1, [pc, #740]	; (800e390 <__ieee754_pow+0x730>)
 800e0aa:	f7f2 fb7b 	bl	80007a4 <__aeabi_ddiv>
 800e0ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	4639      	mov	r1, r7
 800e0ba:	f7f2 fa49 	bl	8000550 <__aeabi_dmul>
 800e0be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0c2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e0c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	9302      	str	r3, [sp, #8]
 800e0ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e0d2:	106d      	asrs	r5, r5, #1
 800e0d4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e0d8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e0dc:	2200      	movs	r2, #0
 800e0de:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e0e2:	4640      	mov	r0, r8
 800e0e4:	4649      	mov	r1, r9
 800e0e6:	4614      	mov	r4, r2
 800e0e8:	461d      	mov	r5, r3
 800e0ea:	f7f2 fa31 	bl	8000550 <__aeabi_dmul>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	4639      	mov	r1, r7
 800e0f6:	f7f2 f873 	bl	80001e0 <__aeabi_dsub>
 800e0fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e0fe:	4606      	mov	r6, r0
 800e100:	460f      	mov	r7, r1
 800e102:	4620      	mov	r0, r4
 800e104:	4629      	mov	r1, r5
 800e106:	f7f2 f86b 	bl	80001e0 <__aeabi_dsub>
 800e10a:	4602      	mov	r2, r0
 800e10c:	460b      	mov	r3, r1
 800e10e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e112:	f7f2 f865 	bl	80001e0 <__aeabi_dsub>
 800e116:	4642      	mov	r2, r8
 800e118:	464b      	mov	r3, r9
 800e11a:	f7f2 fa19 	bl	8000550 <__aeabi_dmul>
 800e11e:	4602      	mov	r2, r0
 800e120:	460b      	mov	r3, r1
 800e122:	4630      	mov	r0, r6
 800e124:	4639      	mov	r1, r7
 800e126:	f7f2 f85b 	bl	80001e0 <__aeabi_dsub>
 800e12a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e12e:	f7f2 fa0f 	bl	8000550 <__aeabi_dmul>
 800e132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e136:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e13a:	4610      	mov	r0, r2
 800e13c:	4619      	mov	r1, r3
 800e13e:	f7f2 fa07 	bl	8000550 <__aeabi_dmul>
 800e142:	a37b      	add	r3, pc, #492	; (adr r3, 800e330 <__ieee754_pow+0x6d0>)
 800e144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e148:	4604      	mov	r4, r0
 800e14a:	460d      	mov	r5, r1
 800e14c:	f7f2 fa00 	bl	8000550 <__aeabi_dmul>
 800e150:	a379      	add	r3, pc, #484	; (adr r3, 800e338 <__ieee754_pow+0x6d8>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	f7f2 f845 	bl	80001e4 <__adddf3>
 800e15a:	4622      	mov	r2, r4
 800e15c:	462b      	mov	r3, r5
 800e15e:	f7f2 f9f7 	bl	8000550 <__aeabi_dmul>
 800e162:	a377      	add	r3, pc, #476	; (adr r3, 800e340 <__ieee754_pow+0x6e0>)
 800e164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e168:	f7f2 f83c 	bl	80001e4 <__adddf3>
 800e16c:	4622      	mov	r2, r4
 800e16e:	462b      	mov	r3, r5
 800e170:	f7f2 f9ee 	bl	8000550 <__aeabi_dmul>
 800e174:	a374      	add	r3, pc, #464	; (adr r3, 800e348 <__ieee754_pow+0x6e8>)
 800e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17a:	f7f2 f833 	bl	80001e4 <__adddf3>
 800e17e:	4622      	mov	r2, r4
 800e180:	462b      	mov	r3, r5
 800e182:	f7f2 f9e5 	bl	8000550 <__aeabi_dmul>
 800e186:	a372      	add	r3, pc, #456	; (adr r3, 800e350 <__ieee754_pow+0x6f0>)
 800e188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18c:	f7f2 f82a 	bl	80001e4 <__adddf3>
 800e190:	4622      	mov	r2, r4
 800e192:	462b      	mov	r3, r5
 800e194:	f7f2 f9dc 	bl	8000550 <__aeabi_dmul>
 800e198:	a36f      	add	r3, pc, #444	; (adr r3, 800e358 <__ieee754_pow+0x6f8>)
 800e19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19e:	f7f2 f821 	bl	80001e4 <__adddf3>
 800e1a2:	4622      	mov	r2, r4
 800e1a4:	4606      	mov	r6, r0
 800e1a6:	460f      	mov	r7, r1
 800e1a8:	462b      	mov	r3, r5
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	4629      	mov	r1, r5
 800e1ae:	f7f2 f9cf 	bl	8000550 <__aeabi_dmul>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	4639      	mov	r1, r7
 800e1ba:	f7f2 f9c9 	bl	8000550 <__aeabi_dmul>
 800e1be:	4642      	mov	r2, r8
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	460d      	mov	r5, r1
 800e1c4:	464b      	mov	r3, r9
 800e1c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1ca:	f7f2 f80b 	bl	80001e4 <__adddf3>
 800e1ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1d2:	f7f2 f9bd 	bl	8000550 <__aeabi_dmul>
 800e1d6:	4622      	mov	r2, r4
 800e1d8:	462b      	mov	r3, r5
 800e1da:	f7f2 f803 	bl	80001e4 <__adddf3>
 800e1de:	4642      	mov	r2, r8
 800e1e0:	4606      	mov	r6, r0
 800e1e2:	460f      	mov	r7, r1
 800e1e4:	464b      	mov	r3, r9
 800e1e6:	4640      	mov	r0, r8
 800e1e8:	4649      	mov	r1, r9
 800e1ea:	f7f2 f9b1 	bl	8000550 <__aeabi_dmul>
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	4b68      	ldr	r3, [pc, #416]	; (800e394 <__ieee754_pow+0x734>)
 800e1f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e1f6:	f7f1 fff5 	bl	80001e4 <__adddf3>
 800e1fa:	4632      	mov	r2, r6
 800e1fc:	463b      	mov	r3, r7
 800e1fe:	f7f1 fff1 	bl	80001e4 <__adddf3>
 800e202:	9802      	ldr	r0, [sp, #8]
 800e204:	460d      	mov	r5, r1
 800e206:	4604      	mov	r4, r0
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	4640      	mov	r0, r8
 800e20e:	4649      	mov	r1, r9
 800e210:	f7f2 f99e 	bl	8000550 <__aeabi_dmul>
 800e214:	2200      	movs	r2, #0
 800e216:	4680      	mov	r8, r0
 800e218:	4689      	mov	r9, r1
 800e21a:	4b5e      	ldr	r3, [pc, #376]	; (800e394 <__ieee754_pow+0x734>)
 800e21c:	4620      	mov	r0, r4
 800e21e:	4629      	mov	r1, r5
 800e220:	f7f1 ffde 	bl	80001e0 <__aeabi_dsub>
 800e224:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e228:	f7f1 ffda 	bl	80001e0 <__aeabi_dsub>
 800e22c:	4602      	mov	r2, r0
 800e22e:	460b      	mov	r3, r1
 800e230:	4630      	mov	r0, r6
 800e232:	4639      	mov	r1, r7
 800e234:	f7f1 ffd4 	bl	80001e0 <__aeabi_dsub>
 800e238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e23c:	f7f2 f988 	bl	8000550 <__aeabi_dmul>
 800e240:	4622      	mov	r2, r4
 800e242:	4606      	mov	r6, r0
 800e244:	460f      	mov	r7, r1
 800e246:	462b      	mov	r3, r5
 800e248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e24c:	f7f2 f980 	bl	8000550 <__aeabi_dmul>
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	4630      	mov	r0, r6
 800e256:	4639      	mov	r1, r7
 800e258:	f7f1 ffc4 	bl	80001e4 <__adddf3>
 800e25c:	4606      	mov	r6, r0
 800e25e:	460f      	mov	r7, r1
 800e260:	4602      	mov	r2, r0
 800e262:	460b      	mov	r3, r1
 800e264:	4640      	mov	r0, r8
 800e266:	4649      	mov	r1, r9
 800e268:	f7f1 ffbc 	bl	80001e4 <__adddf3>
 800e26c:	9802      	ldr	r0, [sp, #8]
 800e26e:	a33c      	add	r3, pc, #240	; (adr r3, 800e360 <__ieee754_pow+0x700>)
 800e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e274:	4604      	mov	r4, r0
 800e276:	460d      	mov	r5, r1
 800e278:	f7f2 f96a 	bl	8000550 <__aeabi_dmul>
 800e27c:	4642      	mov	r2, r8
 800e27e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e282:	464b      	mov	r3, r9
 800e284:	4620      	mov	r0, r4
 800e286:	4629      	mov	r1, r5
 800e288:	f7f1 ffaa 	bl	80001e0 <__aeabi_dsub>
 800e28c:	4602      	mov	r2, r0
 800e28e:	460b      	mov	r3, r1
 800e290:	4630      	mov	r0, r6
 800e292:	4639      	mov	r1, r7
 800e294:	f7f1 ffa4 	bl	80001e0 <__aeabi_dsub>
 800e298:	a333      	add	r3, pc, #204	; (adr r3, 800e368 <__ieee754_pow+0x708>)
 800e29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29e:	f7f2 f957 	bl	8000550 <__aeabi_dmul>
 800e2a2:	a333      	add	r3, pc, #204	; (adr r3, 800e370 <__ieee754_pow+0x710>)
 800e2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	460f      	mov	r7, r1
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	4629      	mov	r1, r5
 800e2b0:	f7f2 f94e 	bl	8000550 <__aeabi_dmul>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	4639      	mov	r1, r7
 800e2bc:	f7f1 ff92 	bl	80001e4 <__adddf3>
 800e2c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2c2:	4b35      	ldr	r3, [pc, #212]	; (800e398 <__ieee754_pow+0x738>)
 800e2c4:	4413      	add	r3, r2
 800e2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ca:	f7f1 ff8b 	bl	80001e4 <__adddf3>
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	f7f2 f8d2 	bl	800047c <__aeabi_i2d>
 800e2d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2da:	4b30      	ldr	r3, [pc, #192]	; (800e39c <__ieee754_pow+0x73c>)
 800e2dc:	4413      	add	r3, r2
 800e2de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	460f      	mov	r7, r1
 800e2e6:	4622      	mov	r2, r4
 800e2e8:	462b      	mov	r3, r5
 800e2ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2ee:	f7f1 ff79 	bl	80001e4 <__adddf3>
 800e2f2:	4642      	mov	r2, r8
 800e2f4:	464b      	mov	r3, r9
 800e2f6:	f7f1 ff75 	bl	80001e4 <__adddf3>
 800e2fa:	4632      	mov	r2, r6
 800e2fc:	463b      	mov	r3, r7
 800e2fe:	f7f1 ff71 	bl	80001e4 <__adddf3>
 800e302:	9802      	ldr	r0, [sp, #8]
 800e304:	4632      	mov	r2, r6
 800e306:	463b      	mov	r3, r7
 800e308:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e30c:	f7f1 ff68 	bl	80001e0 <__aeabi_dsub>
 800e310:	4642      	mov	r2, r8
 800e312:	464b      	mov	r3, r9
 800e314:	f7f1 ff64 	bl	80001e0 <__aeabi_dsub>
 800e318:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e31c:	e607      	b.n	800df2e <__ieee754_pow+0x2ce>
 800e31e:	f04f 0a01 	mov.w	sl, #1
 800e322:	e6a5      	b.n	800e070 <__ieee754_pow+0x410>
 800e324:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e378 <__ieee754_pow+0x718>
 800e328:	e613      	b.n	800df52 <__ieee754_pow+0x2f2>
 800e32a:	bf00      	nop
 800e32c:	f3af 8000 	nop.w
 800e330:	4a454eef 	.word	0x4a454eef
 800e334:	3fca7e28 	.word	0x3fca7e28
 800e338:	93c9db65 	.word	0x93c9db65
 800e33c:	3fcd864a 	.word	0x3fcd864a
 800e340:	a91d4101 	.word	0xa91d4101
 800e344:	3fd17460 	.word	0x3fd17460
 800e348:	518f264d 	.word	0x518f264d
 800e34c:	3fd55555 	.word	0x3fd55555
 800e350:	db6fabff 	.word	0xdb6fabff
 800e354:	3fdb6db6 	.word	0x3fdb6db6
 800e358:	33333303 	.word	0x33333303
 800e35c:	3fe33333 	.word	0x3fe33333
 800e360:	e0000000 	.word	0xe0000000
 800e364:	3feec709 	.word	0x3feec709
 800e368:	dc3a03fd 	.word	0xdc3a03fd
 800e36c:	3feec709 	.word	0x3feec709
 800e370:	145b01f5 	.word	0x145b01f5
 800e374:	be3e2fe0 	.word	0xbe3e2fe0
 800e378:	00000000 	.word	0x00000000
 800e37c:	3ff00000 	.word	0x3ff00000
 800e380:	43400000 	.word	0x43400000
 800e384:	0003988e 	.word	0x0003988e
 800e388:	000bb679 	.word	0x000bb679
 800e38c:	0800ed28 	.word	0x0800ed28
 800e390:	3ff00000 	.word	0x3ff00000
 800e394:	40080000 	.word	0x40080000
 800e398:	0800ed48 	.word	0x0800ed48
 800e39c:	0800ed38 	.word	0x0800ed38
 800e3a0:	a3b4      	add	r3, pc, #720	; (adr r3, 800e674 <__ieee754_pow+0xa14>)
 800e3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a6:	4640      	mov	r0, r8
 800e3a8:	4649      	mov	r1, r9
 800e3aa:	f7f1 ff1b 	bl	80001e4 <__adddf3>
 800e3ae:	4622      	mov	r2, r4
 800e3b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3b4:	462b      	mov	r3, r5
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	4639      	mov	r1, r7
 800e3ba:	f7f1 ff11 	bl	80001e0 <__aeabi_dsub>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3c6:	f7f2 fb53 	bl	8000a70 <__aeabi_dcmpgt>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	f47f adfe 	bne.w	800dfcc <__ieee754_pow+0x36c>
 800e3d0:	4aa3      	ldr	r2, [pc, #652]	; (800e660 <__ieee754_pow+0xa00>)
 800e3d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	f340 810a 	ble.w	800e5f0 <__ieee754_pow+0x990>
 800e3dc:	151b      	asrs	r3, r3, #20
 800e3de:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e3e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e3e6:	fa4a f303 	asr.w	r3, sl, r3
 800e3ea:	445b      	add	r3, fp
 800e3ec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e3f0:	4e9c      	ldr	r6, [pc, #624]	; (800e664 <__ieee754_pow+0xa04>)
 800e3f2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e3f6:	4116      	asrs	r6, r2
 800e3f8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	ea23 0106 	bic.w	r1, r3, r6
 800e402:	f1c2 0214 	rsb	r2, r2, #20
 800e406:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e40a:	fa4a fa02 	asr.w	sl, sl, r2
 800e40e:	f1bb 0f00 	cmp.w	fp, #0
 800e412:	4602      	mov	r2, r0
 800e414:	460b      	mov	r3, r1
 800e416:	4620      	mov	r0, r4
 800e418:	4629      	mov	r1, r5
 800e41a:	bfb8      	it	lt
 800e41c:	f1ca 0a00 	rsblt	sl, sl, #0
 800e420:	f7f1 fede 	bl	80001e0 <__aeabi_dsub>
 800e424:	e9cd 0100 	strd	r0, r1, [sp]
 800e428:	4642      	mov	r2, r8
 800e42a:	464b      	mov	r3, r9
 800e42c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e430:	f7f1 fed8 	bl	80001e4 <__adddf3>
 800e434:	2000      	movs	r0, #0
 800e436:	a378      	add	r3, pc, #480	; (adr r3, 800e618 <__ieee754_pow+0x9b8>)
 800e438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43c:	4604      	mov	r4, r0
 800e43e:	460d      	mov	r5, r1
 800e440:	f7f2 f886 	bl	8000550 <__aeabi_dmul>
 800e444:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e448:	4606      	mov	r6, r0
 800e44a:	460f      	mov	r7, r1
 800e44c:	4620      	mov	r0, r4
 800e44e:	4629      	mov	r1, r5
 800e450:	f7f1 fec6 	bl	80001e0 <__aeabi_dsub>
 800e454:	4602      	mov	r2, r0
 800e456:	460b      	mov	r3, r1
 800e458:	4640      	mov	r0, r8
 800e45a:	4649      	mov	r1, r9
 800e45c:	f7f1 fec0 	bl	80001e0 <__aeabi_dsub>
 800e460:	a36f      	add	r3, pc, #444	; (adr r3, 800e620 <__ieee754_pow+0x9c0>)
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f7f2 f873 	bl	8000550 <__aeabi_dmul>
 800e46a:	a36f      	add	r3, pc, #444	; (adr r3, 800e628 <__ieee754_pow+0x9c8>)
 800e46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e470:	4680      	mov	r8, r0
 800e472:	4689      	mov	r9, r1
 800e474:	4620      	mov	r0, r4
 800e476:	4629      	mov	r1, r5
 800e478:	f7f2 f86a 	bl	8000550 <__aeabi_dmul>
 800e47c:	4602      	mov	r2, r0
 800e47e:	460b      	mov	r3, r1
 800e480:	4640      	mov	r0, r8
 800e482:	4649      	mov	r1, r9
 800e484:	f7f1 feae 	bl	80001e4 <__adddf3>
 800e488:	4604      	mov	r4, r0
 800e48a:	460d      	mov	r5, r1
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	4630      	mov	r0, r6
 800e492:	4639      	mov	r1, r7
 800e494:	f7f1 fea6 	bl	80001e4 <__adddf3>
 800e498:	4632      	mov	r2, r6
 800e49a:	463b      	mov	r3, r7
 800e49c:	4680      	mov	r8, r0
 800e49e:	4689      	mov	r9, r1
 800e4a0:	f7f1 fe9e 	bl	80001e0 <__aeabi_dsub>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	f7f1 fe98 	bl	80001e0 <__aeabi_dsub>
 800e4b0:	4642      	mov	r2, r8
 800e4b2:	4606      	mov	r6, r0
 800e4b4:	460f      	mov	r7, r1
 800e4b6:	464b      	mov	r3, r9
 800e4b8:	4640      	mov	r0, r8
 800e4ba:	4649      	mov	r1, r9
 800e4bc:	f7f2 f848 	bl	8000550 <__aeabi_dmul>
 800e4c0:	a35b      	add	r3, pc, #364	; (adr r3, 800e630 <__ieee754_pow+0x9d0>)
 800e4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	460d      	mov	r5, r1
 800e4ca:	f7f2 f841 	bl	8000550 <__aeabi_dmul>
 800e4ce:	a35a      	add	r3, pc, #360	; (adr r3, 800e638 <__ieee754_pow+0x9d8>)
 800e4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d4:	f7f1 fe84 	bl	80001e0 <__aeabi_dsub>
 800e4d8:	4622      	mov	r2, r4
 800e4da:	462b      	mov	r3, r5
 800e4dc:	f7f2 f838 	bl	8000550 <__aeabi_dmul>
 800e4e0:	a357      	add	r3, pc, #348	; (adr r3, 800e640 <__ieee754_pow+0x9e0>)
 800e4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e6:	f7f1 fe7d 	bl	80001e4 <__adddf3>
 800e4ea:	4622      	mov	r2, r4
 800e4ec:	462b      	mov	r3, r5
 800e4ee:	f7f2 f82f 	bl	8000550 <__aeabi_dmul>
 800e4f2:	a355      	add	r3, pc, #340	; (adr r3, 800e648 <__ieee754_pow+0x9e8>)
 800e4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f8:	f7f1 fe72 	bl	80001e0 <__aeabi_dsub>
 800e4fc:	4622      	mov	r2, r4
 800e4fe:	462b      	mov	r3, r5
 800e500:	f7f2 f826 	bl	8000550 <__aeabi_dmul>
 800e504:	a352      	add	r3, pc, #328	; (adr r3, 800e650 <__ieee754_pow+0x9f0>)
 800e506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50a:	f7f1 fe6b 	bl	80001e4 <__adddf3>
 800e50e:	4622      	mov	r2, r4
 800e510:	462b      	mov	r3, r5
 800e512:	f7f2 f81d 	bl	8000550 <__aeabi_dmul>
 800e516:	4602      	mov	r2, r0
 800e518:	460b      	mov	r3, r1
 800e51a:	4640      	mov	r0, r8
 800e51c:	4649      	mov	r1, r9
 800e51e:	f7f1 fe5f 	bl	80001e0 <__aeabi_dsub>
 800e522:	4604      	mov	r4, r0
 800e524:	460d      	mov	r5, r1
 800e526:	4602      	mov	r2, r0
 800e528:	460b      	mov	r3, r1
 800e52a:	4640      	mov	r0, r8
 800e52c:	4649      	mov	r1, r9
 800e52e:	f7f2 f80f 	bl	8000550 <__aeabi_dmul>
 800e532:	2200      	movs	r2, #0
 800e534:	e9cd 0100 	strd	r0, r1, [sp]
 800e538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e53c:	4620      	mov	r0, r4
 800e53e:	4629      	mov	r1, r5
 800e540:	f7f1 fe4e 	bl	80001e0 <__aeabi_dsub>
 800e544:	4602      	mov	r2, r0
 800e546:	460b      	mov	r3, r1
 800e548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e54c:	f7f2 f92a 	bl	80007a4 <__aeabi_ddiv>
 800e550:	4632      	mov	r2, r6
 800e552:	4604      	mov	r4, r0
 800e554:	460d      	mov	r5, r1
 800e556:	463b      	mov	r3, r7
 800e558:	4640      	mov	r0, r8
 800e55a:	4649      	mov	r1, r9
 800e55c:	f7f1 fff8 	bl	8000550 <__aeabi_dmul>
 800e560:	4632      	mov	r2, r6
 800e562:	463b      	mov	r3, r7
 800e564:	f7f1 fe3e 	bl	80001e4 <__adddf3>
 800e568:	4602      	mov	r2, r0
 800e56a:	460b      	mov	r3, r1
 800e56c:	4620      	mov	r0, r4
 800e56e:	4629      	mov	r1, r5
 800e570:	f7f1 fe36 	bl	80001e0 <__aeabi_dsub>
 800e574:	4642      	mov	r2, r8
 800e576:	464b      	mov	r3, r9
 800e578:	f7f1 fe32 	bl	80001e0 <__aeabi_dsub>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	2000      	movs	r0, #0
 800e582:	4939      	ldr	r1, [pc, #228]	; (800e668 <__ieee754_pow+0xa08>)
 800e584:	f7f1 fe2c 	bl	80001e0 <__aeabi_dsub>
 800e588:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800e58c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e590:	4602      	mov	r2, r0
 800e592:	460b      	mov	r3, r1
 800e594:	da2f      	bge.n	800e5f6 <__ieee754_pow+0x996>
 800e596:	4650      	mov	r0, sl
 800e598:	ec43 2b10 	vmov	d0, r2, r3
 800e59c:	f000 f9c0 	bl	800e920 <scalbn>
 800e5a0:	ec51 0b10 	vmov	r0, r1, d0
 800e5a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5a8:	f7ff bbf1 	b.w	800dd8e <__ieee754_pow+0x12e>
 800e5ac:	4b2f      	ldr	r3, [pc, #188]	; (800e66c <__ieee754_pow+0xa0c>)
 800e5ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e5b2:	429e      	cmp	r6, r3
 800e5b4:	f77f af0c 	ble.w	800e3d0 <__ieee754_pow+0x770>
 800e5b8:	4b2d      	ldr	r3, [pc, #180]	; (800e670 <__ieee754_pow+0xa10>)
 800e5ba:	440b      	add	r3, r1
 800e5bc:	4303      	orrs	r3, r0
 800e5be:	d00b      	beq.n	800e5d8 <__ieee754_pow+0x978>
 800e5c0:	a325      	add	r3, pc, #148	; (adr r3, 800e658 <__ieee754_pow+0x9f8>)
 800e5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5ca:	f7f1 ffc1 	bl	8000550 <__aeabi_dmul>
 800e5ce:	a322      	add	r3, pc, #136	; (adr r3, 800e658 <__ieee754_pow+0x9f8>)
 800e5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d4:	f7ff bbdb 	b.w	800dd8e <__ieee754_pow+0x12e>
 800e5d8:	4622      	mov	r2, r4
 800e5da:	462b      	mov	r3, r5
 800e5dc:	f7f1 fe00 	bl	80001e0 <__aeabi_dsub>
 800e5e0:	4642      	mov	r2, r8
 800e5e2:	464b      	mov	r3, r9
 800e5e4:	f7f2 fa3a 	bl	8000a5c <__aeabi_dcmpge>
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	f43f aef1 	beq.w	800e3d0 <__ieee754_pow+0x770>
 800e5ee:	e7e7      	b.n	800e5c0 <__ieee754_pow+0x960>
 800e5f0:	f04f 0a00 	mov.w	sl, #0
 800e5f4:	e718      	b.n	800e428 <__ieee754_pow+0x7c8>
 800e5f6:	4621      	mov	r1, r4
 800e5f8:	e7d4      	b.n	800e5a4 <__ieee754_pow+0x944>
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	491a      	ldr	r1, [pc, #104]	; (800e668 <__ieee754_pow+0xa08>)
 800e5fe:	f7ff bb8f 	b.w	800dd20 <__ieee754_pow+0xc0>
 800e602:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e606:	f7ff bb8b 	b.w	800dd20 <__ieee754_pow+0xc0>
 800e60a:	4630      	mov	r0, r6
 800e60c:	4639      	mov	r1, r7
 800e60e:	f7ff bb87 	b.w	800dd20 <__ieee754_pow+0xc0>
 800e612:	4693      	mov	fp, r2
 800e614:	f7ff bb98 	b.w	800dd48 <__ieee754_pow+0xe8>
 800e618:	00000000 	.word	0x00000000
 800e61c:	3fe62e43 	.word	0x3fe62e43
 800e620:	fefa39ef 	.word	0xfefa39ef
 800e624:	3fe62e42 	.word	0x3fe62e42
 800e628:	0ca86c39 	.word	0x0ca86c39
 800e62c:	be205c61 	.word	0xbe205c61
 800e630:	72bea4d0 	.word	0x72bea4d0
 800e634:	3e663769 	.word	0x3e663769
 800e638:	c5d26bf1 	.word	0xc5d26bf1
 800e63c:	3ebbbd41 	.word	0x3ebbbd41
 800e640:	af25de2c 	.word	0xaf25de2c
 800e644:	3f11566a 	.word	0x3f11566a
 800e648:	16bebd93 	.word	0x16bebd93
 800e64c:	3f66c16c 	.word	0x3f66c16c
 800e650:	5555553e 	.word	0x5555553e
 800e654:	3fc55555 	.word	0x3fc55555
 800e658:	c2f8f359 	.word	0xc2f8f359
 800e65c:	01a56e1f 	.word	0x01a56e1f
 800e660:	3fe00000 	.word	0x3fe00000
 800e664:	000fffff 	.word	0x000fffff
 800e668:	3ff00000 	.word	0x3ff00000
 800e66c:	4090cbff 	.word	0x4090cbff
 800e670:	3f6f3400 	.word	0x3f6f3400
 800e674:	652b82fe 	.word	0x652b82fe
 800e678:	3c971547 	.word	0x3c971547

0800e67c <__ieee754_sqrt>:
 800e67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e680:	4955      	ldr	r1, [pc, #340]	; (800e7d8 <__ieee754_sqrt+0x15c>)
 800e682:	ec55 4b10 	vmov	r4, r5, d0
 800e686:	43a9      	bics	r1, r5
 800e688:	462b      	mov	r3, r5
 800e68a:	462a      	mov	r2, r5
 800e68c:	d112      	bne.n	800e6b4 <__ieee754_sqrt+0x38>
 800e68e:	ee10 2a10 	vmov	r2, s0
 800e692:	ee10 0a10 	vmov	r0, s0
 800e696:	4629      	mov	r1, r5
 800e698:	f7f1 ff5a 	bl	8000550 <__aeabi_dmul>
 800e69c:	4602      	mov	r2, r0
 800e69e:	460b      	mov	r3, r1
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	4629      	mov	r1, r5
 800e6a4:	f7f1 fd9e 	bl	80001e4 <__adddf3>
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	460d      	mov	r5, r1
 800e6ac:	ec45 4b10 	vmov	d0, r4, r5
 800e6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6b4:	2d00      	cmp	r5, #0
 800e6b6:	ee10 0a10 	vmov	r0, s0
 800e6ba:	4621      	mov	r1, r4
 800e6bc:	dc0f      	bgt.n	800e6de <__ieee754_sqrt+0x62>
 800e6be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e6c2:	4330      	orrs	r0, r6
 800e6c4:	d0f2      	beq.n	800e6ac <__ieee754_sqrt+0x30>
 800e6c6:	b155      	cbz	r5, 800e6de <__ieee754_sqrt+0x62>
 800e6c8:	ee10 2a10 	vmov	r2, s0
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	f7f1 fd86 	bl	80001e0 <__aeabi_dsub>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	f7f2 f864 	bl	80007a4 <__aeabi_ddiv>
 800e6dc:	e7e4      	b.n	800e6a8 <__ieee754_sqrt+0x2c>
 800e6de:	151b      	asrs	r3, r3, #20
 800e6e0:	d073      	beq.n	800e7ca <__ieee754_sqrt+0x14e>
 800e6e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e6e6:	07dd      	lsls	r5, r3, #31
 800e6e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e6ec:	bf48      	it	mi
 800e6ee:	0fc8      	lsrmi	r0, r1, #31
 800e6f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e6f4:	bf44      	itt	mi
 800e6f6:	0049      	lslmi	r1, r1, #1
 800e6f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800e6fc:	2500      	movs	r5, #0
 800e6fe:	1058      	asrs	r0, r3, #1
 800e700:	0fcb      	lsrs	r3, r1, #31
 800e702:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800e706:	0049      	lsls	r1, r1, #1
 800e708:	2316      	movs	r3, #22
 800e70a:	462c      	mov	r4, r5
 800e70c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800e710:	19a7      	adds	r7, r4, r6
 800e712:	4297      	cmp	r7, r2
 800e714:	bfde      	ittt	le
 800e716:	19bc      	addle	r4, r7, r6
 800e718:	1bd2      	suble	r2, r2, r7
 800e71a:	19ad      	addle	r5, r5, r6
 800e71c:	0fcf      	lsrs	r7, r1, #31
 800e71e:	3b01      	subs	r3, #1
 800e720:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800e724:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e728:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e72c:	d1f0      	bne.n	800e710 <__ieee754_sqrt+0x94>
 800e72e:	f04f 0c20 	mov.w	ip, #32
 800e732:	469e      	mov	lr, r3
 800e734:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e738:	42a2      	cmp	r2, r4
 800e73a:	eb06 070e 	add.w	r7, r6, lr
 800e73e:	dc02      	bgt.n	800e746 <__ieee754_sqrt+0xca>
 800e740:	d112      	bne.n	800e768 <__ieee754_sqrt+0xec>
 800e742:	428f      	cmp	r7, r1
 800e744:	d810      	bhi.n	800e768 <__ieee754_sqrt+0xec>
 800e746:	2f00      	cmp	r7, #0
 800e748:	eb07 0e06 	add.w	lr, r7, r6
 800e74c:	da42      	bge.n	800e7d4 <__ieee754_sqrt+0x158>
 800e74e:	f1be 0f00 	cmp.w	lr, #0
 800e752:	db3f      	blt.n	800e7d4 <__ieee754_sqrt+0x158>
 800e754:	f104 0801 	add.w	r8, r4, #1
 800e758:	1b12      	subs	r2, r2, r4
 800e75a:	428f      	cmp	r7, r1
 800e75c:	bf88      	it	hi
 800e75e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800e762:	1bc9      	subs	r1, r1, r7
 800e764:	4433      	add	r3, r6
 800e766:	4644      	mov	r4, r8
 800e768:	0052      	lsls	r2, r2, #1
 800e76a:	f1bc 0c01 	subs.w	ip, ip, #1
 800e76e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800e772:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e776:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e77a:	d1dd      	bne.n	800e738 <__ieee754_sqrt+0xbc>
 800e77c:	430a      	orrs	r2, r1
 800e77e:	d006      	beq.n	800e78e <__ieee754_sqrt+0x112>
 800e780:	1c5c      	adds	r4, r3, #1
 800e782:	bf13      	iteet	ne
 800e784:	3301      	addne	r3, #1
 800e786:	3501      	addeq	r5, #1
 800e788:	4663      	moveq	r3, ip
 800e78a:	f023 0301 	bicne.w	r3, r3, #1
 800e78e:	106a      	asrs	r2, r5, #1
 800e790:	085b      	lsrs	r3, r3, #1
 800e792:	07e9      	lsls	r1, r5, #31
 800e794:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e798:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e79c:	bf48      	it	mi
 800e79e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e7a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800e7a6:	461c      	mov	r4, r3
 800e7a8:	e780      	b.n	800e6ac <__ieee754_sqrt+0x30>
 800e7aa:	0aca      	lsrs	r2, r1, #11
 800e7ac:	3815      	subs	r0, #21
 800e7ae:	0549      	lsls	r1, r1, #21
 800e7b0:	2a00      	cmp	r2, #0
 800e7b2:	d0fa      	beq.n	800e7aa <__ieee754_sqrt+0x12e>
 800e7b4:	02d6      	lsls	r6, r2, #11
 800e7b6:	d50a      	bpl.n	800e7ce <__ieee754_sqrt+0x152>
 800e7b8:	f1c3 0420 	rsb	r4, r3, #32
 800e7bc:	fa21 f404 	lsr.w	r4, r1, r4
 800e7c0:	1e5d      	subs	r5, r3, #1
 800e7c2:	4099      	lsls	r1, r3
 800e7c4:	4322      	orrs	r2, r4
 800e7c6:	1b43      	subs	r3, r0, r5
 800e7c8:	e78b      	b.n	800e6e2 <__ieee754_sqrt+0x66>
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	e7f0      	b.n	800e7b0 <__ieee754_sqrt+0x134>
 800e7ce:	0052      	lsls	r2, r2, #1
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	e7ef      	b.n	800e7b4 <__ieee754_sqrt+0x138>
 800e7d4:	46a0      	mov	r8, r4
 800e7d6:	e7bf      	b.n	800e758 <__ieee754_sqrt+0xdc>
 800e7d8:	7ff00000 	.word	0x7ff00000

0800e7dc <fabs>:
 800e7dc:	ec51 0b10 	vmov	r0, r1, d0
 800e7e0:	ee10 2a10 	vmov	r2, s0
 800e7e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e7e8:	ec43 2b10 	vmov	d0, r2, r3
 800e7ec:	4770      	bx	lr

0800e7ee <finite>:
 800e7ee:	ee10 3a90 	vmov	r3, s1
 800e7f2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800e7f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e7fa:	0fc0      	lsrs	r0, r0, #31
 800e7fc:	4770      	bx	lr

0800e7fe <matherr>:
 800e7fe:	2000      	movs	r0, #0
 800e800:	4770      	bx	lr
 800e802:	0000      	movs	r0, r0
 800e804:	0000      	movs	r0, r0
	...

0800e808 <nan>:
 800e808:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e810 <nan+0x8>
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	00000000 	.word	0x00000000
 800e814:	7ff80000 	.word	0x7ff80000

0800e818 <rint>:
 800e818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e81a:	ec51 0b10 	vmov	r0, r1, d0
 800e81e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e822:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e826:	2e13      	cmp	r6, #19
 800e828:	460b      	mov	r3, r1
 800e82a:	ee10 4a10 	vmov	r4, s0
 800e82e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e832:	dc56      	bgt.n	800e8e2 <rint+0xca>
 800e834:	2e00      	cmp	r6, #0
 800e836:	da2b      	bge.n	800e890 <rint+0x78>
 800e838:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e83c:	4302      	orrs	r2, r0
 800e83e:	d023      	beq.n	800e888 <rint+0x70>
 800e840:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e844:	4302      	orrs	r2, r0
 800e846:	4254      	negs	r4, r2
 800e848:	4314      	orrs	r4, r2
 800e84a:	0c4b      	lsrs	r3, r1, #17
 800e84c:	0b24      	lsrs	r4, r4, #12
 800e84e:	045b      	lsls	r3, r3, #17
 800e850:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e854:	ea44 0103 	orr.w	r1, r4, r3
 800e858:	460b      	mov	r3, r1
 800e85a:	492f      	ldr	r1, [pc, #188]	; (800e918 <rint+0x100>)
 800e85c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800e860:	e9d1 6700 	ldrd	r6, r7, [r1]
 800e864:	4602      	mov	r2, r0
 800e866:	4639      	mov	r1, r7
 800e868:	4630      	mov	r0, r6
 800e86a:	f7f1 fcbb 	bl	80001e4 <__adddf3>
 800e86e:	e9cd 0100 	strd	r0, r1, [sp]
 800e872:	463b      	mov	r3, r7
 800e874:	4632      	mov	r2, r6
 800e876:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e87a:	f7f1 fcb1 	bl	80001e0 <__aeabi_dsub>
 800e87e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e882:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e886:	4639      	mov	r1, r7
 800e888:	ec41 0b10 	vmov	d0, r0, r1
 800e88c:	b003      	add	sp, #12
 800e88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e890:	4a22      	ldr	r2, [pc, #136]	; (800e91c <rint+0x104>)
 800e892:	4132      	asrs	r2, r6
 800e894:	ea01 0702 	and.w	r7, r1, r2
 800e898:	4307      	orrs	r7, r0
 800e89a:	d0f5      	beq.n	800e888 <rint+0x70>
 800e89c:	0852      	lsrs	r2, r2, #1
 800e89e:	4011      	ands	r1, r2
 800e8a0:	430c      	orrs	r4, r1
 800e8a2:	d00b      	beq.n	800e8bc <rint+0xa4>
 800e8a4:	ea23 0202 	bic.w	r2, r3, r2
 800e8a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e8ac:	2e13      	cmp	r6, #19
 800e8ae:	fa43 f306 	asr.w	r3, r3, r6
 800e8b2:	bf0c      	ite	eq
 800e8b4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e8b8:	2400      	movne	r4, #0
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	4916      	ldr	r1, [pc, #88]	; (800e918 <rint+0x100>)
 800e8be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e8c2:	4622      	mov	r2, r4
 800e8c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	4629      	mov	r1, r5
 800e8cc:	f7f1 fc8a 	bl	80001e4 <__adddf3>
 800e8d0:	e9cd 0100 	strd	r0, r1, [sp]
 800e8d4:	4622      	mov	r2, r4
 800e8d6:	462b      	mov	r3, r5
 800e8d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8dc:	f7f1 fc80 	bl	80001e0 <__aeabi_dsub>
 800e8e0:	e7d2      	b.n	800e888 <rint+0x70>
 800e8e2:	2e33      	cmp	r6, #51	; 0x33
 800e8e4:	dd07      	ble.n	800e8f6 <rint+0xde>
 800e8e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e8ea:	d1cd      	bne.n	800e888 <rint+0x70>
 800e8ec:	ee10 2a10 	vmov	r2, s0
 800e8f0:	f7f1 fc78 	bl	80001e4 <__adddf3>
 800e8f4:	e7c8      	b.n	800e888 <rint+0x70>
 800e8f6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800e8fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8fe:	40f2      	lsrs	r2, r6
 800e900:	4210      	tst	r0, r2
 800e902:	d0c1      	beq.n	800e888 <rint+0x70>
 800e904:	0852      	lsrs	r2, r2, #1
 800e906:	4210      	tst	r0, r2
 800e908:	bf1f      	itttt	ne
 800e90a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e90e:	ea20 0202 	bicne.w	r2, r0, r2
 800e912:	4134      	asrne	r4, r6
 800e914:	4314      	orrne	r4, r2
 800e916:	e7d1      	b.n	800e8bc <rint+0xa4>
 800e918:	0800ed58 	.word	0x0800ed58
 800e91c:	000fffff 	.word	0x000fffff

0800e920 <scalbn>:
 800e920:	b570      	push	{r4, r5, r6, lr}
 800e922:	ec55 4b10 	vmov	r4, r5, d0
 800e926:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e92a:	4606      	mov	r6, r0
 800e92c:	462b      	mov	r3, r5
 800e92e:	b9aa      	cbnz	r2, 800e95c <scalbn+0x3c>
 800e930:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e934:	4323      	orrs	r3, r4
 800e936:	d03b      	beq.n	800e9b0 <scalbn+0x90>
 800e938:	4b31      	ldr	r3, [pc, #196]	; (800ea00 <scalbn+0xe0>)
 800e93a:	4629      	mov	r1, r5
 800e93c:	2200      	movs	r2, #0
 800e93e:	ee10 0a10 	vmov	r0, s0
 800e942:	f7f1 fe05 	bl	8000550 <__aeabi_dmul>
 800e946:	4b2f      	ldr	r3, [pc, #188]	; (800ea04 <scalbn+0xe4>)
 800e948:	429e      	cmp	r6, r3
 800e94a:	4604      	mov	r4, r0
 800e94c:	460d      	mov	r5, r1
 800e94e:	da12      	bge.n	800e976 <scalbn+0x56>
 800e950:	a327      	add	r3, pc, #156	; (adr r3, 800e9f0 <scalbn+0xd0>)
 800e952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e956:	f7f1 fdfb 	bl	8000550 <__aeabi_dmul>
 800e95a:	e009      	b.n	800e970 <scalbn+0x50>
 800e95c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e960:	428a      	cmp	r2, r1
 800e962:	d10c      	bne.n	800e97e <scalbn+0x5e>
 800e964:	ee10 2a10 	vmov	r2, s0
 800e968:	4620      	mov	r0, r4
 800e96a:	4629      	mov	r1, r5
 800e96c:	f7f1 fc3a 	bl	80001e4 <__adddf3>
 800e970:	4604      	mov	r4, r0
 800e972:	460d      	mov	r5, r1
 800e974:	e01c      	b.n	800e9b0 <scalbn+0x90>
 800e976:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e97a:	460b      	mov	r3, r1
 800e97c:	3a36      	subs	r2, #54	; 0x36
 800e97e:	4432      	add	r2, r6
 800e980:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e984:	428a      	cmp	r2, r1
 800e986:	dd0b      	ble.n	800e9a0 <scalbn+0x80>
 800e988:	ec45 4b11 	vmov	d1, r4, r5
 800e98c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e9f8 <scalbn+0xd8>
 800e990:	f000 f83c 	bl	800ea0c <copysign>
 800e994:	a318      	add	r3, pc, #96	; (adr r3, 800e9f8 <scalbn+0xd8>)
 800e996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99a:	ec51 0b10 	vmov	r0, r1, d0
 800e99e:	e7da      	b.n	800e956 <scalbn+0x36>
 800e9a0:	2a00      	cmp	r2, #0
 800e9a2:	dd08      	ble.n	800e9b6 <scalbn+0x96>
 800e9a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e9a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e9ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e9b0:	ec45 4b10 	vmov	d0, r4, r5
 800e9b4:	bd70      	pop	{r4, r5, r6, pc}
 800e9b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e9ba:	da0d      	bge.n	800e9d8 <scalbn+0xb8>
 800e9bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e9c0:	429e      	cmp	r6, r3
 800e9c2:	ec45 4b11 	vmov	d1, r4, r5
 800e9c6:	dce1      	bgt.n	800e98c <scalbn+0x6c>
 800e9c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e9f0 <scalbn+0xd0>
 800e9cc:	f000 f81e 	bl	800ea0c <copysign>
 800e9d0:	a307      	add	r3, pc, #28	; (adr r3, 800e9f0 <scalbn+0xd0>)
 800e9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d6:	e7e0      	b.n	800e99a <scalbn+0x7a>
 800e9d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e9dc:	3236      	adds	r2, #54	; 0x36
 800e9de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e9e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	4629      	mov	r1, r5
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	4b06      	ldr	r3, [pc, #24]	; (800ea08 <scalbn+0xe8>)
 800e9ee:	e7b2      	b.n	800e956 <scalbn+0x36>
 800e9f0:	c2f8f359 	.word	0xc2f8f359
 800e9f4:	01a56e1f 	.word	0x01a56e1f
 800e9f8:	8800759c 	.word	0x8800759c
 800e9fc:	7e37e43c 	.word	0x7e37e43c
 800ea00:	43500000 	.word	0x43500000
 800ea04:	ffff3cb0 	.word	0xffff3cb0
 800ea08:	3c900000 	.word	0x3c900000

0800ea0c <copysign>:
 800ea0c:	ec51 0b10 	vmov	r0, r1, d0
 800ea10:	ee11 0a90 	vmov	r0, s3
 800ea14:	ee10 2a10 	vmov	r2, s0
 800ea18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ea1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ea20:	ea41 0300 	orr.w	r3, r1, r0
 800ea24:	ec43 2b10 	vmov	d0, r2, r3
 800ea28:	4770      	bx	lr
	...

0800ea2c <_init>:
 800ea2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea2e:	bf00      	nop
 800ea30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea32:	bc08      	pop	{r3}
 800ea34:	469e      	mov	lr, r3
 800ea36:	4770      	bx	lr

0800ea38 <_fini>:
 800ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3a:	bf00      	nop
 800ea3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea3e:	bc08      	pop	{r3}
 800ea40:	469e      	mov	lr, r3
 800ea42:	4770      	bx	lr
