
VL53L0X_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800ab80  0800ab80  0001ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acf0  0800acf0  000204a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800acf0  0800acf0  000204a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800acf0  0800acf0  000204a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf0  0800acf0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a4  20000000  0800acf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  200004a4  0800b19c  000204a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  0800b19c  00020bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020793  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000328e  00000000  00000000  00040c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e0  00000000  00000000  00043ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001498  00000000  00000000  000454d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003c67  00000000  00000000  00046970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013d81  00000000  00000000  0004a5d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000accc3  00000000  00000000  0005e358  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010b01b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f38  00000000  00000000  0010b098  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200004a4 	.word	0x200004a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ab68 	.word	0x0800ab68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200004a8 	.word	0x200004a8
 80001c4:	0800ab68 	.word	0x0800ab68

080001c8 <distance_sensors_init>:

const uint8_t addresses[3] = {ADDR_SENSOR_0, ADDR_SENSOR_1, ADDR_SENSOR_2};
GPIO_TypeDef *port[3] = {TOF_XSHUT_0_GPIO_Port, TOF_XSHUT_1_GPIO_Port, TOF_XSHUT_2_GPIO_Port};
const uint16_t pin[3] = {TOF_XSHUT_0_Pin, TOF_XSHUT_1_Pin, TOF_XSHUT_2_Pin} ;

void distance_sensors_init(distance_sensors_t *distance_sensors, I2C_HandleTypeDef *hi2c){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i < 3; ++i){
 80001d2:	2300      	movs	r3, #0
 80001d4:	73fb      	strb	r3, [r7, #15]
 80001d6:	e018      	b.n	800020a <distance_sensors_init+0x42>
		distance_sensors->sensors[i] = &distance_sensors->vl53l0x[i];
 80001d8:	7bfa      	ldrb	r2, [r7, #15]
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80001e0:	fb01 f202 	mul.w	r2, r1, r2
 80001e4:	3250      	adds	r2, #80	; 0x50
 80001e6:	6879      	ldr	r1, [r7, #4]
 80001e8:	440a      	add	r2, r1
 80001ea:	3204      	adds	r2, #4
 80001ec:	6879      	ldr	r1, [r7, #4]
 80001ee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80001f2:	009b      	lsls	r3, r3, #2
 80001f4:	440b      	add	r3, r1
 80001f6:	605a      	str	r2, [r3, #4]
		distance_sensors->data_ready[i] = 0;
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	4413      	add	r3, r2
 80001fe:	2200      	movs	r2, #0
 8000200:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(uint8_t i = 0; i < 3; ++i){
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	3301      	adds	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
 800020a:	7bfb      	ldrb	r3, [r7, #15]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d9e3      	bls.n	80001d8 <distance_sensors_init+0x10>

	}

	for(uint8_t i = 0; i < 3; ++i){
 8000210:	2300      	movs	r3, #0
 8000212:	73bb      	strb	r3, [r7, #14]
 8000214:	e016      	b.n	8000244 <distance_sensors_init+0x7c>
		distance_sensors->sensors[i]->I2cHandle = hi2c;
 8000216:	7bbb      	ldrb	r3, [r7, #14]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800021e:	009b      	lsls	r3, r3, #2
 8000220:	4413      	add	r3, r2
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		distance_sensors->sensors[i]->I2cDevAddr = 0x52;
 800022a:	7bbb      	ldrb	r3, [r7, #14]
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	4413      	add	r3, r2
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	2252      	movs	r2, #82	; 0x52
 800023a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	for(uint8_t i = 0; i < 3; ++i){
 800023e:	7bbb      	ldrb	r3, [r7, #14]
 8000240:	3301      	adds	r3, #1
 8000242:	73bb      	strb	r3, [r7, #14]
 8000244:	7bbb      	ldrb	r3, [r7, #14]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d9e5      	bls.n	8000216 <distance_sensors_init+0x4e>
	}

	for(uint8_t i = 0; i < 3; ++i){
 800024a:	2300      	movs	r3, #0
 800024c:	737b      	strb	r3, [r7, #13]
 800024e:	e011      	b.n	8000274 <distance_sensors_init+0xac>
		HAL_GPIO_WritePin(port[i], pin[i], GPIO_PIN_RESET);
 8000250:	7b7b      	ldrb	r3, [r7, #13]
 8000252:	4a87      	ldr	r2, [pc, #540]	; (8000470 <distance_sensors_init+0x2a8>)
 8000254:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000258:	7b7b      	ldrb	r3, [r7, #13]
 800025a:	4a86      	ldr	r2, [pc, #536]	; (8000474 <distance_sensors_init+0x2ac>)
 800025c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000260:	2200      	movs	r2, #0
 8000262:	4619      	mov	r1, r3
 8000264:	f001 fb9c 	bl	80019a0 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8000268:	2014      	movs	r0, #20
 800026a:	f001 f84d 	bl	8001308 <HAL_Delay>
	for(uint8_t i = 0; i < 3; ++i){
 800026e:	7b7b      	ldrb	r3, [r7, #13]
 8000270:	3301      	adds	r3, #1
 8000272:	737b      	strb	r3, [r7, #13]
 8000274:	7b7b      	ldrb	r3, [r7, #13]
 8000276:	2b02      	cmp	r3, #2
 8000278:	d9ea      	bls.n	8000250 <distance_sensors_init+0x88>
	}

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800027a:	2006      	movs	r0, #6
 800027c:	f001 f98d 	bl	800159a <HAL_NVIC_DisableIRQ>
 	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000280:	2028      	movs	r0, #40	; 0x28
 8000282:	f001 f98a 	bl	800159a <HAL_NVIC_DisableIRQ>
 	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000286:	2007      	movs	r0, #7
 8000288:	f001 f987 	bl	800159a <HAL_NVIC_DisableIRQ>

 	for(uint8_t i = 0; i < 3; ++i){
 800028c:	2300      	movs	r3, #0
 800028e:	733b      	strb	r3, [r7, #12]
 8000290:	e0dd      	b.n	800044e <distance_sensors_init+0x286>
 		HAL_GPIO_WritePin(port[i], pin[i], GPIO_PIN_SET);
 8000292:	7b3b      	ldrb	r3, [r7, #12]
 8000294:	4a76      	ldr	r2, [pc, #472]	; (8000470 <distance_sensors_init+0x2a8>)
 8000296:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800029a:	7b3b      	ldrb	r3, [r7, #12]
 800029c:	4a75      	ldr	r2, [pc, #468]	; (8000474 <distance_sensors_init+0x2ac>)
 800029e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a2:	2201      	movs	r2, #1
 80002a4:	4619      	mov	r1, r3
 80002a6:	f001 fb7b 	bl	80019a0 <HAL_GPIO_WritePin>
 		HAL_Delay(20);
 80002aa:	2014      	movs	r0, #20
 80002ac:	f001 f82c 	bl	8001308 <HAL_Delay>
 		VL53L0X_WaitDeviceBooted(distance_sensors->sensors[i]);
 80002b0:	7b3b      	ldrb	r3, [r7, #12]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	4413      	add	r3, r2
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	4618      	mov	r0, r3
 80002c0:	f005 fe20 	bl	8005f04 <VL53L0X_WaitDeviceBooted>
 		VL53L0X_DataInit(distance_sensors->sensors[i]);
 80002c4:	7b3b      	ldrb	r3, [r7, #12]
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	4413      	add	r3, r2
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f005 fb30 	bl	8005938 <VL53L0X_DataInit>
 		VL53L0X_SetDeviceAddress(distance_sensors->sensors[i],addresses[i]);
 80002d8:	7b3b      	ldrb	r3, [r7, #12]
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	4413      	add	r3, r2
 80002e4:	6858      	ldr	r0, [r3, #4]
 80002e6:	7b3b      	ldrb	r3, [r7, #12]
 80002e8:	4a63      	ldr	r2, [pc, #396]	; (8000478 <distance_sensors_init+0x2b0>)
 80002ea:	5cd3      	ldrb	r3, [r2, r3]
 80002ec:	4619      	mov	r1, r3
 80002ee:	f005 fb0b 	bl	8005908 <VL53L0X_SetDeviceAddress>
 		distance_sensors->sensors[i]->I2cDevAddr = addresses[i];
 80002f2:	7b3a      	ldrb	r2, [r7, #12]
 80002f4:	7b3b      	ldrb	r3, [r7, #12]
 80002f6:	6879      	ldr	r1, [r7, #4]
 80002f8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	440b      	add	r3, r1
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	495d      	ldr	r1, [pc, #372]	; (8000478 <distance_sensors_init+0x2b0>)
 8000304:	5c8a      	ldrb	r2, [r1, r2]
 8000306:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 		VL53L0X_WaitDeviceBooted(distance_sensors->sensors[i]);
 800030a:	7b3b      	ldrb	r3, [r7, #12]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	4413      	add	r3, r2
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	4618      	mov	r0, r3
 800031a:	f005 fdf3 	bl	8005f04 <VL53L0X_WaitDeviceBooted>
 		VL53L0X_StaticInit(distance_sensors->sensors[i]);
 800031e:	7b3b      	ldrb	r3, [r7, #12]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	4413      	add	r3, r2
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4618      	mov	r0, r3
 800032e:	f005 fc67 	bl	8005c00 <VL53L0X_StaticInit>
		VL53L0X_PerformRefCalibration(distance_sensors->sensors[i], &distance_sensors->VhvSettings, &distance_sensors->PhaseCal);
 8000332:	7b3b      	ldrb	r3, [r7, #12]
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	4413      	add	r3, r2
 800033e:	6858      	ldr	r0, [r3, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f203 5119 	addw	r1, r3, #1305	; 0x519
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f203 531a 	addw	r3, r3, #1306	; 0x51a
 800034c:	461a      	mov	r2, r3
 800034e:	f006 fb15 	bl	800697c <VL53L0X_PerformRefCalibration>
		VL53L0X_PerformRefSpadManagement(distance_sensors->sensors[i], &distance_sensors->refSpadCount, &distance_sensors->isApertureSpads);
 8000352:	7b3b      	ldrb	r3, [r7, #12]
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	4413      	add	r3, r2
 800035e:	6858      	ldr	r0, [r3, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f203 5114 	addw	r1, r3, #1300	; 0x514
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800036c:	461a      	mov	r2, r3
 800036e:	f006 ff93 	bl	8007298 <VL53L0X_PerformRefSpadManagement>
		VL53L0X_SetDeviceMode(distance_sensors->sensors[i], VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8000372:	7b3b      	ldrb	r3, [r7, #12]
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	4413      	add	r3, r2
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	2101      	movs	r1, #1
 8000382:	4618      	mov	r0, r3
 8000384:	f005 fe5c 	bl	8006040 <VL53L0X_SetDeviceMode>

		VL53L0X_SetLimitCheckEnable(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000388:	7b3b      	ldrb	r3, [r7, #12]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	4413      	add	r3, r2
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	2201      	movs	r2, #1
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f006 f8e8 	bl	8006570 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckEnable(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80003a0:	7b3b      	ldrb	r3, [r7, #12]
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	4413      	add	r3, r2
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	2201      	movs	r2, #1
 80003b0:	2101      	movs	r1, #1
 80003b2:	4618      	mov	r0, r3
 80003b4:	f006 f8dc 	bl	8006570 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckValue(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80003b8:	7b3b      	ldrb	r3, [r7, #12]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f641 1299 	movw	r2, #6553	; 0x1999
 80003ca:	2101      	movs	r1, #1
 80003cc:	4618      	mov	r0, r3
 80003ce:	f006 f97f 	bl	80066d0 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetLimitCheckValue(distance_sensors->sensors[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80003d2:	7b3b      	ldrb	r3, [r7, #12]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4413      	add	r3, r2
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f006 f972 	bl	80066d0 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(distance_sensors->sensors[i], 33000);
 80003ec:	7b3b      	ldrb	r3, [r7, #12]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	4413      	add	r3, r2
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80003fe:	4618      	mov	r0, r3
 8000400:	f005 fe98 	bl	8006134 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		VL53L0X_SetVcselPulsePeriod(distance_sensors->sensors[i], VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000404:	7b3b      	ldrb	r3, [r7, #12]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	4413      	add	r3, r2
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	2212      	movs	r2, #18
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f005 feb2 	bl	8006180 <VL53L0X_SetVcselPulsePeriod>
		VL53L0X_SetVcselPulsePeriod(distance_sensors->sensors[i], VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800041c:	7b3b      	ldrb	r3, [r7, #12]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	220e      	movs	r2, #14
 800042c:	2101      	movs	r1, #1
 800042e:	4618      	mov	r0, r3
 8000430:	f005 fea6 	bl	8006180 <VL53L0X_SetVcselPulsePeriod>

		VL53L0X_StartMeasurement(distance_sensors->sensors[i]);
 8000434:	7b3b      	ldrb	r3, [r7, #12]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	4413      	add	r3, r2
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	4618      	mov	r0, r3
 8000444:	f006 fb16 	bl	8006a74 <VL53L0X_StartMeasurement>
 	for(uint8_t i = 0; i < 3; ++i){
 8000448:	7b3b      	ldrb	r3, [r7, #12]
 800044a:	3301      	adds	r3, #1
 800044c:	733b      	strb	r3, [r7, #12]
 800044e:	7b3b      	ldrb	r3, [r7, #12]
 8000450:	2b02      	cmp	r3, #2
 8000452:	f67f af1e 	bls.w	8000292 <distance_sensors_init+0xca>
 	}



	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000456:	2006      	movs	r0, #6
 8000458:	f001 f891 	bl	800157e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800045c:	2028      	movs	r0, #40	; 0x28
 800045e:	f001 f88e 	bl	800157e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000462:	2007      	movs	r0, #7
 8000464:	f001 f88b 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000000 	.word	0x20000000
 8000474:	0800aba4 	.word	0x0800aba4
 8000478:	0800aba0 	.word	0x0800aba0

0800047c <distance_sensors_is_data_ready>:

uint8_t distance_sensors_is_data_ready(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	70fb      	strb	r3, [r7, #3]
	return distance_sensors->data_ready[num_of_sensor];
 8000488:	78fb      	ldrb	r3, [r7, #3]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	4413      	add	r3, r2
 800048e:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8000492:	b2db      	uxtb	r3, r3
}
 8000494:	4618      	mov	r0, r3
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <distance_sensors_cleer_interrupt>:

void distance_sensors_cleer_interrupt(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	70fb      	strb	r3, [r7, #3]
	distance_sensors->data_ready[num_of_sensor] = 0;
 80004ac:	78fb      	ldrb	r3, [r7, #3]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	2200      	movs	r2, #0
 80004b4:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <distance_sensors_set_interrupt>:

void distance_sensors_set_interrupt(distance_sensors_t *distance_sensors, uint8_t num_of_sensor){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]
	distance_sensors->data_ready[num_of_sensor] = 1;
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	2201      	movs	r2, #1
 80004d8:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fea5 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f875 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 fa2d 	bl	8000954 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004fa:	f000 f9f7 	bl	80008ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004fe:	f000 f8c7 	bl	8000690 <MX_I2C1_Init>
  MX_TIM16_Init();
 8000502:	f000 f903 	bl	800070c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000506:	f000 f979 	bl	80007fc <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   distance_sensors_init(&distance_sensors, &hi2c1);
 800050a:	492e      	ldr	r1, [pc, #184]	; (80005c4 <main+0xdc>)
 800050c:	482e      	ldr	r0, [pc, #184]	; (80005c8 <main+0xe0>)
 800050e:	f7ff fe5b 	bl	80001c8 <distance_sensors_init>
   remote_controller_init(&remote_controller, &huart2);
 8000512:	492e      	ldr	r1, [pc, #184]	; (80005cc <main+0xe4>)
 8000514:	482e      	ldr	r0, [pc, #184]	; (80005d0 <main+0xe8>)
 8000516:	f000 fb6f 	bl	8000bf8 <remote_controller_init>
   motors_init(&htim16, &htim17);
 800051a:	492e      	ldr	r1, [pc, #184]	; (80005d4 <main+0xec>)
 800051c:	482e      	ldr	r0, [pc, #184]	; (80005d8 <main+0xf0>)
 800051e:	f000 fb0f 	bl	8000b40 <motors_init>
   motors_set_speed(RIGHT_MOTOR, 50);
 8000522:	2132      	movs	r1, #50	; 0x32
 8000524:	2001      	movs	r0, #1
 8000526:	f000 fb3f 	bl	8000ba8 <motors_set_speed>
   motors_set_speed(LEFT_MOTOR, 50);
 800052a:	2132      	movs	r1, #50	; 0x32
 800052c:	2000      	movs	r0, #0
 800052e:	f000 fb3b 	bl	8000ba8 <motors_set_speed>
   HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 8000532:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <main+0xe8>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2201      	movs	r2, #1
 8000538:	4928      	ldr	r1, [pc, #160]	; (80005dc <main+0xf4>)
 800053a:	4618      	mov	r0, r3
 800053c:	f004 f8e6 	bl	800470c <HAL_UART_Receive_IT>
//  uint16_t x;

  while (1)
  {

	  if(distance_sensors_is_data_ready(&distance_sensors, 0))
 8000540:	2100      	movs	r1, #0
 8000542:	4821      	ldr	r0, [pc, #132]	; (80005c8 <main+0xe0>)
 8000544:	f7ff ff9a 	bl	800047c <distance_sensors_is_data_ready>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d003      	beq.n	8000556 <main+0x6e>
	  {

		//MessageLen = sprintf((char*)Message, "Measured distance: %i\n\r",distance_sensors_get_distance(&distance_sensors, 0));
		//HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
		distance_sensors_cleer_interrupt(&distance_sensors, 0);
 800054e:	2100      	movs	r1, #0
 8000550:	481d      	ldr	r0, [pc, #116]	; (80005c8 <main+0xe0>)
 8000552:	f7ff ffa5 	bl	80004a0 <distance_sensors_cleer_interrupt>

	  }

	  if(distance_sensors_is_data_ready(&distance_sensors, 1))
 8000556:	2101      	movs	r1, #1
 8000558:	481b      	ldr	r0, [pc, #108]	; (80005c8 <main+0xe0>)
 800055a:	f7ff ff8f 	bl	800047c <distance_sensors_is_data_ready>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d003      	beq.n	800056c <main+0x84>
	 	  {

	 		//MessageLen = sprintf((char*)Message, "Measured distance_2: %i\n\r", distance_sensors_get_distance(&distance_sensors, 1));
	 		//HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
	 		distance_sensors_cleer_interrupt(&distance_sensors, 1);
 8000564:	2101      	movs	r1, #1
 8000566:	4818      	ldr	r0, [pc, #96]	; (80005c8 <main+0xe0>)
 8000568:	f7ff ff9a 	bl	80004a0 <distance_sensors_cleer_interrupt>

	 	  }
	  if(remote_controller_is_data_ready(&remote_controller)){
 800056c:	4818      	ldr	r0, [pc, #96]	; (80005d0 <main+0xe8>)
 800056e:	f000 fb87 	bl	8000c80 <remote_controller_is_data_ready>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0e3      	beq.n	8000540 <main+0x58>
		  remote_controller_parser(&remote_controller);
 8000578:	4815      	ldr	r0, [pc, #84]	; (80005d0 <main+0xe8>)
 800057a:	f000 fbcd 	bl	8000d18 <remote_controller_parser>
		  motors_set_speed(RIGHT_MOTOR, (int)(remote_controller.ki));
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <main+0xe8>)
 8000580:	edd3 7a05 	vldr	s15, [r3, #20]
 8000584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000588:	edc7 7a01 	vstr	s15, [r7, #4]
 800058c:	793b      	ldrb	r3, [r7, #4]
 800058e:	4619      	mov	r1, r3
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fb09 	bl	8000ba8 <motors_set_speed>
		  motors_set_speed(LEFT_MOTOR, (int)(remote_controller.ki));
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <main+0xe8>)
 8000598:	edd3 7a05 	vldr	s15, [r3, #20]
 800059c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80005a4:	793b      	ldrb	r3, [r7, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fafd 	bl	8000ba8 <motors_set_speed>
		  remote_controller_celar_interrupt(&remote_controller);
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <main+0xe8>)
 80005b0:	f000 fb73 	bl	8000c9a <remote_controller_celar_interrupt>
		  HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <main+0xe8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2201      	movs	r2, #1
 80005ba:	4908      	ldr	r1, [pc, #32]	; (80005dc <main+0xf4>)
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 f8a5 	bl	800470c <HAL_UART_Receive_IT>
	  if(distance_sensors_is_data_ready(&distance_sensors, 0))
 80005c2:	e7bd      	b.n	8000540 <main+0x58>
 80005c4:	200004c0 	.word	0x200004c0
 80005c8:	2000057c 	.word	0x2000057c
 80005cc:	20000a98 	.word	0x20000a98
 80005d0:	20000558 	.word	0x20000558
 80005d4:	2000050c 	.word	0x2000050c
 80005d8:	20000b1c 	.word	0x20000b1c
 80005dc:	2000055c 	.word	0x2000055c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	; 0x58
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ea:	2228      	movs	r2, #40	; 0x28
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f00a f9e5 	bl	800a9be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
 8000612:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000628:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800062c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000632:	4618      	mov	r0, r3
 8000634:	f001 fee6 	bl	8002404 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800063e:	f000 fa77 	bl	8000b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	2102      	movs	r1, #2
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fdd8 	bl	8003214 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800066a:	f000 fa61 	bl	8000b30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800066e:	2320      	movs	r3, #32
 8000670:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4618      	mov	r0, r3
 800067a:	f003 f801 	bl	8003680 <HAL_RCCEx_PeriphCLKConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000684:	f000 fa54 	bl	8000b30 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3758      	adds	r7, #88	; 0x58
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_I2C1_Init+0x74>)
 8000696:	4a1c      	ldr	r2, [pc, #112]	; (8000708 <MX_I2C1_Init+0x78>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_I2C1_Init+0x74>)
 800069c:	f240 220b 	movw	r2, #523	; 0x20b
 80006a0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_I2C1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_I2C1_Init+0x74>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_I2C1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_I2C1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_I2C1_Init+0x74>)
 80006ce:	f001 f997 	bl	8001a00 <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 fa2a 	bl	8000b30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006dc:	2100      	movs	r1, #0
 80006de:	4809      	ldr	r0, [pc, #36]	; (8000704 <MX_I2C1_Init+0x74>)
 80006e0:	f001 fdf8 	bl	80022d4 <HAL_I2CEx_ConfigAnalogFilter>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006ea:	f000 fa21 	bl	8000b30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_I2C1_Init+0x74>)
 80006f2:	f001 fe3a 	bl	800236a <HAL_I2CEx_ConfigDigitalFilter>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006fc:	f000 fa18 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200004c0 	.word	0x200004c0
 8000708:	40005400 	.word	0x40005400

0800070c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b092      	sub	sp, #72	; 0x48
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
 8000722:	615a      	str	r2, [r3, #20]
 8000724:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	222c      	movs	r2, #44	; 0x2c
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f00a f946 	bl	800a9be <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000732:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <MX_TIM16_Init+0xe8>)
 8000734:	4a30      	ldr	r2, [pc, #192]	; (80007f8 <MX_TIM16_Init+0xec>)
 8000736:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9;
 8000738:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <MX_TIM16_Init+0xe8>)
 800073a:	2209      	movs	r2, #9
 800073c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <MX_TIM16_Init+0xe8>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8000744:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <MX_TIM16_Init+0xe8>)
 8000746:	2263      	movs	r2, #99	; 0x63
 8000748:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <MX_TIM16_Init+0xe8>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000750:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <MX_TIM16_Init+0xe8>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000756:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <MX_TIM16_Init+0xe8>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800075c:	4825      	ldr	r0, [pc, #148]	; (80007f4 <MX_TIM16_Init+0xe8>)
 800075e:	f003 f8b5 	bl	80038cc <HAL_TIM_Base_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 f9e2 	bl	8000b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800076c:	4821      	ldr	r0, [pc, #132]	; (80007f4 <MX_TIM16_Init+0xe8>)
 800076e:	f003 f961 	bl	8003a34 <HAL_TIM_PWM_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 f9da 	bl	8000b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077c:	2360      	movs	r3, #96	; 0x60
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000784:	2300      	movs	r3, #0
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000788:	2300      	movs	r3, #0
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	4814      	ldr	r0, [pc, #80]	; (80007f4 <MX_TIM16_Init+0xe8>)
 80007a2:	f003 fa95 	bl	8003cd0 <HAL_TIM_PWM_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 80007ac:	f000 f9c0 	bl	8000b30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	4619      	mov	r1, r3
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <MX_TIM16_Init+0xe8>)
 80007d8:	f003 fed2 	bl	8004580 <HAL_TIMEx_ConfigBreakDeadTime>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 80007e2:	f000 f9a5 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <MX_TIM16_Init+0xe8>)
 80007e8:	f000 fbf8 	bl	8000fdc <HAL_TIM_MspPostInit>

}
 80007ec:	bf00      	nop
 80007ee:	3748      	adds	r7, #72	; 0x48
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000b1c 	.word	0x20000b1c
 80007f8:	40014400 	.word	0x40014400

080007fc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b092      	sub	sp, #72	; 0x48
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	222c      	movs	r2, #44	; 0x2c
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f00a f8ce 	bl	800a9be <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000822:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <MX_TIM17_Init+0xe8>)
 8000824:	4a30      	ldr	r2, [pc, #192]	; (80008e8 <MX_TIM17_Init+0xec>)
 8000826:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 9;
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <MX_TIM17_Init+0xe8>)
 800082a:	2209      	movs	r2, #9
 800082c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082e:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <MX_TIM17_Init+0xe8>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <MX_TIM17_Init+0xe8>)
 8000836:	2263      	movs	r2, #99	; 0x63
 8000838:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083a:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <MX_TIM17_Init+0xe8>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <MX_TIM17_Init+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <MX_TIM17_Init+0xe8>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800084c:	4825      	ldr	r0, [pc, #148]	; (80008e4 <MX_TIM17_Init+0xe8>)
 800084e:	f003 f83d 	bl	80038cc <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000858:	f000 f96a 	bl	8000b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800085c:	4821      	ldr	r0, [pc, #132]	; (80008e4 <MX_TIM17_Init+0xe8>)
 800085e:	f003 f8e9 	bl	8003a34 <HAL_TIM_PWM_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 f962 	bl	8000b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086c:	2360      	movs	r3, #96	; 0x60
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000878:	2300      	movs	r3, #0
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088c:	2200      	movs	r2, #0
 800088e:	4619      	mov	r1, r3
 8000890:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_TIM17_Init+0xe8>)
 8000892:	f003 fa1d 	bl	8003cd0 <HAL_TIM_PWM_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 800089c:	f000 f948 	bl	8000b30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	4619      	mov	r1, r3
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_TIM17_Init+0xe8>)
 80008c8:	f003 fe5a 	bl	8004580 <HAL_TIMEx_ConfigBreakDeadTime>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80008d2:	f000 f92d 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <MX_TIM17_Init+0xe8>)
 80008d8:	f000 fb80 	bl	8000fdc <HAL_TIM_MspPostInit>

}
 80008dc:	bf00      	nop
 80008de:	3748      	adds	r7, #72	; 0x48
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000050c 	.word	0x2000050c
 80008e8:	40014800 	.word	0x40014800

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_USART2_UART_Init+0x60>)
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <MX_USART2_UART_Init+0x64>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_USART2_UART_Init+0x60>)
 80008f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_USART2_UART_Init+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x60>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_USART2_UART_Init+0x60>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x60>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <MX_USART2_UART_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_USART2_UART_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x60>)
 800092a:	2208      	movs	r2, #8
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_USART2_UART_Init+0x60>)
 8000930:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x60>)
 8000938:	f003 fe9a 	bl	8004670 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000942:	f000 f8f5 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000a98 	.word	0x20000a98
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800096a:	4b49      	ldr	r3, [pc, #292]	; (8000a90 <MX_GPIO_Init+0x13c>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a48      	ldr	r2, [pc, #288]	; (8000a90 <MX_GPIO_Init+0x13c>)
 8000970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b46      	ldr	r3, [pc, #280]	; (8000a90 <MX_GPIO_Init+0x13c>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b43      	ldr	r3, [pc, #268]	; (8000a90 <MX_GPIO_Init+0x13c>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	4a42      	ldr	r2, [pc, #264]	; (8000a90 <MX_GPIO_Init+0x13c>)
 8000988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098c:	6153      	str	r3, [r2, #20]
 800098e:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <MX_GPIO_Init+0x13c>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <MX_GPIO_Init+0x13c>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a3c      	ldr	r2, [pc, #240]	; (8000a90 <MX_GPIO_Init+0x13c>)
 80009a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b3a      	ldr	r3, [pc, #232]	; (8000a90 <MX_GPIO_Init+0x13c>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SILNIK_P_2_Pin|TOF_XSHUT_2_Pin|SILNIK_L_2_Pin|SILNIK_L_1_Pin
 80009b2:	2200      	movs	r2, #0
 80009b4:	f241 7190 	movw	r1, #6032	; 0x1790
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009bc:	f000 fff0 	bl	80019a0 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_1_Pin|TOF_XSHUT_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SILNIK_P_1_GPIO_Port, SILNIK_P_1_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2108      	movs	r1, #8
 80009c4:	4833      	ldr	r0, [pc, #204]	; (8000a94 <MX_GPIO_Init+0x140>)
 80009c6:	f000 ffeb 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SILNIK_P_2_Pin TOF_XSHUT_2_Pin SILNIK_L_2_Pin SILNIK_L_1_Pin
                           TOF_XSHUT_1_Pin TOF_XSHUT_0_Pin */
  GPIO_InitStruct.Pin = SILNIK_P_2_Pin|TOF_XSHUT_2_Pin|SILNIK_L_2_Pin|SILNIK_L_1_Pin
 80009ca:	f241 7390 	movw	r3, #6032	; 0x1790
 80009ce:	60fb      	str	r3, [r7, #12]
                          |TOF_XSHUT_1_Pin|TOF_XSHUT_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 fe69 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_0_Pin */
  GPIO_InitStruct.Pin = TOF_INT_0_Pin;
 80009ea:	2301      	movs	r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_0_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	4619      	mov	r1, r3
 80009fe:	4825      	ldr	r0, [pc, #148]	; (8000a94 <MX_GPIO_Init+0x140>)
 8000a00:	f000 fe5c 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_2_Pin */
  GPIO_InitStruct.Pin = TOF_INT_2_Pin;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_2_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	481e      	ldr	r0, [pc, #120]	; (8000a94 <MX_GPIO_Init+0x140>)
 8000a1a:	f000 fe4f 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_1_Pin */
  GPIO_InitStruct.Pin = TOF_INT_1_Pin;
 8000a1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_1_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	4619      	mov	r1, r3
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f000 fe40 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SILNIK_P_1_Pin */
  GPIO_InitStruct.Pin = SILNIK_P_1_Pin;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SILNIK_P_1_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4619      	mov	r1, r3
 8000a52:	4810      	ldr	r0, [pc, #64]	; (8000a94 <MX_GPIO_Init+0x140>)
 8000a54:	f000 fe32 	bl	80016bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2006      	movs	r0, #6
 8000a5e:	f000 fd72 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a62:	2006      	movs	r0, #6
 8000a64:	f000 fd8b 	bl	800157e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2007      	movs	r0, #7
 8000a6e:	f000 fd6a 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a72:	2007      	movs	r0, #7
 8000a74:	f000 fd83 	bl	800157e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2028      	movs	r0, #40	; 0x28
 8000a7e:	f000 fd62 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a82:	2028      	movs	r0, #40	; 0x28
 8000a84:	f000 fd7b 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48000400 	.word	0x48000400

08000a98 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOF_INT_0_Pin)
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d103      	bne.n	8000ab0 <HAL_GPIO_EXTI_Callback+0x18>
	{
//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
		distance_sensors_set_interrupt(&distance_sensors, 0);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000aac:	f7ff fd0a 	bl	80004c4 <distance_sensors_set_interrupt>

	}

	if(GPIO_Pin == TOF_INT_1_Pin)
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ab6:	d103      	bne.n	8000ac0 <HAL_GPIO_EXTI_Callback+0x28>
		{
	//		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
	//		VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
		distance_sensors_set_interrupt(&distance_sensors, 1);
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000abc:	f7ff fd02 	bl	80004c4 <distance_sensors_set_interrupt>

		}
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000057c 	.word	0x2000057c

08000acc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

	if(huart->Instance == remote_controller.uart->Instance){
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <HAL_UART_RxCpltCallback+0x5c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d11d      	bne.n	8000b1e <HAL_UART_RxCpltCallback+0x52>
		remote_controller.data[remote_controller.buf_counter++] = remote_controller.one_byte;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_UART_RxCpltCallback+0x5c>)
 8000ae4:	795b      	ldrb	r3, [r3, #5]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	b2d1      	uxtb	r1, r2
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <HAL_UART_RxCpltCallback+0x5c>)
 8000aec:	7151      	strb	r1, [r2, #5]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_UART_RxCpltCallback+0x5c>)
 8000af2:	791a      	ldrb	r2, [r3, #4]
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_UART_RxCpltCallback+0x5c>)
 8000af6:	440b      	add	r3, r1
 8000af8:	719a      	strb	r2, [r3, #6]
		if(remote_controller.one_byte != '\n'){
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_UART_RxCpltCallback+0x5c>)
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	2b0a      	cmp	r3, #10
 8000b00:	d007      	beq.n	8000b12 <HAL_UART_RxCpltCallback+0x46>
			HAL_UART_Receive_IT(remote_controller.uart,&remote_controller.one_byte,1);
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_UART_RxCpltCallback+0x5c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2201      	movs	r2, #1
 8000b08:	4908      	ldr	r1, [pc, #32]	; (8000b2c <HAL_UART_RxCpltCallback+0x60>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 fdfe 	bl	800470c <HAL_UART_Receive_IT>
			remote_controller.buf_counter = 0;
		}
	}


}
 8000b10:	e005      	b.n	8000b1e <HAL_UART_RxCpltCallback+0x52>
			remote_controller_set_interrupt(&remote_controller);
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_UART_RxCpltCallback+0x5c>)
 8000b14:	f000 f8a6 	bl	8000c64 <remote_controller_set_interrupt>
			remote_controller.buf_counter = 0;
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_UART_RxCpltCallback+0x5c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	715a      	strb	r2, [r3, #5]
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000558 	.word	0x20000558
 8000b2c:	2000055c 	.word	0x2000055c

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <motors_init>:

TIM_HandleTypeDef *timer_left_motor;
TIM_HandleTypeDef *timer_right_motor;


void motors_init(TIM_HandleTypeDef *timer_1, TIM_HandleTypeDef *timer_2){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	timer_left_motor = timer_1;
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <motors_init+0x60>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6013      	str	r3, [r2, #0]
	timer_right_motor = timer_2;
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <motors_init+0x64>)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(timer_left_motor);
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <motors_init+0x60>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 ff0e 	bl	800397c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(timer_right_motor);
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <motors_init+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 ff09 	bl	800397c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(timer_left_motor, TIM_CHANNEL_1);
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <motors_init+0x60>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 ffc1 	bl	8003af8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer_right_motor, TIM_CHANNEL_1);
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <motors_init+0x64>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 ffbb 	bl	8003af8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(timer_left_motor, TIM_CHANNEL_1, 0);
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <motors_init+0x60>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, 0);
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <motors_init+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000b6c 	.word	0x20000b6c
 8000ba4:	20000b68 	.word	0x20000b68

08000ba8 <motors_set_speed>:


void motors_set_speed(motors_t motor, uint8_t speed){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	71bb      	strb	r3, [r7, #6]
	if(speed < 0){
		speed = 0;
	}else if(speed > 100){
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	2b64      	cmp	r3, #100	; 0x64
 8000bbc:	d901      	bls.n	8000bc2 <motors_set_speed+0x1a>
		speed = 100;
 8000bbe:	2364      	movs	r3, #100	; 0x64
 8000bc0:	71bb      	strb	r3, [r7, #6]
	}

	if(motor == LEFT_MOTOR){
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d105      	bne.n	8000bd4 <motors_set_speed+0x2c>
		__HAL_TIM_SetCompare(timer_left_motor, TIM_CHANNEL_1, speed);
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <motors_set_speed+0x48>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	79ba      	ldrb	r2, [r7, #6]
 8000bd0:	635a      	str	r2, [r3, #52]	; 0x34
	}else if(motor == RIGHT_MOTOR){
		__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, speed);
	}
}
 8000bd2:	e007      	b.n	8000be4 <motors_set_speed+0x3c>
	}else if(motor == RIGHT_MOTOR){
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d104      	bne.n	8000be4 <motors_set_speed+0x3c>
		__HAL_TIM_SetCompare(timer_right_motor, TIM_CHANNEL_1, speed);
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <motors_set_speed+0x4c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	79ba      	ldrb	r2, [r7, #6]
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	20000b6c 	.word	0x20000b6c
 8000bf4:	20000b68 	.word	0x20000b68

08000bf8 <remote_controller_init>:
#include "remote_controller.h"

void remote_controller_init(remote_controller_t *controller, UART_HandleTypeDef *uart){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	controller->uart = uart;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	601a      	str	r2, [r3, #0]
	controller->one_byte = 0;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	711a      	strb	r2, [r3, #4]
	controller->buf_counter = 0;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	715a      	strb	r2, [r3, #5]
    memset(controller->data,0,BUF_SIZE);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3306      	adds	r3, #6
 8000c18:	220a      	movs	r2, #10
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f009 fece 	bl	800a9be <memset>
	controller->kp = 0.0f;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
	controller->ki = 0.0f;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
	controller->kd = 0.0f;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f04f 0200 	mov.w	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
	controller->dist_from_wall = 0;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	839a      	strh	r2, [r3, #28]
	controller->free_drive = 0;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	779a      	strb	r2, [r3, #30]
	controller->robot_state = 0;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	77da      	strb	r2, [r3, #31]
	controller->pwm_l = 0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2020 	strb.w	r2, [r3, #32]
	controller->pwm_r = 0;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <remote_controller_set_interrupt>:
void remote_controller_set_interrupt(remote_controller_t *controller){
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	controller->interrupt = 1;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <remote_controller_is_data_ready>:
uint8_t remote_controller_is_data_ready(remote_controller_t *controller){
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	return controller->interrupt;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <remote_controller_celar_interrupt>:
void remote_controller_celar_interrupt(remote_controller_t *controller){
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	controller->interrupt = 0;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <str_to_num>:

uint16_t str_to_num(uint8_t *data){
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
	uint8_t str_to_num[10];
	uint8_t j = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i = 3; i != '\n'; ++i,++j ){
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	75bb      	strb	r3, [r7, #22]
 8000cc6:	e00f      	b.n	8000ce8 <str_to_num+0x32>
		str_to_num[j] = data[i];
 8000cc8:	7dbb      	ldrb	r3, [r7, #22]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	441a      	add	r2, r3
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	f107 0118 	add.w	r1, r7, #24
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 3; i != '\n'; ++i,++j ){
 8000cdc:	7dbb      	ldrb	r3, [r7, #22]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	75bb      	strb	r3, [r7, #22]
 8000ce2:	7dfb      	ldrb	r3, [r7, #23]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	75fb      	strb	r3, [r7, #23]
 8000ce8:	7dbb      	ldrb	r3, [r7, #22]
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d1ec      	bne.n	8000cc8 <str_to_num+0x12>
	}
	str_to_num[++j] = '\0';
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	75fb      	strb	r3, [r7, #23]
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	f107 0218 	add.w	r2, r7, #24
 8000cfa:	4413      	add	r3, r2
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f803 2c0c 	strb.w	r2, [r3, #-12]


	return (atoi((char *)str_to_num));
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	4618      	mov	r0, r3
 8000d08:	f009 fe25 	bl	800a956 <atoi>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b29b      	uxth	r3, r3
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <remote_controller_parser>:

void remote_controller_parser(remote_controller_t *controller){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

	if(!strncmp((char *) controller->data,"kp",2)){
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3306      	adds	r3, #6
 8000d24:	2202      	movs	r2, #2
 8000d26:	4957      	ldr	r1, [pc, #348]	; (8000e84 <remote_controller_parser+0x16c>)
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f009 fe58 	bl	800a9de <strncmp>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d10d      	bne.n	8000d50 <remote_controller_parser+0x38>
		controller->kp = str_to_num(controller->data);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3306      	adds	r3, #6
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ffbc 	bl	8000cb6 <str_to_num>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	ee07 3a90 	vmov	s15, r3
 8000d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	edc3 7a04 	vstr	s15, [r3, #16]
		controller->pwm_l = str_to_num(controller->data);
	}else if(!strncmp((char *) controller->data,"pr",2)){ //pwm r
		controller->pwm_r = str_to_num(controller->data);
	}

}
 8000d4e:	e094      	b.n	8000e7a <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"ki",2)){
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3306      	adds	r3, #6
 8000d54:	2202      	movs	r2, #2
 8000d56:	494c      	ldr	r1, [pc, #304]	; (8000e88 <remote_controller_parser+0x170>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f009 fe40 	bl	800a9de <strncmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10d      	bne.n	8000d80 <remote_controller_parser+0x68>
		controller->ki = str_to_num(controller->data);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3306      	adds	r3, #6
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ffa4 	bl	8000cb6 <str_to_num>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000d7e:	e07c      	b.n	8000e7a <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"kd",2)){
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3306      	adds	r3, #6
 8000d84:	2202      	movs	r2, #2
 8000d86:	4941      	ldr	r1, [pc, #260]	; (8000e8c <remote_controller_parser+0x174>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f009 fe28 	bl	800a9de <strncmp>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10d      	bne.n	8000db0 <remote_controller_parser+0x98>
		controller->kd = str_to_num(controller->data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3306      	adds	r3, #6
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff8c 	bl	8000cb6 <str_to_num>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8000dae:	e064      	b.n	8000e7a <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"dw",2)){ //dist from wall
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3306      	adds	r3, #6
 8000db4:	2202      	movs	r2, #2
 8000db6:	4936      	ldr	r1, [pc, #216]	; (8000e90 <remote_controller_parser+0x178>)
 8000db8:	4618      	mov	r0, r3
 8000dba:	f009 fe10 	bl	800a9de <strncmp>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d109      	bne.n	8000dd8 <remote_controller_parser+0xc0>
		controller->dist_from_wall = str_to_num(controller->data);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3306      	adds	r3, #6
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff74 	bl	8000cb6 <str_to_num>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	839a      	strh	r2, [r3, #28]
}
 8000dd6:	e050      	b.n	8000e7a <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"fd",2)){ //free drive
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3306      	adds	r3, #6
 8000ddc:	2202      	movs	r2, #2
 8000dde:	492d      	ldr	r1, [pc, #180]	; (8000e94 <remote_controller_parser+0x17c>)
 8000de0:	4618      	mov	r0, r3
 8000de2:	f009 fdfc 	bl	800a9de <strncmp>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <remote_controller_parser+0xe8>
		controller->free_drive = str_to_num(controller->data);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3306      	adds	r3, #6
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff60 	bl	8000cb6 <str_to_num>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	779a      	strb	r2, [r3, #30]
}
 8000dfe:	e03c      	b.n	8000e7a <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"rs",2)){ //robot state
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3306      	adds	r3, #6
 8000e04:	2202      	movs	r2, #2
 8000e06:	4924      	ldr	r1, [pc, #144]	; (8000e98 <remote_controller_parser+0x180>)
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f009 fde8 	bl	800a9de <strncmp>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d109      	bne.n	8000e28 <remote_controller_parser+0x110>
		controller->robot_state = str_to_num(controller->data);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3306      	adds	r3, #6
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff4c 	bl	8000cb6 <str_to_num>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	77da      	strb	r2, [r3, #31]
}
 8000e26:	e028      	b.n	8000e7a <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"pl",2)){ //pwm l
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3306      	adds	r3, #6
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	491b      	ldr	r1, [pc, #108]	; (8000e9c <remote_controller_parser+0x184>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f009 fdd4 	bl	800a9de <strncmp>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10a      	bne.n	8000e52 <remote_controller_parser+0x13a>
		controller->pwm_l = str_to_num(controller->data);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3306      	adds	r3, #6
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff38 	bl	8000cb6 <str_to_num>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000e50:	e013      	b.n	8000e7a <remote_controller_parser+0x162>
	}else if(!strncmp((char *) controller->data,"pr",2)){ //pwm r
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3306      	adds	r3, #6
 8000e56:	2202      	movs	r2, #2
 8000e58:	4911      	ldr	r1, [pc, #68]	; (8000ea0 <remote_controller_parser+0x188>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f009 fdbf 	bl	800a9de <strncmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d109      	bne.n	8000e7a <remote_controller_parser+0x162>
		controller->pwm_r = str_to_num(controller->data);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3306      	adds	r3, #6
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff23 	bl	8000cb6 <str_to_num>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	0800ab80 	.word	0x0800ab80
 8000e88:	0800ab84 	.word	0x0800ab84
 8000e8c:	0800ab88 	.word	0x0800ab88
 8000e90:	0800ab8c 	.word	0x0800ab8c
 8000e94:	0800ab90 	.word	0x0800ab90
 8000e98:	0800ab94 	.word	0x0800ab94
 8000e9c:	0800ab98 	.word	0x0800ab98
 8000ea0:	0800ab9c 	.word	0x0800ab9c

08000ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6193      	str	r3, [r2, #24]
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	61d3      	str	r3, [r2, #28]
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_I2C_MspInit+0x7c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d127      	bne.n	8000f5e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f18:	6153      	str	r3, [r2, #20]
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f26:	23c0      	movs	r3, #192	; 0xc0
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2a:	2312      	movs	r3, #18
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f36:	2304      	movs	r3, #4
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <HAL_I2C_MspInit+0x84>)
 8000f42:	f000 fbbb 	bl	80016bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_I2C_MspInit+0x80>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000400 	.word	0x48000400

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <HAL_TIM_Base_MspInit+0x5c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10c      	bne.n	8000fa0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f9e:	e010      	b.n	8000fc2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <HAL_TIM_Base_MspInit+0x64>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40014400 	.word	0x40014400
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40014800 	.word	0x40014800

08000fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a22      	ldr	r2, [pc, #136]	; (8001084 <HAL_TIM_MspPostInit+0xa8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d11c      	bne.n	8001038 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a21      	ldr	r2, [pc, #132]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 8001004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8001016:	2310      	movs	r3, #16
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001026:	2301      	movs	r3, #1
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4816      	ldr	r0, [pc, #88]	; (800108c <HAL_TIM_MspPostInit+0xb0>)
 8001032:	f000 fb43 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001036:	e020      	b.n	800107a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM17)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <HAL_TIM_MspPostInit+0xb4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d11b      	bne.n	800107a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_P_Pin;
 800105a:	2320      	movs	r3, #32
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800106a:	230a      	movs	r3, #10
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_P_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_TIM_MspPostInit+0xb0>)
 8001076:	f000 fb21 	bl	80016bc <HAL_GPIO_Init>
}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	; 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40014400 	.word	0x40014400
 8001088:	40021000 	.word	0x40021000
 800108c:	48000400 	.word	0x48000400
 8001090:	40014800 	.word	0x40014800

08001094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <HAL_UART_MspInit+0x8c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d130      	bne.n	8001118 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <HAL_UART_MspInit+0x90>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <HAL_UART_MspInit+0x90>)
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_UART_MspInit+0x90>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_UART_MspInit+0x90>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_UART_MspInit+0x90>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_UART_MspInit+0x90>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80010e6:	230c      	movs	r3, #12
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f6:	2307      	movs	r3, #7
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f000 fada 	bl	80016bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2026      	movs	r0, #38	; 0x26
 800110e:	f000 fa1a 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001112:	2026      	movs	r0, #38	; 0x26
 8001114:	f000 fa33 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40004400 	.word	0x40004400
 8001124:	40021000 	.word	0x40021000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117c:	f000 f8a4 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}

08001184 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001188:	2001      	movs	r0, #1
 800118a:	f000 fc21 	bl	80019d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}

08001192 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001196:	2002      	movs	r0, #2
 8001198:	f000 fc1a 	bl	80019d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <USART2_IRQHandler+0x10>)
 80011a6:	f003 faff 	bl	80047a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000a98 	.word	0x20000a98

080011b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80011b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011bc:	f000 fc08 	bl	80019d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ee:	490e      	ldr	r1, [pc, #56]	; (8001228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <LoopForever+0xe>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001204:	4c0b      	ldr	r4, [pc, #44]	; (8001234 <LoopForever+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001212:	f7ff ffd7 	bl	80011c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f009 fba3 	bl	800a960 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121a:	f7ff f965 	bl	80004e8 <main>

0800121e <LoopForever>:

LoopForever:
    b LoopForever
 800121e:	e7fe      	b.n	800121e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001220:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	200004a4 	.word	0x200004a4
  ldr r2, =_sidata
 800122c:	0800acf8 	.word	0x0800acf8
  ldr r2, =_sbss
 8001230:	200004a4 	.word	0x200004a4
  ldr r4, =_ebss
 8001234:	20000bb4 	.word	0x20000bb4

08001238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_2_IRQHandler>
	...

0800123c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_Init+0x28>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_Init+0x28>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 f96f 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	2000      	movs	r0, #0
 8001254:	f000 f808 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fe24 	bl	8000ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40022000 	.word	0x40022000

08001268 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f995 	bl	80015b6 <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a4:	f000 f94f 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000000c 	.word	0x2000000c
 80012c0:	20000014 	.word	0x20000014
 80012c4:	20000010 	.word	0x20000010

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000014 	.word	0x20000014
 80012ec:	20000b70 	.word	0x20000b70

080012f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000b70 	.word	0x20000b70

08001308 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff ffee 	bl	80012f0 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_Delay+0x40>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffde 	bl	80012f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000014 	.word	0x20000014

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <__NVIC_EnableIRQ+0x38>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db10      	blt.n	8001420 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4909      	ldr	r1, [pc, #36]	; (800142c <__NVIC_DisableIRQ+0x40>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	3320      	adds	r3, #32
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001418:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800141c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff07 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff1c 	bl	8001394 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff0f 	bl	80013b0 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff1f 	bl	80013ec <__NVIC_DisableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff94 	bl	80014ec <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d008      	beq.n	80015f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2204      	movs	r2, #4
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e020      	b.n	8001634 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 020e 	bic.w	r2, r2, #14
 8001600:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0201 	bic.w	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161a:	2101      	movs	r1, #1
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001652:	2b02      	cmp	r3, #2
 8001654:	d005      	beq.n	8001662 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2204      	movs	r2, #4
 800165a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e027      	b.n	80016b2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 020e 	bic.w	r2, r2, #14
 8001670:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f202 	lsl.w	r2, r1, r2
 8001690:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	4798      	blx	r3
    } 
  }
  return status;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	e14e      	b.n	800196a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8140 	beq.w	8001964 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d005      	beq.n	80016fc <HAL_GPIO_Init+0x40>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d130      	bne.n	800175e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001732:	2201      	movs	r2, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f003 0201 	and.w	r2, r3, #1
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b03      	cmp	r3, #3
 8001768:	d017      	beq.n	800179a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d123      	bne.n	80017ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	08da      	lsrs	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3208      	adds	r2, #8
 80017ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	220f      	movs	r2, #15
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	691a      	ldr	r2, [r3, #16]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	08da      	lsrs	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3208      	adds	r2, #8
 80017e8:	6939      	ldr	r1, [r7, #16]
 80017ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0203 	and.w	r2, r3, #3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 809a 	beq.w	8001964 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001830:	4b55      	ldr	r3, [pc, #340]	; (8001988 <HAL_GPIO_Init+0x2cc>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a54      	ldr	r2, [pc, #336]	; (8001988 <HAL_GPIO_Init+0x2cc>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b52      	ldr	r3, [pc, #328]	; (8001988 <HAL_GPIO_Init+0x2cc>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001848:	4a50      	ldr	r2, [pc, #320]	; (800198c <HAL_GPIO_Init+0x2d0>)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	220f      	movs	r2, #15
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001872:	d013      	beq.n	800189c <HAL_GPIO_Init+0x1e0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a46      	ldr	r2, [pc, #280]	; (8001990 <HAL_GPIO_Init+0x2d4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00d      	beq.n	8001898 <HAL_GPIO_Init+0x1dc>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a45      	ldr	r2, [pc, #276]	; (8001994 <HAL_GPIO_Init+0x2d8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d007      	beq.n	8001894 <HAL_GPIO_Init+0x1d8>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a44      	ldr	r2, [pc, #272]	; (8001998 <HAL_GPIO_Init+0x2dc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_GPIO_Init+0x1d4>
 800188c:	2303      	movs	r3, #3
 800188e:	e006      	b.n	800189e <HAL_GPIO_Init+0x1e2>
 8001890:	2305      	movs	r3, #5
 8001892:	e004      	b.n	800189e <HAL_GPIO_Init+0x1e2>
 8001894:	2302      	movs	r3, #2
 8001896:	e002      	b.n	800189e <HAL_GPIO_Init+0x1e2>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_GPIO_Init+0x1e2>
 800189c:	2300      	movs	r3, #0
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	f002 0203 	and.w	r2, r2, #3
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	4093      	lsls	r3, r2
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ae:	4937      	ldr	r1, [pc, #220]	; (800198c <HAL_GPIO_Init+0x2d0>)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018bc:	4b37      	ldr	r3, [pc, #220]	; (800199c <HAL_GPIO_Init+0x2e0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018e0:	4a2e      	ldr	r2, [pc, #184]	; (800199c <HAL_GPIO_Init+0x2e0>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_GPIO_Init+0x2e0>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800190a:	4a24      	ldr	r2, [pc, #144]	; (800199c <HAL_GPIO_Init+0x2e0>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_GPIO_Init+0x2e0>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_GPIO_Init+0x2e0>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_GPIO_Init+0x2e0>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800195e:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_GPIO_Init+0x2e0>)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	f47f aea9 	bne.w	80016cc <HAL_GPIO_Init+0x10>
  }
}
 800197a:	bf00      	nop
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	40010000 	.word	0x40010000
 8001990:	48000400 	.word	0x48000400
 8001994:	48000800 	.word	0x48000800
 8001998:	48000c00 	.word	0x48000c00
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f852 	bl	8000a98 <HAL_GPIO_EXTI_Callback>
  }
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40010400 	.word	0x40010400

08001a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e081      	b.n	8001b16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fa60 	bl	8000eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2224      	movs	r2, #36	; 0x24
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	e006      	b.n	8001a88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d104      	bne.n	8001a9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001abc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69d9      	ldr	r1, [r3, #28]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1a      	ldr	r2, [r3, #32]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	817b      	strh	r3, [r7, #10]
 8001b30:	4613      	mov	r3, r2
 8001b32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	f040 80da 	bne.w	8001cf6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_I2C_Master_Transmit+0x30>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e0d3      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b58:	f7ff fbca 	bl	80012f0 <HAL_GetTick>
 8001b5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2319      	movs	r3, #25
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f9e6 	bl	8001f3c <I2C_WaitOnFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0be      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2221      	movs	r2, #33	; 0x21
 8001b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2210      	movs	r2, #16
 8001b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	893a      	ldrh	r2, [r7, #8]
 8001b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2bff      	cmp	r3, #255	; 0xff
 8001baa:	d90e      	bls.n	8001bca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	22ff      	movs	r2, #255	; 0xff
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	8979      	ldrh	r1, [r7, #10]
 8001bba:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 fb58 	bl	8002278 <I2C_TransferConfig>
 8001bc8:	e06c      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	8979      	ldrh	r1, [r7, #10]
 8001bdc:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fb47 	bl	8002278 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bea:	e05b      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	6a39      	ldr	r1, [r7, #32]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 f9e3 	bl	8001fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e07b      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d034      	beq.n	8001ca4 <HAL_I2C_Master_Transmit+0x184>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d130      	bne.n	8001ca4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 f975 	bl	8001f3c <I2C_WaitOnFlagUntilTimeout>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e04d      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2bff      	cmp	r3, #255	; 0xff
 8001c64:	d90e      	bls.n	8001c84 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	22ff      	movs	r2, #255	; 0xff
 8001c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	8979      	ldrh	r1, [r7, #10]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 fafb 	bl	8002278 <I2C_TransferConfig>
 8001c82:	e00f      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	8979      	ldrh	r1, [r7, #10]
 8001c96:	2300      	movs	r3, #0
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 faea 	bl	8002278 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d19e      	bne.n	8001bec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	6a39      	ldr	r1, [r7, #32]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f9c2 	bl	800203c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e01a      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_I2C_Master_Transmit+0x1e4>)
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001cf6:	2302      	movs	r3, #2
  }
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	80002000 	.word	0x80002000
 8001d04:	fe00e800 	.word	0xfe00e800

08001d08 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	461a      	mov	r2, r3
 8001d14:	460b      	mov	r3, r1
 8001d16:	817b      	strh	r3, [r7, #10]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	f040 80db 	bne.w	8001ee0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_I2C_Master_Receive+0x30>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e0d4      	b.n	8001ee2 <HAL_I2C_Master_Receive+0x1da>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d40:	f7ff fad6 	bl	80012f0 <HAL_GetTick>
 8001d44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2319      	movs	r3, #25
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f8f2 	bl	8001f3c <I2C_WaitOnFlagUntilTimeout>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e0bf      	b.n	8001ee2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2222      	movs	r2, #34	; 0x22
 8001d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	893a      	ldrh	r2, [r7, #8]
 8001d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2bff      	cmp	r3, #255	; 0xff
 8001d92:	d90e      	bls.n	8001db2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	22ff      	movs	r2, #255	; 0xff
 8001d98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	8979      	ldrh	r1, [r7, #10]
 8001da2:	4b52      	ldr	r3, [pc, #328]	; (8001eec <HAL_I2C_Master_Receive+0x1e4>)
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 fa64 	bl	8002278 <I2C_TransferConfig>
 8001db0:	e06d      	b.n	8001e8e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	8979      	ldrh	r1, [r7, #10]
 8001dc4:	4b49      	ldr	r3, [pc, #292]	; (8001eec <HAL_I2C_Master_Receive+0x1e4>)
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fa53 	bl	8002278 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001dd2:	e05c      	b.n	8001e8e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	6a39      	ldr	r1, [r7, #32]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f96b 	bl	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e07c      	b.n	8001ee2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d034      	beq.n	8001e8e <HAL_I2C_Master_Receive+0x186>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d130      	bne.n	8001e8e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	2200      	movs	r2, #0
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f880 	bl	8001f3c <I2C_WaitOnFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e04d      	b.n	8001ee2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2bff      	cmp	r3, #255	; 0xff
 8001e4e:	d90e      	bls.n	8001e6e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	22ff      	movs	r2, #255	; 0xff
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	8979      	ldrh	r1, [r7, #10]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fa06 	bl	8002278 <I2C_TransferConfig>
 8001e6c:	e00f      	b.n	8001e8e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	8979      	ldrh	r1, [r7, #10]
 8001e80:	2300      	movs	r3, #0
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f9f5 	bl	8002278 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d19d      	bne.n	8001dd4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	6a39      	ldr	r1, [r7, #32]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 f8cd 	bl	800203c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e01a      	b.n	8001ee2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6859      	ldr	r1, [r3, #4]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_I2C_Master_Receive+0x1e8>)
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	e000      	b.n	8001ee2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ee0:	2302      	movs	r3, #2
  }
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	80002400 	.word	0x80002400
 8001ef0:	fe00e800 	.word	0xfe00e800

08001ef4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d103      	bne.n	8001f12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d007      	beq.n	8001f30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	619a      	str	r2, [r3, #24]
  }
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f4c:	e022      	b.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f54:	d01e      	beq.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f56:	f7ff f9cb 	bl	80012f0 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d302      	bcc.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d113      	bne.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	f043 0220 	orr.w	r2, r3, #32
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e00f      	b.n	8001fb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d0cd      	beq.n	8001f4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fc8:	e02c      	b.n	8002024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f8dc 	bl	800218c <I2C_IsAcknowledgeFailed>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e02a      	b.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fe4:	d01e      	beq.n	8002024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe6:	f7ff f983 	bl	80012f0 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d302      	bcc.n	8001ffc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d113      	bne.n	8002024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e007      	b.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d1cb      	bne.n	8001fca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002048:	e028      	b.n	800209c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f89c 	bl	800218c <I2C_IsAcknowledgeFailed>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e026      	b.n	80020ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205e:	f7ff f947 	bl	80012f0 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d113      	bne.n	800209c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e007      	b.n	80020ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d1cf      	bne.n	800204a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020c0:	e055      	b.n	800216e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f860 	bl	800218c <I2C_IsAcknowledgeFailed>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e053      	b.n	800217e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d129      	bne.n	8002138 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d105      	bne.n	80020fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e03f      	b.n	800217e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2220      	movs	r2, #32
 8002104:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002112:	400b      	ands	r3, r1
 8002114:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e022      	b.n	800217e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002138:	f7ff f8da 	bl	80012f0 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	429a      	cmp	r2, r3
 8002146:	d302      	bcc.n	800214e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10f      	bne.n	800216e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f043 0220 	orr.w	r2, r3, #32
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e007      	b.n	800217e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d1a2      	bne.n	80020c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	fe00e800 	.word	0xfe00e800

0800218c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d161      	bne.n	800226a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021b4:	d02b      	beq.n	800220e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c4:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c6:	e022      	b.n	800220e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ce:	d01e      	beq.n	800220e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d0:	f7ff f88e 	bl	80012f0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d302      	bcc.n	80021e6 <I2C_IsAcknowledgeFailed+0x5a>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d113      	bne.n	800220e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f043 0220 	orr.w	r2, r3, #32
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e02e      	b.n	800226c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b20      	cmp	r3, #32
 800221a:	d1d5      	bne.n	80021c8 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2210      	movs	r2, #16
 8002222:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2220      	movs	r2, #32
 800222a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f7ff fe61 	bl	8001ef4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6859      	ldr	r1, [r3, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <I2C_IsAcknowledgeFailed+0xe8>)
 800223e:	400b      	ands	r3, r1
 8002240:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f043 0204 	orr.w	r2, r3, #4
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	fe00e800 	.word	0xfe00e800

08002278 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	817b      	strh	r3, [r7, #10]
 8002286:	4613      	mov	r3, r2
 8002288:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	0d5b      	lsrs	r3, r3, #21
 8002294:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002298:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <I2C_TransferConfig+0x58>)
 800229a:	430b      	orrs	r3, r1
 800229c:	43db      	mvns	r3, r3
 800229e:	ea02 0103 	and.w	r1, r2, r3
 80022a2:	897b      	ldrh	r3, [r7, #10]
 80022a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022a8:	7a7b      	ldrb	r3, [r7, #9]
 80022aa:	041b      	lsls	r3, r3, #16
 80022ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	03ff63ff 	.word	0x03ff63ff

080022d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d138      	bne.n	800235c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e032      	b.n	800235e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	; 0x24
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b20      	cmp	r3, #32
 800237e:	d139      	bne.n	80023f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800238a:	2302      	movs	r3, #2
 800238c:	e033      	b.n	80023f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2224      	movs	r2, #36	; 0x24
 800239a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e000      	b.n	80023f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
  }
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800240a:	af00      	add	r7, sp, #0
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	f000 bef4 	b.w	8003206 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 816a 	beq.w	8002702 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800242e:	4bb3      	ldr	r3, [pc, #716]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d00c      	beq.n	8002454 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800243a:	4bb0      	ldr	r3, [pc, #704]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b08      	cmp	r3, #8
 8002444:	d159      	bne.n	80024fa <HAL_RCC_OscConfig+0xf6>
 8002446:	4bad      	ldr	r3, [pc, #692]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002452:	d152      	bne.n	80024fa <HAL_RCC_OscConfig+0xf6>
 8002454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002458:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002468:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	fab3 f383 	clz	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d102      	bne.n	8002486 <HAL_RCC_OscConfig+0x82>
 8002480:	4b9e      	ldr	r3, [pc, #632]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	e015      	b.n	80024b2 <HAL_RCC_OscConfig+0xae>
 8002486:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800248a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800249a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024ae:	4b93      	ldr	r3, [pc, #588]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80024ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024be:	fa92 f2a2 	rbit	r2, r2
 80024c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80024c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80024ca:	fab2 f282 	clz	r2, r2
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	f042 0220 	orr.w	r2, r2, #32
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f002 021f 	and.w	r2, r2, #31
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 810c 	beq.w	8002700 <HAL_RCC_OscConfig+0x2fc>
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 8106 	bne.w	8002700 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f000 be86 	b.w	8003206 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002504:	d106      	bne.n	8002514 <HAL_RCC_OscConfig+0x110>
 8002506:	4b7d      	ldr	r3, [pc, #500]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a7c      	ldr	r2, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e030      	b.n	8002576 <HAL_RCC_OscConfig+0x172>
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x134>
 800251e:	4b77      	ldr	r3, [pc, #476]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a76      	ldr	r2, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b74      	ldr	r3, [pc, #464]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a73      	ldr	r2, [pc, #460]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e01e      	b.n	8002576 <HAL_RCC_OscConfig+0x172>
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002542:	d10c      	bne.n	800255e <HAL_RCC_OscConfig+0x15a>
 8002544:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a6c      	ldr	r2, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 800254a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b6a      	ldr	r3, [pc, #424]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a69      	ldr	r2, [pc, #420]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e00b      	b.n	8002576 <HAL_RCC_OscConfig+0x172>
 800255e:	4b67      	ldr	r3, [pc, #412]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a66      	ldr	r2, [pc, #408]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b64      	ldr	r3, [pc, #400]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a63      	ldr	r2, [pc, #396]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002574:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002576:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	f023 020f 	bic.w	r2, r3, #15
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	495d      	ldr	r1, [pc, #372]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002586:	4313      	orrs	r3, r2
 8002588:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d059      	beq.n	8002648 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe feac 	bl	80012f0 <HAL_GetTick>
 8002598:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259e:	f7fe fea7 	bl	80012f0 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d902      	bls.n	80025b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	f000 be29 	b.w	8003206 <HAL_RCC_OscConfig+0xe02>
 80025b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_OscConfig+0x1e2>
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x20e>
 80025e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002602:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800260e:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002616:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800261a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800261e:	fa92 f2a2 	rbit	r2, r2
 8002622:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002626:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800262a:	fab2 f282 	clz	r2, r2
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f042 0220 	orr.w	r2, r2, #32
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f002 021f 	and.w	r2, r2, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0ab      	beq.n	800259e <HAL_RCC_OscConfig+0x19a>
 8002646:	e05c      	b.n	8002702 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fe52 	bl	80012f0 <HAL_GetTick>
 800264c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002652:	f7fe fe4d 	bl	80012f0 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d902      	bls.n	8002668 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	f000 bdcf 	b.w	8003206 <HAL_RCC_OscConfig+0xe02>
 8002668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800266c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800267c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d102      	bne.n	800269a <HAL_RCC_OscConfig+0x296>
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	e015      	b.n	80026c6 <HAL_RCC_OscConfig+0x2c2>
 800269a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_RCC_OscConfig+0x2f8>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026d2:	fa92 f2a2 	rbit	r2, r2
 80026d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026de:	fab2 f282 	clz	r2, r2
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f042 0220 	orr.w	r2, r2, #32
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	f002 021f 	and.w	r2, r2, #31
 80026ee:	2101      	movs	r1, #1
 80026f0:	fa01 f202 	lsl.w	r2, r1, r2
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ab      	bne.n	8002652 <HAL_RCC_OscConfig+0x24e>
 80026fa:	e002      	b.n	8002702 <HAL_RCC_OscConfig+0x2fe>
 80026fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 816f 	beq.w	80029f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002712:	4bd0      	ldr	r3, [pc, #832]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800271e:	4bcd      	ldr	r3, [pc, #820]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b08      	cmp	r3, #8
 8002728:	d16c      	bne.n	8002804 <HAL_RCC_OscConfig+0x400>
 800272a:	4bca      	ldr	r3, [pc, #808]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d166      	bne.n	8002804 <HAL_RCC_OscConfig+0x400>
 8002736:	2302      	movs	r3, #2
 8002738:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002748:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d102      	bne.n	8002766 <HAL_RCC_OscConfig+0x362>
 8002760:	4bbc      	ldr	r3, [pc, #752]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	e013      	b.n	800278e <HAL_RCC_OscConfig+0x38a>
 8002766:	2302      	movs	r3, #2
 8002768:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002778:	2302      	movs	r3, #2
 800277a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800277e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800278a:	4bb2      	ldr	r3, [pc, #712]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	2202      	movs	r2, #2
 8002790:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002794:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002798:	fa92 f2a2 	rbit	r2, r2
 800279c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027a4:	fab2 f282 	clz	r2, r2
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	f042 0220 	orr.w	r2, r2, #32
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	f002 021f 	and.w	r2, r2, #31
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_RCC_OscConfig+0x3cc>
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	f000 bd1b 	b.w	8003206 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d0:	4ba0      	ldr	r3, [pc, #640]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	21f8      	movs	r1, #248	; 0xf8
 80027e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027e8:	fa91 f1a1 	rbit	r1, r1
 80027ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80027f4:	fab1 f181 	clz	r1, r1
 80027f8:	b2c9      	uxtb	r1, r1
 80027fa:	408b      	lsls	r3, r1
 80027fc:	4995      	ldr	r1, [pc, #596]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	e0f5      	b.n	80029f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8085 	beq.w	800291a <HAL_RCC_OscConfig+0x516>
 8002810:	2301      	movs	r3, #1
 8002812:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002822:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002830:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	461a      	mov	r2, r3
 8002838:	2301      	movs	r3, #1
 800283a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fd58 	bl	80012f0 <HAL_GetTick>
 8002840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002846:	f7fe fd53 	bl	80012f0 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d902      	bls.n	800285c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	f000 bcd5 	b.w	8003206 <HAL_RCC_OscConfig+0xe02>
 800285c:	2302      	movs	r3, #2
 800285e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800286e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d102      	bne.n	800288c <HAL_RCC_OscConfig+0x488>
 8002886:	4b73      	ldr	r3, [pc, #460]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	e013      	b.n	80028b4 <HAL_RCC_OscConfig+0x4b0>
 800288c:	2302      	movs	r3, #2
 800288e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800289e:	2302      	movs	r3, #2
 80028a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028b0:	4b68      	ldr	r3, [pc, #416]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	2202      	movs	r2, #2
 80028b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028be:	fa92 f2a2 	rbit	r2, r2
 80028c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028ca:	fab2 f282 	clz	r2, r2
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f042 0220 	orr.w	r2, r2, #32
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f002 021f 	and.w	r2, r2, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0af      	beq.n	8002846 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	21f8      	movs	r1, #248	; 0xf8
 80028f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028fe:	fa91 f1a1 	rbit	r1, r1
 8002902:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002906:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800290a:	fab1 f181 	clz	r1, r1
 800290e:	b2c9      	uxtb	r1, r1
 8002910:	408b      	lsls	r3, r1
 8002912:	4950      	ldr	r1, [pc, #320]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
 8002918:	e06a      	b.n	80029f0 <HAL_RCC_OscConfig+0x5ec>
 800291a:	2301      	movs	r3, #1
 800291c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800292c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800293a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	461a      	mov	r2, r3
 8002942:	2300      	movs	r3, #0
 8002944:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe fcd3 	bl	80012f0 <HAL_GetTick>
 800294a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002950:	f7fe fcce 	bl	80012f0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d902      	bls.n	8002966 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	f000 bc50 	b.w	8003206 <HAL_RCC_OscConfig+0xe02>
 8002966:	2302      	movs	r3, #2
 8002968:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d102      	bne.n	8002996 <HAL_RCC_OscConfig+0x592>
 8002990:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	e013      	b.n	80029be <HAL_RCC_OscConfig+0x5ba>
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_RCC_OscConfig+0x650>)
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	2202      	movs	r2, #2
 80029c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80029c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029c8:	fa92 f2a2 	rbit	r2, r2
 80029cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029d4:	fab2 f282 	clz	r2, r2
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f042 0220 	orr.w	r2, r2, #32
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f002 021f 	and.w	r2, r2, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1af      	bne.n	8002950 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80da 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d069      	beq.n	8002ade <HAL_RCC_OscConfig+0x6da>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_OscConfig+0x654>)
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2301      	movs	r3, #1
 8002a32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7fe fc5c 	bl	80012f0 <HAL_GetTick>
 8002a38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3c:	e00e      	b.n	8002a5c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fc57 	bl	80012f0 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d906      	bls.n	8002a5c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e3d9      	b.n	8003206 <HAL_RCC_OscConfig+0xe02>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	10908120 	.word	0x10908120
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a72:	2202      	movs	r2, #2
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	fa93 f2a3 	rbit	r2, r3
 8002a80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	fa93 f2a3 	rbit	r2, r3
 8002a98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	4ba5      	ldr	r3, [pc, #660]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	6019      	str	r1, [r3, #0]
 8002aaa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	fa93 f1a3 	rbit	r1, r3
 8002ab4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ab8:	6019      	str	r1, [r3, #0]
  return result;
 8002aba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0b0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x63a>
 8002adc:	e06a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7b0>
 8002ade:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	fa93 f2a3 	rbit	r2, r3
 8002af0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002af4:	601a      	str	r2, [r3, #0]
  return result;
 8002af6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002afa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b8c      	ldr	r3, [pc, #560]	; (8002d38 <HAL_RCC_OscConfig+0x934>)
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fbee 	bl	80012f0 <HAL_GetTick>
 8002b14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	e009      	b.n	8002b2e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fbe9 	bl	80012f0 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e36b      	b.n	8003206 <HAL_RCC_OscConfig+0xe02>
 8002b2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b32:	2202      	movs	r2, #2
 8002b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	fa93 f2a3 	rbit	r2, r3
 8002b40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	fa93 f2a3 	rbit	r2, r3
 8002b58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b62:	2202      	movs	r2, #2
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	fa93 f2a3 	rbit	r2, r3
 8002b70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b76:	4b6f      	ldr	r3, [pc, #444]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b7e:	2102      	movs	r1, #2
 8002b80:	6019      	str	r1, [r3, #0]
 8002b82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	fa93 f1a3 	rbit	r1, r3
 8002b8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b90:	6019      	str	r1, [r3, #0]
  return result;
 8002b92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1b2      	bne.n	8002b1a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8158 	beq.w	8002e74 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b5a      	ldr	r3, [pc, #360]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d112      	bne.n	8002bfc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	4b57      	ldr	r3, [pc, #348]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be0:	61d3      	str	r3, [r2, #28]
 8002be2:	4b54      	ldr	r3, [pc, #336]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002bea:	f107 0308 	add.w	r3, r7, #8
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	4b4f      	ldr	r3, [pc, #316]	; (8002d3c <HAL_RCC_OscConfig+0x938>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d11a      	bne.n	8002c3e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c08:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <HAL_RCC_OscConfig+0x938>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <HAL_RCC_OscConfig+0x938>)
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c12:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c14:	f7fe fb6c 	bl	80012f0 <HAL_GetTick>
 8002c18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	e009      	b.n	8002c32 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7fe fb67 	bl	80012f0 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e2e9      	b.n	8003206 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <HAL_RCC_OscConfig+0x938>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ef      	beq.n	8002c1e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x852>
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	4a39      	ldr	r2, [pc, #228]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6213      	str	r3, [r2, #32]
 8002c54:	e02f      	b.n	8002cb6 <HAL_RCC_OscConfig+0x8b2>
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x876>
 8002c60:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a33      	ldr	r2, [pc, #204]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002c72:	f023 0304 	bic.w	r3, r3, #4
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	e01d      	b.n	8002cb6 <HAL_RCC_OscConfig+0x8b2>
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d10c      	bne.n	8002c9e <HAL_RCC_OscConfig+0x89a>
 8002c84:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6213      	str	r3, [r2, #32]
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x8b2>
 8002c9e:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4a24      	ldr	r2, [pc, #144]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6213      	str	r3, [r2, #32]
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002cb0:	f023 0304 	bic.w	r3, r3, #4
 8002cb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d06b      	beq.n	8002d98 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fb16 	bl	80012f0 <HAL_GetTick>
 8002cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	e00b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7fe fb11 	bl	80012f0 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e291      	b.n	8003206 <HAL_RCC_OscConfig+0xe02>
 8002ce2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f2a3 	rbit	r2, r3
 8002cf4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002cfe:	2202      	movs	r2, #2
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	fa93 f2a3 	rbit	r2, r3
 8002d0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d10:	601a      	str	r2, [r3, #0]
  return result;
 8002d12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d109      	bne.n	8002d40 <HAL_RCC_OscConfig+0x93c>
 8002d2c:	4b01      	ldr	r3, [pc, #4]	; (8002d34 <HAL_RCC_OscConfig+0x930>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	e014      	b.n	8002d5c <HAL_RCC_OscConfig+0x958>
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	10908120 	.word	0x10908120
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d44:	2202      	movs	r2, #2
 8002d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	fa93 f2a3 	rbit	r2, r3
 8002d52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	4bbb      	ldr	r3, [pc, #748]	; (8003048 <HAL_RCC_OscConfig+0xc44>)
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d60:	2102      	movs	r1, #2
 8002d62:	6011      	str	r1, [r2, #0]
 8002d64:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	fa92 f1a2 	rbit	r1, r2
 8002d6e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d72:	6011      	str	r1, [r2, #0]
  return result;
 8002d74:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	fab2 f282 	clz	r2, r2
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	f002 021f 	and.w	r2, r2, #31
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d099      	beq.n	8002cca <HAL_RCC_OscConfig+0x8c6>
 8002d96:	e063      	b.n	8002e60 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d98:	f7fe faaa 	bl	80012f0 <HAL_GetTick>
 8002d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da0:	e00b      	b.n	8002dba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe faa5 	bl	80012f0 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e225      	b.n	8003206 <HAL_RCC_OscConfig+0xe02>
 8002dba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f2a3 	rbit	r2, r3
 8002dcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f2a3 	rbit	r2, r3
 8002de4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002de8:	601a      	str	r2, [r3, #0]
  return result;
 8002dea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002dee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0302 	orr.w	r3, r3, #2
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_OscConfig+0xa06>
 8002e04:	4b90      	ldr	r3, [pc, #576]	; (8003048 <HAL_RCC_OscConfig+0xc44>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	e00d      	b.n	8002e26 <HAL_RCC_OscConfig+0xa22>
 8002e0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e0e:	2202      	movs	r2, #2
 8002e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	4b89      	ldr	r3, [pc, #548]	; (8003048 <HAL_RCC_OscConfig+0xc44>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	6011      	str	r1, [r2, #0]
 8002e2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	fa92 f1a2 	rbit	r1, r2
 8002e38:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e3c:	6011      	str	r1, [r2, #0]
  return result;
 8002e3e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f002 021f 	and.w	r2, r2, #31
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1a0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e68:	4b77      	ldr	r3, [pc, #476]	; (8003048 <HAL_RCC_OscConfig+0xc44>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	4a76      	ldr	r2, [pc, #472]	; (8003048 <HAL_RCC_OscConfig+0xc44>)
 8002e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 81c2 	beq.w	8003204 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e80:	4b71      	ldr	r3, [pc, #452]	; (8003048 <HAL_RCC_OscConfig+0xc44>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	f000 819c 	beq.w	80031c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	f040 8114 	bne.w	80030c2 <HAL_RCC_OscConfig+0xcbe>
 8002e9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	fa93 f2a3 	rbit	r2, r3
 8002eae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002eb2:	601a      	str	r2, [r3, #0]
  return result;
 8002eb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002eb8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ec4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2300      	movs	r3, #0
 8002ece:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fa0e 	bl	80012f0 <HAL_GetTick>
 8002ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed8:	e009      	b.n	8002eee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fa09 	bl	80012f0 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e18b      	b.n	8003206 <HAL_RCC_OscConfig+0xe02>
 8002eee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	fa93 f2a3 	rbit	r2, r3
 8002f02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f06:	601a      	str	r2, [r3, #0]
  return result;
 8002f08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d102      	bne.n	8002f28 <HAL_RCC_OscConfig+0xb24>
 8002f22:	4b49      	ldr	r3, [pc, #292]	; (8003048 <HAL_RCC_OscConfig+0xc44>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	e01b      	b.n	8002f60 <HAL_RCC_OscConfig+0xb5c>
 8002f28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	fa93 f2a3 	rbit	r2, r3
 8002f3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	fa93 f2a3 	rbit	r2, r3
 8002f56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <HAL_RCC_OscConfig+0xc44>)
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f68:	6011      	str	r1, [r2, #0]
 8002f6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	fa92 f1a2 	rbit	r1, r2
 8002f74:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f78:	6011      	str	r1, [r2, #0]
  return result;
 8002f7a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	fab2 f282 	clz	r2, r2
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	f042 0220 	orr.w	r2, r2, #32
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	f002 021f 	and.w	r2, r2, #31
 8002f90:	2101      	movs	r1, #1
 8002f92:	fa01 f202 	lsl.w	r2, r1, r2
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d19e      	bne.n	8002eda <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	; (8003048 <HAL_RCC_OscConfig+0xc44>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	4925      	ldr	r1, [pc, #148]	; (8003048 <HAL_RCC_OscConfig+0xc44>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
 8002fb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f2a3 	rbit	r2, r3
 8002fcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fd0:	601a      	str	r2, [r3, #0]
  return result;
 8002fd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fd6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fe2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2301      	movs	r3, #1
 8002fec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe f97f 	bl	80012f0 <HAL_GetTick>
 8002ff2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff6:	e009      	b.n	800300c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fe f97a 	bl	80012f0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0fc      	b.n	8003206 <HAL_RCC_OscConfig+0xe02>
 800300c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003010:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003024:	601a      	str	r2, [r3, #0]
  return result;
 8003026:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800302a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d105      	bne.n	800304c <HAL_RCC_OscConfig+0xc48>
 8003040:	4b01      	ldr	r3, [pc, #4]	; (8003048 <HAL_RCC_OscConfig+0xc44>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	e01e      	b.n	8003084 <HAL_RCC_OscConfig+0xc80>
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	fa93 f2a3 	rbit	r2, r3
 8003060:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800306a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	fa93 f2a3 	rbit	r2, r3
 800307a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	4b63      	ldr	r3, [pc, #396]	; (8003210 <HAL_RCC_OscConfig+0xe0c>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003088:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800308c:	6011      	str	r1, [r2, #0]
 800308e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	fa92 f1a2 	rbit	r1, r2
 8003098:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800309c:	6011      	str	r1, [r2, #0]
  return result;
 800309e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f042 0220 	orr.w	r2, r2, #32
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f002 021f 	and.w	r2, r2, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d09b      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xbf4>
 80030c0:	e0a0      	b.n	8003204 <HAL_RCC_OscConfig+0xe00>
 80030c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	fa93 f2a3 	rbit	r2, r3
 80030d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030da:	601a      	str	r2, [r3, #0]
  return result;
 80030dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	461a      	mov	r2, r3
 80030f4:	2300      	movs	r3, #0
 80030f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe f8fa 	bl	80012f0 <HAL_GetTick>
 80030fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003100:	e009      	b.n	8003116 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003102:	f7fe f8f5 	bl	80012f0 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e077      	b.n	8003206 <HAL_RCC_OscConfig+0xe02>
 8003116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800311a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800311e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	fa93 f2a3 	rbit	r2, r3
 800312a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312e:	601a      	str	r2, [r3, #0]
  return result;
 8003130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003134:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <HAL_RCC_OscConfig+0xd4c>
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_RCC_OscConfig+0xe0c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	e01b      	b.n	8003188 <HAL_RCC_OscConfig+0xd84>
 8003150:	f107 0320 	add.w	r3, r7, #32
 8003154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f107 0320 	add.w	r3, r7, #32
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	fa93 f2a3 	rbit	r2, r3
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f107 0318 	add.w	r3, r7, #24
 800316e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f107 0318 	add.w	r3, r7, #24
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	fa93 f2a3 	rbit	r2, r3
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	4b22      	ldr	r3, [pc, #136]	; (8003210 <HAL_RCC_OscConfig+0xe0c>)
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f107 0210 	add.w	r2, r7, #16
 800318c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003190:	6011      	str	r1, [r2, #0]
 8003192:	f107 0210 	add.w	r2, r7, #16
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	fa92 f1a2 	rbit	r1, r2
 800319c:	f107 020c 	add.w	r2, r7, #12
 80031a0:	6011      	str	r1, [r2, #0]
  return result;
 80031a2:	f107 020c 	add.w	r2, r7, #12
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	fab2 f282 	clz	r2, r2
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f042 0220 	orr.w	r2, r2, #32
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f002 021f 	and.w	r2, r2, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d19e      	bne.n	8003102 <HAL_RCC_OscConfig+0xcfe>
 80031c4:	e01e      	b.n	8003204 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e018      	b.n	8003206 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031d4:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <HAL_RCC_OscConfig+0xe0c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d108      	bne.n	8003200 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000

08003214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b09e      	sub	sp, #120	; 0x78
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e162      	b.n	80034f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b90      	ldr	r3, [pc, #576]	; (8003470 <HAL_RCC_ClockConfig+0x25c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d910      	bls.n	800325c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b8d      	ldr	r3, [pc, #564]	; (8003470 <HAL_RCC_ClockConfig+0x25c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	498b      	ldr	r1, [pc, #556]	; (8003470 <HAL_RCC_ClockConfig+0x25c>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b89      	ldr	r3, [pc, #548]	; (8003470 <HAL_RCC_ClockConfig+0x25c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e14a      	b.n	80034f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	4b82      	ldr	r3, [pc, #520]	; (8003474 <HAL_RCC_ClockConfig+0x260>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	497f      	ldr	r1, [pc, #508]	; (8003474 <HAL_RCC_ClockConfig+0x260>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80dc 	beq.w	8003440 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d13c      	bne.n	800330a <HAL_RCC_ClockConfig+0xf6>
 8003290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003294:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003298:	fa93 f3a3 	rbit	r3, r3
 800329c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800329e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <HAL_RCC_ClockConfig+0xa6>
 80032b4:	4b6f      	ldr	r3, [pc, #444]	; (8003474 <HAL_RCC_ClockConfig+0x260>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	e00f      	b.n	80032da <HAL_RCC_ClockConfig+0xc6>
 80032ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	667b      	str	r3, [r7, #100]	; 0x64
 80032c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032cc:	663b      	str	r3, [r7, #96]	; 0x60
 80032ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d6:	4b67      	ldr	r3, [pc, #412]	; (8003474 <HAL_RCC_ClockConfig+0x260>)
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032de:	65ba      	str	r2, [r7, #88]	; 0x58
 80032e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032e2:	fa92 f2a2 	rbit	r2, r2
 80032e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032ea:	fab2 f282 	clz	r2, r2
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	f042 0220 	orr.w	r2, r2, #32
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	f002 021f 	and.w	r2, r2, #31
 80032fa:	2101      	movs	r1, #1
 80032fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d17b      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e0f3      	b.n	80034f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d13c      	bne.n	800338c <HAL_RCC_ClockConfig+0x178>
 8003312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003316:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d102      	bne.n	800333c <HAL_RCC_ClockConfig+0x128>
 8003336:	4b4f      	ldr	r3, [pc, #316]	; (8003474 <HAL_RCC_ClockConfig+0x260>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	e00f      	b.n	800335c <HAL_RCC_ClockConfig+0x148>
 800333c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003340:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	647b      	str	r3, [r7, #68]	; 0x44
 800334a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334e:	643b      	str	r3, [r7, #64]	; 0x40
 8003350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003358:	4b46      	ldr	r3, [pc, #280]	; (8003474 <HAL_RCC_ClockConfig+0x260>)
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003360:	63ba      	str	r2, [r7, #56]	; 0x38
 8003362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003364:	fa92 f2a2 	rbit	r2, r2
 8003368:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800336a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800336c:	fab2 f282 	clz	r2, r2
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f042 0220 	orr.w	r2, r2, #32
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	f002 021f 	and.w	r2, r2, #31
 800337c:	2101      	movs	r1, #1
 800337e:	fa01 f202 	lsl.w	r2, r1, r2
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d13a      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0b2      	b.n	80034f2 <HAL_RCC_ClockConfig+0x2de>
 800338c:	2302      	movs	r3, #2
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d102      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x1a0>
 80033ae:	4b31      	ldr	r3, [pc, #196]	; (8003474 <HAL_RCC_ClockConfig+0x260>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	e00d      	b.n	80033d0 <HAL_RCC_ClockConfig+0x1bc>
 80033b4:	2302      	movs	r3, #2
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
 80033c0:	2302      	movs	r3, #2
 80033c2:	623b      	str	r3, [r7, #32]
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	4b29      	ldr	r3, [pc, #164]	; (8003474 <HAL_RCC_ClockConfig+0x260>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2202      	movs	r2, #2
 80033d2:	61ba      	str	r2, [r7, #24]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	fa92 f2a2 	rbit	r2, r2
 80033da:	617a      	str	r2, [r7, #20]
  return result;
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	fab2 f282 	clz	r2, r2
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f042 0220 	orr.w	r2, r2, #32
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f002 021f 	and.w	r2, r2, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e079      	b.n	80034f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_RCC_ClockConfig+0x260>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f023 0203 	bic.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	491a      	ldr	r1, [pc, #104]	; (8003474 <HAL_RCC_ClockConfig+0x260>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003410:	f7fd ff6e 	bl	80012f0 <HAL_GetTick>
 8003414:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	e00a      	b.n	800342e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003418:	f7fd ff6a 	bl	80012f0 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e061      	b.n	80034f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	4b11      	ldr	r3, [pc, #68]	; (8003474 <HAL_RCC_ClockConfig+0x260>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 020c 	and.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	429a      	cmp	r2, r3
 800343e:	d1eb      	bne.n	8003418 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_ClockConfig+0x25c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d214      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_RCC_ClockConfig+0x25c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 0207 	bic.w	r2, r3, #7
 8003456:	4906      	ldr	r1, [pc, #24]	; (8003470 <HAL_RCC_ClockConfig+0x25c>)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_RCC_ClockConfig+0x25c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e040      	b.n	80034f2 <HAL_RCC_ClockConfig+0x2de>
 8003470:	40022000 	.word	0x40022000
 8003474:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <HAL_RCC_ClockConfig+0x2e8>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	491a      	ldr	r1, [pc, #104]	; (80034fc <HAL_RCC_ClockConfig+0x2e8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <HAL_RCC_ClockConfig+0x2e8>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4912      	ldr	r1, [pc, #72]	; (80034fc <HAL_RCC_ClockConfig+0x2e8>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034b6:	f000 f829 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80034ba:	4601      	mov	r1, r0
 80034bc:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <HAL_RCC_ClockConfig+0x2e8>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c4:	22f0      	movs	r2, #240	; 0xf0
 80034c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	fa92 f2a2 	rbit	r2, r2
 80034ce:	60fa      	str	r2, [r7, #12]
  return result;
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	fab2 f282 	clz	r2, r2
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	40d3      	lsrs	r3, r2
 80034da:	4a09      	ldr	r2, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x2ec>)
 80034dc:	5cd3      	ldrb	r3, [r2, r3]
 80034de:	fa21 f303 	lsr.w	r3, r1, r3
 80034e2:	4a08      	ldr	r2, [pc, #32]	; (8003504 <HAL_RCC_ClockConfig+0x2f0>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_RCC_ClockConfig+0x2f4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd febc 	bl	8001268 <HAL_InitTick>
  
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3778      	adds	r7, #120	; 0x78
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	0800abac 	.word	0x0800abac
 8003504:	2000000c 	.word	0x2000000c
 8003508:	20000010 	.word	0x20000010

0800350c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	b08b      	sub	sp, #44	; 0x2c
 8003510:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003526:	4b29      	ldr	r3, [pc, #164]	; (80035cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b04      	cmp	r3, #4
 8003534:	d002      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x30>
 8003536:	2b08      	cmp	r3, #8
 8003538:	d003      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0x36>
 800353a:	e03c      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800353c:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800353e:	623b      	str	r3, [r7, #32]
      break;
 8003540:	e03c      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003548:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800354c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	fa92 f2a2 	rbit	r2, r2
 8003554:	607a      	str	r2, [r7, #4]
  return result;
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	fab2 f282 	clz	r2, r2
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	40d3      	lsrs	r3, r2
 8003560:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003562:	5cd3      	ldrb	r3, [r2, r3]
 8003564:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003566:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	220f      	movs	r2, #15
 8003570:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	fa92 f2a2 	rbit	r2, r2
 8003578:	60fa      	str	r2, [r7, #12]
  return result;
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	fab2 f282 	clz	r2, r2
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	40d3      	lsrs	r3, r2
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003594:	4a0e      	ldr	r2, [pc, #56]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	fbb2 f2f3 	udiv	r2, r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
 80035a4:	e004      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	623b      	str	r3, [r7, #32]
      break;
 80035b4:	e002      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035b8:	623b      	str	r3, [r7, #32]
      break;
 80035ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035bc:	6a3b      	ldr	r3, [r7, #32]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	372c      	adds	r7, #44	; 0x2c
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	007a1200 	.word	0x007a1200
 80035d4:	0800abc4 	.word	0x0800abc4
 80035d8:	0800abd4 	.word	0x0800abd4
 80035dc:	003d0900 	.word	0x003d0900

080035e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	2000000c 	.word	0x2000000c

080035f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035fe:	f7ff ffef 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003602:	4601      	mov	r1, r0
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800360c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003610:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	fa92 f2a2 	rbit	r2, r2
 8003618:	603a      	str	r2, [r7, #0]
  return result;
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	fab2 f282 	clz	r2, r2
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	40d3      	lsrs	r3, r2
 8003624:	4a04      	ldr	r2, [pc, #16]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003626:	5cd3      	ldrb	r3, [r2, r3]
 8003628:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	0800abbc 	.word	0x0800abbc

0800363c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003642:	f7ff ffcd 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003646:	4601      	mov	r1, r0
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003650:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003654:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	fa92 f2a2 	rbit	r2, r2
 800365c:	603a      	str	r2, [r7, #0]
  return result;
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	fab2 f282 	clz	r2, r2
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	40d3      	lsrs	r3, r2
 8003668:	4a04      	ldr	r2, [pc, #16]	; (800367c <HAL_RCC_GetPCLK2Freq+0x40>)
 800366a:	5cd3      	ldrb	r3, [r2, r3]
 800366c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000
 800367c:	0800abbc 	.word	0x0800abbc

08003680 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b092      	sub	sp, #72	; 0x48
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003690:	2300      	movs	r3, #0
 8003692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80cd 	beq.w	800383e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a4:	4b86      	ldr	r3, [pc, #536]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10e      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b0:	4b83      	ldr	r3, [pc, #524]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	4a82      	ldr	r2, [pc, #520]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ba:	61d3      	str	r3, [r2, #28]
 80036bc:	4b80      	ldr	r3, [pc, #512]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	4b7d      	ldr	r3, [pc, #500]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d118      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036da:	4b7a      	ldr	r3, [pc, #488]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a79      	ldr	r2, [pc, #484]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e6:	f7fd fe03 	bl	80012f0 <HAL_GetTick>
 80036ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	e008      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ee:	f7fd fdff 	bl	80012f0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b64      	cmp	r3, #100	; 0x64
 80036fa:	d901      	bls.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0db      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	4b70      	ldr	r3, [pc, #448]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800370c:	4b6c      	ldr	r3, [pc, #432]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d07d      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003726:	429a      	cmp	r2, r3
 8003728:	d076      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800372a:	4b65      	ldr	r3, [pc, #404]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003738:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	4b5e      	ldr	r3, [pc, #376]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	461a      	mov	r2, r3
 8003754:	2301      	movs	r3, #1
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800375c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	4b55      	ldr	r3, [pc, #340]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	461a      	mov	r2, r3
 8003778:	2300      	movs	r3, #0
 800377a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800377c:	4a50      	ldr	r2, [pc, #320]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800377e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003780:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d045      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fd fdb0 	bl	80012f0 <HAL_GetTick>
 8003790:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003792:	e00a      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003794:	f7fd fdac 	bl	80012f0 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e086      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80037aa:	2302      	movs	r3, #2
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
 80037b6:	2302      	movs	r3, #2
 80037b8:	623b      	str	r3, [r7, #32]
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	61fb      	str	r3, [r7, #28]
  return result;
 80037c2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f043 0302 	orr.w	r3, r3, #2
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d102      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80037d8:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	e007      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80037de:	2302      	movs	r3, #2
 80037e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2202      	movs	r2, #2
 80037f0:	613a      	str	r2, [r7, #16]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	fa92 f2a2 	rbit	r2, r2
 80037f8:	60fa      	str	r2, [r7, #12]
  return result;
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	fab2 f282 	clz	r2, r2
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f002 021f 	and.w	r2, r2, #31
 800380c:	2101      	movs	r1, #1
 800380e:	fa01 f202 	lsl.w	r2, r1, r2
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0bd      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003818:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4926      	ldr	r1, [pc, #152]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003826:	4313      	orrs	r3, r2
 8003828:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800382a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800382e:	2b01      	cmp	r3, #1
 8003830:	d105      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003832:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f023 0203 	bic.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	491a      	ldr	r1, [pc, #104]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003858:	4313      	orrs	r3, r2
 800385a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003868:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	f023 0210 	bic.w	r2, r3, #16
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4912      	ldr	r1, [pc, #72]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003876:	4313      	orrs	r3, r2
 8003878:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d008      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	490b      	ldr	r1, [pc, #44]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003894:	4313      	orrs	r3, r2
 8003896:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	4903      	ldr	r1, [pc, #12]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3748      	adds	r7, #72	; 0x48
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40007000 	.word	0x40007000
 80038c8:	10908100 	.word	0x10908100

080038cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e049      	b.n	8003972 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd fb3e 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f000 faf4 	bl	8003ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d001      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e040      	b.n	8003a16 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <HAL_TIM_Base_Start_IT+0xa8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00e      	beq.n	80039d4 <HAL_TIM_Base_Start_IT+0x58>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039be:	d009      	beq.n	80039d4 <HAL_TIM_Base_Start_IT+0x58>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <HAL_TIM_Base_Start_IT+0xac>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <HAL_TIM_Base_Start_IT+0x58>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <HAL_TIM_Base_Start_IT+0xb0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d115      	bne.n	8003a00 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <HAL_TIM_Base_Start_IT+0xb4>)
 80039dc:	4013      	ands	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d015      	beq.n	8003a12 <HAL_TIM_Base_Start_IT+0x96>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ec:	d011      	beq.n	8003a12 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fe:	e008      	b.n	8003a12 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e000      	b.n	8003a14 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	00010007 	.word	0x00010007

08003a34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e049      	b.n	8003ada <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f841 	bl	8003ae2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f000 fa40 	bl	8003ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <HAL_TIM_PWM_Start+0x24>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	e03c      	b.n	8003b96 <HAL_TIM_PWM_Start+0x9e>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d109      	bne.n	8003b36 <HAL_TIM_PWM_Start+0x3e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	bf14      	ite	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	2300      	moveq	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e02f      	b.n	8003b96 <HAL_TIM_PWM_Start+0x9e>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d109      	bne.n	8003b50 <HAL_TIM_PWM_Start+0x58>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e022      	b.n	8003b96 <HAL_TIM_PWM_Start+0x9e>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d109      	bne.n	8003b6a <HAL_TIM_PWM_Start+0x72>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	bf14      	ite	ne
 8003b62:	2301      	movne	r3, #1
 8003b64:	2300      	moveq	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	e015      	b.n	8003b96 <HAL_TIM_PWM_Start+0x9e>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d109      	bne.n	8003b84 <HAL_TIM_PWM_Start+0x8c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e008      	b.n	8003b96 <HAL_TIM_PWM_Start+0x9e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e088      	b.n	8003cb0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <HAL_TIM_PWM_Start+0xb6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bac:	e023      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xfe>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIM_PWM_Start+0xc6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bbc:	e01b      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xfe>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Start+0xd6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bcc:	e013      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xfe>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b0c      	cmp	r3, #12
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_PWM_Start+0xe6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bdc:	e00b      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xfe>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_PWM_Start+0xf6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bec:	e003      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xfe>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	6839      	ldr	r1, [r7, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fc98 	bl	8004534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a2b      	ldr	r2, [pc, #172]	; (8003cb8 <HAL_TIM_PWM_Start+0x1c0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00e      	beq.n	8003c2c <HAL_TIM_PWM_Start+0x134>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2a      	ldr	r2, [pc, #168]	; (8003cbc <HAL_TIM_PWM_Start+0x1c4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d009      	beq.n	8003c2c <HAL_TIM_PWM_Start+0x134>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <HAL_TIM_PWM_Start+0x1c8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_TIM_PWM_Start+0x134>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a27      	ldr	r2, [pc, #156]	; (8003cc4 <HAL_TIM_PWM_Start+0x1cc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d101      	bne.n	8003c30 <HAL_TIM_PWM_Start+0x138>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <HAL_TIM_PWM_Start+0x13a>
 8003c30:	2300      	movs	r3, #0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_TIM_PWM_Start+0x1c0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x176>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d009      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x176>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <HAL_TIM_PWM_Start+0x1d0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x176>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <HAL_TIM_PWM_Start+0x1c4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d115      	bne.n	8003c9a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_TIM_PWM_Start+0x1d4>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d015      	beq.n	8003cac <HAL_TIM_PWM_Start+0x1b4>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c86:	d011      	beq.n	8003cac <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c98:	e008      	b.n	8003cac <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e000      	b.n	8003cae <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40014400 	.word	0x40014400
 8003cc4:	40014800 	.word	0x40014800
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	00010007 	.word	0x00010007

08003cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e0ff      	b.n	8003eee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b14      	cmp	r3, #20
 8003cfa:	f200 80f0 	bhi.w	8003ede <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cfe:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d59 	.word	0x08003d59
 8003d08:	08003edf 	.word	0x08003edf
 8003d0c:	08003edf 	.word	0x08003edf
 8003d10:	08003edf 	.word	0x08003edf
 8003d14:	08003d99 	.word	0x08003d99
 8003d18:	08003edf 	.word	0x08003edf
 8003d1c:	08003edf 	.word	0x08003edf
 8003d20:	08003edf 	.word	0x08003edf
 8003d24:	08003ddb 	.word	0x08003ddb
 8003d28:	08003edf 	.word	0x08003edf
 8003d2c:	08003edf 	.word	0x08003edf
 8003d30:	08003edf 	.word	0x08003edf
 8003d34:	08003e1b 	.word	0x08003e1b
 8003d38:	08003edf 	.word	0x08003edf
 8003d3c:	08003edf 	.word	0x08003edf
 8003d40:	08003edf 	.word	0x08003edf
 8003d44:	08003e5d 	.word	0x08003e5d
 8003d48:	08003edf 	.word	0x08003edf
 8003d4c:	08003edf 	.word	0x08003edf
 8003d50:	08003edf 	.word	0x08003edf
 8003d54:	08003e9d 	.word	0x08003e9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f942 	bl	8003fe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0208 	orr.w	r2, r2, #8
 8003d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0204 	bic.w	r2, r2, #4
 8003d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6999      	ldr	r1, [r3, #24]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	619a      	str	r2, [r3, #24]
      break;
 8003d96:	e0a5      	b.n	8003ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f9a8 	bl	80040f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6999      	ldr	r1, [r3, #24]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	021a      	lsls	r2, r3, #8
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	619a      	str	r2, [r3, #24]
      break;
 8003dd8:	e084      	b.n	8003ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fa07 	bl	80041f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0208 	orr.w	r2, r2, #8
 8003df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0204 	bic.w	r2, r2, #4
 8003e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69d9      	ldr	r1, [r3, #28]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	61da      	str	r2, [r3, #28]
      break;
 8003e18:	e064      	b.n	8003ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fa65 	bl	80042f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69da      	ldr	r2, [r3, #28]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69d9      	ldr	r1, [r3, #28]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	021a      	lsls	r2, r3, #8
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	61da      	str	r2, [r3, #28]
      break;
 8003e5a:	e043      	b.n	8003ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 faa8 	bl	80043b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0208 	orr.w	r2, r2, #8
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0204 	bic.w	r2, r2, #4
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e9a:	e023      	b.n	8003ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fae6 	bl	8004474 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	021a      	lsls	r2, r3, #8
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003edc:	e002      	b.n	8003ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop

08003ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a32      	ldr	r2, [pc, #200]	; (8003fd4 <TIM_Base_SetConfig+0xdc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d007      	beq.n	8003f20 <TIM_Base_SetConfig+0x28>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d003      	beq.n	8003f20 <TIM_Base_SetConfig+0x28>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a2f      	ldr	r2, [pc, #188]	; (8003fd8 <TIM_Base_SetConfig+0xe0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d108      	bne.n	8003f32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <TIM_Base_SetConfig+0xdc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <TIM_Base_SetConfig+0x6a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f40:	d00f      	beq.n	8003f62 <TIM_Base_SetConfig+0x6a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a24      	ldr	r2, [pc, #144]	; (8003fd8 <TIM_Base_SetConfig+0xe0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <TIM_Base_SetConfig+0x6a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a23      	ldr	r2, [pc, #140]	; (8003fdc <TIM_Base_SetConfig+0xe4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <TIM_Base_SetConfig+0x6a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a22      	ldr	r2, [pc, #136]	; (8003fe0 <TIM_Base_SetConfig+0xe8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_Base_SetConfig+0x6a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a21      	ldr	r2, [pc, #132]	; (8003fe4 <TIM_Base_SetConfig+0xec>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d108      	bne.n	8003f74 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	; (8003fd4 <TIM_Base_SetConfig+0xdc>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00b      	beq.n	8003fb8 <TIM_Base_SetConfig+0xc0>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a0e      	ldr	r2, [pc, #56]	; (8003fdc <TIM_Base_SetConfig+0xe4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d007      	beq.n	8003fb8 <TIM_Base_SetConfig+0xc0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a0d      	ldr	r2, [pc, #52]	; (8003fe0 <TIM_Base_SetConfig+0xe8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <TIM_Base_SetConfig+0xc0>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0c      	ldr	r2, [pc, #48]	; (8003fe4 <TIM_Base_SetConfig+0xec>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d103      	bne.n	8003fc0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	615a      	str	r2, [r3, #20]
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40014400 	.word	0x40014400
 8003fe4:	40014800 	.word	0x40014800

08003fe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0201 	bic.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 0302 	bic.w	r3, r3, #2
 8004034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <TIM_OC1_SetConfig+0xfc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00b      	beq.n	8004060 <TIM_OC1_SetConfig+0x78>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a27      	ldr	r2, [pc, #156]	; (80040e8 <TIM_OC1_SetConfig+0x100>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <TIM_OC1_SetConfig+0x78>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a26      	ldr	r2, [pc, #152]	; (80040ec <TIM_OC1_SetConfig+0x104>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_OC1_SetConfig+0x78>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <TIM_OC1_SetConfig+0x108>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d10c      	bne.n	800407a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0308 	bic.w	r3, r3, #8
 8004066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <TIM_OC1_SetConfig+0xfc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00b      	beq.n	800409a <TIM_OC1_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <TIM_OC1_SetConfig+0x100>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <TIM_OC1_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a17      	ldr	r2, [pc, #92]	; (80040ec <TIM_OC1_SetConfig+0x104>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d003      	beq.n	800409a <TIM_OC1_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <TIM_OC1_SetConfig+0x108>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d111      	bne.n	80040be <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	621a      	str	r2, [r3, #32]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800

080040f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0210 	bic.w	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f023 0320 	bic.w	r3, r3, #32
 8004142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a24      	ldr	r2, [pc, #144]	; (80041e4 <TIM_OC2_SetConfig+0xf0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10d      	bne.n	8004174 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004172:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <TIM_OC2_SetConfig+0xf0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00b      	beq.n	8004194 <TIM_OC2_SetConfig+0xa0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a1a      	ldr	r2, [pc, #104]	; (80041e8 <TIM_OC2_SetConfig+0xf4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d007      	beq.n	8004194 <TIM_OC2_SetConfig+0xa0>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a19      	ldr	r2, [pc, #100]	; (80041ec <TIM_OC2_SetConfig+0xf8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_OC2_SetConfig+0xa0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <TIM_OC2_SetConfig+0xfc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d113      	bne.n	80041bc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800419a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800

080041f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <TIM_OC3_SetConfig+0xec>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10d      	bne.n	8004272 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800425c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004270:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <TIM_OC3_SetConfig+0xec>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_OC3_SetConfig+0x9e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <TIM_OC3_SetConfig+0xf0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_OC3_SetConfig+0x9e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <TIM_OC3_SetConfig+0xf4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_OC3_SetConfig+0x9e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a17      	ldr	r2, [pc, #92]	; (80042ec <TIM_OC3_SetConfig+0xf8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d113      	bne.n	80042ba <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	621a      	str	r2, [r3, #32]
}
 80042d4:	bf00      	nop
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40014400 	.word	0x40014400
 80042ec:	40014800 	.word	0x40014800

080042f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800431e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800433e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	031b      	lsls	r3, r3, #12
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a16      	ldr	r2, [pc, #88]	; (80043a8 <TIM_OC4_SetConfig+0xb8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_OC4_SetConfig+0x7c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a15      	ldr	r2, [pc, #84]	; (80043ac <TIM_OC4_SetConfig+0xbc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_OC4_SetConfig+0x7c>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <TIM_OC4_SetConfig+0xc0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_OC4_SetConfig+0x7c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <TIM_OC4_SetConfig+0xc4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d109      	bne.n	8004380 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	019b      	lsls	r3, r3, #6
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	40014000 	.word	0x40014000
 80043b0:	40014400 	.word	0x40014400
 80043b4:	40014800 	.word	0x40014800

080043b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80043fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a15      	ldr	r2, [pc, #84]	; (8004464 <TIM_OC5_SetConfig+0xac>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00b      	beq.n	800442a <TIM_OC5_SetConfig+0x72>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a14      	ldr	r2, [pc, #80]	; (8004468 <TIM_OC5_SetConfig+0xb0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d007      	beq.n	800442a <TIM_OC5_SetConfig+0x72>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a13      	ldr	r2, [pc, #76]	; (800446c <TIM_OC5_SetConfig+0xb4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d003      	beq.n	800442a <TIM_OC5_SetConfig+0x72>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a12      	ldr	r2, [pc, #72]	; (8004470 <TIM_OC5_SetConfig+0xb8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d109      	bne.n	800443e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004430:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40014000 	.word	0x40014000
 800446c:	40014400 	.word	0x40014400
 8004470:	40014800 	.word	0x40014800

08004474 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	051b      	lsls	r3, r3, #20
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a16      	ldr	r2, [pc, #88]	; (8004524 <TIM_OC6_SetConfig+0xb0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <TIM_OC6_SetConfig+0x74>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a15      	ldr	r2, [pc, #84]	; (8004528 <TIM_OC6_SetConfig+0xb4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <TIM_OC6_SetConfig+0x74>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a14      	ldr	r2, [pc, #80]	; (800452c <TIM_OC6_SetConfig+0xb8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_OC6_SetConfig+0x74>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a13      	ldr	r2, [pc, #76]	; (8004530 <TIM_OC6_SetConfig+0xbc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d109      	bne.n	80044fc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	029b      	lsls	r3, r3, #10
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40014000 	.word	0x40014000
 800452c:	40014400 	.word	0x40014400
 8004530:	40014800 	.word	0x40014800

08004534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2201      	movs	r2, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004598:	2302      	movs	r3, #2
 800459a:	e060      	b.n	800465e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a14      	ldr	r2, [pc, #80]	; (800466c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d115      	bne.n	800464c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	051b      	lsls	r3, r3, #20
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40012c00 	.word	0x40012c00

08004670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e040      	b.n	8004704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fc fcfe 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	; 0x24
 800469c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fb7a 	bl	8004da8 <UART_SetConfig>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e022      	b.n	8004704 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fca6 	bl	8005018 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fd2d 	bl	800515c <UART_CheckIdleState>
 8004702:	4603      	mov	r3, r0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	4613      	mov	r3, r2
 8004718:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800471e:	2b20      	cmp	r3, #32
 8004720:	d13d      	bne.n	800479e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_UART_Receive_IT+0x22>
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e036      	b.n	80047a0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_UART_Receive_IT+0x34>
 800473c:	2302      	movs	r3, #2
 800473e:	e02f      	b.n	80047a0 <HAL_UART_Receive_IT+0x94>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d018      	beq.n	800478e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	613b      	str	r3, [r7, #16]
   return(result);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	623b      	str	r3, [r7, #32]
 800477c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	69f9      	ldr	r1, [r7, #28]
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	61bb      	str	r3, [r7, #24]
   return(result);
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e6      	bne.n	800475c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	461a      	mov	r2, r3
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fdef 	bl	8005378 <UART_Start_Receive_IT>
 800479a:	4603      	mov	r3, r0
 800479c:	e000      	b.n	80047a0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3728      	adds	r7, #40	; 0x28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b0ba      	sub	sp, #232	; 0xe8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80047d6:	4013      	ands	r3, r2
 80047d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d115      	bne.n	8004810 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00f      	beq.n	8004810 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 82a4 	beq.w	8004d4e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	4798      	blx	r3
      }
      return;
 800480e:	e29e      	b.n	8004d4e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004810:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8117 	beq.w	8004a48 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800481a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004826:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800482a:	4b85      	ldr	r3, [pc, #532]	; (8004a40 <HAL_UART_IRQHandler+0x298>)
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 810a 	beq.w	8004a48 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d011      	beq.n	8004864 <HAL_UART_IRQHandler+0xbc>
 8004840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00b      	beq.n	8004864 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2201      	movs	r2, #1
 8004852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485a:	f043 0201 	orr.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d011      	beq.n	8004894 <HAL_UART_IRQHandler+0xec>
 8004870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00b      	beq.n	8004894 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2202      	movs	r2, #2
 8004882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800488a:	f043 0204 	orr.w	r2, r3, #4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d011      	beq.n	80048c4 <HAL_UART_IRQHandler+0x11c>
 80048a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00b      	beq.n	80048c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2204      	movs	r2, #4
 80048b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ba:	f043 0202 	orr.w	r2, r3, #2
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d017      	beq.n	8004900 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00b      	beq.n	8004900 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2208      	movs	r2, #8
 80048ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048f6:	f043 0208 	orr.w	r2, r3, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004908:	2b00      	cmp	r3, #0
 800490a:	d012      	beq.n	8004932 <HAL_UART_IRQHandler+0x18a>
 800490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00c      	beq.n	8004932 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004928:	f043 0220 	orr.w	r2, r3, #32
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 820a 	beq.w	8004d52 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00d      	beq.n	8004966 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800494a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800496c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d005      	beq.n	800498a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800497e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004982:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004986:	2b00      	cmp	r3, #0
 8004988:	d04f      	beq.n	8004a2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fda0 	bl	80054d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d141      	bne.n	8004a22 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3308      	adds	r3, #8
 80049a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3308      	adds	r3, #8
 80049c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1d9      	bne.n	800499e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d013      	beq.n	8004a1a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <HAL_UART_IRQHandler+0x29c>)
 80049f8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fc fe1e 	bl	8001640 <HAL_DMA_Abort_IT>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d017      	beq.n	8004a3a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004a14:	4610      	mov	r0, r2
 8004a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a18:	e00f      	b.n	8004a3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f9ae 	bl	8004d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a20:	e00b      	b.n	8004a3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f9aa 	bl	8004d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	e007      	b.n	8004a3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9a6 	bl	8004d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004a38:	e18b      	b.n	8004d52 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3a:	bf00      	nop
    return;
 8004a3c:	e189      	b.n	8004d52 <HAL_UART_IRQHandler+0x5aa>
 8004a3e:	bf00      	nop
 8004a40:	04000120 	.word	0x04000120
 8004a44:	08005597 	.word	0x08005597

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	f040 8143 	bne.w	8004cd8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 813c 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8135 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2210      	movs	r2, #16
 8004a74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	f040 80b1 	bne.w	8004be8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 815d 	beq.w	8004d56 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	f080 8155 	bcs.w	8004d56 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	f000 8085 	beq.w	8004bcc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ade:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004aec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004af0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004af8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1da      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3308      	adds	r3, #8
 8004b12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3308      	adds	r3, #8
 8004b2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e1      	bne.n	8004b0c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e3      	bne.n	8004b48 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b9c:	f023 0310 	bic.w	r3, r3, #16
 8004ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bae:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bb0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e4      	bne.n	8004b8c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fc fd01 	bl	80015ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f8d5 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004be6:	e0b6      	b.n	8004d56 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80a8 	beq.w	8004d5a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004c0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 80a3 	beq.w	8004d5a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c36:	647b      	str	r3, [r7, #68]	; 0x44
 8004c38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e4      	bne.n	8004c14 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3308      	adds	r3, #8
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	623b      	str	r3, [r7, #32]
   return(result);
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	f023 0301 	bic.w	r3, r3, #1
 8004c60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3308      	adds	r3, #8
 8004c6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c6e:	633a      	str	r2, [r7, #48]	; 0x30
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e3      	bne.n	8004c4a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f023 0310 	bic.w	r3, r3, #16
 8004ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	69b9      	ldr	r1, [r7, #24]
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e4      	bne.n	8004c94 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f85d 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cd6:	e040      	b.n	8004d5a <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00e      	beq.n	8004d02 <HAL_UART_IRQHandler+0x55a>
 8004ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d008      	beq.n	8004d02 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004cf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fde7 	bl	80058ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d00:	e02e      	b.n	8004d60 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00e      	beq.n	8004d2c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d008      	beq.n	8004d2c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01d      	beq.n	8004d5e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
    }
    return;
 8004d2a:	e018      	b.n	8004d5e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d013      	beq.n	8004d60 <HAL_UART_IRQHandler+0x5b8>
 8004d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00d      	beq.n	8004d60 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fc3c 	bl	80055c2 <UART_EndTransmit_IT>
    return;
 8004d4a:	bf00      	nop
 8004d4c:	e008      	b.n	8004d60 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d4e:	bf00      	nop
 8004d50:	e006      	b.n	8004d60 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004d52:	bf00      	nop
 8004d54:	e004      	b.n	8004d60 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d56:	bf00      	nop
 8004d58:	e002      	b.n	8004d60 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d5a:	bf00      	nop
 8004d5c:	e000      	b.n	8004d60 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004d5e:	bf00      	nop
  }

}
 8004d60:	37e8      	adds	r7, #232	; 0xe8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop

08004d68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b8b      	ldr	r3, [pc, #556]	; (8005000 <UART_SetConfig+0x258>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	6979      	ldr	r1, [r7, #20]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a79      	ldr	r2, [pc, #484]	; (8005004 <UART_SetConfig+0x25c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d121      	bne.n	8004e68 <UART_SetConfig+0xc0>
 8004e24:	4b78      	ldr	r3, [pc, #480]	; (8005008 <UART_SetConfig+0x260>)
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d817      	bhi.n	8004e60 <UART_SetConfig+0xb8>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0x90>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08004e55 	.word	0x08004e55
 8004e40:	08004e5b 	.word	0x08004e5b
 8004e44:	08004e4f 	.word	0x08004e4f
 8004e48:	2300      	movs	r3, #0
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e01e      	b.n	8004e8c <UART_SetConfig+0xe4>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	77fb      	strb	r3, [r7, #31]
 8004e52:	e01b      	b.n	8004e8c <UART_SetConfig+0xe4>
 8004e54:	2304      	movs	r3, #4
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e018      	b.n	8004e8c <UART_SetConfig+0xe4>
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	e015      	b.n	8004e8c <UART_SetConfig+0xe4>
 8004e60:	2310      	movs	r3, #16
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	bf00      	nop
 8004e66:	e011      	b.n	8004e8c <UART_SetConfig+0xe4>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a67      	ldr	r2, [pc, #412]	; (800500c <UART_SetConfig+0x264>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d102      	bne.n	8004e78 <UART_SetConfig+0xd0>
 8004e72:	2300      	movs	r3, #0
 8004e74:	77fb      	strb	r3, [r7, #31]
 8004e76:	e009      	b.n	8004e8c <UART_SetConfig+0xe4>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a64      	ldr	r2, [pc, #400]	; (8005010 <UART_SetConfig+0x268>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d102      	bne.n	8004e88 <UART_SetConfig+0xe0>
 8004e82:	2300      	movs	r3, #0
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e001      	b.n	8004e8c <UART_SetConfig+0xe4>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e94:	d15c      	bne.n	8004f50 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8004e96:	7ffb      	ldrb	r3, [r7, #31]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d828      	bhi.n	8004eee <UART_SetConfig+0x146>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <UART_SetConfig+0xfc>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004ec9 	.word	0x08004ec9
 8004ea8:	08004ed1 	.word	0x08004ed1
 8004eac:	08004ed9 	.word	0x08004ed9
 8004eb0:	08004eef 	.word	0x08004eef
 8004eb4:	08004edf 	.word	0x08004edf
 8004eb8:	08004eef 	.word	0x08004eef
 8004ebc:	08004eef 	.word	0x08004eef
 8004ec0:	08004eef 	.word	0x08004eef
 8004ec4:	08004ee7 	.word	0x08004ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec8:	f7fe fb96 	bl	80035f8 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	61b8      	str	r0, [r7, #24]
        break;
 8004ece:	e013      	b.n	8004ef8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed0:	f7fe fbb4 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8004ed4:	61b8      	str	r0, [r7, #24]
        break;
 8004ed6:	e00f      	b.n	8004ef8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed8:	4b4e      	ldr	r3, [pc, #312]	; (8005014 <UART_SetConfig+0x26c>)
 8004eda:	61bb      	str	r3, [r7, #24]
        break;
 8004edc:	e00c      	b.n	8004ef8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ede:	f7fe fb15 	bl	800350c <HAL_RCC_GetSysClockFreq>
 8004ee2:	61b8      	str	r0, [r7, #24]
        break;
 8004ee4:	e008      	b.n	8004ef8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eea:	61bb      	str	r3, [r7, #24]
        break;
 8004eec:	e004      	b.n	8004ef8 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ef6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d074      	beq.n	8004fe8 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	005a      	lsls	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	441a      	add	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b0f      	cmp	r3, #15
 8004f1a:	d916      	bls.n	8004f4a <UART_SetConfig+0x1a2>
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f22:	d212      	bcs.n	8004f4a <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f023 030f 	bic.w	r3, r3, #15
 8004f2c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	89fb      	ldrh	r3, [r7, #14]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	89fa      	ldrh	r2, [r7, #14]
 8004f46:	60da      	str	r2, [r3, #12]
 8004f48:	e04e      	b.n	8004fe8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	77bb      	strb	r3, [r7, #30]
 8004f4e:	e04b      	b.n	8004fe8 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f50:	7ffb      	ldrb	r3, [r7, #31]
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d827      	bhi.n	8004fa6 <UART_SetConfig+0x1fe>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <UART_SetConfig+0x1b4>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f81 	.word	0x08004f81
 8004f60:	08004f89 	.word	0x08004f89
 8004f64:	08004f91 	.word	0x08004f91
 8004f68:	08004fa7 	.word	0x08004fa7
 8004f6c:	08004f97 	.word	0x08004f97
 8004f70:	08004fa7 	.word	0x08004fa7
 8004f74:	08004fa7 	.word	0x08004fa7
 8004f78:	08004fa7 	.word	0x08004fa7
 8004f7c:	08004f9f 	.word	0x08004f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f80:	f7fe fb3a 	bl	80035f8 <HAL_RCC_GetPCLK1Freq>
 8004f84:	61b8      	str	r0, [r7, #24]
        break;
 8004f86:	e013      	b.n	8004fb0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f88:	f7fe fb58 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8004f8c:	61b8      	str	r0, [r7, #24]
        break;
 8004f8e:	e00f      	b.n	8004fb0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f90:	4b20      	ldr	r3, [pc, #128]	; (8005014 <UART_SetConfig+0x26c>)
 8004f92:	61bb      	str	r3, [r7, #24]
        break;
 8004f94:	e00c      	b.n	8004fb0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f96:	f7fe fab9 	bl	800350c <HAL_RCC_GetSysClockFreq>
 8004f9a:	61b8      	str	r0, [r7, #24]
        break;
 8004f9c:	e008      	b.n	8004fb0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa2:	61bb      	str	r3, [r7, #24]
        break;
 8004fa4:	e004      	b.n	8004fb0 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	77bb      	strb	r3, [r7, #30]
        break;
 8004fae:	bf00      	nop
    }

    if (pclk != 0U)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d018      	beq.n	8004fe8 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	085a      	lsrs	r2, r3, #1
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	441a      	add	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b0f      	cmp	r3, #15
 8004fd0:	d908      	bls.n	8004fe4 <UART_SetConfig+0x23c>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d204      	bcs.n	8004fe4 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	60da      	str	r2, [r3, #12]
 8004fe2:	e001      	b.n	8004fe8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ff4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	efff69f3 	.word	0xefff69f3
 8005004:	40013800 	.word	0x40013800
 8005008:	40021000 	.word	0x40021000
 800500c:	40004400 	.word	0x40004400
 8005010:	40004800 	.word	0x40004800
 8005014:	007a1200 	.word	0x007a1200

08005018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01a      	beq.n	800512e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005116:	d10a      	bne.n	800512e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]
  }
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af02      	add	r7, sp, #8
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800516c:	f7fc f8c0 	bl	80012f0 <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b08      	cmp	r3, #8
 800517e:	d10e      	bne.n	800519e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005180:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f82d 	bl	80051ee <UART_WaitOnFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e023      	b.n	80051e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d10e      	bne.n	80051ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f817 	bl	80051ee <UART_WaitOnFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e00d      	b.n	80051e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b09c      	sub	sp, #112	; 0x70
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fe:	e0a5      	b.n	800534c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005206:	f000 80a1 	beq.w	800534c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520a:	f7fc f871 	bl	80012f0 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <UART_WaitOnFlagUntilTimeout+0x32>
 800521a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800521c:	2b00      	cmp	r3, #0
 800521e:	d13e      	bne.n	800529e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800522e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005230:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005234:	667b      	str	r3, [r7, #100]	; 0x64
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005240:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800524c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e6      	bne.n	8005220 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3308      	adds	r3, #8
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	663b      	str	r3, [r7, #96]	; 0x60
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3308      	adds	r3, #8
 8005270:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005272:	64ba      	str	r2, [r7, #72]	; 0x48
 8005274:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e5      	bne.n	8005252 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e067      	b.n	800536e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d04f      	beq.n	800534c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ba:	d147      	bne.n	800534c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
 80052e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e6      	bne.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3308      	adds	r3, #8
 80052fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	613b      	str	r3, [r7, #16]
   return(result);
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f023 0301 	bic.w	r3, r3, #1
 800530e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3308      	adds	r3, #8
 8005316:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005318:	623a      	str	r2, [r7, #32]
 800531a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	69f9      	ldr	r1, [r7, #28]
 800531e:	6a3a      	ldr	r2, [r7, #32]
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	61bb      	str	r3, [r7, #24]
   return(result);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e5      	bne.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e010      	b.n	800536e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69da      	ldr	r2, [r3, #28]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4013      	ands	r3, r2
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	bf0c      	ite	eq
 800535c:	2301      	moveq	r3, #1
 800535e:	2300      	movne	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	461a      	mov	r2, r3
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	429a      	cmp	r2, r3
 8005368:	f43f af4a 	beq.w	8005200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3770      	adds	r7, #112	; 0x70
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005378:	b480      	push	{r7}
 800537a:	b091      	sub	sp, #68	; 0x44
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	4613      	mov	r3, r2
 8005384:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	88fa      	ldrh	r2, [r7, #6]
 8005390:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	88fa      	ldrh	r2, [r7, #6]
 8005398:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	d10e      	bne.n	80053ca <UART_Start_Receive_IT+0x52>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <UART_Start_Receive_IT+0x48>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053be:	e02d      	b.n	800541c <UART_Start_Receive_IT+0xa4>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	22ff      	movs	r2, #255	; 0xff
 80053c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053c8:	e028      	b.n	800541c <UART_Start_Receive_IT+0xa4>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10d      	bne.n	80053ee <UART_Start_Receive_IT+0x76>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <UART_Start_Receive_IT+0x6c>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	22ff      	movs	r2, #255	; 0xff
 80053de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053e2:	e01b      	b.n	800541c <UART_Start_Receive_IT+0xa4>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	227f      	movs	r2, #127	; 0x7f
 80053e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053ec:	e016      	b.n	800541c <UART_Start_Receive_IT+0xa4>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f6:	d10d      	bne.n	8005414 <UART_Start_Receive_IT+0x9c>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d104      	bne.n	800540a <UART_Start_Receive_IT+0x92>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	227f      	movs	r2, #127	; 0x7f
 8005404:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005408:	e008      	b.n	800541c <UART_Start_Receive_IT+0xa4>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	223f      	movs	r2, #63	; 0x3f
 800540e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005412:	e003      	b.n	800541c <UART_Start_Receive_IT+0xa4>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2222      	movs	r2, #34	; 0x22
 8005428:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800544a:	637a      	str	r2, [r7, #52]	; 0x34
 800544c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005466:	d107      	bne.n	8005478 <UART_Start_Receive_IT+0x100>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a15      	ldr	r2, [pc, #84]	; (80054c8 <UART_Start_Receive_IT+0x150>)
 8005474:	665a      	str	r2, [r3, #100]	; 0x64
 8005476:	e002      	b.n	800547e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a14      	ldr	r2, [pc, #80]	; (80054cc <UART_Start_Receive_IT+0x154>)
 800547c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	613b      	str	r3, [r7, #16]
   return(result);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800549a:	63bb      	str	r3, [r7, #56]	; 0x38
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	69f9      	ldr	r1, [r7, #28]
 80054aa:	6a3a      	ldr	r2, [r7, #32]
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e6      	bne.n	8005486 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3744      	adds	r7, #68	; 0x44
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	08005773 	.word	0x08005773
 80054cc:	08005617 	.word	0x08005617

080054d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b095      	sub	sp, #84	; 0x54
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f6:	643b      	str	r3, [r7, #64]	; 0x40
 80054f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e6      	bne.n	80054d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3308      	adds	r3, #8
 8005510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	61fb      	str	r3, [r7, #28]
   return(result);
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	64bb      	str	r3, [r7, #72]	; 0x48
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3308      	adds	r3, #8
 8005528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800552a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800552c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e5      	bne.n	800550a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005542:	2b01      	cmp	r3, #1
 8005544:	d118      	bne.n	8005578 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	60bb      	str	r3, [r7, #8]
   return(result);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f023 0310 	bic.w	r3, r3, #16
 800555a:	647b      	str	r3, [r7, #68]	; 0x44
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6979      	ldr	r1, [r7, #20]
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	613b      	str	r3, [r7, #16]
   return(result);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e6      	bne.n	8005546 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	665a      	str	r2, [r3, #100]	; 0x64
}
 800558a:	bf00      	nop
 800558c:	3754      	adds	r7, #84	; 0x54
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7ff fbe1 	bl	8004d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b088      	sub	sp, #32
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055de:	61fb      	str	r3, [r7, #28]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6979      	ldr	r1, [r7, #20]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	613b      	str	r3, [r7, #16]
   return(result);
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e6      	bne.n	80055ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fbad 	bl	8004d68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800560e:	bf00      	nop
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b096      	sub	sp, #88	; 0x58
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005624:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562c:	2b22      	cmp	r3, #34	; 0x22
 800562e:	f040 8094 	bne.w	800575a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005638:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800563c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005640:	b2d9      	uxtb	r1, r3
 8005642:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005646:	b2da      	uxtb	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564c:	400a      	ands	r2, r1
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d177      	bne.n	800576a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800568e:	653b      	str	r3, [r7, #80]	; 0x50
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005698:	647b      	str	r3, [r7, #68]	; 0x44
 800569a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800569e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e6      	bne.n	800567a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3308      	adds	r3, #8
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	623b      	str	r3, [r7, #32]
   return(result);
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056cc:	633a      	str	r2, [r7, #48]	; 0x30
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e5      	bne.n	80056ac <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d12e      	bne.n	8005752 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	60fb      	str	r3, [r7, #12]
   return(result);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0310 	bic.w	r3, r3, #16
 800570e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	69b9      	ldr	r1, [r7, #24]
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	617b      	str	r3, [r7, #20]
   return(result);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e6      	bne.n	80056fa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b10      	cmp	r3, #16
 8005738:	d103      	bne.n	8005742 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2210      	movs	r2, #16
 8005740:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff fb20 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005750:	e00b      	b.n	800576a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fb f9ba 	bl	8000acc <HAL_UART_RxCpltCallback>
}
 8005758:	e007      	b.n	800576a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0208 	orr.w	r2, r2, #8
 8005768:	619a      	str	r2, [r3, #24]
}
 800576a:	bf00      	nop
 800576c:	3758      	adds	r7, #88	; 0x58
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b096      	sub	sp, #88	; 0x58
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005780:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005788:	2b22      	cmp	r3, #34	; 0x22
 800578a:	f040 8094 	bne.w	80058b6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005794:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800579e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80057a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057a6:	4013      	ands	r3, r2
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	1c9a      	adds	r2, r3, #2
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d177      	bne.n	80058c6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f4:	643b      	str	r3, [r7, #64]	; 0x40
 80057f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057fc:	e841 2300 	strex	r3, r2, [r1]
 8005800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e6      	bne.n	80057d6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3308      	adds	r3, #8
 800580e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	61fb      	str	r3, [r7, #28]
   return(result);
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005828:	62fa      	str	r2, [r7, #44]	; 0x2c
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800582e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e5      	bne.n	8005808 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800584c:	2b01      	cmp	r3, #1
 800584e:	d12e      	bne.n	80058ae <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	60bb      	str	r3, [r7, #8]
   return(result);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f023 0310 	bic.w	r3, r3, #16
 800586a:	647b      	str	r3, [r7, #68]	; 0x44
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	613b      	str	r3, [r7, #16]
   return(result);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e6      	bne.n	8005856 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b10      	cmp	r3, #16
 8005894:	d103      	bne.n	800589e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2210      	movs	r2, #16
 800589c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fa72 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058ac:	e00b      	b.n	80058c6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fb f90c 	bl	8000acc <HAL_UART_RxCpltCallback>
}
 80058b4:	e007      	b.n	80058c6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0208 	orr.w	r2, r2, #8
 80058c4:	619a      	str	r2, [r3, #24]
}
 80058c6:	bf00      	nop
 80058c8:	3758      	adds	r7, #88	; 0x58
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 fce5 	bl	80072c2 <VL53L0X_get_offset_calibration_data_micro_meter>
 80058f8:	4603      	mov	r3, r0
 80058fa:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80058fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005914:	2300      	movs	r3, #0
 8005916:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	218a      	movs	r1, #138	; 0x8a
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f004 fee8 	bl	800a6f8 <VL53L0X_WrByte>
 8005928:	4603      	mov	r3, r0
 800592a:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 800592c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005938:	b5b0      	push	{r4, r5, r7, lr}
 800593a:	b096      	sub	sp, #88	; 0x58
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005940:	2300      	movs	r3, #0
 8005942:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005946:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800594a:	2b00      	cmp	r3, #0
 800594c:	d107      	bne.n	800595e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800594e:	2200      	movs	r2, #0
 8005950:	2188      	movs	r1, #136	; 0x88
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f004 fed0 	bl	800a6f8 <VL53L0X_WrByte>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800596c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005976:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a9e      	ldr	r2, [pc, #632]	; (8005bf8 <VL53L0X_DataInit+0x2c0>)
 800597e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a9d      	ldr	r2, [pc, #628]	; (8005bfc <VL53L0X_DataInit+0x2c4>)
 8005986:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005990:	f107 0310 	add.w	r3, r7, #16
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fac2 	bl	8005f20 <VL53L0X_GetDeviceParameters>
 800599c:	4603      	mov	r3, r0
 800599e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80059a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d112      	bne.n	80059d0 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80059aa:	2300      	movs	r3, #0
 80059ac:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80059ae:	2300      	movs	r3, #0
 80059b0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f103 0410 	add.w	r4, r3, #16
 80059b8:	f107 0510 	add.w	r5, r7, #16
 80059bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80059cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2264      	movs	r2, #100	; 0x64
 80059d4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f44f 7261 	mov.w	r2, #900	; 0x384
 80059de:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80059e8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80059f2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80059fe:	2201      	movs	r2, #1
 8005a00:	2180      	movs	r1, #128	; 0x80
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f004 fe78 	bl	800a6f8 <VL53L0X_WrByte>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005a16:	2201      	movs	r2, #1
 8005a18:	21ff      	movs	r1, #255	; 0xff
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f004 fe6c 	bl	800a6f8 <VL53L0X_WrByte>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2100      	movs	r1, #0
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f004 fe60 	bl	800a6f8 <VL53L0X_WrByte>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8005a46:	f107 030f 	add.w	r3, r7, #15
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2191      	movs	r1, #145	; 0x91
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f004 fed4 	bl	800a7fc <VL53L0X_RdByte>
 8005a54:	4603      	mov	r3, r0
 8005a56:	461a      	mov	r2, r3
 8005a58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8005a62:	7bfa      	ldrb	r2, [r7, #15]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f004 fe42 	bl	800a6f8 <VL53L0X_WrByte>
 8005a74:	4603      	mov	r3, r0
 8005a76:	461a      	mov	r2, r3
 8005a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a82:	2200      	movs	r2, #0
 8005a84:	21ff      	movs	r1, #255	; 0xff
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f004 fe36 	bl	800a6f8 <VL53L0X_WrByte>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2180      	movs	r1, #128	; 0x80
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f004 fe2a 	bl	800a6f8 <VL53L0X_WrByte>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ab6:	e014      	b.n	8005ae2 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005ab8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d114      	bne.n	8005aea <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fd51 	bl	8006570 <VL53L0X_SetLimitCheckEnable>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ade:	3301      	adds	r3, #1
 8005ae0:	653b      	str	r3, [r7, #80]	; 0x50
 8005ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae4:	2b05      	cmp	r3, #5
 8005ae6:	dde7      	ble.n	8005ab8 <VL53L0X_DataInit+0x180>
 8005ae8:	e000      	b.n	8005aec <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005aea:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005aec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d107      	bne.n	8005b04 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005af4:	2200      	movs	r2, #0
 8005af6:	2102      	movs	r1, #2
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fd39 	bl	8006570 <VL53L0X_SetLimitCheckEnable>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005b04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d107      	bne.n	8005b1c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2103      	movs	r1, #3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fd2d 	bl	8006570 <VL53L0X_SetLimitCheckEnable>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005b1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d107      	bne.n	8005b34 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005b24:	2200      	movs	r2, #0
 8005b26:	2104      	movs	r1, #4
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fd21 	bl	8006570 <VL53L0X_SetLimitCheckEnable>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005b34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d107      	bne.n	8005b4c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2105      	movs	r1, #5
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fd15 	bl	8006570 <VL53L0X_SetLimitCheckEnable>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005b4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d108      	bne.n	8005b66 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005b54:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005b58:	2100      	movs	r1, #0
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fdb8 	bl	80066d0 <VL53L0X_SetLimitCheckValue>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005b66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d108      	bne.n	8005b80 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b72:	2101      	movs	r1, #1
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fdab 	bl	80066d0 <VL53L0X_SetLimitCheckValue>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d108      	bne.n	8005b9a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005b88:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fd9e 	bl	80066d0 <VL53L0X_SetLimitCheckValue>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d107      	bne.n	8005bb2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2103      	movs	r1, #3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fd92 	bl	80066d0 <VL53L0X_SetLimitCheckValue>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005bb2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10f      	bne.n	8005bda <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	22ff      	movs	r2, #255	; 0xff
 8005bbe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005bc2:	22ff      	movs	r2, #255	; 0xff
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f004 fd96 	bl	800a6f8 <VL53L0X_WrByte>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005bda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005bea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3758      	adds	r7, #88	; 0x58
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	00016b85 	.word	0x00016b85
 8005bfc:	000970a4 	.word	0x000970a4

08005c00 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005c00:	b5b0      	push	{r4, r5, r7, lr}
 8005c02:	b09e      	sub	sp, #120	; 0x78
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005c0e:	f107 031c 	add.w	r3, r7, #28
 8005c12:	2240      	movs	r2, #64	; 0x40
 8005c14:	2100      	movs	r1, #0
 8005c16:	4618      	mov	r0, r3
 8005c18:	f004 fed1 	bl	800a9be <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f002 fa95 	bl	800816e <VL53L0X_get_info_from_device>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8005c50:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005c58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005c5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d80d      	bhi.n	8005c80 <VL53L0X_StaticInit+0x80>
 8005c64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d102      	bne.n	8005c72 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005c6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d806      	bhi.n	8005c80 <VL53L0X_StaticInit+0x80>
 8005c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10e      	bne.n	8005c98 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8005c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	d90b      	bls.n	8005c98 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005c80:	f107 0218 	add.w	r2, r7, #24
 8005c84:	f107 0314 	add.w	r3, r7, #20
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 fd14 	bl	80076b8 <VL53L0X_perform_ref_spad_management>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005c96:	e009      	b.n	8005cac <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005c98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 ff15 	bl	8007ad0 <VL53L0X_set_reference_spads>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005cac:	4b94      	ldr	r3, [pc, #592]	; (8005f00 <VL53L0X_StaticInit+0x300>)
 8005cae:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8005cb0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10f      	bne.n	8005cd8 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005cbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8005cc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d104      	bne.n	8005cd4 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005cd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cd2:	e001      	b.n	8005cd8 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005cd4:	4b8a      	ldr	r3, [pc, #552]	; (8005f00 <VL53L0X_StaticInit+0x300>)
 8005cd6:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005cd8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005ce0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f003 fde8 	bl	80098b8 <VL53L0X_load_tuning_settings>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8005cee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	2304      	movs	r3, #4
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2100      	movs	r1, #0
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f001 f90d 	bl	8006f20 <VL53L0X_SetGpioConfig>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d0c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d121      	bne.n	8005d58 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005d14:	2201      	movs	r2, #1
 8005d16:	21ff      	movs	r1, #255	; 0xff
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f004 fced 	bl	800a6f8 <VL53L0X_WrByte>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005d24:	f107 031a 	add.w	r3, r7, #26
 8005d28:	461a      	mov	r2, r3
 8005d2a:	2184      	movs	r1, #132	; 0x84
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f004 fd8f 	bl	800a850 <VL53L0X_RdWord>
 8005d32:	4603      	mov	r3, r0
 8005d34:	461a      	mov	r2, r3
 8005d36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005d40:	2200      	movs	r2, #0
 8005d42:	21ff      	movs	r1, #255	; 0xff
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f004 fcd7 	bl	800a6f8 <VL53L0X_WrByte>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d58:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005d60:	8b7b      	ldrh	r3, [r7, #26]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	461a      	mov	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8005d6c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d108      	bne.n	8005d86 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005d74:	f107 031c 	add.w	r3, r7, #28
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f8d0 	bl	8005f20 <VL53L0X_GetDeviceParameters>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8005d86:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d110      	bne.n	8005db0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005d8e:	f107 0319 	add.w	r3, r7, #25
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f9ae 	bl	80060f6 <VL53L0X_GetFractionEnable>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8005da0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d103      	bne.n	8005db0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005da8:	7e7a      	ldrb	r2, [r7, #25]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005db0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10e      	bne.n	8005dd6 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f103 0410 	add.w	r4, r3, #16
 8005dbe:	f107 051c 	add.w	r5, r7, #28
 8005dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8005dd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d111      	bne.n	8005e02 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8005dde:	f107 0319 	add.w	r3, r7, #25
 8005de2:	461a      	mov	r2, r3
 8005de4:	2101      	movs	r1, #1
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f004 fd08 	bl	800a7fc <VL53L0X_RdByte>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8005df2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d103      	bne.n	8005e02 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005dfa:	7e7a      	ldrb	r2, [r7, #25]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8005e02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d107      	bne.n	8005e1a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f9e6 	bl	80061e0 <VL53L0X_SetSequenceStepEnable>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005e1a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d107      	bne.n	8005e32 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005e22:	2200      	movs	r2, #0
 8005e24:	2102      	movs	r1, #2
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f9da 	bl	80061e0 <VL53L0X_SetSequenceStepEnable>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8005e32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d103      	bne.n	8005e42 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005e42:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005e4a:	f107 0313 	add.w	r3, r7, #19
 8005e4e:	461a      	mov	r2, r3
 8005e50:	2100      	movs	r1, #0
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f9ac 	bl	80061b0 <VL53L0X_GetVcselPulsePeriod>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e5e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d103      	bne.n	8005e6e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005e66:	7cfa      	ldrb	r2, [r7, #19]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005e6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005e76:	f107 0313 	add.w	r3, r7, #19
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f996 	bl	80061b0 <VL53L0X_GetVcselPulsePeriod>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d103      	bne.n	8005e9a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005e92:	7cfa      	ldrb	r2, [r7, #19]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005e9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8005ea2:	f107 030c 	add.w	r3, r7, #12
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	2103      	movs	r1, #3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f002 fee0 	bl	8008c70 <get_sequence_step_timeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005eb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d103      	bne.n	8005ec6 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005ec6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8005ece:	f107 030c 	add.w	r3, r7, #12
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2104      	movs	r1, #4
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f002 feca 	bl	8008c70 <get_sequence_step_timeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ee2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d103      	bne.n	8005ef2 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ef2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3770      	adds	r7, #112	; 0x70
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bdb0      	pop	{r4, r5, r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000018 	.word	0x20000018

08005f04 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8005f0c:	239d      	movs	r3, #157	; 0x9d
 8005f0e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8005f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f8cc 	bl	80060d0 <VL53L0X_GetDeviceMode>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d107      	bne.n	8005f54 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	3308      	adds	r3, #8
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa94 	bl	8006478 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d107      	bne.n	8005f7a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	3310      	adds	r3, #16
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 faca 	bl	800650a <VL53L0X_GetXTalkCompensationRateMegaCps>
 8005f76:	4603      	mov	r3, r0
 8005f78:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d107      	bne.n	8005f92 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	3314      	adds	r3, #20
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fcaa 	bl	80058e2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d134      	bne.n	8006004 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	e02a      	b.n	8005ff6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d12a      	bne.n	8005ffe <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	b299      	uxth	r1, r3
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fbea 	bl	8006794 <VL53L0X_GetLimitCheckValue>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d117      	bne.n	8006002 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	b299      	uxth	r1, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	3318      	adds	r3, #24
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	4413      	add	r3, r2
 8005fde:	461a      	mov	r2, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fb51 	bl	8006688 <VL53L0X_GetLimitCheckEnable>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	60bb      	str	r3, [r7, #8]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b05      	cmp	r3, #5
 8005ffa:	ddd1      	ble.n	8005fa0 <VL53L0X_GetDeviceParameters+0x80>
 8005ffc:	e002      	b.n	8006004 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006002:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d107      	bne.n	800601c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	333c      	adds	r3, #60	; 0x3c
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fc4c 	bl	80068b0 <VL53L0X_GetWrapAroundCheckEnable>
 8006018:	4603      	mov	r3, r0
 800601a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800601c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d107      	bne.n	8006034 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f895 	bl	800615a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006030:	4603      	mov	r3, r0
 8006032:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006034:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	2b15      	cmp	r3, #21
 8006054:	d832      	bhi.n	80060bc <VL53L0X_SetDeviceMode+0x7c>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <VL53L0X_SetDeviceMode+0x1c>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	080060b5 	.word	0x080060b5
 8006060:	080060b5 	.word	0x080060b5
 8006064:	080060bd 	.word	0x080060bd
 8006068:	080060b5 	.word	0x080060b5
 800606c:	080060bd 	.word	0x080060bd
 8006070:	080060bd 	.word	0x080060bd
 8006074:	080060bd 	.word	0x080060bd
 8006078:	080060bd 	.word	0x080060bd
 800607c:	080060bd 	.word	0x080060bd
 8006080:	080060bd 	.word	0x080060bd
 8006084:	080060bd 	.word	0x080060bd
 8006088:	080060bd 	.word	0x080060bd
 800608c:	080060bd 	.word	0x080060bd
 8006090:	080060bd 	.word	0x080060bd
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	080060bd 	.word	0x080060bd
 80060a4:	080060bd 	.word	0x080060bd
 80060a8:	080060bd 	.word	0x080060bd
 80060ac:	080060b5 	.word	0x080060b5
 80060b0:	080060b5 	.word	0x080060b5
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	741a      	strb	r2, [r3, #16]
		break;
 80060ba:	e001      	b.n	80060c0 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80060bc:	23f8      	movs	r3, #248	; 0xf8
 80060be:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80060c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	7c1a      	ldrb	r2, [r3, #16]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80060e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	2109      	movs	r1, #9
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f004 fb77 	bl	800a7fc <VL53L0X_RdByte>
 800610e:	4603      	mov	r3, r0
 8006110:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	b2da      	uxtb	r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006128:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800613e:	2300      	movs	r3, #0
 8006140:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f003 fa26 	bl	8009596 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800614a:	4603      	mov	r3, r0
 800614c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800614e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006164:	2300      	movs	r3, #0
 8006166:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f003 faf3 	bl	8009756 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006170:	4603      	mov	r3, r0
 8006172:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006174:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
 800618c:	4613      	mov	r3, r2
 800618e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006190:	2300      	movs	r3, #0
 8006192:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006194:	78ba      	ldrb	r2, [r7, #2]
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f002 ff3b 	bl	8009016 <VL53L0X_set_vcsel_pulse_period>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80061a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	460b      	mov	r3, r1
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80061c2:	7afb      	ldrb	r3, [r7, #11]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	4619      	mov	r1, r3
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f003 f9ad 	bl	8009528 <VL53L0X_get_vcsel_pulse_period>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80061d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
 80061ec:	4613      	mov	r3, r2
 80061ee:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80061fc:	f107 030f 	add.w	r3, r7, #15
 8006200:	461a      	mov	r2, r3
 8006202:	2101      	movs	r1, #1
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f004 faf9 	bl	800a7fc <VL53L0X_RdByte>
 800620a:	4603      	mov	r3, r0
 800620c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
 8006210:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006212:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d15a      	bne.n	80062d0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800621a:	78bb      	ldrb	r3, [r7, #2]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d12b      	bne.n	8006278 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	2b04      	cmp	r3, #4
 8006224:	d825      	bhi.n	8006272 <VL53L0X_SetSequenceStepEnable+0x92>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006241 	.word	0x08006241
 8006230:	0800624b 	.word	0x0800624b
 8006234:	08006255 	.word	0x08006255
 8006238:	0800625f 	.word	0x0800625f
 800623c:	08006269 	.word	0x08006269
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006240:	7dbb      	ldrb	r3, [r7, #22]
 8006242:	f043 0310 	orr.w	r3, r3, #16
 8006246:	75bb      	strb	r3, [r7, #22]
				break;
 8006248:	e043      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800624a:	7dbb      	ldrb	r3, [r7, #22]
 800624c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006250:	75bb      	strb	r3, [r7, #22]
				break;
 8006252:	e03e      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006254:	7dbb      	ldrb	r3, [r7, #22]
 8006256:	f043 0304 	orr.w	r3, r3, #4
 800625a:	75bb      	strb	r3, [r7, #22]
				break;
 800625c:	e039      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800625e:	7dbb      	ldrb	r3, [r7, #22]
 8006260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006264:	75bb      	strb	r3, [r7, #22]
				break;
 8006266:	e034      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006268:	7dbb      	ldrb	r3, [r7, #22]
 800626a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800626e:	75bb      	strb	r3, [r7, #22]
				break;
 8006270:	e02f      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006272:	23fc      	movs	r3, #252	; 0xfc
 8006274:	75fb      	strb	r3, [r7, #23]
 8006276:	e02c      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	2b04      	cmp	r3, #4
 800627c:	d825      	bhi.n	80062ca <VL53L0X_SetSequenceStepEnable+0xea>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	08006299 	.word	0x08006299
 8006288:	080062a3 	.word	0x080062a3
 800628c:	080062ad 	.word	0x080062ad
 8006290:	080062b7 	.word	0x080062b7
 8006294:	080062c1 	.word	0x080062c1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006298:	7dbb      	ldrb	r3, [r7, #22]
 800629a:	f023 0310 	bic.w	r3, r3, #16
 800629e:	75bb      	strb	r3, [r7, #22]
				break;
 80062a0:	e017      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80062a2:	7dbb      	ldrb	r3, [r7, #22]
 80062a4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80062a8:	75bb      	strb	r3, [r7, #22]
				break;
 80062aa:	e012      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80062ac:	7dbb      	ldrb	r3, [r7, #22]
 80062ae:	f023 0304 	bic.w	r3, r3, #4
 80062b2:	75bb      	strb	r3, [r7, #22]
				break;
 80062b4:	e00d      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80062b6:	7dbb      	ldrb	r3, [r7, #22]
 80062b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062bc:	75bb      	strb	r3, [r7, #22]
				break;
 80062be:	e008      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80062c0:	7dbb      	ldrb	r3, [r7, #22]
 80062c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c6:	75bb      	strb	r3, [r7, #22]
				break;
 80062c8:	e003      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80062ca:	23fc      	movs	r3, #252	; 0xfc
 80062cc:	75fb      	strb	r3, [r7, #23]
 80062ce:	e000      	b.n	80062d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80062d0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	7dba      	ldrb	r2, [r7, #22]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d01e      	beq.n	8006318 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80062da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80062e2:	7dbb      	ldrb	r3, [r7, #22]
 80062e4:	461a      	mov	r2, r3
 80062e6:	2101      	movs	r1, #1
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f004 fa05 	bl	800a6f8 <VL53L0X_WrByte>
 80062ee:	4603      	mov	r3, r0
 80062f0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80062f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	7dba      	ldrb	r2, [r7, #22]
 80062fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006302:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006310:	6939      	ldr	r1, [r7, #16]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff ff0e 	bl	8006134 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006318:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	607b      	str	r3, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	72fb      	strb	r3, [r7, #11]
 8006332:	4613      	mov	r3, r2
 8006334:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006336:	2300      	movs	r3, #0
 8006338:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006340:	7afb      	ldrb	r3, [r7, #11]
 8006342:	2b04      	cmp	r3, #4
 8006344:	d836      	bhi.n	80063b4 <sequence_step_enabled+0x90>
 8006346:	a201      	add	r2, pc, #4	; (adr r2, 800634c <sequence_step_enabled+0x28>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	08006361 	.word	0x08006361
 8006350:	08006373 	.word	0x08006373
 8006354:	08006385 	.word	0x08006385
 8006358:	08006397 	.word	0x08006397
 800635c:	080063a9 	.word	0x080063a9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006360:	7abb      	ldrb	r3, [r7, #10]
 8006362:	111b      	asrs	r3, r3, #4
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	701a      	strb	r2, [r3, #0]
		break;
 8006370:	e022      	b.n	80063b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006372:	7abb      	ldrb	r3, [r7, #10]
 8006374:	10db      	asrs	r3, r3, #3
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	b2da      	uxtb	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	701a      	strb	r2, [r3, #0]
		break;
 8006382:	e019      	b.n	80063b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006384:	7abb      	ldrb	r3, [r7, #10]
 8006386:	109b      	asrs	r3, r3, #2
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	b2da      	uxtb	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	701a      	strb	r2, [r3, #0]
		break;
 8006394:	e010      	b.n	80063b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006396:	7abb      	ldrb	r3, [r7, #10]
 8006398:	119b      	asrs	r3, r3, #6
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	701a      	strb	r2, [r3, #0]
		break;
 80063a6:	e007      	b.n	80063b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80063a8:	7abb      	ldrb	r3, [r7, #10]
 80063aa:	09db      	lsrs	r3, r3, #7
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	701a      	strb	r2, [r3, #0]
		break;
 80063b2:	e001      	b.n	80063b8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80063b4:	23fc      	movs	r3, #252	; 0xfc
 80063b6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80063b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80063da:	f107 030e 	add.w	r3, r7, #14
 80063de:	461a      	mov	r2, r3
 80063e0:	2101      	movs	r1, #1
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f004 fa0a 	bl	800a7fc <VL53L0X_RdByte>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80063ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d107      	bne.n	8006404 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80063f4:	7bba      	ldrb	r2, [r7, #14]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2100      	movs	r1, #0
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff ff92 	bl	8006324 <sequence_step_enabled>
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d108      	bne.n	800641e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800640c:	7bba      	ldrb	r2, [r7, #14]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	3302      	adds	r3, #2
 8006412:	2101      	movs	r1, #1
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff ff85 	bl	8006324 <sequence_step_enabled>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800641e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d108      	bne.n	8006438 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006426:	7bba      	ldrb	r2, [r7, #14]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	2102      	movs	r1, #2
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff ff78 	bl	8006324 <sequence_step_enabled>
 8006434:	4603      	mov	r3, r0
 8006436:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d108      	bne.n	8006452 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006440:	7bba      	ldrb	r2, [r7, #14]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	3303      	adds	r3, #3
 8006446:	2103      	movs	r1, #3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff ff6b 	bl	8006324 <sequence_step_enabled>
 800644e:	4603      	mov	r3, r0
 8006450:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d108      	bne.n	800646c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800645a:	7bba      	ldrb	r2, [r7, #14]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	3304      	adds	r3, #4
 8006460:	2104      	movs	r1, #4
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff ff5e 	bl	8006324 <sequence_step_enabled>
 8006468:	4603      	mov	r3, r0
 800646a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800646c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006486:	f107 030c 	add.w	r3, r7, #12
 800648a:	461a      	mov	r2, r3
 800648c:	21f8      	movs	r1, #248	; 0xf8
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f004 f9de 	bl	800a850 <VL53L0X_RdWord>
 8006494:	4603      	mov	r3, r0
 8006496:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d108      	bne.n	80064b2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80064a0:	f107 0308 	add.w	r3, r7, #8
 80064a4:	461a      	mov	r2, r3
 80064a6:	2104      	movs	r1, #4
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f004 fa09 	bl	800a8c0 <VL53L0X_RdDWord>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10c      	bne.n	80064d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80064ba:	89bb      	ldrh	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	89ba      	ldrh	r2, [r7, #12]
 80064c4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	7f1b      	ldrb	r3, [r3, #28]
 80064f2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	7bba      	ldrb	r2, [r7, #14]
 80064f8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80064fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b086      	sub	sp, #24
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006514:	2300      	movs	r3, #0
 8006516:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006518:	f107 030e 	add.w	r3, r7, #14
 800651c:	461a      	mov	r2, r3
 800651e:	2120      	movs	r1, #32
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f004 f995 	bl	800a850 <VL53L0X_RdWord>
 8006526:	4603      	mov	r3, r0
 8006528:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800652a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d118      	bne.n	8006564 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006532:	89fb      	ldrh	r3, [r7, #14]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d109      	bne.n	800654c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	771a      	strb	r2, [r3, #28]
 800654a:	e00b      	b.n	8006564 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800654c:	89fb      	ldrh	r3, [r7, #14]
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006564:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	807b      	strh	r3, [r7, #2]
 800657c:	4613      	mov	r3, r2
 800657e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006580:	2300      	movs	r3, #0
 8006582:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006588:	2300      	movs	r3, #0
 800658a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006590:	887b      	ldrh	r3, [r7, #2]
 8006592:	2b05      	cmp	r3, #5
 8006594:	d902      	bls.n	800659c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006596:	23fc      	movs	r3, #252	; 0xfc
 8006598:	75fb      	strb	r3, [r7, #23]
 800659a:	e05b      	b.n	8006654 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800659c:	787b      	ldrb	r3, [r7, #1]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80065aa:	2301      	movs	r3, #1
 80065ac:	73bb      	strb	r3, [r7, #14]
 80065ae:	e00a      	b.n	80065c6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80065b0:	887b      	ldrh	r3, [r7, #2]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	330c      	adds	r3, #12
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80065c2:	2301      	movs	r3, #1
 80065c4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80065c6:	887b      	ldrh	r3, [r7, #2]
 80065c8:	2b05      	cmp	r3, #5
 80065ca:	d841      	bhi.n	8006650 <VL53L0X_SetLimitCheckEnable+0xe0>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	080065ed 	.word	0x080065ed
 80065d8:	080065f7 	.word	0x080065f7
 80065dc:	0800660d 	.word	0x0800660d
 80065e0:	08006617 	.word	0x08006617
 80065e4:	08006621 	.word	0x08006621
 80065e8:	08006639 	.word	0x08006639

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7bfa      	ldrb	r2, [r7, #15]
 80065f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80065f4:	e02e      	b.n	8006654 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	2144      	movs	r1, #68	; 0x44
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f004 f89d 	bl	800a740 <VL53L0X_WrWord>
 8006606:	4603      	mov	r3, r0
 8006608:	75fb      	strb	r3, [r7, #23]

			break;
 800660a:	e023      	b.n	8006654 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	7bfa      	ldrb	r2, [r7, #15]
 8006610:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006614:	e01e      	b.n	8006654 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	7bfa      	ldrb	r2, [r7, #15]
 800661a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800661e:	e019      	b.n	8006654 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006626:	7b7b      	ldrb	r3, [r7, #13]
 8006628:	22fe      	movs	r2, #254	; 0xfe
 800662a:	2160      	movs	r1, #96	; 0x60
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f004 f8b1 	bl	800a794 <VL53L0X_UpdateByte>
 8006632:	4603      	mov	r3, r0
 8006634:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006636:	e00d      	b.n	8006654 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800663e:	7b7b      	ldrb	r3, [r7, #13]
 8006640:	22ef      	movs	r2, #239	; 0xef
 8006642:	2160      	movs	r1, #96	; 0x60
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f004 f8a5 	bl	800a794 <VL53L0X_UpdateByte>
 800664a:	4603      	mov	r3, r0
 800664c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800664e:	e001      	b.n	8006654 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006650:	23fc      	movs	r3, #252	; 0xfc
 8006652:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10f      	bne.n	800667c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800665c:	787b      	ldrb	r3, [r7, #1]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006662:	887b      	ldrh	r3, [r7, #2]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	4413      	add	r3, r2
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800666e:	e005      	b.n	800667c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	4413      	add	r3, r2
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800667c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	460b      	mov	r3, r1
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006696:	2300      	movs	r3, #0
 8006698:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800669a:	897b      	ldrh	r3, [r7, #10]
 800669c:	2b05      	cmp	r3, #5
 800669e:	d905      	bls.n	80066ac <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80066a0:	23fc      	movs	r3, #252	; 0xfc
 80066a2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	e008      	b.n	80066be <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80066ac:	897b      	ldrh	r3, [r7, #10]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	7dba      	ldrb	r2, [r7, #22]
 80066bc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80066be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
	...

080066d0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	460b      	mov	r3, r1
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066de:	2300      	movs	r3, #0
 80066e0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80066e2:	897b      	ldrh	r3, [r7, #10]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ec:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80066ee:	7dbb      	ldrb	r3, [r7, #22]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d107      	bne.n	8006704 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80066f4:	897b      	ldrh	r3, [r7, #10]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	330c      	adds	r3, #12
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	e040      	b.n	8006786 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006704:	897b      	ldrh	r3, [r7, #10]
 8006706:	2b05      	cmp	r3, #5
 8006708:	d830      	bhi.n	800676c <VL53L0X_SetLimitCheckValue+0x9c>
 800670a:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <VL53L0X_SetLimitCheckValue+0x40>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006729 	.word	0x08006729
 8006714:	08006731 	.word	0x08006731
 8006718:	08006747 	.word	0x08006747
 800671c:	0800674f 	.word	0x0800674f
 8006720:	08006757 	.word	0x08006757
 8006724:	08006757 	.word	0x08006757

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800672e:	e01f      	b.n	8006770 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006734:	b29b      	uxth	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	2144      	movs	r1, #68	; 0x44
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f004 f800 	bl	800a740 <VL53L0X_WrWord>
 8006740:	4603      	mov	r3, r0
 8006742:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006744:	e014      	b.n	8006770 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800674c:	e010      	b.n	8006770 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006754:	e00c      	b.n	8006770 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	2164      	movs	r1, #100	; 0x64
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f003 ffed 	bl	800a740 <VL53L0X_WrWord>
 8006766:	4603      	mov	r3, r0
 8006768:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800676a:	e001      	b.n	8006770 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800676c:	23fc      	movs	r3, #252	; 0xfc
 800676e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d106      	bne.n	8006786 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006778:	897b      	ldrh	r3, [r7, #10]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	330c      	adds	r3, #12
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006786:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop

08006794 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	460b      	mov	r3, r1
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80067aa:	897b      	ldrh	r3, [r7, #10]
 80067ac:	2b05      	cmp	r3, #5
 80067ae:	d847      	bhi.n	8006840 <VL53L0X_GetLimitCheckValue+0xac>
 80067b0:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <VL53L0X_GetLimitCheckValue+0x24>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	080067d1 	.word	0x080067d1
 80067bc:	080067dd 	.word	0x080067dd
 80067c0:	08006803 	.word	0x08006803
 80067c4:	0800680f 	.word	0x0800680f
 80067c8:	0800681b 	.word	0x0800681b
 80067cc:	0800681b 	.word	0x0800681b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	77bb      	strb	r3, [r7, #30]
		break;
 80067da:	e033      	b.n	8006844 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80067dc:	f107 0316 	add.w	r3, r7, #22
 80067e0:	461a      	mov	r2, r3
 80067e2:	2144      	movs	r1, #68	; 0x44
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f004 f833 	bl	800a850 <VL53L0X_RdWord>
 80067ea:	4603      	mov	r3, r0
 80067ec:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80067ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80067f6:	8afb      	ldrh	r3, [r7, #22]
 80067f8:	025b      	lsls	r3, r3, #9
 80067fa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80067fc:	2301      	movs	r3, #1
 80067fe:	77bb      	strb	r3, [r7, #30]
		break;
 8006800:	e020      	b.n	8006844 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	77bb      	strb	r3, [r7, #30]
		break;
 800680c:	e01a      	b.n	8006844 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006814:	2300      	movs	r3, #0
 8006816:	77bb      	strb	r3, [r7, #30]
		break;
 8006818:	e014      	b.n	8006844 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800681a:	f107 0316 	add.w	r3, r7, #22
 800681e:	461a      	mov	r2, r3
 8006820:	2164      	movs	r1, #100	; 0x64
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f004 f814 	bl	800a850 <VL53L0X_RdWord>
 8006828:	4603      	mov	r3, r0
 800682a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800682c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006834:	8afb      	ldrh	r3, [r7, #22]
 8006836:	025b      	lsls	r3, r3, #9
 8006838:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	77bb      	strb	r3, [r7, #30]
		break;
 800683e:	e001      	b.n	8006844 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006840:	23fc      	movs	r3, #252	; 0xfc
 8006842:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006844:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d12a      	bne.n	80068a2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800684c:	7fbb      	ldrb	r3, [r7, #30]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d124      	bne.n	800689c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d110      	bne.n	800687a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006858:	897b      	ldrh	r3, [r7, #10]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	330c      	adds	r3, #12
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800686c:	897b      	ldrh	r3, [r7, #10]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4413      	add	r3, r2
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006878:	e013      	b.n	80068a2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006880:	897b      	ldrh	r3, [r7, #10]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	330c      	adds	r3, #12
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800688e:	897b      	ldrh	r3, [r7, #10]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800689a:	e002      	b.n	80068a2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068a2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3720      	adds	r7, #32
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop

080068b0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80068be:	f107 030e 	add.w	r3, r7, #14
 80068c2:	461a      	mov	r2, r3
 80068c4:	2101      	movs	r1, #1
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f003 ff98 	bl	800a7fc <VL53L0X_RdByte>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80068d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10e      	bne.n	80068f6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80068d8:	7bba      	ldrb	r2, [r7, #14]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	b25b      	sxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da03      	bge.n	80068f0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	e002      	b.n	80068f6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80068f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d104      	bne.n	8006908 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006908:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800691c:	2300      	movs	r3, #0
 800691e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006920:	f107 030e 	add.w	r3, r7, #14
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff fbd2 	bl	80060d0 <VL53L0X_GetDeviceMode>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d107      	bne.n	8006948 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f898 	bl	8006a74 <VL53L0X_StartMeasurement>
 8006944:	4603      	mov	r3, r0
 8006946:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 fb3f 	bl	8007fd4 <VL53L0X_measurement_poll_for_completion>
 8006956:	4603      	mov	r3, r0
 8006958:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800695a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d103      	bne.n	8006970 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2203      	movs	r2, #3
 800696c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006970:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006988:	2300      	movs	r3, #0
 800698a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800698c:	2301      	movs	r3, #1
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f001 fae1 	bl	8007f5a <VL53L0X_perform_ref_calibration>
 8006998:	4603      	mov	r3, r0
 800699a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800699c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80069be:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80069c0:	7dbb      	ldrb	r3, [r7, #22]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d005      	beq.n	80069d2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80069c6:	7dbb      	ldrb	r3, [r7, #22]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d002      	beq.n	80069d2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80069cc:	7dbb      	ldrb	r3, [r7, #22]
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d147      	bne.n	8006a62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80069d2:	f107 030c 	add.w	r3, r7, #12
 80069d6:	f107 0210 	add.w	r2, r7, #16
 80069da:	2101      	movs	r1, #1
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fbc3 	bl	8007168 <VL53L0X_GetInterruptThresholds>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80069ec:	d803      	bhi.n	80069f6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80069ee:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80069f0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80069f4:	d935      	bls.n	8006a62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80069f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d131      	bne.n	8006a62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d006      	beq.n	8006a12 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006a04:	491a      	ldr	r1, [pc, #104]	; (8006a70 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f002 ff56 	bl	80098b8 <VL53L0X_load_tuning_settings>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	75fb      	strb	r3, [r7, #23]
 8006a10:	e027      	b.n	8006a62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006a12:	2204      	movs	r2, #4
 8006a14:	21ff      	movs	r1, #255	; 0xff
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f003 fe6e 	bl	800a6f8 <VL53L0X_WrByte>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	461a      	mov	r2, r3
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006a26:	2200      	movs	r2, #0
 8006a28:	2170      	movs	r1, #112	; 0x70
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f003 fe64 	bl	800a6f8 <VL53L0X_WrByte>
 8006a30:	4603      	mov	r3, r0
 8006a32:	461a      	mov	r2, r3
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	21ff      	movs	r1, #255	; 0xff
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f003 fe5a 	bl	800a6f8 <VL53L0X_WrByte>
 8006a44:	4603      	mov	r3, r0
 8006a46:	461a      	mov	r2, r3
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2180      	movs	r1, #128	; 0x80
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f003 fe50 	bl	800a6f8 <VL53L0X_WrByte>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006a62:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	2000010c 	.word	0x2000010c

08006a74 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006a84:	f107 030e 	add.w	r3, r7, #14
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff fb20 	bl	80060d0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006a90:	2201      	movs	r2, #1
 8006a92:	2180      	movs	r1, #128	; 0x80
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f003 fe2f 	bl	800a6f8 <VL53L0X_WrByte>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	21ff      	movs	r1, #255	; 0xff
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f003 fe28 	bl	800a6f8 <VL53L0X_WrByte>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006aac:	2200      	movs	r2, #0
 8006aae:	2100      	movs	r1, #0
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f003 fe21 	bl	800a6f8 <VL53L0X_WrByte>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	2191      	movs	r1, #145	; 0x91
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f003 fe17 	bl	800a6f8 <VL53L0X_WrByte>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006ace:	2201      	movs	r2, #1
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f003 fe10 	bl	800a6f8 <VL53L0X_WrByte>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006adc:	2200      	movs	r2, #0
 8006ade:	21ff      	movs	r1, #255	; 0xff
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f003 fe09 	bl	800a6f8 <VL53L0X_WrByte>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006aea:	2200      	movs	r2, #0
 8006aec:	2180      	movs	r1, #128	; 0x80
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f003 fe02 	bl	800a6f8 <VL53L0X_WrByte>
 8006af4:	4603      	mov	r3, r0
 8006af6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d037      	beq.n	8006b6e <VL53L0X_StartMeasurement+0xfa>
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d04f      	beq.n	8006ba2 <VL53L0X_StartMeasurement+0x12e>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d167      	bne.n	8006bd6 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006b06:	2201      	movs	r2, #1
 8006b08:	2100      	movs	r1, #0
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f003 fdf4 	bl	800a6f8 <VL53L0X_WrByte>
 8006b10:	4603      	mov	r3, r0
 8006b12:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006b18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d15d      	bne.n	8006bdc <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d008      	beq.n	8006b3c <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8006b2a:	f107 030d 	add.w	r3, r7, #13
 8006b2e:	461a      	mov	r2, r3
 8006b30:	2100      	movs	r1, #0
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f003 fe62 	bl	800a7fc <VL53L0X_RdByte>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8006b42:	7b7a      	ldrb	r2, [r7, #13]
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	4013      	ands	r3, r2
 8006b48:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006b4a:	7bfa      	ldrb	r2, [r7, #15]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d107      	bne.n	8006b60 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8006b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006b5e:	d3e1      	bcc.n	8006b24 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006b66:	d339      	bcc.n	8006bdc <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006b68:	23f9      	movs	r3, #249	; 0xf9
 8006b6a:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006b6c:	e036      	b.n	8006bdc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d105      	bne.n	8006b82 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006b76:	2101      	movs	r1, #1
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff ff15 	bl	80069a8 <VL53L0X_CheckAndLoadInterruptSettings>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006b82:	2202      	movs	r2, #2
 8006b84:	2100      	movs	r1, #0
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f003 fdb6 	bl	800a6f8 <VL53L0X_WrByte>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006b90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d123      	bne.n	8006be0 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006ba0:	e01e      	b.n	8006be0 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006baa:	2101      	movs	r1, #1
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff fefb 	bl	80069a8 <VL53L0X_CheckAndLoadInterruptSettings>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f003 fd9c 	bl	800a6f8 <VL53L0X_WrByte>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2204      	movs	r2, #4
 8006bd0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006bd4:	e006      	b.n	8006be4 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006bd6:	23f8      	movs	r3, #248	; 0xf8
 8006bd8:	75fb      	strb	r3, [r7, #23]
 8006bda:	e004      	b.n	8006be6 <VL53L0X_StartMeasurement+0x172>
		break;
 8006bdc:	bf00      	nop
 8006bde:	e002      	b.n	8006be6 <VL53L0X_StartMeasurement+0x172>
		break;
 8006be0:	bf00      	nop
 8006be2:	e000      	b.n	8006be6 <VL53L0X_StartMeasurement+0x172>
		break;
 8006be4:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006c06:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d112      	bne.n	8006c34 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006c0e:	f107 0308 	add.w	r3, r7, #8
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fb1d 	bl	8007254 <VL53L0X_GetInterruptMaskStatus>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d103      	bne.n	8006c2c <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2201      	movs	r2, #1
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	e01c      	b.n	8006c66 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e018      	b.n	8006c66 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006c34:	f107 030d 	add.w	r3, r7, #13
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2114      	movs	r1, #20
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f003 fddd 	bl	800a7fc <VL53L0X_RdByte>
 8006c42:	4603      	mov	r3, r0
 8006c44:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8006c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10b      	bne.n	8006c66 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006c4e:	7b7b      	ldrb	r3, [r7, #13]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	e002      	b.n	8006c66 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006c74:	b5b0      	push	{r4, r5, r7, lr}
 8006c76:	b096      	sub	sp, #88	; 0x58
 8006c78:	af02      	add	r7, sp, #8
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8006c84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006c88:	230c      	movs	r3, #12
 8006c8a:	2114      	movs	r1, #20
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f003 fd07 	bl	800a6a0 <VL53L0X_ReadMulti>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006c98:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f040 80d2 	bne.w	8006e46 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8006cae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006cca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	4413      	add	r3, r2
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	025b      	lsls	r3, r3, #9
 8006ce0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ce6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006ce8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006cfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d02:	025b      	lsls	r3, r3, #9
 8006d04:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006d0a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006d26:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006d28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8006d36:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006d3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8006d42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d48:	d047      	beq.n	8006dda <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006d4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d4c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006d50:	fb02 f303 	mul.w	r3, r2, r3
 8006d54:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006d58:	4a58      	ldr	r2, [pc, #352]	; (8006ebc <VL53L0X_GetRangingMeasurementData+0x248>)
 8006d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8006d5e:	1192      	asrs	r2, r2, #6
 8006d60:	17db      	asrs	r3, r3, #31
 8006d62:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8006d64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	7f1b      	ldrb	r3, [r3, #28]
 8006d72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8006d76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d02d      	beq.n	8006dda <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006d7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d80:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006d84:	fb02 f303 	mul.w	r3, r2, r3
 8006d88:	121b      	asrs	r3, r3, #8
 8006d8a:	461a      	mov	r2, r3
				if ((SignalRate
 8006d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d10d      	bne.n	8006dae <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8006d92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d004      	beq.n	8006da4 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8006d9a:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006d9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006da2:	e016      	b.n	8006dd2 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8006da4:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006da8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006dac:	e011      	b.n	8006dd2 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006dae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006db4:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006db8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006dba:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006dbe:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8006dc2:	121b      	asrs	r3, r3, #8
 8006dc4:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8006dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc8:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006dce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8006dd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006dd6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006dda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00d      	beq.n	8006dfe <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8006de2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006de6:	089b      	lsrs	r3, r3, #2
 8006de8:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006dee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	019b      	lsls	r3, r3, #6
 8006df6:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	75da      	strb	r2, [r3, #23]
 8006dfc:	e006      	b.n	8006e0c <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006e04:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006e0c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006e10:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006e14:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f003 f9f0 	bl	800a208 <VL53L0X_get_pal_range_status>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8006e36:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006e3e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e46:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d12f      	bne.n	8006eae <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f107 040c 	add.w	r4, r7, #12
 8006e54:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8006e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006e60:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8006e68:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8006e76:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006e7c:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006e82:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8006e88:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8006e8e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8006e94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006e9e:	f107 050c 	add.w	r5, r7, #12
 8006ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ea6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006eae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3750      	adds	r7, #80	; 0x50
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	10624dd3 	.word	0x10624dd3

08006ec0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006ece:	2100      	movs	r1, #0
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff f8b5 	bl	8006040 <VL53L0X_SetDeviceMode>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d104      	bne.n	8006eec <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff fd16 	bl	8006914 <VL53L0X_PerformSingleMeasurement>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d105      	bne.n	8006f00 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff febc 	bl	8006c74 <VL53L0X_GetRangingMeasurementData>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006f08:	2100      	movs	r1, #0
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f962 	bl	80071d4 <VL53L0X_ClearInterruptMask>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	4608      	mov	r0, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	70fb      	strb	r3, [r7, #3]
 8006f32:	460b      	mov	r3, r1
 8006f34:	70bb      	strb	r3, [r7, #2]
 8006f36:	4613      	mov	r3, r2
 8006f38:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006f44:	23f6      	movs	r3, #246	; 0xf6
 8006f46:	73fb      	strb	r3, [r7, #15]
 8006f48:	e107      	b.n	800715a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006f4a:	78bb      	ldrb	r3, [r7, #2]
 8006f4c:	2b14      	cmp	r3, #20
 8006f4e:	d110      	bne.n	8006f72 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006f50:	7e3b      	ldrb	r3, [r7, #24]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d102      	bne.n	8006f5c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8006f56:	2310      	movs	r3, #16
 8006f58:	73bb      	strb	r3, [r7, #14]
 8006f5a:	e001      	b.n	8006f60 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	461a      	mov	r2, r3
 8006f64:	2184      	movs	r1, #132	; 0x84
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f003 fbc6 	bl	800a6f8 <VL53L0X_WrByte>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]
 8006f70:	e0f3      	b.n	800715a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006f72:	78bb      	ldrb	r3, [r7, #2]
 8006f74:	2b15      	cmp	r3, #21
 8006f76:	f040 8097 	bne.w	80070a8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	21ff      	movs	r1, #255	; 0xff
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f003 fbba 	bl	800a6f8 <VL53L0X_WrByte>
 8006f84:	4603      	mov	r3, r0
 8006f86:	461a      	mov	r2, r3
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2100      	movs	r1, #0
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f003 fbb0 	bl	800a6f8 <VL53L0X_WrByte>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	21ff      	movs	r1, #255	; 0xff
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f003 fba6 	bl	800a6f8 <VL53L0X_WrByte>
 8006fac:	4603      	mov	r3, r0
 8006fae:	461a      	mov	r2, r3
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	2180      	movs	r1, #128	; 0x80
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f003 fb9c 	bl	800a6f8 <VL53L0X_WrByte>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006fca:	2202      	movs	r2, #2
 8006fcc:	2185      	movs	r1, #133	; 0x85
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f003 fb92 	bl	800a6f8 <VL53L0X_WrByte>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006fde:	2204      	movs	r2, #4
 8006fe0:	21ff      	movs	r1, #255	; 0xff
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f003 fb88 	bl	800a6f8 <VL53L0X_WrByte>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461a      	mov	r2, r3
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	21cd      	movs	r1, #205	; 0xcd
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f003 fb7e 	bl	800a6f8 <VL53L0X_WrByte>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	461a      	mov	r2, r3
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	4313      	orrs	r3, r2
 8007004:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007006:	2211      	movs	r2, #17
 8007008:	21cc      	movs	r1, #204	; 0xcc
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f003 fb74 	bl	800a6f8 <VL53L0X_WrByte>
 8007010:	4603      	mov	r3, r0
 8007012:	461a      	mov	r2, r3
 8007014:	7bfb      	ldrb	r3, [r7, #15]
 8007016:	4313      	orrs	r3, r2
 8007018:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800701a:	2207      	movs	r2, #7
 800701c:	21ff      	movs	r1, #255	; 0xff
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f003 fb6a 	bl	800a6f8 <VL53L0X_WrByte>
 8007024:	4603      	mov	r3, r0
 8007026:	461a      	mov	r2, r3
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	4313      	orrs	r3, r2
 800702c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800702e:	2200      	movs	r2, #0
 8007030:	21be      	movs	r1, #190	; 0xbe
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f003 fb60 	bl	800a6f8 <VL53L0X_WrByte>
 8007038:	4603      	mov	r3, r0
 800703a:	461a      	mov	r2, r3
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	4313      	orrs	r3, r2
 8007040:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007042:	2206      	movs	r2, #6
 8007044:	21ff      	movs	r1, #255	; 0xff
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f003 fb56 	bl	800a6f8 <VL53L0X_WrByte>
 800704c:	4603      	mov	r3, r0
 800704e:	461a      	mov	r2, r3
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	4313      	orrs	r3, r2
 8007054:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007056:	2209      	movs	r2, #9
 8007058:	21cc      	movs	r1, #204	; 0xcc
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f003 fb4c 	bl	800a6f8 <VL53L0X_WrByte>
 8007060:	4603      	mov	r3, r0
 8007062:	461a      	mov	r2, r3
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	4313      	orrs	r3, r2
 8007068:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800706a:	2200      	movs	r2, #0
 800706c:	21ff      	movs	r1, #255	; 0xff
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f003 fb42 	bl	800a6f8 <VL53L0X_WrByte>
 8007074:	4603      	mov	r3, r0
 8007076:	461a      	mov	r2, r3
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	4313      	orrs	r3, r2
 800707c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800707e:	2201      	movs	r2, #1
 8007080:	21ff      	movs	r1, #255	; 0xff
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f003 fb38 	bl	800a6f8 <VL53L0X_WrByte>
 8007088:	4603      	mov	r3, r0
 800708a:	461a      	mov	r2, r3
 800708c:	7bfb      	ldrb	r3, [r7, #15]
 800708e:	4313      	orrs	r3, r2
 8007090:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007092:	2200      	movs	r2, #0
 8007094:	2100      	movs	r1, #0
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f003 fb2e 	bl	800a6f8 <VL53L0X_WrByte>
 800709c:	4603      	mov	r3, r0
 800709e:	461a      	mov	r2, r3
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	73fb      	strb	r3, [r7, #15]
 80070a6:	e058      	b.n	800715a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80070a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d121      	bne.n	80070f4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80070b0:	787b      	ldrb	r3, [r7, #1]
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d81b      	bhi.n	80070ee <VL53L0X_SetGpioConfig+0x1ce>
 80070b6:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <VL53L0X_SetGpioConfig+0x19c>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	080070d1 	.word	0x080070d1
 80070c0:	080070d7 	.word	0x080070d7
 80070c4:	080070dd 	.word	0x080070dd
 80070c8:	080070e3 	.word	0x080070e3
 80070cc:	080070e9 	.word	0x080070e9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73bb      	strb	r3, [r7, #14]
				break;
 80070d4:	e00f      	b.n	80070f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80070d6:	2301      	movs	r3, #1
 80070d8:	73bb      	strb	r3, [r7, #14]
				break;
 80070da:	e00c      	b.n	80070f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80070dc:	2302      	movs	r3, #2
 80070de:	73bb      	strb	r3, [r7, #14]
				break;
 80070e0:	e009      	b.n	80070f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80070e2:	2303      	movs	r3, #3
 80070e4:	73bb      	strb	r3, [r7, #14]
				break;
 80070e6:	e006      	b.n	80070f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80070e8:	2304      	movs	r3, #4
 80070ea:	73bb      	strb	r3, [r7, #14]
				break;
 80070ec:	e003      	b.n	80070f6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80070ee:	23f5      	movs	r3, #245	; 0xf5
 80070f0:	73fb      	strb	r3, [r7, #15]
 80070f2:	e000      	b.n	80070f6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80070f4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80070f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d107      	bne.n	800710e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80070fe:	7bbb      	ldrb	r3, [r7, #14]
 8007100:	461a      	mov	r2, r3
 8007102:	210a      	movs	r1, #10
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f003 faf7 	bl	800a6f8 <VL53L0X_WrByte>
 800710a:	4603      	mov	r3, r0
 800710c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800710e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10f      	bne.n	8007136 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007116:	7e3b      	ldrb	r3, [r7, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	73bb      	strb	r3, [r7, #14]
 8007120:	e001      	b.n	8007126 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007122:	2310      	movs	r3, #16
 8007124:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	22ef      	movs	r2, #239	; 0xef
 800712a:	2184      	movs	r1, #132	; 0x84
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f003 fb31 	bl	800a794 <VL53L0X_UpdateByte>
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	787a      	ldrb	r2, [r7, #1]
 8007142:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d105      	bne.n	800715a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800714e:	2100      	movs	r1, #0
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f83f 	bl	80071d4 <VL53L0X_ClearInterruptMask>
 8007156:	4603      	mov	r3, r0
 8007158:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800715a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop

08007168 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	607a      	str	r2, [r7, #4]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	460b      	mov	r3, r1
 8007176:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007178:	2300      	movs	r3, #0
 800717a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800717c:	f107 0314 	add.w	r3, r7, #20
 8007180:	461a      	mov	r2, r3
 8007182:	210e      	movs	r1, #14
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f003 fb63 	bl	800a850 <VL53L0X_RdWord>
 800718a:	4603      	mov	r3, r0
 800718c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800718e:	8abb      	ldrh	r3, [r7, #20]
 8007190:	045b      	lsls	r3, r3, #17
 8007192:	461a      	mov	r2, r3
 8007194:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <VL53L0X_GetInterruptThresholds+0x68>)
 8007196:	4013      	ands	r3, r2
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800719c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10f      	bne.n	80071c4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80071a4:	f107 0314 	add.w	r3, r7, #20
 80071a8:	461a      	mov	r2, r3
 80071aa:	210c      	movs	r1, #12
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f003 fb4f 	bl	800a850 <VL53L0X_RdWord>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80071b6:	8abb      	ldrh	r3, [r7, #20]
 80071b8:	045b      	lsls	r3, r3, #17
 80071ba:	461a      	mov	r2, r3
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <VL53L0X_GetInterruptThresholds+0x68>)
 80071be:	4013      	ands	r3, r2
		*pThresholdHigh =
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	1ffe0000 	.word	0x1ffe0000

080071d4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80071e6:	2201      	movs	r2, #1
 80071e8:	210b      	movs	r1, #11
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f003 fa84 	bl	800a6f8 <VL53L0X_WrByte>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80071f4:	2200      	movs	r2, #0
 80071f6:	210b      	movs	r1, #11
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f003 fa7d 	bl	800a6f8 <VL53L0X_WrByte>
 80071fe:	4603      	mov	r3, r0
 8007200:	461a      	mov	r2, r3
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	4313      	orrs	r3, r2
 8007206:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007208:	f107 030d 	add.w	r3, r7, #13
 800720c:	461a      	mov	r2, r3
 800720e:	2113      	movs	r1, #19
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f003 faf3 	bl	800a7fc <VL53L0X_RdByte>
 8007216:	4603      	mov	r3, r0
 8007218:	461a      	mov	r2, r3
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	4313      	orrs	r3, r2
 800721e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007220:	7bbb      	ldrb	r3, [r7, #14]
 8007222:	3301      	adds	r3, #1
 8007224:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007226:	7b7b      	ldrb	r3, [r7, #13]
 8007228:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800722c:	2b00      	cmp	r3, #0
 800722e:	d006      	beq.n	800723e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b02      	cmp	r3, #2
 8007234:	d803      	bhi.n	800723e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0d3      	beq.n	80071e6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b02      	cmp	r3, #2
 8007242:	d901      	bls.n	8007248 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007244:	23f4      	movs	r3, #244	; 0xf4
 8007246:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007262:	f107 030e 	add.w	r3, r7, #14
 8007266:	461a      	mov	r2, r3
 8007268:	2113      	movs	r1, #19
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f003 fac6 	bl	800a7fc <VL53L0X_RdByte>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	f003 0207 	and.w	r2, r3, #7
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	f003 0318 	and.w	r3, r3, #24
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007288:	23fa      	movs	r3, #250	; 0xfa
 800728a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800728c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 fa03 	bl	80076b8 <VL53L0X_perform_ref_spad_management>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80072b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b084      	sub	sp, #16
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80072d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80072d4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80072d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072da:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80072dc:	f107 0308 	add.w	r3, r7, #8
 80072e0:	461a      	mov	r2, r3
 80072e2:	2128      	movs	r1, #40	; 0x28
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f003 fab3 	bl	800a850 <VL53L0X_RdWord>
 80072ea:	4603      	mov	r3, r0
 80072ec:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80072ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d11e      	bne.n	8007334 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80072f6:	893b      	ldrh	r3, [r7, #8]
 80072f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007300:	893b      	ldrh	r3, [r7, #8]
 8007302:	461a      	mov	r2, r3
 8007304:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007308:	429a      	cmp	r2, r3
 800730a:	dd0b      	ble.n	8007324 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800730c:	893a      	ldrh	r2, [r7, #8]
 800730e:	897b      	ldrh	r3, [r7, #10]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	b29b      	uxth	r3, r3
 8007314:	b21b      	sxth	r3, r3
 8007316:	461a      	mov	r2, r3
					* 250;
 8007318:	23fa      	movs	r3, #250	; 0xfa
 800731a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e007      	b.n	8007334 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007324:	893b      	ldrh	r3, [r7, #8]
 8007326:	b21b      	sxth	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	23fa      	movs	r3, #250	; 0xfa
 800732c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007334:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007340:	b480      	push	{r7}
 8007342:	b08b      	sub	sp, #44	; 0x2c
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800734e:	2308      	movs	r3, #8
 8007350:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800735c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	fbb2 f3f3 	udiv	r3, r2, r3
 8007366:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007370:	69b9      	ldr	r1, [r7, #24]
 8007372:	fb01 f202 	mul.w	r2, r1, r2
 8007376:	1a9b      	subs	r3, r3, r2
 8007378:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
 800737e:	e030      	b.n	80073e2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	4413      	add	r3, r2
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800738e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	429a      	cmp	r2, r3
 8007394:	d11e      	bne.n	80073d4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007396:	7ffa      	ldrb	r2, [r7, #31]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	fa42 f303 	asr.w	r3, r2, r3
 800739e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80073a4:	e016      	b.n	80073d4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80073a6:	7ffb      	ldrb	r3, [r7, #31]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <get_next_good_spad+0x88>
				success = 1;
 80073b0:	2301      	movs	r3, #1
 80073b2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	fb02 f203 	mul.w	r2, r2, r3
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	4413      	add	r3, r2
 80073c0:	461a      	mov	r2, r3
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	601a      	str	r2, [r3, #0]
				break;
 80073c6:	e009      	b.n	80073dc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80073c8:	7ffb      	ldrb	r3, [r7, #31]
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	3301      	adds	r3, #1
 80073d2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80073d4:	6a3a      	ldr	r2, [r7, #32]
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d3e4      	bcc.n	80073a6 <get_next_good_spad+0x66>
				coarseIndex++) {
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	3301      	adds	r3, #1
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80073e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d202      	bcs.n	80073f0 <get_next_good_spad+0xb0>
 80073ea:	7fbb      	ldrb	r3, [r7, #30]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0c7      	beq.n	8007380 <get_next_good_spad+0x40>
		}
	}
}
 80073f0:	bf00      	nop
 80073f2:	372c      	adds	r7, #44	; 0x2c
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007404:	2301      	movs	r3, #1
 8007406:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	099b      	lsrs	r3, r3, #6
 800740c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800740e:	4a07      	ldr	r2, [pc, #28]	; (800742c <is_aperture+0x30>)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <is_aperture+0x22>
		isAperture = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	200002c4 	.word	0x200002c4

08007430 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007430:	b480      	push	{r7}
 8007432:	b089      	sub	sp, #36	; 0x24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800743c:	2300      	movs	r3, #0
 800743e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007440:	2308      	movs	r3, #8
 8007442:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	fbb2 f3f3 	udiv	r3, r2, r3
 800744c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	fbb3 f2f2 	udiv	r2, r3, r2
 8007456:	69b9      	ldr	r1, [r7, #24]
 8007458:	fb01 f202 	mul.w	r2, r1, r2
 800745c:	1a9b      	subs	r3, r3, r2
 800745e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	429a      	cmp	r2, r3
 8007466:	d302      	bcc.n	800746e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007468:	23ce      	movs	r3, #206	; 0xce
 800746a:	77fb      	strb	r3, [r7, #31]
 800746c:	e010      	b.n	8007490 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	4413      	add	r3, r2
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	b25a      	sxtb	r2, r3
 8007478:	2101      	movs	r1, #1
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	fa01 f303 	lsl.w	r3, r1, r3
 8007480:	b25b      	sxtb	r3, r3
 8007482:	4313      	orrs	r3, r2
 8007484:	b259      	sxtb	r1, r3
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	4413      	add	r3, r2
 800748c:	b2ca      	uxtb	r2, r1
 800748e:	701a      	strb	r2, [r3, #0]

	return status;
 8007490:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3724      	adds	r7, #36	; 0x24
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80074aa:	2306      	movs	r3, #6
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	21b0      	movs	r1, #176	; 0xb0
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f003 f8c5 	bl	800a640 <VL53L0X_WriteMulti>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80074ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80074d0:	2306      	movs	r3, #6
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	21b0      	movs	r1, #176	; 0xb0
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f003 f8e2 	bl	800a6a0 <VL53L0X_ReadMulti>
 80074dc:	4603      	mov	r3, r0
 80074de:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80074e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08c      	sub	sp, #48	; 0x30
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	607a      	str	r2, [r7, #4]
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	460b      	mov	r3, r1
 80074fa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007504:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007508:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800750a:	2300      	movs	r3, #0
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
 800750e:	e02b      	b.n	8007568 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007510:	f107 031c 	add.w	r3, r7, #28
 8007514:	6a3a      	ldr	r2, [r7, #32]
 8007516:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff ff11 	bl	8007340 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007524:	d103      	bne.n	800752e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007526:	23ce      	movs	r3, #206	; 0xce
 8007528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800752c:	e020      	b.n	8007570 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	461a      	mov	r2, r3
 8007532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007534:	4413      	add	r3, r2
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff ff60 	bl	80073fc <is_aperture>
 800753c:	4603      	mov	r3, r0
 800753e:	461a      	mov	r2, r3
 8007540:	7afb      	ldrb	r3, [r7, #11]
 8007542:	4293      	cmp	r3, r2
 8007544:	d003      	beq.n	800754e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007546:	23ce      	movs	r3, #206	; 0xce
 8007548:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800754c:	e010      	b.n	8007570 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007552:	6a3a      	ldr	r2, [r7, #32]
 8007554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007556:	6838      	ldr	r0, [r7, #0]
 8007558:	f7ff ff6a 	bl	8007430 <enable_spad_bit>
		currentSpad++;
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	3301      	adds	r3, #1
 8007560:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	3301      	adds	r3, #1
 8007566:	62bb      	str	r3, [r7, #40]	; 0x28
 8007568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800756a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756c:	429a      	cmp	r2, r3
 800756e:	d3cf      	bcc.n	8007510 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007572:	6a3a      	ldr	r2, [r7, #32]
 8007574:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007576:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7ff ff8d 	bl	80074a0 <set_ref_spad_map>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800758c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007590:	2b00      	cmp	r3, #0
 8007592:	d121      	bne.n	80075d8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007594:	f107 0314 	add.w	r3, r7, #20
 8007598:	4619      	mov	r1, r3
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff ff93 	bl	80074c6 <get_ref_spad_map>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80075aa:	e011      	b.n	80075d0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	4413      	add	r3, r2
 80075b2:	781a      	ldrb	r2, [r3, #0]
 80075b4:	f107 0114 	add.w	r1, r7, #20
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	440b      	add	r3, r1
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d003      	beq.n	80075ca <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80075c2:	23ce      	movs	r3, #206	; 0xce
 80075c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80075c8:	e006      	b.n	80075d8 <enable_ref_spads+0xec>
			}
			i++;
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	3301      	adds	r3, #1
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80075d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d3e9      	bcc.n	80075ac <enable_ref_spads+0xc0>
		}
	}
	return status;
 80075d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3730      	adds	r7, #48	; 0x30
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08a      	sub	sp, #40	; 0x28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007604:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007608:	2b00      	cmp	r3, #0
 800760a:	d107      	bne.n	800761c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800760c:	22c0      	movs	r2, #192	; 0xc0
 800760e:	2101      	movs	r1, #1
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f003 f871 	bl	800a6f8 <VL53L0X_WrByte>
 8007616:	4603      	mov	r3, r0
 8007618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800761c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007620:	2b00      	cmp	r3, #0
 8007622:	d108      	bne.n	8007636 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007624:	f107 0308 	add.w	r3, r7, #8
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff fc48 	bl	8006ec0 <VL53L0X_PerformSingleRangingMeasurement>
 8007630:	4603      	mov	r3, r0
 8007632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007636:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800763a:	2b00      	cmp	r3, #0
 800763c:	d107      	bne.n	800764e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800763e:	2201      	movs	r2, #1
 8007640:	21ff      	movs	r1, #255	; 0xff
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f003 f858 	bl	800a6f8 <VL53L0X_WrByte>
 8007648:	4603      	mov	r3, r0
 800764a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800764e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007652:	2b00      	cmp	r3, #0
 8007654:	d107      	bne.n	8007666 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	21b6      	movs	r1, #182	; 0xb6
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f003 f8f8 	bl	800a850 <VL53L0X_RdWord>
 8007660:	4603      	mov	r3, r0
 8007662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007666:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800766a:	2b00      	cmp	r3, #0
 800766c:	d107      	bne.n	800767e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800766e:	2200      	movs	r2, #0
 8007670:	21ff      	movs	r1, #255	; 0xff
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f003 f840 	bl	800a6f8 <VL53L0X_WrByte>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800767e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007682:	2b00      	cmp	r3, #0
 8007684:	d112      	bne.n	80076ac <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007686:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800768a:	461a      	mov	r2, r3
 800768c:	2101      	movs	r1, #1
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f003 f832 	bl	800a6f8 <VL53L0X_WrByte>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800769a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d104      	bne.n	80076ac <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076a8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80076ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3728      	adds	r7, #40	; 0x28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80076b8:	b590      	push	{r4, r7, lr}
 80076ba:	b09d      	sub	sp, #116	; 0x74
 80076bc:	af06      	add	r7, sp, #24
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80076ca:	23b4      	movs	r3, #180	; 0xb4
 80076cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80076d0:	2303      	movs	r3, #3
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80076d4:	232c      	movs	r3, #44	; 0x2c
 80076d6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80076e4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80076e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80076f2:	2306      	movs	r3, #6
 80076f4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800770c:	2300      	movs	r3, #0
 800770e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800771c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800771e:	2300      	movs	r3, #0
 8007720:	64bb      	str	r3, [r7, #72]	; 0x48
 8007722:	e009      	b.n	8007738 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007728:	4413      	add	r3, r2
 800772a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007734:	3301      	adds	r3, #1
 8007736:	64bb      	str	r3, [r7, #72]	; 0x48
 8007738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	429a      	cmp	r2, r3
 800773e:	d3f1      	bcc.n	8007724 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007740:	2201      	movs	r2, #1
 8007742:	21ff      	movs	r1, #255	; 0xff
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f002 ffd7 	bl	800a6f8 <VL53L0X_WrByte>
 800774a:	4603      	mov	r3, r0
 800774c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007750:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007754:	2b00      	cmp	r3, #0
 8007756:	d107      	bne.n	8007768 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8007758:	2200      	movs	r2, #0
 800775a:	214f      	movs	r1, #79	; 0x4f
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f002 ffcb 	bl	800a6f8 <VL53L0X_WrByte>
 8007762:	4603      	mov	r3, r0
 8007764:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007768:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800776c:	2b00      	cmp	r3, #0
 800776e:	d107      	bne.n	8007780 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007770:	222c      	movs	r2, #44	; 0x2c
 8007772:	214e      	movs	r1, #78	; 0x4e
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f002 ffbf 	bl	800a6f8 <VL53L0X_WrByte>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007780:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007784:	2b00      	cmp	r3, #0
 8007786:	d107      	bne.n	8007798 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007788:	2200      	movs	r2, #0
 800778a:	21ff      	movs	r1, #255	; 0xff
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f002 ffb3 	bl	800a6f8 <VL53L0X_WrByte>
 8007792:	4603      	mov	r3, r0
 8007794:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007798:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800779c:	2b00      	cmp	r3, #0
 800779e:	d109      	bne.n	80077b4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80077a0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80077a4:	461a      	mov	r2, r3
 80077a6:	21b6      	movs	r1, #182	; 0xb6
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f002 ffa5 	bl	800a6f8 <VL53L0X_WrByte>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80077b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d107      	bne.n	80077cc <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80077bc:	2200      	movs	r2, #0
 80077be:	2180      	movs	r1, #128	; 0x80
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f002 ff99 	bl	800a6f8 <VL53L0X_WrByte>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80077cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80077d4:	f107 0210 	add.w	r2, r7, #16
 80077d8:	f107 0111 	add.w	r1, r7, #17
 80077dc:	2300      	movs	r3, #0
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 fbbb 	bl	8007f5a <VL53L0X_perform_ref_calibration>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80077ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d121      	bne.n	8007836 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80077f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80077fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007800:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800780e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007812:	f107 0218 	add.w	r2, r7, #24
 8007816:	9204      	str	r2, [sp, #16]
 8007818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800781a:	9203      	str	r2, [sp, #12]
 800781c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800781e:	9202      	str	r2, [sp, #8]
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	4623      	mov	r3, r4
 8007828:	4602      	mov	r2, r0
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f7ff fe5e 	bl	80074ec <enable_ref_spads>
 8007830:	4603      	mov	r3, r0
 8007832:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007836:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800783a:	2b00      	cmp	r3, #0
 800783c:	d174      	bne.n	8007928 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007842:	f107 0312 	add.w	r3, r7, #18
 8007846:	4619      	mov	r1, r3
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f7ff fecb 	bl	80075e4 <perform_ref_signal_measurement>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007854:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007858:	2b00      	cmp	r3, #0
 800785a:	d161      	bne.n	8007920 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800785c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800785e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007860:	429a      	cmp	r2, r3
 8007862:	d25d      	bcs.n	8007920 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007864:	2300      	movs	r3, #0
 8007866:	64bb      	str	r3, [r7, #72]	; 0x48
 8007868:	e009      	b.n	800787e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800786e:	4413      	add	r3, r2
 8007870:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007874:	2200      	movs	r2, #0
 8007876:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800787a:	3301      	adds	r3, #1
 800787c:	64bb      	str	r3, [r7, #72]	; 0x48
 800787e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	429a      	cmp	r2, r3
 8007884:	d3f1      	bcc.n	800786a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007886:	e002      	b.n	800788e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800788a:	3301      	adds	r3, #1
 800788c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800788e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007894:	4413      	add	r3, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fdb0 	bl	80073fc <is_aperture>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d103      	bne.n	80078aa <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80078a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d3ee      	bcc.n	8007888 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80078aa:	2301      	movs	r3, #1
 80078ac:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80078ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80078be:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80078c2:	f107 0218 	add.w	r2, r7, #24
 80078c6:	9204      	str	r2, [sp, #16]
 80078c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ca:	9203      	str	r2, [sp, #12]
 80078cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078ce:	9202      	str	r2, [sp, #8]
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	4623      	mov	r3, r4
 80078d8:	4602      	mov	r2, r0
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7ff fe06 	bl	80074ec <enable_ref_spads>
 80078e0:	4603      	mov	r3, r0
 80078e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80078e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d11b      	bne.n	8007926 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80078f2:	f107 0312 	add.w	r3, r7, #18
 80078f6:	4619      	mov	r1, r3
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff fe73 	bl	80075e4 <perform_ref_signal_measurement>
 80078fe:	4603      	mov	r3, r0
 8007900:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007904:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10c      	bne.n	8007926 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800790c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800790e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007910:	429a      	cmp	r2, r3
 8007912:	d208      	bcs.n	8007926 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007914:	2301      	movs	r3, #1
 8007916:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800791e:	e002      	b.n	8007926 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007924:	e000      	b.n	8007928 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007926:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007928:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 80af 	bne.w	8007a90 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007932:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007934:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007936:	429a      	cmp	r2, r3
 8007938:	f240 80aa 	bls.w	8007a90 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800793c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800794c:	f107 031c 	add.w	r3, r7, #28
 8007950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007952:	4618      	mov	r0, r3
 8007954:	f003 f828 	bl	800a9a8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007958:	8a7b      	ldrh	r3, [r7, #18]
 800795a:	461a      	mov	r2, r3
 800795c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	bfb8      	it	lt
 8007964:	425b      	neglt	r3, r3
 8007966:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800796e:	e086      	b.n	8007a7e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007976:	f107 0314 	add.w	r3, r7, #20
 800797a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800797c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800797e:	f7ff fcdf 	bl	8007340 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007988:	d103      	bne.n	8007992 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800798a:	23ce      	movs	r3, #206	; 0xce
 800798c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007990:	e07e      	b.n	8007a90 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007992:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4413      	add	r3, r2
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff fd2e 	bl	80073fc <is_aperture>
 80079a0:	4603      	mov	r3, r0
 80079a2:	461a      	mov	r2, r3
 80079a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80079b0:	e06e      	b.n	8007a90 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80079b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b4:	3301      	adds	r3, #1
 80079b6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80079c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff fd32 	bl	8007430 <enable_spad_bit>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80079d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10c      	bne.n	80079f4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80079da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079dc:	3301      	adds	r3, #1
 80079de:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80079e6:	4619      	mov	r1, r3
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f7ff fd59 	bl	80074a0 <set_ref_spad_map>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80079f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d146      	bne.n	8007a8a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80079fc:	f107 0312 	add.w	r3, r7, #18
 8007a00:	4619      	mov	r1, r3
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff fdee 	bl	80075e4 <perform_ref_signal_measurement>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007a0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d13b      	bne.n	8007a8e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007a16:	8a7b      	ldrh	r3, [r7, #18]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfb8      	it	lt
 8007a22:	425b      	neglt	r3, r3
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007a26:	8a7b      	ldrh	r3, [r7, #18]
 8007a28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d21c      	bcs.n	8007a68 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d914      	bls.n	8007a60 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007a36:	f107 031c 	add.w	r3, r7, #28
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f7ff fd2f 	bl	80074a0 <set_ref_spad_map>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007a4e:	f107 011c 	add.w	r1, r7, #28
 8007a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a54:	4618      	mov	r0, r3
 8007a56:	f002 ffa7 	bl	800a9a8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a66:	e00a      	b.n	8007a7e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007a72:	f107 031c 	add.w	r3, r7, #28
 8007a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f002 ff95 	bl	800a9a8 <memcpy>
		while (!complete) {
 8007a7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f43f af74 	beq.w	8007970 <VL53L0X_perform_ref_spad_management+0x2b8>
 8007a88:	e002      	b.n	8007a90 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007a8a:	bf00      	nop
 8007a8c:	e000      	b.n	8007a90 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007a8e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d115      	bne.n	8007ac4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a9c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007aa4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007ac4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	375c      	adds	r7, #92	; 0x5c
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd90      	pop	{r4, r7, pc}

08007ad0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007ad0:	b590      	push	{r4, r7, lr}
 8007ad2:	b093      	sub	sp, #76	; 0x4c
 8007ad4:	af06      	add	r7, sp, #24
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4613      	mov	r3, r2
 8007adc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007ae8:	23b4      	movs	r3, #180	; 0xb4
 8007aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007aee:	2306      	movs	r3, #6
 8007af0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007af2:	232c      	movs	r3, #44	; 0x2c
 8007af4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007af6:	2201      	movs	r2, #1
 8007af8:	21ff      	movs	r1, #255	; 0xff
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f002 fdfc 	bl	800a6f8 <VL53L0X_WrByte>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007b06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d107      	bne.n	8007b1e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007b0e:	2200      	movs	r2, #0
 8007b10:	214f      	movs	r1, #79	; 0x4f
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f002 fdf0 	bl	800a6f8 <VL53L0X_WrByte>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007b1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007b26:	222c      	movs	r2, #44	; 0x2c
 8007b28:	214e      	movs	r1, #78	; 0x4e
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f002 fde4 	bl	800a6f8 <VL53L0X_WrByte>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007b36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d107      	bne.n	8007b4e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	21ff      	movs	r1, #255	; 0xff
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f002 fdd8 	bl	800a6f8 <VL53L0X_WrByte>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007b4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d109      	bne.n	8007b6a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8007b56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	21b6      	movs	r1, #182	; 0xb6
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f002 fdca 	bl	800a6f8 <VL53L0X_WrByte>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b6e:	e009      	b.n	8007b84 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	3301      	adds	r3, #1
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
 8007b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d3f1      	bcc.n	8007b70 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d011      	beq.n	8007bb6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007b92:	e002      	b.n	8007b9a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	3301      	adds	r3, #1
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007b9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	4413      	add	r3, r2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff fc2a 	bl	80073fc <is_aperture>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <VL53L0X_set_reference_spads+0xe6>
 8007bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d3ee      	bcc.n	8007b94 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bc6:	79f9      	ldrb	r1, [r7, #7]
 8007bc8:	f107 0214 	add.w	r2, r7, #20
 8007bcc:	9204      	str	r2, [sp, #16]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	9203      	str	r2, [sp, #12]
 8007bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bd4:	9202      	str	r2, [sp, #8]
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	4623      	mov	r3, r4
 8007bde:	4602      	mov	r2, r0
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7ff fc83 	bl	80074ec <enable_ref_spads>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007bec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10c      	bne.n	8007c0e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	79fa      	ldrb	r2, [r7, #7]
 8007c0a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007c0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3734      	adds	r7, #52	; 0x34
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd90      	pop	{r4, r7, pc}

08007c1a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10a      	bne.n	8007c48 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007c32:	78fb      	ldrb	r3, [r7, #3]
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f002 fd5a 	bl	800a6f8 <VL53L0X_WrByte>
 8007c44:	4603      	mov	r3, r0
 8007c46:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8007c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d104      	bne.n	8007c5a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f9bf 	bl	8007fd4 <VL53L0X_measurement_poll_for_completion>
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d105      	bne.n	8007c6e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007c62:	2100      	movs	r1, #0
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff fab5 	bl	80071d4 <VL53L0X_ClearInterruptMask>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d106      	bne.n	8007c84 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8007c76:	2200      	movs	r2, #0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f002 fd3c 	bl	800a6f8 <VL53L0X_WrByte>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	4608      	mov	r0, r1
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	70fb      	strb	r3, [r7, #3]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	70bb      	strb	r3, [r7, #2]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	21ff      	movs	r1, #255	; 0xff
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f002 fd1e 	bl	800a6f8 <VL53L0X_WrByte>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f002 fd14 	bl	800a6f8 <VL53L0X_WrByte>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007cda:	2200      	movs	r2, #0
 8007cdc:	21ff      	movs	r1, #255	; 0xff
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f002 fd0a 	bl	800a6f8 <VL53L0X_WrByte>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007cee:	78fb      	ldrb	r3, [r7, #3]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01e      	beq.n	8007d32 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007cf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d009      	beq.n	8007d10 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	21cb      	movs	r1, #203	; 0xcb
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f002 fd7b 	bl	800a7fc <VL53L0X_RdByte>
 8007d06:	4603      	mov	r3, r0
 8007d08:	461a      	mov	r2, r3
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007d10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d02a      	beq.n	8007d6e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007d18:	f107 030e 	add.w	r3, r7, #14
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	21ee      	movs	r1, #238	; 0xee
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f002 fd6b 	bl	800a7fc <VL53L0X_RdByte>
 8007d26:	4603      	mov	r3, r0
 8007d28:	461a      	mov	r2, r3
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	73fb      	strb	r3, [r7, #15]
 8007d30:	e01d      	b.n	8007d6e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007d32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00a      	beq.n	8007d50 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8007d3a:	78bb      	ldrb	r3, [r7, #2]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	21cb      	movs	r1, #203	; 0xcb
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f002 fcd9 	bl	800a6f8 <VL53L0X_WrByte>
 8007d46:	4603      	mov	r3, r0
 8007d48:	461a      	mov	r2, r3
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007d50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007d58:	787b      	ldrb	r3, [r7, #1]
 8007d5a:	2280      	movs	r2, #128	; 0x80
 8007d5c:	21ee      	movs	r1, #238	; 0xee
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f002 fd18 	bl	800a794 <VL53L0X_UpdateByte>
 8007d64:	4603      	mov	r3, r0
 8007d66:	461a      	mov	r2, r3
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007d6e:	2201      	movs	r2, #1
 8007d70:	21ff      	movs	r1, #255	; 0xff
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f002 fcc0 	bl	800a6f8 <VL53L0X_WrByte>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007d82:	2201      	movs	r2, #1
 8007d84:	2100      	movs	r1, #0
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f002 fcb6 	bl	800a6f8 <VL53L0X_WrByte>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007d96:	2200      	movs	r2, #0
 8007d98:	21ff      	movs	r1, #255	; 0xff
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f002 fcac 	bl	800a6f8 <VL53L0X_WrByte>
 8007da0:	4603      	mov	r3, r0
 8007da2:	461a      	mov	r2, r3
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	f023 0310 	bic.w	r3, r3, #16
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	701a      	strb	r2, [r3, #0]

	return Status;
 8007db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b08a      	sub	sp, #40	; 0x28
 8007dc6:	af04      	add	r7, sp, #16
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	4611      	mov	r1, r2
 8007dce:	461a      	mov	r2, r3
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	71fb      	strb	r3, [r7, #7]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007dec:	79bb      	ldrb	r3, [r7, #6]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007df8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f002 fc7a 	bl	800a6f8 <VL53L0X_WrByte>
 8007e04:	4603      	mov	r3, r0
 8007e06:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007e08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d105      	bne.n	8007e1c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007e10:	2140      	movs	r1, #64	; 0x40
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7ff ff01 	bl	8007c1a <VL53L0X_perform_single_ref_calibration>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d115      	bne.n	8007e50 <VL53L0X_perform_vhv_calibration+0x8e>
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d112      	bne.n	8007e50 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007e2a:	7d39      	ldrb	r1, [r7, #20]
 8007e2c:	7d7a      	ldrb	r2, [r7, #21]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9303      	str	r3, [sp, #12]
 8007e32:	2301      	movs	r3, #1
 8007e34:	9302      	str	r3, [sp, #8]
 8007e36:	f107 0313 	add.w	r3, r7, #19
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	460b      	mov	r3, r1
 8007e42:	2101      	movs	r1, #1
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f7ff ff23 	bl	8007c90 <VL53L0X_ref_calibration_io>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	75fb      	strb	r3, [r7, #23]
 8007e4e:	e002      	b.n	8007e56 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2200      	movs	r2, #0
 8007e54:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d112      	bne.n	8007e84 <VL53L0X_perform_vhv_calibration+0xc2>
 8007e5e:	79bb      	ldrb	r3, [r7, #6]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00f      	beq.n	8007e84 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007e64:	7dbb      	ldrb	r3, [r7, #22]
 8007e66:	461a      	mov	r2, r3
 8007e68:	2101      	movs	r1, #1
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f002 fc44 	bl	800a6f8 <VL53L0X_WrByte>
 8007e70:	4603      	mov	r3, r0
 8007e72:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	7dba      	ldrb	r2, [r7, #22]
 8007e80:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08a      	sub	sp, #40	; 0x28
 8007e94:	af04      	add	r7, sp, #16
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	71fb      	strb	r3, [r7, #7]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007eb6:	79bb      	ldrb	r3, [r7, #6]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007ec2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f002 fc15 	bl	800a6f8 <VL53L0X_WrByte>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d105      	bne.n	8007ee6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8007eda:	2100      	movs	r1, #0
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f7ff fe9c 	bl	8007c1a <VL53L0X_perform_single_ref_calibration>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d115      	bne.n	8007f1a <VL53L0X_perform_phase_calibration+0x8a>
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d112      	bne.n	8007f1a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007ef4:	7d39      	ldrb	r1, [r7, #20]
 8007ef6:	7d7a      	ldrb	r2, [r7, #21]
 8007ef8:	2301      	movs	r3, #1
 8007efa:	9303      	str	r3, [sp, #12]
 8007efc:	2300      	movs	r3, #0
 8007efe:	9302      	str	r3, [sp, #8]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	f107 0313 	add.w	r3, r7, #19
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff febe 	bl	8007c90 <VL53L0X_ref_calibration_io>
 8007f14:	4603      	mov	r3, r0
 8007f16:	75fb      	strb	r3, [r7, #23]
 8007f18:	e002      	b.n	8007f20 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d112      	bne.n	8007f4e <VL53L0X_perform_phase_calibration+0xbe>
 8007f28:	79bb      	ldrb	r3, [r7, #6]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00f      	beq.n	8007f4e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007f2e:	7dbb      	ldrb	r3, [r7, #22]
 8007f30:	461a      	mov	r2, r3
 8007f32:	2101      	movs	r1, #1
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f002 fbdf 	bl	800a6f8 <VL53L0X_WrByte>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	7dba      	ldrb	r2, [r7, #22]
 8007f4a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b086      	sub	sp, #24
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007f76:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007f78:	78fa      	ldrb	r2, [r7, #3]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f7ff ff1f 	bl	8007dc2 <VL53L0X_perform_vhv_calibration>
 8007f84:	4603      	mov	r3, r0
 8007f86:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d107      	bne.n	8007fa0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007f90:	78fa      	ldrb	r2, [r7, #3]
 8007f92:	2300      	movs	r3, #0
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7ff ff7a 	bl	8007e90 <VL53L0X_perform_phase_calibration>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10f      	bne.n	8007fc8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007fa8:	7dbb      	ldrb	r3, [r7, #22]
 8007faa:	461a      	mov	r2, r3
 8007fac:	2101      	movs	r1, #1
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f002 fba2 	bl	800a6f8 <VL53L0X_WrByte>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d103      	bne.n	8007fc8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	7dba      	ldrb	r2, [r7, #22]
 8007fc4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007fc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007fe8:	f107 030f 	add.w	r3, r7, #15
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7fe fdff 	bl	8006bf2 <VL53L0X_GetMeasurementDataReady>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d110      	bne.n	8008022 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d00f      	beq.n	8008026 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	3301      	adds	r3, #1
 800800a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008012:	d302      	bcc.n	800801a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008014:	23f9      	movs	r3, #249	; 0xf9
 8008016:	75fb      	strb	r3, [r7, #23]
			break;
 8008018:	e006      	b.n	8008028 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f002 fc8c 	bl	800a938 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008020:	e7e2      	b.n	8007fe8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008022:	bf00      	nop
 8008024:	e000      	b.n	8008028 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008026:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008028:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	3301      	adds	r3, #1
 8008046:	b2db      	uxtb	r3, r3
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800804c:	7bfb      	ldrb	r3, [r7, #15]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	4603      	mov	r3, r0
 8008062:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	085b      	lsrs	r3, r3, #1
 800806c:	b2db      	uxtb	r3, r3
 800806e:	3b01      	subs	r3, #1
 8008070:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800808c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008090:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008092:	e002      	b.n	800809a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	089b      	lsrs	r3, r3, #2
 8008098:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d8f8      	bhi.n	8008094 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80080a2:	e017      	b.n	80080d4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	4413      	add	r3, r2
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d30b      	bcc.n	80080c8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	4413      	add	r3, r2
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	085b      	lsrs	r3, r3, #1
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	4413      	add	r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	e002      	b.n	80080ce <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	085b      	lsrs	r3, r3, #1
 80080cc:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	089b      	lsrs	r3, r3, #2
 80080d2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e4      	bne.n	80080a4 <VL53L0X_isqrt+0x24>
	}

	return res;
 80080da:	68fb      	ldr	r3, [r7, #12]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80080f4:	2200      	movs	r2, #0
 80080f6:	2183      	movs	r1, #131	; 0x83
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f002 fafd 	bl	800a6f8 <VL53L0X_WrByte>
 80080fe:	4603      	mov	r3, r0
 8008100:	461a      	mov	r2, r3
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	4313      	orrs	r3, r2
 8008106:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d11e      	bne.n	800814e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008114:	f107 030f 	add.w	r3, r7, #15
 8008118:	461a      	mov	r2, r3
 800811a:	2183      	movs	r1, #131	; 0x83
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f002 fb6d 	bl	800a7fc <VL53L0X_RdByte>
 8008122:	4603      	mov	r3, r0
 8008124:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <VL53L0X_device_read_strobe+0x5a>
 800812c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d106      	bne.n	8008142 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	3301      	adds	r3, #1
 8008138:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008140:	d3e8      	bcc.n	8008114 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008148:	d301      	bcc.n	800814e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800814a:	23f9      	movs	r3, #249	; 0xf9
 800814c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800814e:	2201      	movs	r2, #1
 8008150:	2183      	movs	r1, #131	; 0x83
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f002 fad0 	bl	800a6f8 <VL53L0X_WrByte>
 8008158:	4603      	mov	r3, r0
 800815a:	461a      	mov	r2, r3
 800815c:	7dfb      	ldrb	r3, [r7, #23]
 800815e:	4313      	orrs	r3, r2
 8008160:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008162:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b098      	sub	sp, #96	; 0x60
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800817a:	2300      	movs	r3, #0
 800817c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800819e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80081a2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80081b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80081ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80081be:	2b07      	cmp	r3, #7
 80081c0:	f000 8408 	beq.w	80089d4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80081c4:	2201      	movs	r2, #1
 80081c6:	2180      	movs	r1, #128	; 0x80
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f002 fa95 	bl	800a6f8 <VL53L0X_WrByte>
 80081ce:	4603      	mov	r3, r0
 80081d0:	461a      	mov	r2, r3
 80081d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80081dc:	2201      	movs	r2, #1
 80081de:	21ff      	movs	r1, #255	; 0xff
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f002 fa89 	bl	800a6f8 <VL53L0X_WrByte>
 80081e6:	4603      	mov	r3, r0
 80081e8:	461a      	mov	r2, r3
 80081ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80081f4:	2200      	movs	r2, #0
 80081f6:	2100      	movs	r1, #0
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f002 fa7d 	bl	800a6f8 <VL53L0X_WrByte>
 80081fe:	4603      	mov	r3, r0
 8008200:	461a      	mov	r2, r3
 8008202:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008206:	4313      	orrs	r3, r2
 8008208:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800820c:	2206      	movs	r2, #6
 800820e:	21ff      	movs	r1, #255	; 0xff
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f002 fa71 	bl	800a6f8 <VL53L0X_WrByte>
 8008216:	4603      	mov	r3, r0
 8008218:	461a      	mov	r2, r3
 800821a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800821e:	4313      	orrs	r3, r2
 8008220:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008224:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008228:	461a      	mov	r2, r3
 800822a:	2183      	movs	r1, #131	; 0x83
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f002 fae5 	bl	800a7fc <VL53L0X_RdByte>
 8008232:	4603      	mov	r3, r0
 8008234:	461a      	mov	r2, r3
 8008236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800823a:	4313      	orrs	r3, r2
 800823c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008240:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008244:	f043 0304 	orr.w	r3, r3, #4
 8008248:	b2db      	uxtb	r3, r3
 800824a:	461a      	mov	r2, r3
 800824c:	2183      	movs	r1, #131	; 0x83
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f002 fa52 	bl	800a6f8 <VL53L0X_WrByte>
 8008254:	4603      	mov	r3, r0
 8008256:	461a      	mov	r2, r3
 8008258:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800825c:	4313      	orrs	r3, r2
 800825e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008262:	2207      	movs	r2, #7
 8008264:	21ff      	movs	r1, #255	; 0xff
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f002 fa46 	bl	800a6f8 <VL53L0X_WrByte>
 800826c:	4603      	mov	r3, r0
 800826e:	461a      	mov	r2, r3
 8008270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008274:	4313      	orrs	r3, r2
 8008276:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800827a:	2201      	movs	r2, #1
 800827c:	2181      	movs	r1, #129	; 0x81
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f002 fa3a 	bl	800a6f8 <VL53L0X_WrByte>
 8008284:	4603      	mov	r3, r0
 8008286:	461a      	mov	r2, r3
 8008288:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800828c:	4313      	orrs	r3, r2
 800828e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f002 fb50 	bl	800a938 <VL53L0X_PollingDelay>
 8008298:	4603      	mov	r3, r0
 800829a:	461a      	mov	r2, r3
 800829c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082a0:	4313      	orrs	r3, r2
 80082a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80082a6:	2201      	movs	r2, #1
 80082a8:	2180      	movs	r1, #128	; 0x80
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f002 fa24 	bl	800a6f8 <VL53L0X_WrByte>
 80082b0:	4603      	mov	r3, r0
 80082b2:	461a      	mov	r2, r3
 80082b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082b8:	4313      	orrs	r3, r2
 80082ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 8098 	beq.w	80083fa <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80082ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082ce:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f040 8091 	bne.w	80083fa <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80082d8:	226b      	movs	r2, #107	; 0x6b
 80082da:	2194      	movs	r1, #148	; 0x94
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f002 fa0b 	bl	800a6f8 <VL53L0X_WrByte>
 80082e2:	4603      	mov	r3, r0
 80082e4:	461a      	mov	r2, r3
 80082e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082ea:	4313      	orrs	r3, r2
 80082ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7ff fef9 	bl	80080e8 <VL53L0X_device_read_strobe>
 80082f6:	4603      	mov	r3, r0
 80082f8:	461a      	mov	r2, r3
 80082fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082fe:	4313      	orrs	r3, r2
 8008300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008308:	461a      	mov	r2, r3
 800830a:	2190      	movs	r1, #144	; 0x90
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f002 fad7 	bl	800a8c0 <VL53L0X_RdDWord>
 8008312:	4603      	mov	r3, r0
 8008314:	461a      	mov	r2, r3
 8008316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800831a:	4313      	orrs	r3, r2
 800831c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008322:	0a1b      	lsrs	r3, r3, #8
 8008324:	b2db      	uxtb	r3, r3
 8008326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800832a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	0bdb      	lsrs	r3, r3, #15
 8008332:	b2db      	uxtb	r3, r3
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800833c:	2224      	movs	r2, #36	; 0x24
 800833e:	2194      	movs	r1, #148	; 0x94
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f002 f9d9 	bl	800a6f8 <VL53L0X_WrByte>
 8008346:	4603      	mov	r3, r0
 8008348:	461a      	mov	r2, r3
 800834a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800834e:	4313      	orrs	r3, r2
 8008350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff fec7 	bl	80080e8 <VL53L0X_device_read_strobe>
 800835a:	4603      	mov	r3, r0
 800835c:	461a      	mov	r2, r3
 800835e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008362:	4313      	orrs	r3, r2
 8008364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800836c:	461a      	mov	r2, r3
 800836e:	2190      	movs	r1, #144	; 0x90
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f002 faa5 	bl	800a8c0 <VL53L0X_RdDWord>
 8008376:	4603      	mov	r3, r0
 8008378:	461a      	mov	r2, r3
 800837a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800837e:	4313      	orrs	r3, r2
 8008380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	0e1b      	lsrs	r3, r3, #24
 8008388:	b2db      	uxtb	r3, r3
 800838a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	0c1b      	lsrs	r3, r3, #16
 8008390:	b2db      	uxtb	r3, r3
 8008392:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	0a1b      	lsrs	r3, r3, #8
 8008398:	b2db      	uxtb	r3, r3
 800839a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80083a2:	2225      	movs	r2, #37	; 0x25
 80083a4:	2194      	movs	r1, #148	; 0x94
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f002 f9a6 	bl	800a6f8 <VL53L0X_WrByte>
 80083ac:	4603      	mov	r3, r0
 80083ae:	461a      	mov	r2, r3
 80083b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083b4:	4313      	orrs	r3, r2
 80083b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff fe94 	bl	80080e8 <VL53L0X_device_read_strobe>
 80083c0:	4603      	mov	r3, r0
 80083c2:	461a      	mov	r2, r3
 80083c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083c8:	4313      	orrs	r3, r2
 80083ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80083ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083d2:	461a      	mov	r2, r3
 80083d4:	2190      	movs	r1, #144	; 0x90
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f002 fa72 	bl	800a8c0 <VL53L0X_RdDWord>
 80083dc:	4603      	mov	r3, r0
 80083de:	461a      	mov	r2, r3
 80083e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083e4:	4313      	orrs	r3, r2
 80083e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	0e1b      	lsrs	r3, r3, #24
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	0c1b      	lsrs	r3, r3, #16
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 8189 	beq.w	8008718 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008406:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800840a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800840e:	2b00      	cmp	r3, #0
 8008410:	f040 8182 	bne.w	8008718 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008414:	2202      	movs	r2, #2
 8008416:	2194      	movs	r1, #148	; 0x94
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f002 f96d 	bl	800a6f8 <VL53L0X_WrByte>
 800841e:	4603      	mov	r3, r0
 8008420:	461a      	mov	r2, r3
 8008422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008426:	4313      	orrs	r3, r2
 8008428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff fe5b 	bl	80080e8 <VL53L0X_device_read_strobe>
 8008432:	4603      	mov	r3, r0
 8008434:	461a      	mov	r2, r3
 8008436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800843a:	4313      	orrs	r3, r2
 800843c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008440:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008444:	461a      	mov	r2, r3
 8008446:	2190      	movs	r1, #144	; 0x90
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f002 f9d7 	bl	800a7fc <VL53L0X_RdByte>
 800844e:	4603      	mov	r3, r0
 8008450:	461a      	mov	r2, r3
 8008452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008456:	4313      	orrs	r3, r2
 8008458:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800845c:	227b      	movs	r2, #123	; 0x7b
 800845e:	2194      	movs	r1, #148	; 0x94
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f002 f949 	bl	800a6f8 <VL53L0X_WrByte>
 8008466:	4603      	mov	r3, r0
 8008468:	461a      	mov	r2, r3
 800846a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800846e:	4313      	orrs	r3, r2
 8008470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7ff fe37 	bl	80080e8 <VL53L0X_device_read_strobe>
 800847a:	4603      	mov	r3, r0
 800847c:	461a      	mov	r2, r3
 800847e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008482:	4313      	orrs	r3, r2
 8008484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008488:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800848c:	461a      	mov	r2, r3
 800848e:	2190      	movs	r1, #144	; 0x90
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f002 f9b3 	bl	800a7fc <VL53L0X_RdByte>
 8008496:	4603      	mov	r3, r0
 8008498:	461a      	mov	r2, r3
 800849a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800849e:	4313      	orrs	r3, r2
 80084a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80084a4:	2277      	movs	r2, #119	; 0x77
 80084a6:	2194      	movs	r1, #148	; 0x94
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f002 f925 	bl	800a6f8 <VL53L0X_WrByte>
 80084ae:	4603      	mov	r3, r0
 80084b0:	461a      	mov	r2, r3
 80084b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7ff fe13 	bl	80080e8 <VL53L0X_device_read_strobe>
 80084c2:	4603      	mov	r3, r0
 80084c4:	461a      	mov	r2, r3
 80084c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084ca:	4313      	orrs	r3, r2
 80084cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80084d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084d4:	461a      	mov	r2, r3
 80084d6:	2190      	movs	r1, #144	; 0x90
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f002 f9f1 	bl	800a8c0 <VL53L0X_RdDWord>
 80084de:	4603      	mov	r3, r0
 80084e0:	461a      	mov	r2, r3
 80084e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	0e5b      	lsrs	r3, r3, #25
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	0c9b      	lsrs	r3, r3, #18
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008504:	b2db      	uxtb	r3, r3
 8008506:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	0adb      	lsrs	r3, r3, #11
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008512:	b2db      	uxtb	r3, r3
 8008514:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	091b      	lsrs	r3, r3, #4
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008520:	b2db      	uxtb	r3, r3
 8008522:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	b2db      	uxtb	r3, r3
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	b2db      	uxtb	r3, r3
 800852c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008530:	b2db      	uxtb	r3, r3
 8008532:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008536:	2278      	movs	r2, #120	; 0x78
 8008538:	2194      	movs	r1, #148	; 0x94
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f002 f8dc 	bl	800a6f8 <VL53L0X_WrByte>
 8008540:	4603      	mov	r3, r0
 8008542:	461a      	mov	r2, r3
 8008544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008548:	4313      	orrs	r3, r2
 800854a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff fdca 	bl	80080e8 <VL53L0X_device_read_strobe>
 8008554:	4603      	mov	r3, r0
 8008556:	461a      	mov	r2, r3
 8008558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800855c:	4313      	orrs	r3, r2
 800855e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008562:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008566:	461a      	mov	r2, r3
 8008568:	2190      	movs	r1, #144	; 0x90
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f002 f9a8 	bl	800a8c0 <VL53L0X_RdDWord>
 8008570:	4603      	mov	r3, r0
 8008572:	461a      	mov	r2, r3
 8008574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008578:	4313      	orrs	r3, r2
 800857a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	0f5b      	lsrs	r3, r3, #29
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008588:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800858a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800858e:	4413      	add	r3, r2
 8008590:	b2db      	uxtb	r3, r3
 8008592:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	0d9b      	lsrs	r3, r3, #22
 8008598:	b2db      	uxtb	r3, r3
 800859a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	0bdb      	lsrs	r3, r3, #15
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	085b      	lsrs	r3, r3, #1
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	019b      	lsls	r3, r3, #6
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80085de:	2279      	movs	r2, #121	; 0x79
 80085e0:	2194      	movs	r1, #148	; 0x94
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f002 f888 	bl	800a6f8 <VL53L0X_WrByte>
 80085e8:	4603      	mov	r3, r0
 80085ea:	461a      	mov	r2, r3
 80085ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff fd76 	bl	80080e8 <VL53L0X_device_read_strobe>
 80085fc:	4603      	mov	r3, r0
 80085fe:	461a      	mov	r2, r3
 8008600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008604:	4313      	orrs	r3, r2
 8008606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800860a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800860e:	461a      	mov	r2, r3
 8008610:	2190      	movs	r1, #144	; 0x90
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f002 f954 	bl	800a8c0 <VL53L0X_RdDWord>
 8008618:	4603      	mov	r3, r0
 800861a:	461a      	mov	r2, r3
 800861c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008620:	4313      	orrs	r3, r2
 8008622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	0e9b      	lsrs	r3, r3, #26
 800862a:	b2db      	uxtb	r3, r3
 800862c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008630:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008632:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008636:	4413      	add	r3, r2
 8008638:	b2db      	uxtb	r3, r3
 800863a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	0cdb      	lsrs	r3, r3, #19
 8008640:	b2db      	uxtb	r3, r3
 8008642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008646:	b2db      	uxtb	r3, r3
 8008648:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	0b1b      	lsrs	r3, r3, #12
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008654:	b2db      	uxtb	r3, r3
 8008656:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008662:	b2db      	uxtb	r3, r3
 8008664:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	b2db      	uxtb	r3, r3
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	b2db      	uxtb	r3, r3
 800866e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008678:	227a      	movs	r2, #122	; 0x7a
 800867a:	2194      	movs	r1, #148	; 0x94
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f002 f83b 	bl	800a6f8 <VL53L0X_WrByte>
 8008682:	4603      	mov	r3, r0
 8008684:	461a      	mov	r2, r3
 8008686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800868a:	4313      	orrs	r3, r2
 800868c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff fd29 	bl	80080e8 <VL53L0X_device_read_strobe>
 8008696:	4603      	mov	r3, r0
 8008698:	461a      	mov	r2, r3
 800869a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800869e:	4313      	orrs	r3, r2
 80086a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80086a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086a8:	461a      	mov	r2, r3
 80086aa:	2190      	movs	r1, #144	; 0x90
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f002 f907 	bl	800a8c0 <VL53L0X_RdDWord>
 80086b2:	4603      	mov	r3, r0
 80086b4:	461a      	mov	r2, r3
 80086b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	0f9b      	lsrs	r3, r3, #30
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ca:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80086cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086d0:	4413      	add	r3, r2
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	0ddb      	lsrs	r3, r3, #23
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	0a5b      	lsrs	r3, r3, #9
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	089b      	lsrs	r3, r3, #2
 8008706:	b2db      	uxtb	r3, r3
 8008708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800870c:	b2db      	uxtb	r3, r3
 800870e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008712:	2300      	movs	r3, #0
 8008714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	f003 0304 	and.w	r3, r3, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 80f1 	beq.w	8008906 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008724:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008728:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800872c:	2b00      	cmp	r3, #0
 800872e:	f040 80ea 	bne.w	8008906 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008732:	227b      	movs	r2, #123	; 0x7b
 8008734:	2194      	movs	r1, #148	; 0x94
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 ffde 	bl	800a6f8 <VL53L0X_WrByte>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008744:	4313      	orrs	r3, r2
 8008746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7ff fccc 	bl	80080e8 <VL53L0X_device_read_strobe>
 8008750:	4603      	mov	r3, r0
 8008752:	461a      	mov	r2, r3
 8008754:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008758:	4313      	orrs	r3, r2
 800875a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800875e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008762:	461a      	mov	r2, r3
 8008764:	2190      	movs	r1, #144	; 0x90
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f002 f8aa 	bl	800a8c0 <VL53L0X_RdDWord>
 800876c:	4603      	mov	r3, r0
 800876e:	461a      	mov	r2, r3
 8008770:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008774:	4313      	orrs	r3, r2
 8008776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800877a:	227c      	movs	r2, #124	; 0x7c
 800877c:	2194      	movs	r1, #148	; 0x94
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f001 ffba 	bl	800a6f8 <VL53L0X_WrByte>
 8008784:	4603      	mov	r3, r0
 8008786:	461a      	mov	r2, r3
 8008788:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800878c:	4313      	orrs	r3, r2
 800878e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7ff fca8 	bl	80080e8 <VL53L0X_device_read_strobe>
 8008798:	4603      	mov	r3, r0
 800879a:	461a      	mov	r2, r3
 800879c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80087a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087aa:	461a      	mov	r2, r3
 80087ac:	2190      	movs	r1, #144	; 0x90
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f002 f886 	bl	800a8c0 <VL53L0X_RdDWord>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087bc:	4313      	orrs	r3, r2
 80087be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80087c2:	2273      	movs	r2, #115	; 0x73
 80087c4:	2194      	movs	r1, #148	; 0x94
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 ff96 	bl	800a6f8 <VL53L0X_WrByte>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087d4:	4313      	orrs	r3, r2
 80087d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fc84 	bl	80080e8 <VL53L0X_device_read_strobe>
 80087e0:	4603      	mov	r3, r0
 80087e2:	461a      	mov	r2, r3
 80087e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087e8:	4313      	orrs	r3, r2
 80087ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80087ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087f2:	461a      	mov	r2, r3
 80087f4:	2190      	movs	r1, #144	; 0x90
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f002 f862 	bl	800a8c0 <VL53L0X_RdDWord>
 80087fc:	4603      	mov	r3, r0
 80087fe:	461a      	mov	r2, r3
 8008800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008804:	4313      	orrs	r3, r2
 8008806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800880e:	b29b      	uxth	r3, r3
 8008810:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008812:	2274      	movs	r2, #116	; 0x74
 8008814:	2194      	movs	r1, #148	; 0x94
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f001 ff6e 	bl	800a6f8 <VL53L0X_WrByte>
 800881c:	4603      	mov	r3, r0
 800881e:	461a      	mov	r2, r3
 8008820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008824:	4313      	orrs	r3, r2
 8008826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff fc5c 	bl	80080e8 <VL53L0X_device_read_strobe>
 8008830:	4603      	mov	r3, r0
 8008832:	461a      	mov	r2, r3
 8008834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008838:	4313      	orrs	r3, r2
 800883a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800883e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008842:	461a      	mov	r2, r3
 8008844:	2190      	movs	r1, #144	; 0x90
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f002 f83a 	bl	800a8c0 <VL53L0X_RdDWord>
 800884c:	4603      	mov	r3, r0
 800884e:	461a      	mov	r2, r3
 8008850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008854:	4313      	orrs	r3, r2
 8008856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800885e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008860:	4313      	orrs	r3, r2
 8008862:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008864:	2275      	movs	r2, #117	; 0x75
 8008866:	2194      	movs	r1, #148	; 0x94
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f001 ff45 	bl	800a6f8 <VL53L0X_WrByte>
 800886e:	4603      	mov	r3, r0
 8008870:	461a      	mov	r2, r3
 8008872:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008876:	4313      	orrs	r3, r2
 8008878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff fc33 	bl	80080e8 <VL53L0X_device_read_strobe>
 8008882:	4603      	mov	r3, r0
 8008884:	461a      	mov	r2, r3
 8008886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800888a:	4313      	orrs	r3, r2
 800888c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008894:	461a      	mov	r2, r3
 8008896:	2190      	movs	r1, #144	; 0x90
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f002 f811 	bl	800a8c0 <VL53L0X_RdDWord>
 800889e:	4603      	mov	r3, r0
 80088a0:	461a      	mov	r2, r3
 80088a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088a6:	4313      	orrs	r3, r2
 80088a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80088b4:	2276      	movs	r2, #118	; 0x76
 80088b6:	2194      	movs	r1, #148	; 0x94
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 ff1d 	bl	800a6f8 <VL53L0X_WrByte>
 80088be:	4603      	mov	r3, r0
 80088c0:	461a      	mov	r2, r3
 80088c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088c6:	4313      	orrs	r3, r2
 80088c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff fc0b 	bl	80080e8 <VL53L0X_device_read_strobe>
 80088d2:	4603      	mov	r3, r0
 80088d4:	461a      	mov	r2, r3
 80088d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088da:	4313      	orrs	r3, r2
 80088dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80088e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088e4:	461a      	mov	r2, r3
 80088e6:	2190      	movs	r1, #144	; 0x90
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 ffe9 	bl	800a8c0 <VL53L0X_RdDWord>
 80088ee:	4603      	mov	r3, r0
 80088f0:	461a      	mov	r2, r3
 80088f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088f6:	4313      	orrs	r3, r2
 80088f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008900:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008902:	4313      	orrs	r3, r2
 8008904:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008906:	2200      	movs	r2, #0
 8008908:	2181      	movs	r1, #129	; 0x81
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f001 fef4 	bl	800a6f8 <VL53L0X_WrByte>
 8008910:	4603      	mov	r3, r0
 8008912:	461a      	mov	r2, r3
 8008914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008918:	4313      	orrs	r3, r2
 800891a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800891e:	2206      	movs	r2, #6
 8008920:	21ff      	movs	r1, #255	; 0xff
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f001 fee8 	bl	800a6f8 <VL53L0X_WrByte>
 8008928:	4603      	mov	r3, r0
 800892a:	461a      	mov	r2, r3
 800892c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008930:	4313      	orrs	r3, r2
 8008932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008936:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800893a:	461a      	mov	r2, r3
 800893c:	2183      	movs	r1, #131	; 0x83
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 ff5c 	bl	800a7fc <VL53L0X_RdByte>
 8008944:	4603      	mov	r3, r0
 8008946:	461a      	mov	r2, r3
 8008948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800894c:	4313      	orrs	r3, r2
 800894e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008952:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008956:	f023 0304 	bic.w	r3, r3, #4
 800895a:	b2db      	uxtb	r3, r3
 800895c:	461a      	mov	r2, r3
 800895e:	2183      	movs	r1, #131	; 0x83
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 fec9 	bl	800a6f8 <VL53L0X_WrByte>
 8008966:	4603      	mov	r3, r0
 8008968:	461a      	mov	r2, r3
 800896a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800896e:	4313      	orrs	r3, r2
 8008970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008974:	2201      	movs	r2, #1
 8008976:	21ff      	movs	r1, #255	; 0xff
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 febd 	bl	800a6f8 <VL53L0X_WrByte>
 800897e:	4603      	mov	r3, r0
 8008980:	461a      	mov	r2, r3
 8008982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008986:	4313      	orrs	r3, r2
 8008988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800898c:	2201      	movs	r2, #1
 800898e:	2100      	movs	r1, #0
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 feb1 	bl	800a6f8 <VL53L0X_WrByte>
 8008996:	4603      	mov	r3, r0
 8008998:	461a      	mov	r2, r3
 800899a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800899e:	4313      	orrs	r3, r2
 80089a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80089a4:	2200      	movs	r2, #0
 80089a6:	21ff      	movs	r1, #255	; 0xff
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 fea5 	bl	800a6f8 <VL53L0X_WrByte>
 80089ae:	4603      	mov	r3, r0
 80089b0:	461a      	mov	r2, r3
 80089b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b6:	4313      	orrs	r3, r2
 80089b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80089bc:	2200      	movs	r2, #0
 80089be:	2180      	movs	r1, #128	; 0x80
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 fe99 	bl	800a6f8 <VL53L0X_WrByte>
 80089c6:	4603      	mov	r3, r0
 80089c8:	461a      	mov	r2, r3
 80089ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089ce:	4313      	orrs	r3, r2
 80089d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80089d4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f040 808f 	bne.w	8008afc <VL53L0X_get_info_from_device+0x98e>
 80089de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089e2:	2b07      	cmp	r3, #7
 80089e4:	f000 808a 	beq.w	8008afc <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d024      	beq.n	8008a3c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80089f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089f6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d11e      	bne.n	8008a3c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008a04:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008a0e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008a12:	2300      	movs	r3, #0
 8008a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a16:	e00e      	b.n	8008a36 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008a18:	f107 0208 	add.w	r2, r7, #8
 8008a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a1e:	4413      	add	r3, r2
 8008a20:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008a2c:	460a      	mov	r2, r1
 8008a2e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a32:	3301      	adds	r3, #1
 8008a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a38:	2b05      	cmp	r3, #5
 8008a3a:	dded      	ble.n	8008a18 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008a3c:	78fb      	ldrb	r3, [r7, #3]
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d018      	beq.n	8008a78 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008a46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a4a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d112      	bne.n	8008a78 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a52:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a5c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	33f3      	adds	r3, #243	; 0xf3
 8008a6a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008a6c:	f107 0310 	add.w	r3, r7, #16
 8008a70:	4619      	mov	r1, r3
 8008a72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a74:	f001 ffab 	bl	800a9ce <strcpy>

		}

		if (((option & 4) == 4) &&
 8008a78:	78fb      	ldrb	r3, [r7, #3]
 8008a7a:	f003 0304 	and.w	r3, r3, #4
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d030      	beq.n	8008ae4 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008a82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a86:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d12a      	bne.n	8008ae4 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa0:	025b      	lsls	r3, r3, #9
 8008aa2:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aa8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d011      	beq.n	8008adc <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ac6:	fb02 f303 	mul.w	r3, r2, r3
 8008aca:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008acc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008ad0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008ad4:	425b      	negs	r3, r3
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008adc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008ae4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008af2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008afc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3760      	adds	r7, #96	; 0x60
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008b08:	b490      	push	{r4, r7}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008b14:	f240 6377 	movw	r3, #1655	; 0x677
 8008b18:	f04f 0400 	mov.w	r4, #0
 8008b1c:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8008b20:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008b24:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	fb02 f303 	mul.w	r3, r2, r3
 8008b34:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008b36:	68bb      	ldr	r3, [r7, #8]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc90      	pop	{r4, r7}
 8008b40:	4770      	bx	lr

08008b42 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b087      	sub	sp, #28
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008b52:	2300      	movs	r3, #0
 8008b54:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d017      	beq.n	8008b8c <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008b62:	e005      	b.n	8008b70 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	085b      	lsrs	r3, r3, #1
 8008b68:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008b6a:	89fb      	ldrh	r3, [r7, #14]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1f4      	bne.n	8008b64 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008b7a:	89fb      	ldrh	r3, [r7, #14]
 8008b7c:	021b      	lsls	r3, r3, #8
 8008b7e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008b88:	4413      	add	r3, r2
 8008b8a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008b8c:	8afb      	ldrh	r3, [r7, #22]

}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008ba8:	88fb      	ldrh	r3, [r7, #6]
 8008baa:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008bac:	88fa      	ldrh	r2, [r7, #6]
 8008bae:	0a12      	lsrs	r2, r2, #8
 8008bb0:	b292      	uxth	r2, r2
 8008bb2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
	...

08008bc8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f7ff ff92 	bl	8008b08 <VL53L0X_calc_macro_period_ps>
 8008be4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008bec:	4a0a      	ldr	r2, [pc, #40]	; (8008c18 <VL53L0X_calc_timeout_mclks+0x50>)
 8008bee:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf2:	099b      	lsrs	r3, r3, #6
 8008bf4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bfc:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	085b      	lsrs	r3, r3, #1
 8008c04:	441a      	add	r2, r3
	timeout_period_mclks =
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3720      	adds	r7, #32
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	10624dd3 	.word	0x10624dd3

08008c1c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	807b      	strh	r3, [r7, #2]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008c30:	787b      	ldrb	r3, [r7, #1]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff ff67 	bl	8008b08 <VL53L0X_calc_macro_period_ps>
 8008c3a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008c42:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <VL53L0X_calc_timeout_us+0x50>)
 8008c44:	fba2 2303 	umull	r2, r3, r2, r3
 8008c48:	099b      	lsrs	r3, r3, #6
 8008c4a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008c4c:	887b      	ldrh	r3, [r7, #2]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	fb02 f303 	mul.w	r3, r2, r3
 8008c54:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8008c58:	4a04      	ldr	r2, [pc, #16]	; (8008c6c <VL53L0X_calc_timeout_us+0x50>)
 8008c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5e:	099b      	lsrs	r3, r3, #6
 8008c60:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8008c62:	697b      	ldr	r3, [r7, #20]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	10624dd3 	.word	0x10624dd3

08008c70 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08c      	sub	sp, #48	; 0x30
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	607a      	str	r2, [r7, #4]
 8008c7c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008c96:	7afb      	ldrb	r3, [r7, #11]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d005      	beq.n	8008ca8 <get_sequence_step_timeout+0x38>
 8008c9c:	7afb      	ldrb	r3, [r7, #11]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d002      	beq.n	8008ca8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008ca2:	7afb      	ldrb	r3, [r7, #11]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d128      	bne.n	8008cfa <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008ca8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008cac:	461a      	mov	r2, r3
 8008cae:	2100      	movs	r1, #0
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f7fd fa7d 	bl	80061b0 <VL53L0X_GetVcselPulsePeriod>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008cbc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d109      	bne.n	8008cd8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008cc4:	f107 0320 	add.w	r3, r7, #32
 8008cc8:	461a      	mov	r2, r3
 8008cca:	2146      	movs	r1, #70	; 0x46
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f001 fd95 	bl	800a7fc <VL53L0X_RdByte>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8008cd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff ff5b 	bl	8008b9a <VL53L0X_decode_timeout>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008ce8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008cec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008cee:	4619      	mov	r1, r3
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f7ff ff93 	bl	8008c1c <VL53L0X_calc_timeout_us>
 8008cf6:	62b8      	str	r0, [r7, #40]	; 0x28
 8008cf8:	e092      	b.n	8008e20 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
 8008cfc:	2b03      	cmp	r3, #3
 8008cfe:	d135      	bne.n	8008d6c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008d00:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008d04:	461a      	mov	r2, r3
 8008d06:	2100      	movs	r1, #0
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7fd fa51 	bl	80061b0 <VL53L0X_GetVcselPulsePeriod>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008d14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 8081 	bne.w	8008e20 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008d1e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008d22:	461a      	mov	r2, r3
 8008d24:	2100      	movs	r1, #0
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7fd fa42 	bl	80061b0 <VL53L0X_GetVcselPulsePeriod>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008d32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d109      	bne.n	8008d4e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8008d3a:	f107 031e 	add.w	r3, r7, #30
 8008d3e:	461a      	mov	r2, r3
 8008d40:	2151      	movs	r1, #81	; 0x51
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f001 fd84 	bl	800a850 <VL53L0X_RdWord>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008d4e:	8bfb      	ldrh	r3, [r7, #30]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff ff22 	bl	8008b9a <VL53L0X_decode_timeout>
 8008d56:	4603      	mov	r3, r0
 8008d58:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008d5a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008d5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d60:	4619      	mov	r1, r3
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f7ff ff5a 	bl	8008c1c <VL53L0X_calc_timeout_us>
 8008d68:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d6a:	e059      	b.n	8008e20 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d156      	bne.n	8008e20 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008d72:	f107 0314 	add.w	r3, r7, #20
 8008d76:	4619      	mov	r1, r3
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7fd fb25 	bl	80063c8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d01d      	beq.n	8008dc4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008d88:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	2100      	movs	r1, #0
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f7fd fa0d 	bl	80061b0 <VL53L0X_GetVcselPulsePeriod>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8008d9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10f      	bne.n	8008dc4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8008da4:	f107 031e 	add.w	r3, r7, #30
 8008da8:	461a      	mov	r2, r3
 8008daa:	2151      	movs	r1, #81	; 0x51
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f001 fd4f 	bl	800a850 <VL53L0X_RdWord>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008db8:	8bfb      	ldrh	r3, [r7, #30]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff feed 	bl	8008b9a <VL53L0X_decode_timeout>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008dc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d109      	bne.n	8008de0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008dcc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f7fd f9eb 	bl	80061b0 <VL53L0X_GetVcselPulsePeriod>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008de0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10f      	bne.n	8008e08 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8008de8:	f107 031c 	add.w	r3, r7, #28
 8008dec:	461a      	mov	r2, r3
 8008dee:	2171      	movs	r1, #113	; 0x71
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f001 fd2d 	bl	800a850 <VL53L0X_RdWord>
 8008df6:	4603      	mov	r3, r0
 8008df8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008dfc:	8bbb      	ldrh	r3, [r7, #28]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff fecb 	bl	8008b9a <VL53L0X_decode_timeout>
 8008e04:	4603      	mov	r3, r0
 8008e06:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8008e08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008e10:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008e14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e16:	4619      	mov	r1, r3
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff feff 	bl	8008c1c <VL53L0X_calc_timeout_us>
 8008e1e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e24:	601a      	str	r2, [r3, #0]

	return Status;
 8008e26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3730      	adds	r7, #48	; 0x30
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b08a      	sub	sp, #40	; 0x28
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008e46:	7afb      	ldrb	r3, [r7, #11]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <set_sequence_step_timeout+0x26>
 8008e4c:	7afb      	ldrb	r3, [r7, #11]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d002      	beq.n	8008e58 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008e52:	7afb      	ldrb	r3, [r7, #11]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d138      	bne.n	8008eca <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008e58:	f107 031b 	add.w	r3, r7, #27
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	2100      	movs	r1, #0
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f7fd f9a5 	bl	80061b0 <VL53L0X_GetVcselPulsePeriod>
 8008e66:	4603      	mov	r3, r0
 8008e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8008e6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d11a      	bne.n	8008eaa <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008e74:	7efb      	ldrb	r3, [r7, #27]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f7ff fea4 	bl	8008bc8 <VL53L0X_calc_timeout_mclks>
 8008e80:	4603      	mov	r3, r0
 8008e82:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008e84:	8bbb      	ldrh	r3, [r7, #28]
 8008e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e8a:	d903      	bls.n	8008e94 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8008e8c:	23ff      	movs	r3, #255	; 0xff
 8008e8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e92:	e004      	b.n	8008e9e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8008e94:	8bbb      	ldrh	r3, [r7, #28]
 8008e96:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008eaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f040 80ab 	bne.w	800900a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8008eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008eb8:	461a      	mov	r2, r3
 8008eba:	2146      	movs	r1, #70	; 0x46
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f001 fc1b 	bl	800a6f8 <VL53L0X_WrByte>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8008ec8:	e09f      	b.n	800900a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008eca:	7afb      	ldrb	r3, [r7, #11]
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d135      	bne.n	8008f3c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008ed0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11b      	bne.n	8008f10 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008ed8:	f107 031b 	add.w	r3, r7, #27
 8008edc:	461a      	mov	r2, r3
 8008ede:	2100      	movs	r1, #0
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f7fd f965 	bl	80061b0 <VL53L0X_GetVcselPulsePeriod>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008eec:	7efb      	ldrb	r3, [r7, #27]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6879      	ldr	r1, [r7, #4]
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f7ff fe68 	bl	8008bc8 <VL53L0X_calc_timeout_mclks>
 8008ef8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8008efa:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008efc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff fe1f 	bl	8008b42 <VL53L0X_encode_timeout>
 8008f04:	4603      	mov	r3, r0
 8008f06:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f08:	8b3a      	ldrh	r2, [r7, #24]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008f10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d108      	bne.n	8008f2a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008f18:	8b3b      	ldrh	r3, [r7, #24]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	2151      	movs	r1, #81	; 0x51
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f001 fc0e 	bl	800a740 <VL53L0X_WrWord>
 8008f24:	4603      	mov	r3, r0
 8008f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008f2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d16b      	bne.n	800900a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8008f3a:	e066      	b.n	800900a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d160      	bne.n	8009004 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008f42:	f107 0310 	add.w	r3, r7, #16
 8008f46:	4619      	mov	r1, r3
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7fd fa3d 	bl	80063c8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008f52:	7cfb      	ldrb	r3, [r7, #19]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01d      	beq.n	8008f94 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008f58:	f107 031b 	add.w	r3, r7, #27
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	2100      	movs	r1, #0
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7fd f925 	bl	80061b0 <VL53L0X_GetVcselPulsePeriod>
 8008f66:	4603      	mov	r3, r0
 8008f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008f6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10f      	bne.n	8008f94 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008f74:	f107 0318 	add.w	r3, r7, #24
 8008f78:	461a      	mov	r2, r3
 8008f7a:	2151      	movs	r1, #81	; 0x51
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f001 fc67 	bl	800a850 <VL53L0X_RdWord>
 8008f82:	4603      	mov	r3, r0
 8008f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008f88:	8b3b      	ldrh	r3, [r7, #24]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7ff fe05 	bl	8008b9a <VL53L0X_decode_timeout>
 8008f90:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8008f92:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008f94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d109      	bne.n	8008fb0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008f9c:	f107 031b 	add.w	r3, r7, #27
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f7fd f903 	bl	80061b0 <VL53L0X_GetVcselPulsePeriod>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008fb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d128      	bne.n	800900a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008fb8:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8008fba:	461a      	mov	r2, r3
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f7ff fe02 	bl	8008bc8 <VL53L0X_calc_timeout_mclks>
 8008fc4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8008fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fc8:	6a3a      	ldr	r2, [r7, #32]
 8008fca:	4413      	add	r3, r2
 8008fcc:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8008fce:	6a38      	ldr	r0, [r7, #32]
 8008fd0:	f7ff fdb7 	bl	8008b42 <VL53L0X_encode_timeout>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8008fd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d108      	bne.n	8008ff2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008fe0:	8bfb      	ldrh	r3, [r7, #30]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	2171      	movs	r1, #113	; 0x71
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f001 fbaa 	bl	800a740 <VL53L0X_WrWord>
 8008fec:	4603      	mov	r3, r0
 8008fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8008ff2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d107      	bne.n	800900a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009002:	e002      	b.n	800900a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009004:	23fc      	movs	r3, #252	; 0xfc
 8009006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800900a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800900e:	4618      	mov	r0, r3
 8009010:	3728      	adds	r7, #40	; 0x28
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b08a      	sub	sp, #40	; 0x28
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	70fb      	strb	r3, [r7, #3]
 8009022:	4613      	mov	r3, r2
 8009024:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009026:	2300      	movs	r3, #0
 8009028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800902c:	230c      	movs	r3, #12
 800902e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009032:	2312      	movs	r3, #18
 8009034:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009038:	2308      	movs	r3, #8
 800903a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800903e:	230e      	movs	r3, #14
 8009040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009048:	78bb      	ldrb	r3, [r7, #2]
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009054:	23fc      	movs	r3, #252	; 0xfc
 8009056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800905a:	e020      	b.n	800909e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10d      	bne.n	800907e <VL53L0X_set_vcsel_pulse_period+0x68>
 8009062:	78ba      	ldrb	r2, [r7, #2]
 8009064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009068:	429a      	cmp	r2, r3
 800906a:	d304      	bcc.n	8009076 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800906c:	78ba      	ldrb	r2, [r7, #2]
 800906e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009072:	429a      	cmp	r2, r3
 8009074:	d903      	bls.n	800907e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009076:	23fc      	movs	r3, #252	; 0xfc
 8009078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800907c:	e00f      	b.n	800909e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d10c      	bne.n	800909e <VL53L0X_set_vcsel_pulse_period+0x88>
 8009084:	78ba      	ldrb	r2, [r7, #2]
 8009086:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800908a:	429a      	cmp	r2, r3
 800908c:	d304      	bcc.n	8009098 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800908e:	78ba      	ldrb	r2, [r7, #2]
 8009090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009094:	429a      	cmp	r2, r3
 8009096:	d902      	bls.n	800909e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009098:	23fc      	movs	r3, #252	; 0xfc
 800909a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800909e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80090a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090aa:	e239      	b.n	8009520 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d150      	bne.n	8009154 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80090b2:	78bb      	ldrb	r3, [r7, #2]
 80090b4:	2b0c      	cmp	r3, #12
 80090b6:	d110      	bne.n	80090da <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80090b8:	2218      	movs	r2, #24
 80090ba:	2157      	movs	r1, #87	; 0x57
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f001 fb1b 	bl	800a6f8 <VL53L0X_WrByte>
 80090c2:	4603      	mov	r3, r0
 80090c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80090c8:	2208      	movs	r2, #8
 80090ca:	2156      	movs	r1, #86	; 0x56
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 fb13 	bl	800a6f8 <VL53L0X_WrByte>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090d8:	e17f      	b.n	80093da <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80090da:	78bb      	ldrb	r3, [r7, #2]
 80090dc:	2b0e      	cmp	r3, #14
 80090de:	d110      	bne.n	8009102 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80090e0:	2230      	movs	r2, #48	; 0x30
 80090e2:	2157      	movs	r1, #87	; 0x57
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f001 fb07 	bl	800a6f8 <VL53L0X_WrByte>
 80090ea:	4603      	mov	r3, r0
 80090ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80090f0:	2208      	movs	r2, #8
 80090f2:	2156      	movs	r1, #86	; 0x56
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 faff 	bl	800a6f8 <VL53L0X_WrByte>
 80090fa:	4603      	mov	r3, r0
 80090fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009100:	e16b      	b.n	80093da <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009102:	78bb      	ldrb	r3, [r7, #2]
 8009104:	2b10      	cmp	r3, #16
 8009106:	d110      	bne.n	800912a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009108:	2240      	movs	r2, #64	; 0x40
 800910a:	2157      	movs	r1, #87	; 0x57
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 faf3 	bl	800a6f8 <VL53L0X_WrByte>
 8009112:	4603      	mov	r3, r0
 8009114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009118:	2208      	movs	r2, #8
 800911a:	2156      	movs	r1, #86	; 0x56
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 faeb 	bl	800a6f8 <VL53L0X_WrByte>
 8009122:	4603      	mov	r3, r0
 8009124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009128:	e157      	b.n	80093da <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800912a:	78bb      	ldrb	r3, [r7, #2]
 800912c:	2b12      	cmp	r3, #18
 800912e:	f040 8154 	bne.w	80093da <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009132:	2250      	movs	r2, #80	; 0x50
 8009134:	2157      	movs	r1, #87	; 0x57
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fade 	bl	800a6f8 <VL53L0X_WrByte>
 800913c:	4603      	mov	r3, r0
 800913e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009142:	2208      	movs	r2, #8
 8009144:	2156      	movs	r1, #86	; 0x56
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f001 fad6 	bl	800a6f8 <VL53L0X_WrByte>
 800914c:	4603      	mov	r3, r0
 800914e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009152:	e142      	b.n	80093da <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	2b01      	cmp	r3, #1
 8009158:	f040 813f 	bne.w	80093da <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800915c:	78bb      	ldrb	r3, [r7, #2]
 800915e:	2b08      	cmp	r3, #8
 8009160:	d14c      	bne.n	80091fc <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009162:	2210      	movs	r2, #16
 8009164:	2148      	movs	r1, #72	; 0x48
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 fac6 	bl	800a6f8 <VL53L0X_WrByte>
 800916c:	4603      	mov	r3, r0
 800916e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009172:	2208      	movs	r2, #8
 8009174:	2147      	movs	r1, #71	; 0x47
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f001 fabe 	bl	800a6f8 <VL53L0X_WrByte>
 800917c:	4603      	mov	r3, r0
 800917e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009182:	2202      	movs	r2, #2
 8009184:	2132      	movs	r1, #50	; 0x32
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f001 fab6 	bl	800a6f8 <VL53L0X_WrByte>
 800918c:	4603      	mov	r3, r0
 800918e:	461a      	mov	r2, r3
 8009190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009194:	4313      	orrs	r3, r2
 8009196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800919a:	220c      	movs	r2, #12
 800919c:	2130      	movs	r1, #48	; 0x30
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f001 faaa 	bl	800a6f8 <VL53L0X_WrByte>
 80091a4:	4603      	mov	r3, r0
 80091a6:	461a      	mov	r2, r3
 80091a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091ac:	4313      	orrs	r3, r2
 80091ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80091b2:	2201      	movs	r2, #1
 80091b4:	21ff      	movs	r1, #255	; 0xff
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 fa9e 	bl	800a6f8 <VL53L0X_WrByte>
 80091bc:	4603      	mov	r3, r0
 80091be:	461a      	mov	r2, r3
 80091c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091c4:	4313      	orrs	r3, r2
 80091c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80091ca:	2230      	movs	r2, #48	; 0x30
 80091cc:	2130      	movs	r1, #48	; 0x30
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 fa92 	bl	800a6f8 <VL53L0X_WrByte>
 80091d4:	4603      	mov	r3, r0
 80091d6:	461a      	mov	r2, r3
 80091d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091dc:	4313      	orrs	r3, r2
 80091de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80091e2:	2200      	movs	r2, #0
 80091e4:	21ff      	movs	r1, #255	; 0xff
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f001 fa86 	bl	800a6f8 <VL53L0X_WrByte>
 80091ec:	4603      	mov	r3, r0
 80091ee:	461a      	mov	r2, r3
 80091f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091f4:	4313      	orrs	r3, r2
 80091f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80091fa:	e0ee      	b.n	80093da <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80091fc:	78bb      	ldrb	r3, [r7, #2]
 80091fe:	2b0a      	cmp	r3, #10
 8009200:	d14c      	bne.n	800929c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009202:	2228      	movs	r2, #40	; 0x28
 8009204:	2148      	movs	r1, #72	; 0x48
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 fa76 	bl	800a6f8 <VL53L0X_WrByte>
 800920c:	4603      	mov	r3, r0
 800920e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009212:	2208      	movs	r2, #8
 8009214:	2147      	movs	r1, #71	; 0x47
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f001 fa6e 	bl	800a6f8 <VL53L0X_WrByte>
 800921c:	4603      	mov	r3, r0
 800921e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009222:	2203      	movs	r2, #3
 8009224:	2132      	movs	r1, #50	; 0x32
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 fa66 	bl	800a6f8 <VL53L0X_WrByte>
 800922c:	4603      	mov	r3, r0
 800922e:	461a      	mov	r2, r3
 8009230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009234:	4313      	orrs	r3, r2
 8009236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800923a:	2209      	movs	r2, #9
 800923c:	2130      	movs	r1, #48	; 0x30
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 fa5a 	bl	800a6f8 <VL53L0X_WrByte>
 8009244:	4603      	mov	r3, r0
 8009246:	461a      	mov	r2, r3
 8009248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800924c:	4313      	orrs	r3, r2
 800924e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009252:	2201      	movs	r2, #1
 8009254:	21ff      	movs	r1, #255	; 0xff
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f001 fa4e 	bl	800a6f8 <VL53L0X_WrByte>
 800925c:	4603      	mov	r3, r0
 800925e:	461a      	mov	r2, r3
 8009260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009264:	4313      	orrs	r3, r2
 8009266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800926a:	2220      	movs	r2, #32
 800926c:	2130      	movs	r1, #48	; 0x30
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 fa42 	bl	800a6f8 <VL53L0X_WrByte>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800927c:	4313      	orrs	r3, r2
 800927e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009282:	2200      	movs	r2, #0
 8009284:	21ff      	movs	r1, #255	; 0xff
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 fa36 	bl	800a6f8 <VL53L0X_WrByte>
 800928c:	4603      	mov	r3, r0
 800928e:	461a      	mov	r2, r3
 8009290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009294:	4313      	orrs	r3, r2
 8009296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800929a:	e09e      	b.n	80093da <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800929c:	78bb      	ldrb	r3, [r7, #2]
 800929e:	2b0c      	cmp	r3, #12
 80092a0:	d14c      	bne.n	800933c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80092a2:	2238      	movs	r2, #56	; 0x38
 80092a4:	2148      	movs	r1, #72	; 0x48
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f001 fa26 	bl	800a6f8 <VL53L0X_WrByte>
 80092ac:	4603      	mov	r3, r0
 80092ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80092b2:	2208      	movs	r2, #8
 80092b4:	2147      	movs	r1, #71	; 0x47
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 fa1e 	bl	800a6f8 <VL53L0X_WrByte>
 80092bc:	4603      	mov	r3, r0
 80092be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80092c2:	2203      	movs	r2, #3
 80092c4:	2132      	movs	r1, #50	; 0x32
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 fa16 	bl	800a6f8 <VL53L0X_WrByte>
 80092cc:	4603      	mov	r3, r0
 80092ce:	461a      	mov	r2, r3
 80092d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092d4:	4313      	orrs	r3, r2
 80092d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80092da:	2208      	movs	r2, #8
 80092dc:	2130      	movs	r1, #48	; 0x30
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 fa0a 	bl	800a6f8 <VL53L0X_WrByte>
 80092e4:	4603      	mov	r3, r0
 80092e6:	461a      	mov	r2, r3
 80092e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092ec:	4313      	orrs	r3, r2
 80092ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80092f2:	2201      	movs	r2, #1
 80092f4:	21ff      	movs	r1, #255	; 0xff
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 f9fe 	bl	800a6f8 <VL53L0X_WrByte>
 80092fc:	4603      	mov	r3, r0
 80092fe:	461a      	mov	r2, r3
 8009300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009304:	4313      	orrs	r3, r2
 8009306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800930a:	2220      	movs	r2, #32
 800930c:	2130      	movs	r1, #48	; 0x30
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 f9f2 	bl	800a6f8 <VL53L0X_WrByte>
 8009314:	4603      	mov	r3, r0
 8009316:	461a      	mov	r2, r3
 8009318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800931c:	4313      	orrs	r3, r2
 800931e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009322:	2200      	movs	r2, #0
 8009324:	21ff      	movs	r1, #255	; 0xff
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f001 f9e6 	bl	800a6f8 <VL53L0X_WrByte>
 800932c:	4603      	mov	r3, r0
 800932e:	461a      	mov	r2, r3
 8009330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009334:	4313      	orrs	r3, r2
 8009336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800933a:	e04e      	b.n	80093da <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800933c:	78bb      	ldrb	r3, [r7, #2]
 800933e:	2b0e      	cmp	r3, #14
 8009340:	d14b      	bne.n	80093da <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009342:	2248      	movs	r2, #72	; 0x48
 8009344:	2148      	movs	r1, #72	; 0x48
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 f9d6 	bl	800a6f8 <VL53L0X_WrByte>
 800934c:	4603      	mov	r3, r0
 800934e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009352:	2208      	movs	r2, #8
 8009354:	2147      	movs	r1, #71	; 0x47
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f001 f9ce 	bl	800a6f8 <VL53L0X_WrByte>
 800935c:	4603      	mov	r3, r0
 800935e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009362:	2203      	movs	r2, #3
 8009364:	2132      	movs	r1, #50	; 0x32
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 f9c6 	bl	800a6f8 <VL53L0X_WrByte>
 800936c:	4603      	mov	r3, r0
 800936e:	461a      	mov	r2, r3
 8009370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009374:	4313      	orrs	r3, r2
 8009376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800937a:	2207      	movs	r2, #7
 800937c:	2130      	movs	r1, #48	; 0x30
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 f9ba 	bl	800a6f8 <VL53L0X_WrByte>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800938c:	4313      	orrs	r3, r2
 800938e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009392:	2201      	movs	r2, #1
 8009394:	21ff      	movs	r1, #255	; 0xff
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f001 f9ae 	bl	800a6f8 <VL53L0X_WrByte>
 800939c:	4603      	mov	r3, r0
 800939e:	461a      	mov	r2, r3
 80093a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093a4:	4313      	orrs	r3, r2
 80093a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80093aa:	2220      	movs	r2, #32
 80093ac:	2130      	movs	r1, #48	; 0x30
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f001 f9a2 	bl	800a6f8 <VL53L0X_WrByte>
 80093b4:	4603      	mov	r3, r0
 80093b6:	461a      	mov	r2, r3
 80093b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093bc:	4313      	orrs	r3, r2
 80093be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80093c2:	2200      	movs	r2, #0
 80093c4:	21ff      	movs	r1, #255	; 0xff
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f001 f996 	bl	800a6f8 <VL53L0X_WrByte>
 80093cc:	4603      	mov	r3, r0
 80093ce:	461a      	mov	r2, r3
 80093d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093d4:	4313      	orrs	r3, r2
 80093d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80093da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d17f      	bne.n	80094e2 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80093e2:	78bb      	ldrb	r3, [r7, #2]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fe fe38 	bl	800805a <VL53L0X_encode_vcsel_period>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d002      	beq.n	80093fc <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d045      	beq.n	8009486 <VL53L0X_set_vcsel_pulse_period+0x470>
 80093fa:	e06e      	b.n	80094da <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80093fc:	f107 0314 	add.w	r3, r7, #20
 8009400:	461a      	mov	r2, r3
 8009402:	2103      	movs	r1, #3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7ff fc33 	bl	8008c70 <get_sequence_step_timeout>
 800940a:	4603      	mov	r3, r0
 800940c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009410:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009414:	2b00      	cmp	r3, #0
 8009416:	d109      	bne.n	800942c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8009418:	f107 0310 	add.w	r3, r7, #16
 800941c:	461a      	mov	r2, r3
 800941e:	2102      	movs	r1, #2
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7ff fc25 	bl	8008c70 <get_sequence_step_timeout>
 8009426:	4603      	mov	r3, r0
 8009428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800942c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009430:	2b00      	cmp	r3, #0
 8009432:	d109      	bne.n	8009448 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009434:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009438:	461a      	mov	r2, r3
 800943a:	2150      	movs	r1, #80	; 0x50
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f001 f95b 	bl	800a6f8 <VL53L0X_WrByte>
 8009442:	4603      	mov	r3, r0
 8009444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009448:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800944c:	2b00      	cmp	r3, #0
 800944e:	d108      	bne.n	8009462 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	461a      	mov	r2, r3
 8009454:	2103      	movs	r1, #3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff fceb 	bl	8008e32 <set_sequence_step_timeout>
 800945c:	4603      	mov	r3, r0
 800945e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009462:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009466:	2b00      	cmp	r3, #0
 8009468:	d108      	bne.n	800947c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	461a      	mov	r2, r3
 800946e:	2102      	movs	r1, #2
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff fcde 	bl	8008e32 <set_sequence_step_timeout>
 8009476:	4603      	mov	r3, r0
 8009478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	78ba      	ldrb	r2, [r7, #2]
 8009480:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009484:	e02e      	b.n	80094e4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009486:	f107 0318 	add.w	r3, r7, #24
 800948a:	461a      	mov	r2, r3
 800948c:	2104      	movs	r1, #4
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7ff fbee 	bl	8008c70 <get_sequence_step_timeout>
 8009494:	4603      	mov	r3, r0
 8009496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800949a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d109      	bne.n	80094b6 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80094a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80094a6:	461a      	mov	r2, r3
 80094a8:	2170      	movs	r1, #112	; 0x70
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f001 f924 	bl	800a6f8 <VL53L0X_WrByte>
 80094b0:	4603      	mov	r3, r0
 80094b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80094b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d108      	bne.n	80094d0 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	461a      	mov	r2, r3
 80094c2:	2104      	movs	r1, #4
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7ff fcb4 	bl	8008e32 <set_sequence_step_timeout>
 80094ca:	4603      	mov	r3, r0
 80094cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	78ba      	ldrb	r2, [r7, #2]
 80094d4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80094d8:	e004      	b.n	80094e4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80094da:	23fc      	movs	r3, #252	; 0xfc
 80094dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094e0:	e000      	b.n	80094e4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80094e2:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80094e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d109      	bne.n	8009500 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80094f2:	69f9      	ldr	r1, [r7, #28]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7fc fe1d 	bl	8006134 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80094fa:	4603      	mov	r3, r0
 80094fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8009500:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009504:	2b00      	cmp	r3, #0
 8009506:	d109      	bne.n	800951c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8009508:	f107 010f 	add.w	r1, r7, #15
 800950c:	2301      	movs	r3, #1
 800950e:	2200      	movs	r2, #0
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7fe fcbd 	bl	8007e90 <VL53L0X_perform_phase_calibration>
 8009516:	4603      	mov	r3, r0
 8009518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800951c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009520:	4618      	mov	r0, r3
 8009522:	3728      	adds	r7, #40	; 0x28
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	460b      	mov	r3, r1
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009536:	2300      	movs	r3, #0
 8009538:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800953a:	7afb      	ldrb	r3, [r7, #11]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009540:	2b01      	cmp	r3, #1
 8009542:	d00a      	beq.n	800955a <VL53L0X_get_vcsel_pulse_period+0x32>
 8009544:	e013      	b.n	800956e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009546:	f107 0316 	add.w	r3, r7, #22
 800954a:	461a      	mov	r2, r3
 800954c:	2150      	movs	r1, #80	; 0x50
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f001 f954 	bl	800a7fc <VL53L0X_RdByte>
 8009554:	4603      	mov	r3, r0
 8009556:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009558:	e00b      	b.n	8009572 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800955a:	f107 0316 	add.w	r3, r7, #22
 800955e:	461a      	mov	r2, r3
 8009560:	2170      	movs	r1, #112	; 0x70
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f001 f94a 	bl	800a7fc <VL53L0X_RdByte>
 8009568:	4603      	mov	r3, r0
 800956a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800956c:	e001      	b.n	8009572 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800956e:	23fc      	movs	r3, #252	; 0xfc
 8009570:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009572:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d107      	bne.n	800958a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800957a:	7dbb      	ldrb	r3, [r7, #22]
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe fd59 	bl	8008034 <VL53L0X_decode_vcsel_period>
 8009582:	4603      	mov	r3, r0
 8009584:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	701a      	strb	r2, [r3, #0]

	return Status;
 800958a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b092      	sub	sp, #72	; 0x48
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80095a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80095aa:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80095ac:	f240 7376 	movw	r3, #1910	; 0x776
 80095b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80095b2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80095b6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80095b8:	f44f 7325 	mov.w	r3, #660	; 0x294
 80095bc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80095be:	f240 234e 	movw	r3, #590	; 0x24e
 80095c2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80095c4:	f240 23b2 	movw	r3, #690	; 0x2b2
 80095c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80095ca:	f44f 7325 	mov.w	r3, #660	; 0x294
 80095ce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80095d0:	f240 2326 	movw	r3, #550	; 0x226
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80095da:	f644 6320 	movw	r3, #20000	; 0x4e20
 80095de:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	6a3b      	ldr	r3, [r7, #32]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d205      	bcs.n	80095f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80095ec:	23fc      	movs	r3, #252	; 0xfc
 80095ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80095f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80095f6:	e0aa      	b.n	800974e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80095f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009604:	f107 0314 	add.w	r3, r7, #20
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7fc fedc 	bl	80063c8 <VL53L0X_GetSequenceStepEnables>
 8009610:	4603      	mov	r3, r0
 8009612:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009616:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800961a:	2b00      	cmp	r3, #0
 800961c:	d15b      	bne.n	80096d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800961e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009620:	2b00      	cmp	r3, #0
 8009622:	d105      	bne.n	8009630 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009624:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8009626:	2b00      	cmp	r3, #0
 8009628:	d102      	bne.n	8009630 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800962a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800962c:	2b00      	cmp	r3, #0
 800962e:	d052      	beq.n	80096d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009630:	f107 0310 	add.w	r3, r7, #16
 8009634:	461a      	mov	r2, r3
 8009636:	2102      	movs	r1, #2
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff fb19 	bl	8008c70 <get_sequence_step_timeout>
 800963e:	4603      	mov	r3, r0
 8009640:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009644:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800964c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009650:	e07d      	b.n	800974e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009652:	7d3b      	ldrb	r3, [r7, #20]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00f      	beq.n	8009678 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009658:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800965a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800965c:	4413      	add	r3, r2
 800965e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009660:	69fa      	ldr	r2, [r7, #28]
 8009662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009664:	429a      	cmp	r2, r3
 8009666:	d204      	bcs.n	8009672 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	643b      	str	r3, [r7, #64]	; 0x40
 8009670:	e002      	b.n	8009678 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009672:	23fc      	movs	r3, #252	; 0xfc
 8009674:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009678:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009680:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009684:	e063      	b.n	800974e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009686:	7dbb      	ldrb	r3, [r7, #22]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d011      	beq.n	80096b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009690:	4413      	add	r3, r2
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009696:	69fa      	ldr	r2, [r7, #28]
 8009698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800969a:	429a      	cmp	r2, r3
 800969c:	d204      	bcs.n	80096a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800969e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	643b      	str	r3, [r7, #64]	; 0x40
 80096a6:	e016      	b.n	80096d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096a8:	23fc      	movs	r3, #252	; 0xfc
 80096aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80096ae:	e012      	b.n	80096d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80096b0:	7d7b      	ldrb	r3, [r7, #21]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00f      	beq.n	80096d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096ba:	4413      	add	r3, r2
 80096bc:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80096be:	69fa      	ldr	r2, [r7, #28]
 80096c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d204      	bcs.n	80096d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80096c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	643b      	str	r3, [r7, #64]	; 0x40
 80096ce:	e002      	b.n	80096d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096d0:	23fc      	movs	r3, #252	; 0xfc
 80096d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80096d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80096de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80096e2:	e034      	b.n	800974e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d019      	beq.n	800971e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80096ea:	f107 030c 	add.w	r3, r7, #12
 80096ee:	461a      	mov	r2, r3
 80096f0:	2103      	movs	r1, #3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff fabc 	bl	8008c70 <get_sequence_step_timeout>
 80096f8:	4603      	mov	r3, r0
 80096fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009702:	4413      	add	r3, r2
 8009704:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009706:	69fa      	ldr	r2, [r7, #28]
 8009708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800970a:	429a      	cmp	r2, r3
 800970c:	d204      	bcs.n	8009718 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800970e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	643b      	str	r3, [r7, #64]	; 0x40
 8009716:	e002      	b.n	800971e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009718:	23fc      	movs	r3, #252	; 0xfc
 800971a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800971e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009722:	2b00      	cmp	r3, #0
 8009724:	d111      	bne.n	800974a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009726:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00e      	beq.n	800974a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800972c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8009734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009736:	2104      	movs	r1, #4
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff fb7a 	bl	8008e32 <set_sequence_step_timeout>
 800973e:	4603      	mov	r3, r0
 8009740:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800974a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800974e:	4618      	mov	r0, r3
 8009750:	3748      	adds	r7, #72	; 0x48
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b090      	sub	sp, #64	; 0x40
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009760:	2300      	movs	r3, #0
 8009762:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009766:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800976a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800976c:	f240 7376 	movw	r3, #1910	; 0x776
 8009770:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009772:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009776:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009778:	f44f 7325 	mov.w	r3, #660	; 0x294
 800977c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800977e:	f240 234e 	movw	r3, #590	; 0x24e
 8009782:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009784:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800978a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800978e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009790:	f240 2326 	movw	r3, #550	; 0x226
 8009794:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800979a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800979c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979e:	441a      	add	r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80097a4:	f107 0318 	add.w	r3, r7, #24
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7fc fe0c 	bl	80063c8 <VL53L0X_GetSequenceStepEnables>
 80097b0:	4603      	mov	r3, r0
 80097b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80097b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80097be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097c2:	e075      	b.n	80098b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80097c4:	7e3b      	ldrb	r3, [r7, #24]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d105      	bne.n	80097d6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80097ca:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80097d0:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d030      	beq.n	8009838 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80097d6:	f107 0310 	add.w	r3, r7, #16
 80097da:	461a      	mov	r2, r3
 80097dc:	2102      	movs	r1, #2
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7ff fa46 	bl	8008c70 <get_sequence_step_timeout>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80097ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d122      	bne.n	8009838 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80097f2:	7e3b      	ldrb	r3, [r7, #24]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d007      	beq.n	8009808 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80097fc:	6939      	ldr	r1, [r7, #16]
 80097fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009800:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009802:	441a      	add	r2, r3
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009808:	7ebb      	ldrb	r3, [r7, #26]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009812:	6939      	ldr	r1, [r7, #16]
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	440b      	add	r3, r1
 8009818:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800981a:	441a      	add	r2, r3
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	e00a      	b.n	8009838 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009822:	7e7b      	ldrb	r3, [r7, #25]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d007      	beq.n	8009838 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800982c:	6939      	ldr	r1, [r7, #16]
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009832:	441a      	add	r2, r3
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009838:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800983c:	2b00      	cmp	r3, #0
 800983e:	d114      	bne.n	800986a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009840:	7efb      	ldrb	r3, [r7, #27]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d011      	beq.n	800986a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009846:	f107 030c 	add.w	r3, r7, #12
 800984a:	461a      	mov	r2, r3
 800984c:	2103      	movs	r1, #3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff fa0e 	bl	8008c70 <get_sequence_step_timeout>
 8009854:	4603      	mov	r3, r0
 8009856:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800985e:	68f9      	ldr	r1, [r7, #12]
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009864:	441a      	add	r2, r3
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800986a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800986e:	2b00      	cmp	r3, #0
 8009870:	d114      	bne.n	800989c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009872:	7f3b      	ldrb	r3, [r7, #28]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d011      	beq.n	800989c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009878:	f107 0314 	add.w	r3, r7, #20
 800987c:	461a      	mov	r2, r3
 800987e:	2104      	movs	r1, #4
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff f9f5 	bl	8008c70 <get_sequence_step_timeout>
 8009886:	4603      	mov	r3, r0
 8009888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009890:	6979      	ldr	r1, [r7, #20]
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009896:	441a      	add	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800989c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d103      	bne.n	80098ac <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3740      	adds	r7, #64	; 0x40
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098c2:	2300      	movs	r3, #0
 80098c4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80098ca:	e0c6      	b.n	8009a5a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4413      	add	r3, r2
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	74fb      	strb	r3, [r7, #19]
		Index++;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	3301      	adds	r3, #1
 80098da:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80098dc:	7cfb      	ldrb	r3, [r7, #19]
 80098de:	2bff      	cmp	r3, #255	; 0xff
 80098e0:	f040 808d 	bne.w	80099fe <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	4413      	add	r3, r2
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	747b      	strb	r3, [r7, #17]
			Index++;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	3301      	adds	r3, #1
 80098f2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80098f4:	7c7b      	ldrb	r3, [r7, #17]
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d87e      	bhi.n	80099f8 <VL53L0X_load_tuning_settings+0x140>
 80098fa:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <VL53L0X_load_tuning_settings+0x48>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	08009911 	.word	0x08009911
 8009904:	0800994b 	.word	0x0800994b
 8009908:	08009985 	.word	0x08009985
 800990c:	080099bf 	.word	0x080099bf
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	4413      	add	r3, r2
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	743b      	strb	r3, [r7, #16]
				Index++;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	3301      	adds	r3, #1
 800991e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	4413      	add	r3, r2
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	73fb      	strb	r3, [r7, #15]
				Index++;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	3301      	adds	r3, #1
 800992e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009930:	7c3b      	ldrb	r3, [r7, #16]
 8009932:	b29b      	uxth	r3, r3
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	b29a      	uxth	r2, r3
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	b29b      	uxth	r3, r3
 800993c:	4413      	add	r3, r2
 800993e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	89ba      	ldrh	r2, [r7, #12]
 8009944:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009948:	e087      	b.n	8009a5a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	4413      	add	r3, r2
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	743b      	strb	r3, [r7, #16]
				Index++;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	3301      	adds	r3, #1
 8009958:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	4413      	add	r3, r2
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	3301      	adds	r3, #1
 8009968:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800996a:	7c3b      	ldrb	r3, [r7, #16]
 800996c:	b29b      	uxth	r3, r3
 800996e:	021b      	lsls	r3, r3, #8
 8009970:	b29a      	uxth	r2, r3
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	b29b      	uxth	r3, r3
 8009976:	4413      	add	r3, r2
 8009978:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	89ba      	ldrh	r2, [r7, #12]
 800997e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009982:	e06a      	b.n	8009a5a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	4413      	add	r3, r2
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	743b      	strb	r3, [r7, #16]
				Index++;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	3301      	adds	r3, #1
 8009992:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	4413      	add	r3, r2
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	3301      	adds	r3, #1
 80099a2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80099a4:	7c3b      	ldrb	r3, [r7, #16]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	021b      	lsls	r3, r3, #8
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	4413      	add	r3, r2
 80099b2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	89ba      	ldrh	r2, [r7, #12]
 80099b8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80099bc:	e04d      	b.n	8009a5a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	4413      	add	r3, r2
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	743b      	strb	r3, [r7, #16]
				Index++;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	3301      	adds	r3, #1
 80099cc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	683a      	ldr	r2, [r7, #0]
 80099d2:	4413      	add	r3, r2
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	73fb      	strb	r3, [r7, #15]
				Index++;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	3301      	adds	r3, #1
 80099dc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80099de:	7c3b      	ldrb	r3, [r7, #16]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	021b      	lsls	r3, r3, #8
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	4413      	add	r3, r2
 80099ec:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	89ba      	ldrh	r2, [r7, #12]
 80099f2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80099f6:	e030      	b.n	8009a5a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099f8:	23fc      	movs	r3, #252	; 0xfc
 80099fa:	77fb      	strb	r3, [r7, #31]
 80099fc:	e02d      	b.n	8009a5a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80099fe:	7cfb      	ldrb	r3, [r7, #19]
 8009a00:	2b04      	cmp	r3, #4
 8009a02:	d828      	bhi.n	8009a56 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	4413      	add	r3, r2
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	3301      	adds	r3, #1
 8009a12:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009a14:	2300      	movs	r3, #0
 8009a16:	61bb      	str	r3, [r7, #24]
 8009a18:	e00f      	b.n	8009a3a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	4413      	add	r3, r2
 8009a20:	7819      	ldrb	r1, [r3, #0]
 8009a22:	f107 0208 	add.w	r2, r7, #8
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	4413      	add	r3, r2
 8009a2a:	460a      	mov	r2, r1
 8009a2c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	3301      	adds	r3, #1
 8009a32:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	3301      	adds	r3, #1
 8009a38:	61bb      	str	r3, [r7, #24]
 8009a3a:	7cfb      	ldrb	r3, [r7, #19]
 8009a3c:	69ba      	ldr	r2, [r7, #24]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	dbeb      	blt.n	8009a1a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009a42:	7cfb      	ldrb	r3, [r7, #19]
 8009a44:	f107 0208 	add.w	r2, r7, #8
 8009a48:	7cb9      	ldrb	r1, [r7, #18]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fdf8 	bl	800a640 <VL53L0X_WriteMulti>
 8009a50:	4603      	mov	r3, r0
 8009a52:	77fb      	strb	r3, [r7, #31]
 8009a54:	e001      	b.n	8009a5a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a56:	23fc      	movs	r3, #252	; 0xfc
 8009a58:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	4413      	add	r3, r2
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d004      	beq.n	8009a70 <VL53L0X_load_tuning_settings+0x1b8>
 8009a66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f43f af2e 	beq.w	80098cc <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a70:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3720      	adds	r7, #32
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b088      	sub	sp, #32
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009a92:	f107 0313 	add.w	r3, r7, #19
 8009a96:	4619      	mov	r1, r3
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f7fc fd21 	bl	80064e0 <VL53L0X_GetXTalkCompensationEnable>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009aa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d111      	bne.n	8009ace <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8009aaa:	7cfb      	ldrb	r3, [r7, #19]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00e      	beq.n	8009ace <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6a1b      	ldr	r3, [r3, #32]
 8009ab4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	8a9b      	ldrh	r3, [r3, #20]
 8009aba:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	fb02 f303 	mul.w	r3, r2, r3
 8009ac2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	3380      	adds	r3, #128	; 0x80
 8009ac8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8009ace:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3720      	adds	r7, #32
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b086      	sub	sp, #24
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	60b9      	str	r1, [r7, #8]
 8009ae4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009af2:	f107 0310 	add.w	r3, r7, #16
 8009af6:	461a      	mov	r2, r3
 8009af8:	68b9      	ldr	r1, [r7, #8]
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f7ff ffbe 	bl	8009a7c <VL53L0X_get_total_xtalk_rate>
 8009b00:	4603      	mov	r3, r0
 8009b02:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d105      	bne.n	8009b18 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	441a      	add	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	601a      	str	r2, [r3, #0]

	return Status;
 8009b18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b09a      	sub	sp, #104	; 0x68
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
 8009b30:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009b32:	2312      	movs	r3, #18
 8009b34:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8009b36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b3a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009b3c:	2342      	movs	r3, #66	; 0x42
 8009b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009b40:	2306      	movs	r3, #6
 8009b42:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009b44:	2307      	movs	r3, #7
 8009b46:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8009b54:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009b5c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8009b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b62:	fb02 f303 	mul.w	r3, r2, r3
 8009b66:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6a:	3380      	adds	r3, #128	; 0x80
 8009b6c:	0a1b      	lsrs	r3, r3, #8
 8009b6e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b74:	fb02 f303 	mul.w	r3, r2, r3
 8009b78:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d01b      	beq.n	8009bbc <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	029b      	lsls	r3, r3, #10
 8009b88:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8009b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b90:	4413      	add	r3, r2
 8009b92:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8009b94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b9c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8009b9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	4413      	add	r3, r2
 8009ba6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8009ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009baa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009bac:	fb02 f303 	mul.w	r3, r2, r3
 8009bb0:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8009bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bb4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009bb8:	0c1b      	lsrs	r3, r3, #16
 8009bba:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009bc0:	fb02 f303 	mul.w	r3, r2, r3
 8009bc4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009bcc:	0c1b      	lsrs	r3, r3, #16
 8009bce:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bd4:	fb02 f303 	mul.w	r3, r2, r3
 8009bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8009bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bdc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009be0:	0c1b      	lsrs	r3, r3, #16
 8009be2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009be6:	085a      	lsrs	r2, r3, #1
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	441a      	add	r2, r3
 8009bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bf8:	fb02 f303 	mul.w	r3, r2, r3
 8009bfc:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8009bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c04:	d302      	bcc.n	8009c0c <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8009c06:	4b55      	ldr	r3, [pc, #340]	; (8009d5c <VL53L0X_calc_dmax+0x238>)
 8009c08:	663b      	str	r3, [r7, #96]	; 0x60
 8009c0a:	e016      	b.n	8009c3a <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8009c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c0e:	085a      	lsrs	r2, r3, #1
 8009c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c12:	441a      	add	r2, r3
 8009c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c1a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8009c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c20:	fb02 f303 	mul.w	r3, r2, r3
 8009c24:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8009c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c28:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009c2c:	0c1b      	lsrs	r3, r3, #16
 8009c2e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8009c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c34:	fb02 f303 	mul.w	r3, r2, r3
 8009c38:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c3c:	039b      	lsls	r3, r3, #14
 8009c3e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009c42:	4a47      	ldr	r2, [pc, #284]	; (8009d60 <VL53L0X_calc_dmax+0x23c>)
 8009c44:	fba2 2303 	umull	r2, r3, r2, r3
 8009c48:	099b      	lsrs	r3, r3, #6
 8009c4a:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c50:	fb02 f303 	mul.w	r3, r2, r3
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8009c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c5a:	fb02 f303 	mul.w	r3, r2, r3
 8009c5e:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	3308      	adds	r3, #8
 8009c64:	091b      	lsrs	r3, r3, #4
 8009c66:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8009c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8009c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c72:	4613      	mov	r3, r2
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	4413      	add	r3, r2
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009c82:	0b9b      	lsrs	r3, r3, #14
 8009c84:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8009c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c8a:	4413      	add	r3, r2
 8009c8c:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8009c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c90:	085b      	lsrs	r3, r3, #1
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	4413      	add	r3, r2
 8009c96:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8009c98:	69ba      	ldr	r2, [r7, #24]
 8009c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca0:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	039b      	lsls	r3, r3, #14
 8009ca6:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	085b      	lsrs	r3, r3, #1
 8009cac:	69ba      	ldr	r2, [r7, #24]
 8009cae:	4413      	add	r3, r2
 8009cb0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8009cb2:	69ba      	ldr	r2, [r7, #24]
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cba:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009cc0:	fb02 f303 	mul.w	r3, r2, r3
 8009cc4:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ccc:	4a24      	ldr	r2, [pc, #144]	; (8009d60 <VL53L0X_calc_dmax+0x23c>)
 8009cce:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd2:	099b      	lsrs	r3, r3, #6
 8009cd4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ce2:	4a1f      	ldr	r2, [pc, #124]	; (8009d60 <VL53L0X_calc_dmax+0x23c>)
 8009ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce8:	099b      	lsrs	r3, r3, #6
 8009cea:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8009cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cee:	3380      	adds	r3, #128	; 0x80
 8009cf0:	0a1b      	lsrs	r3, r3, #8
 8009cf2:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d008      	beq.n	8009d0c <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	085a      	lsrs	r2, r3, #1
 8009cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d00:	441a      	add	r2, r3
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d08:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d0a:	e001      	b.n	8009d10 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8009d10:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009d12:	f7fe f9b5 	bl	8008080 <VL53L0X_isqrt>
 8009d16:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d008      	beq.n	8009d30 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	085a      	lsrs	r2, r3, #1
 8009d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d24:	441a      	add	r2, r3
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d2e:	e001      	b.n	8009d34 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8009d34:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009d36:	f7fe f9a3 	bl	8008080 <VL53L0X_isqrt>
 8009d3a:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d902      	bls.n	8009d50 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8009d4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d4e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8009d50:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3768      	adds	r7, #104	; 0x68
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	fff00000 	.word	0xfff00000
 8009d60:	10624dd3 	.word	0x10624dd3

08009d64 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b0b4      	sub	sp, #208	; 0xd0
 8009d68:	af04      	add	r7, sp, #16
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8009d72:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009d7a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009d7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8009d82:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8009d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009d8a:	f241 235c 	movw	r3, #4700	; 0x125c
 8009d8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8009d92:	4b9e      	ldr	r3, [pc, #632]	; (800a00c <VL53L0X_calc_sigma_estimate+0x2a8>)
 8009d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8009d98:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8009d9e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8009da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009daa:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8009dac:	4b98      	ldr	r3, [pc, #608]	; (800a010 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8009dae:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8009db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009db4:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8009db6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8009dba:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8009dbc:	f240 6377 	movw	r3, #1655	; 0x677
 8009dc0:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6a1b      	ldr	r3, [r3, #32]
 8009dcc:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dd6:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8009dda:	0c1b      	lsrs	r3, r3, #16
 8009ddc:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8009de4:	f107 0310 	add.w	r3, r7, #16
 8009de8:	461a      	mov	r2, r3
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f7ff fe74 	bl	8009ada <VL53L0X_get_total_signal_rate>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8009df8:	f107 0314 	add.w	r3, r7, #20
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	68b9      	ldr	r1, [r7, #8]
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f7ff fe3b 	bl	8009a7c <VL53L0X_get_total_xtalk_rate>
 8009e06:	4603      	mov	r3, r0
 8009e08:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e12:	fb02 f303 	mul.w	r3, r2, r3
 8009e16:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e1a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009e1e:	0c1b      	lsrs	r3, r3, #16
 8009e20:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e28:	fb02 f303 	mul.w	r3, r2, r3
 8009e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8009e30:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d902      	bls.n	8009e40 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8009e40:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d168      	bne.n	8009f1a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009e4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009e58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009e5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009e60:	461a      	mov	r2, r3
 8009e62:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f7fe feae 	bl	8008bc8 <VL53L0X_calc_timeout_mclks>
 8009e6c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8009e7e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009e82:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009e86:	461a      	mov	r2, r3
 8009e88:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f7fe fe9b 	bl	8008bc8 <VL53L0X_calc_timeout_mclks>
 8009e92:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8009e94:	2303      	movs	r3, #3
 8009e96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8009e9a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009e9e:	2b08      	cmp	r3, #8
 8009ea0:	d102      	bne.n	8009ea8 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8009ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eac:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8009eae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009eb2:	fb02 f303 	mul.w	r3, r2, r3
 8009eb6:	02db      	lsls	r3, r3, #11
 8009eb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009ebc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ec0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ec4:	4a53      	ldr	r2, [pc, #332]	; (800a014 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eca:	099b      	lsrs	r3, r3, #6
 8009ecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8009ed0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ed4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ed6:	fb02 f303 	mul.w	r3, r2, r3
 8009eda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ee2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ee6:	4a4b      	ldr	r2, [pc, #300]	; (800a014 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8009eec:	099b      	lsrs	r3, r3, #6
 8009eee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	3380      	adds	r3, #128	; 0x80
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f00:	fb02 f303 	mul.w	r3, r2, r3
 8009f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009f08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f0c:	3380      	adds	r3, #128	; 0x80
 8009f0e:	0a1b      	lsrs	r3, r3, #8
 8009f10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	021b      	lsls	r3, r3, #8
 8009f18:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009f1a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d002      	beq.n	8009f28 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8009f22:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009f26:	e165      	b.n	800a1f4 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8009f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10c      	bne.n	8009f48 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f34:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f3c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
 8009f46:	e153      	b.n	800a1f0 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009f48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d102      	bne.n	8009f56 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009f50:	2301      	movs	r3, #1
 8009f52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f5a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f5e:	041a      	lsls	r2, r3, #16
 8009f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009f6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d902      	bls.n	8009f7a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009f7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f7e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009f82:	fb02 f303 	mul.w	r3, r2, r3
 8009f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009f8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f8e:	4613      	mov	r3, r2
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe f872 	bl	8008080 <VL53L0X_isqrt>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	005b      	lsls	r3, r3, #1
 8009fa0:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	891b      	ldrh	r3, [r3, #8]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009faa:	fb02 f303 	mul.w	r3, r2, r3
 8009fae:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fb2:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009fb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fb8:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009fba:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009fbc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009fc0:	4a14      	ldr	r2, [pc, #80]	; (800a014 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc6:	099b      	lsrs	r3, r3, #6
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8009fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fcc:	041b      	lsls	r3, r3, #16
 8009fce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009fd2:	4a10      	ldr	r2, [pc, #64]	; (800a014 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd8:	099b      	lsrs	r3, r3, #6
 8009fda:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8009fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fde:	021b      	lsls	r3, r3, #8
 8009fe0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8009fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	bfb8      	it	lt
 8009fee:	425b      	neglt	r3, r3
 8009ff0:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8009ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff4:	021b      	lsls	r3, r3, #8
 8009ff6:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	7e1b      	ldrb	r3, [r3, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00b      	beq.n	800a018 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a008:	e035      	b.n	800a076 <VL53L0X_calc_sigma_estimate+0x312>
 800a00a:	bf00      	nop
 800a00c:	028f87ae 	.word	0x028f87ae
 800a010:	0006999a 	.word	0x0006999a
 800a014:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a01a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a028:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a02c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a030:	fb02 f303 	mul.w	r3, r2, r3
 800a034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a038:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a03c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a03e:	4413      	add	r3, r2
 800a040:	0c1b      	lsrs	r3, r3, #16
 800a042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a04a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a04e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800a052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a056:	085b      	lsrs	r3, r3, #1
 800a058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a05c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a060:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a064:	fb02 f303 	mul.w	r3, r2, r3
 800a068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a06c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a070:	0b9b      	lsrs	r3, r3, #14
 800a072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a07a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a07c:	fb02 f303 	mul.w	r3, r2, r3
 800a080:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a088:	0c1b      	lsrs	r3, r3, #16
 800a08a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a090:	fb02 f303 	mul.w	r3, r2, r3
 800a094:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800a096:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a09a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a0a2:	0c1b      	lsrs	r3, r3, #16
 800a0a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0aa:	fb02 f303 	mul.w	r3, r2, r3
 800a0ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	4413      	add	r3, r2
 800a0b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a0b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ba:	f7fd ffe1 	bl	8008080 <VL53L0X_isqrt>
 800a0be:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	041b      	lsls	r3, r3, #16
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	3332      	adds	r3, #50	; 0x32
 800a0ca:	4a4c      	ldr	r2, [pc, #304]	; (800a1fc <VL53L0X_calc_sigma_estimate+0x498>)
 800a0cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d0:	095a      	lsrs	r2, r3, #5
 800a0d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a0dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a0e0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a0e4:	fb02 f303 	mul.w	r3, r2, r3
 800a0e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a0ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a0f0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800a0fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a0fe:	4a40      	ldr	r2, [pc, #256]	; (800a200 <VL53L0X_calc_sigma_estimate+0x49c>)
 800a100:	fba2 2303 	umull	r2, r3, r2, r3
 800a104:	0b5b      	lsrs	r3, r3, #13
 800a106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a10a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a10e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a110:	429a      	cmp	r2, r3
 800a112:	d902      	bls.n	800a11a <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a116:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800a11a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a11e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a122:	4413      	add	r3, r2
 800a124:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a128:	4a36      	ldr	r2, [pc, #216]	; (800a204 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800a12a:	fba2 2303 	umull	r2, r3, r2, r3
 800a12e:	099b      	lsrs	r3, r3, #6
 800a130:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800a136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a13a:	441a      	add	r2, r3
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800a142:	4618      	mov	r0, r3
 800a144:	f7fd ff9c 	bl	8008080 <VL53L0X_isqrt>
 800a148:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	021b      	lsls	r3, r3, #8
 800a14e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a156:	4a2b      	ldr	r2, [pc, #172]	; (800a204 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800a158:	fba2 2303 	umull	r2, r3, r2, r3
 800a15c:	099b      	lsrs	r3, r3, #6
 800a15e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a164:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a168:	fb02 f303 	mul.w	r3, r2, r3
 800a16c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	69fa      	ldr	r2, [r7, #28]
 800a172:	fb02 f303 	mul.w	r3, r2, r3
 800a176:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	4413      	add	r3, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fd ff7e 	bl	8008080 <VL53L0X_isqrt>
 800a184:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a18c:	fb02 f303 	mul.w	r3, r2, r3
 800a190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <VL53L0X_calc_sigma_estimate+0x44a>
 800a19a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d005      	beq.n	800a1ae <VL53L0X_calc_sigma_estimate+0x44a>
 800a1a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a1a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d903      	bls.n	800a1b6 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a1ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a1bc:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800a1c8:	6939      	ldr	r1, [r7, #16]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	9303      	str	r3, [sp, #12]
 800a1ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a1d2:	9302      	str	r3, [sp, #8]
 800a1d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7ff fc9d 	bl	8009b24 <VL53L0X_calc_dmax>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a1f0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	37c0      	adds	r7, #192	; 0xc0
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	51eb851f 	.word	0x51eb851f
 800a200:	d1b71759 	.word	0xd1b71759
 800a204:	10624dd3 	.word	0x10624dd3

0800a208 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b090      	sub	sp, #64	; 0x40
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	607a      	str	r2, [r7, #4]
 800a212:	461a      	mov	r2, r3
 800a214:	460b      	mov	r3, r1
 800a216:	72fb      	strb	r3, [r7, #11]
 800a218:	4613      	mov	r3, r2
 800a21a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a21c:	2300      	movs	r3, #0
 800a21e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a25a:	7afb      	ldrb	r3, [r7, #11]
 800a25c:	10db      	asrs	r3, r3, #3
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f003 030f 	and.w	r3, r3, #15
 800a264:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a268:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d017      	beq.n	800a2a0 <VL53L0X_get_pal_range_status+0x98>
 800a270:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a274:	2b05      	cmp	r3, #5
 800a276:	d013      	beq.n	800a2a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a278:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a27c:	2b07      	cmp	r3, #7
 800a27e:	d00f      	beq.n	800a2a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a280:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a284:	2b0c      	cmp	r3, #12
 800a286:	d00b      	beq.n	800a2a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a288:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a28c:	2b0d      	cmp	r3, #13
 800a28e:	d007      	beq.n	800a2a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a290:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a294:	2b0e      	cmp	r3, #14
 800a296:	d003      	beq.n	800a2a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a298:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a29c:	2b0f      	cmp	r3, #15
 800a29e:	d103      	bne.n	800a2a8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a2a6:	e002      	b.n	800a2ae <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a2ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d109      	bne.n	800a2ca <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a2b6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	2100      	movs	r1, #0
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f7fc f9e2 	bl	8006688 <VL53L0X_GetLimitCheckEnable>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a2ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d02e      	beq.n	800a330 <VL53L0X_get_pal_range_status+0x128>
 800a2d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d12a      	bne.n	800a330 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a2da:	f107 0310 	add.w	r3, r7, #16
 800a2de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a2e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7ff fd3d 	bl	8009d64 <VL53L0X_calc_sigma_estimate>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a2f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d103      	bne.n	800a300 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2fe:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a300:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a304:	2b00      	cmp	r3, #0
 800a306:	d113      	bne.n	800a330 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a308:	f107 0320 	add.w	r3, r7, #32
 800a30c:	461a      	mov	r2, r3
 800a30e:	2100      	movs	r1, #0
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f7fc fa3f 	bl	8006794 <VL53L0X_GetLimitCheckValue>
 800a316:	4603      	mov	r3, r0
 800a318:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d006      	beq.n	800a330 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800a322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a324:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a326:	429a      	cmp	r2, r3
 800a328:	d902      	bls.n	800a330 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a32a:	2301      	movs	r3, #1
 800a32c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a330:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a334:	2b00      	cmp	r3, #0
 800a336:	d109      	bne.n	800a34c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a338:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a33c:	461a      	mov	r2, r3
 800a33e:	2102      	movs	r1, #2
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7fc f9a1 	bl	8006688 <VL53L0X_GetLimitCheckEnable>
 800a346:	4603      	mov	r3, r0
 800a348:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a34c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a350:	2b00      	cmp	r3, #0
 800a352:	d044      	beq.n	800a3de <VL53L0X_get_pal_range_status+0x1d6>
 800a354:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d140      	bne.n	800a3de <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a35c:	f107 031c 	add.w	r3, r7, #28
 800a360:	461a      	mov	r2, r3
 800a362:	2102      	movs	r1, #2
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7fc fa15 	bl	8006794 <VL53L0X_GetLimitCheckValue>
 800a36a:	4603      	mov	r3, r0
 800a36c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a370:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a374:	2b00      	cmp	r3, #0
 800a376:	d107      	bne.n	800a388 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a378:	2201      	movs	r2, #1
 800a37a:	21ff      	movs	r1, #255	; 0xff
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f000 f9bb 	bl	800a6f8 <VL53L0X_WrByte>
 800a382:	4603      	mov	r3, r0
 800a384:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800a388:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d109      	bne.n	800a3a4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800a390:	f107 0316 	add.w	r3, r7, #22
 800a394:	461a      	mov	r2, r3
 800a396:	21b6      	movs	r1, #182	; 0xb6
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 fa59 	bl	800a850 <VL53L0X_RdWord>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800a3a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d107      	bne.n	800a3bc <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	21ff      	movs	r1, #255	; 0xff
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f000 f9a1 	bl	800a6f8 <VL53L0X_WrByte>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a3bc:	8afb      	ldrh	r3, [r7, #22]
 800a3be:	025b      	lsls	r3, r3, #9
 800a3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3c6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d006      	beq.n	800a3de <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a3d0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a3d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d902      	bls.n	800a3de <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a3de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d109      	bne.n	800a3fa <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a3e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	2103      	movs	r1, #3
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f7fc f94a 	bl	8006688 <VL53L0X_GetLimitCheckEnable>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a3fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d023      	beq.n	800a44a <VL53L0X_get_pal_range_status+0x242>
 800a402:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a406:	2b00      	cmp	r3, #0
 800a408:	d11f      	bne.n	800a44a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a40a:	893b      	ldrh	r3, [r7, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d102      	bne.n	800a416 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	637b      	str	r3, [r7, #52]	; 0x34
 800a414:	e005      	b.n	800a422 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	021a      	lsls	r2, r3, #8
 800a41a:	893b      	ldrh	r3, [r7, #8]
 800a41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a420:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a422:	f107 0318 	add.w	r3, r7, #24
 800a426:	461a      	mov	r2, r3
 800a428:	2103      	movs	r1, #3
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7fc f9b2 	bl	8006794 <VL53L0X_GetLimitCheckValue>
 800a430:	4603      	mov	r3, r0
 800a432:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d006      	beq.n	800a44a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a43c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a43e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a440:	429a      	cmp	r2, r3
 800a442:	d202      	bcs.n	800a44a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a444:	2301      	movs	r3, #1
 800a446:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a44a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d14a      	bne.n	800a4e8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800a452:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a456:	2b01      	cmp	r3, #1
 800a458:	d103      	bne.n	800a462 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800a45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a45c:	22ff      	movs	r2, #255	; 0xff
 800a45e:	701a      	strb	r2, [r3, #0]
 800a460:	e042      	b.n	800a4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a462:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a466:	2b01      	cmp	r3, #1
 800a468:	d007      	beq.n	800a47a <VL53L0X_get_pal_range_status+0x272>
 800a46a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d003      	beq.n	800a47a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800a472:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a476:	2b03      	cmp	r3, #3
 800a478:	d103      	bne.n	800a482 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a47c:	2205      	movs	r2, #5
 800a47e:	701a      	strb	r2, [r3, #0]
 800a480:	e032      	b.n	800a4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a482:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a486:	2b06      	cmp	r3, #6
 800a488:	d003      	beq.n	800a492 <VL53L0X_get_pal_range_status+0x28a>
 800a48a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a48e:	2b09      	cmp	r3, #9
 800a490:	d103      	bne.n	800a49a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a494:	2204      	movs	r2, #4
 800a496:	701a      	strb	r2, [r3, #0]
 800a498:	e026      	b.n	800a4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a49a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a49e:	2b08      	cmp	r3, #8
 800a4a0:	d007      	beq.n	800a4b2 <VL53L0X_get_pal_range_status+0x2aa>
 800a4a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a4a6:	2b0a      	cmp	r3, #10
 800a4a8:	d003      	beq.n	800a4b2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800a4aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d103      	bne.n	800a4ba <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b4:	2203      	movs	r2, #3
 800a4b6:	701a      	strb	r2, [r3, #0]
 800a4b8:	e016      	b.n	800a4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a4ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d003      	beq.n	800a4ca <VL53L0X_get_pal_range_status+0x2c2>
 800a4c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d103      	bne.n	800a4d2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a4ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	701a      	strb	r2, [r3, #0]
 800a4d0:	e00a      	b.n	800a4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800a4d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d103      	bne.n	800a4e2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4dc:	2201      	movs	r2, #1
 800a4de:	701a      	strb	r2, [r3, #0]
 800a4e0:	e002      	b.n	800a4e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800a4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d102      	bne.n	800a4f6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800a4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a4f6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7fc f8c2 	bl	8006688 <VL53L0X_GetLimitCheckEnable>
 800a504:	4603      	mov	r3, r0
 800a506:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a50a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d14f      	bne.n	800a5b2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a512:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <VL53L0X_get_pal_range_status+0x31a>
 800a51a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d103      	bne.n	800a52a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a522:	2301      	movs	r3, #1
 800a524:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a528:	e002      	b.n	800a530 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a536:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a53a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a53e:	2b04      	cmp	r3, #4
 800a540:	d003      	beq.n	800a54a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a542:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a546:	2b00      	cmp	r3, #0
 800a548:	d103      	bne.n	800a552 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800a54a:	2301      	movs	r3, #1
 800a54c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a550:	e002      	b.n	800a558 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a55e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a562:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <VL53L0X_get_pal_range_status+0x36a>
 800a56a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d103      	bne.n	800a57a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a572:	2301      	movs	r3, #1
 800a574:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a578:	e002      	b.n	800a580 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a586:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a58a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <VL53L0X_get_pal_range_status+0x392>
 800a592:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a596:	2b01      	cmp	r3, #1
 800a598:	d103      	bne.n	800a5a2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a59a:	2301      	movs	r3, #1
 800a59c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a0:	e002      	b.n	800a5a8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a5ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3740      	adds	r7, #64	; 0x40
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b088      	sub	sp, #32
 800a5c2:	af02      	add	r7, sp, #8
 800a5c4:	60f8      	str	r0, [r7, #12]
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	330a      	adds	r3, #10
 800a5ce:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a5dc:	b299      	uxth	r1, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	f7f7 fa99 	bl	8001b20 <HAL_I2C_Master_Transmit>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800a5f2:	693b      	ldr	r3, [r7, #16]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3718      	adds	r7, #24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af02      	add	r7, sp, #8
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	330a      	adds	r3, #10
 800a60c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a61a:	f043 0301 	orr.w	r3, r3, #1
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	b299      	uxth	r1, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	b29a      	uxth	r2, r3
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	4613      	mov	r3, r2
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	f7f7 fb6b 	bl	8001d08 <HAL_I2C_Master_Receive>
 800a632:	4603      	mov	r3, r0
 800a634:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800a636:	693b      	ldr	r3, [r7, #16]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3718      	adds	r7, #24
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	607a      	str	r2, [r7, #4]
 800a64a:	603b      	str	r3, [r7, #0]
 800a64c:	460b      	mov	r3, r1
 800a64e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a650:	2300      	movs	r3, #0
 800a652:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b3f      	cmp	r3, #63	; 0x3f
 800a658:	d902      	bls.n	800a660 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800a65a:	f06f 0303 	mvn.w	r3, #3
 800a65e:	e016      	b.n	800a68e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800a660:	4a0d      	ldr	r2, [pc, #52]	; (800a698 <VL53L0X_WriteMulti+0x58>)
 800a662:	7afb      	ldrb	r3, [r7, #11]
 800a664:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	6879      	ldr	r1, [r7, #4]
 800a66a:	480c      	ldr	r0, [pc, #48]	; (800a69c <VL53L0X_WriteMulti+0x5c>)
 800a66c:	f000 f99c 	bl	800a9a8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	3301      	adds	r3, #1
 800a674:	461a      	mov	r2, r3
 800a676:	4908      	ldr	r1, [pc, #32]	; (800a698 <VL53L0X_WriteMulti+0x58>)
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f7ff ffa0 	bl	800a5be <_I2CWrite>
 800a67e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a686:	23ec      	movs	r3, #236	; 0xec
 800a688:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800a68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	20000b74 	.word	0x20000b74
 800a69c:	20000b75 	.word	0x20000b75

0800a6a0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	607a      	str	r2, [r7, #4]
 800a6aa:	603b      	str	r3, [r7, #0]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a6b4:	f107 030b 	add.w	r3, r7, #11
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff ff7e 	bl	800a5be <_I2CWrite>
 800a6c2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a6ca:	23ec      	movs	r3, #236	; 0xec
 800a6cc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a6ce:	e00c      	b.n	800a6ea <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	6879      	ldr	r1, [r7, #4]
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7ff ff91 	bl	800a5fc <_I2CRead>
 800a6da:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a6e2:	23ec      	movs	r3, #236	; 0xec
 800a6e4:	75fb      	strb	r3, [r7, #23]
 800a6e6:	e000      	b.n	800a6ea <VL53L0X_ReadMulti+0x4a>
    }
done:
 800a6e8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800a6ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
	...

0800a6f8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
 800a704:	4613      	mov	r3, r2
 800a706:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a708:	2300      	movs	r3, #0
 800a70a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800a70c:	4a0b      	ldr	r2, [pc, #44]	; (800a73c <VL53L0X_WrByte+0x44>)
 800a70e:	78fb      	ldrb	r3, [r7, #3]
 800a710:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800a712:	4a0a      	ldr	r2, [pc, #40]	; (800a73c <VL53L0X_WrByte+0x44>)
 800a714:	78bb      	ldrb	r3, [r7, #2]
 800a716:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800a718:	2202      	movs	r2, #2
 800a71a:	4908      	ldr	r1, [pc, #32]	; (800a73c <VL53L0X_WrByte+0x44>)
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7ff ff4e 	bl	800a5be <_I2CWrite>
 800a722:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d001      	beq.n	800a72e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a72a:	23ec      	movs	r3, #236	; 0xec
 800a72c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800a72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000b74 	.word	0x20000b74

0800a740 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
 800a74c:	4613      	mov	r3, r2
 800a74e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a750:	2300      	movs	r3, #0
 800a752:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800a754:	4a0e      	ldr	r2, [pc, #56]	; (800a790 <VL53L0X_WrWord+0x50>)
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800a75a:	883b      	ldrh	r3, [r7, #0]
 800a75c:	0a1b      	lsrs	r3, r3, #8
 800a75e:	b29b      	uxth	r3, r3
 800a760:	b2da      	uxtb	r2, r3
 800a762:	4b0b      	ldr	r3, [pc, #44]	; (800a790 <VL53L0X_WrWord+0x50>)
 800a764:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800a766:	883b      	ldrh	r3, [r7, #0]
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <VL53L0X_WrWord+0x50>)
 800a76c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800a76e:	2203      	movs	r2, #3
 800a770:	4907      	ldr	r1, [pc, #28]	; (800a790 <VL53L0X_WrWord+0x50>)
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff ff23 	bl	800a5be <_I2CWrite>
 800a778:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a780:	23ec      	movs	r3, #236	; 0xec
 800a782:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800a784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	20000b74 	.word	0x20000b74

0800a794 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	4608      	mov	r0, r1
 800a79e:	4611      	mov	r1, r2
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	70fb      	strb	r3, [r7, #3]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	70bb      	strb	r3, [r7, #2]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800a7b2:	f107 020e 	add.w	r2, r7, #14
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f81e 	bl	800a7fc <VL53L0X_RdByte>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800a7c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d110      	bne.n	800a7ee <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800a7cc:	7bba      	ldrb	r2, [r7, #14]
 800a7ce:	78bb      	ldrb	r3, [r7, #2]
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	787b      	ldrb	r3, [r7, #1]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800a7dc:	7bba      	ldrb	r2, [r7, #14]
 800a7de:	78fb      	ldrb	r3, [r7, #3]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff ff88 	bl	800a6f8 <VL53L0X_WrByte>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73fb      	strb	r3, [r7, #15]
 800a7ec:	e000      	b.n	800a7f0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800a7ee:	bf00      	nop
done:
    return Status;
 800a7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	460b      	mov	r3, r1
 800a806:	607a      	str	r2, [r7, #4]
 800a808:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a80e:	f107 030b 	add.w	r3, r7, #11
 800a812:	2201      	movs	r2, #1
 800a814:	4619      	mov	r1, r3
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f7ff fed1 	bl	800a5be <_I2CWrite>
 800a81c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a824:	23ec      	movs	r3, #236	; 0xec
 800a826:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a828:	e00c      	b.n	800a844 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800a82a:	2201      	movs	r2, #1
 800a82c:	6879      	ldr	r1, [r7, #4]
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f7ff fee4 	bl	800a5fc <_I2CRead>
 800a834:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a83c:	23ec      	movs	r3, #236	; 0xec
 800a83e:	75fb      	strb	r3, [r7, #23]
 800a840:	e000      	b.n	800a844 <VL53L0X_RdByte+0x48>
    }
done:
 800a842:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800a844:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	460b      	mov	r3, r1
 800a85a:	607a      	str	r2, [r7, #4]
 800a85c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a85e:	2300      	movs	r3, #0
 800a860:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a862:	f107 030b 	add.w	r3, r7, #11
 800a866:	2201      	movs	r2, #1
 800a868:	4619      	mov	r1, r3
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f7ff fea7 	bl	800a5be <_I2CWrite>
 800a870:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a878:	23ec      	movs	r3, #236	; 0xec
 800a87a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a87c:	e017      	b.n	800a8ae <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800a87e:	2202      	movs	r2, #2
 800a880:	490e      	ldr	r1, [pc, #56]	; (800a8bc <VL53L0X_RdWord+0x6c>)
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f7ff feba 	bl	800a5fc <_I2CRead>
 800a888:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a890:	23ec      	movs	r3, #236	; 0xec
 800a892:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a894:	e00b      	b.n	800a8ae <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800a896:	4b09      	ldr	r3, [pc, #36]	; (800a8bc <VL53L0X_RdWord+0x6c>)
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <VL53L0X_RdWord+0x6c>)
 800a8a2:	785b      	ldrb	r3, [r3, #1]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	4413      	add	r3, r2
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800a8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	20000b74 	.word	0x20000b74

0800a8c0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a8d2:	f107 030b 	add.w	r3, r7, #11
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4619      	mov	r1, r3
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f7ff fe6f 	bl	800a5be <_I2CWrite>
 800a8e0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a8e8:	23ec      	movs	r3, #236	; 0xec
 800a8ea:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a8ec:	e01b      	b.n	800a926 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800a8ee:	2204      	movs	r2, #4
 800a8f0:	4910      	ldr	r1, [pc, #64]	; (800a934 <VL53L0X_RdDWord+0x74>)
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f7ff fe82 	bl	800a5fc <_I2CRead>
 800a8f8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a900:	23ec      	movs	r3, #236	; 0xec
 800a902:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a904:	e00f      	b.n	800a926 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800a906:	4b0b      	ldr	r3, [pc, #44]	; (800a934 <VL53L0X_RdDWord+0x74>)
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	061a      	lsls	r2, r3, #24
 800a90c:	4b09      	ldr	r3, [pc, #36]	; (800a934 <VL53L0X_RdDWord+0x74>)
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	041b      	lsls	r3, r3, #16
 800a912:	441a      	add	r2, r3
 800a914:	4b07      	ldr	r3, [pc, #28]	; (800a934 <VL53L0X_RdDWord+0x74>)
 800a916:	789b      	ldrb	r3, [r3, #2]
 800a918:	021b      	lsls	r3, r3, #8
 800a91a:	4413      	add	r3, r2
 800a91c:	4a05      	ldr	r2, [pc, #20]	; (800a934 <VL53L0X_RdDWord+0x74>)
 800a91e:	78d2      	ldrb	r2, [r2, #3]
 800a920:	441a      	add	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800a926:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3718      	adds	r7, #24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20000b74 	.word	0x20000b74

0800a938 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a940:	2300      	movs	r3, #0
 800a942:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800a944:	2002      	movs	r0, #2
 800a946:	f7f6 fcdf 	bl	8001308 <HAL_Delay>
    return status;
 800a94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <atoi>:
 800a956:	220a      	movs	r2, #10
 800a958:	2100      	movs	r1, #0
 800a95a:	f000 b8cd 	b.w	800aaf8 <strtol>
	...

0800a960 <__libc_init_array>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	4e0d      	ldr	r6, [pc, #52]	; (800a998 <__libc_init_array+0x38>)
 800a964:	4c0d      	ldr	r4, [pc, #52]	; (800a99c <__libc_init_array+0x3c>)
 800a966:	1ba4      	subs	r4, r4, r6
 800a968:	10a4      	asrs	r4, r4, #2
 800a96a:	2500      	movs	r5, #0
 800a96c:	42a5      	cmp	r5, r4
 800a96e:	d109      	bne.n	800a984 <__libc_init_array+0x24>
 800a970:	4e0b      	ldr	r6, [pc, #44]	; (800a9a0 <__libc_init_array+0x40>)
 800a972:	4c0c      	ldr	r4, [pc, #48]	; (800a9a4 <__libc_init_array+0x44>)
 800a974:	f000 f8f8 	bl	800ab68 <_init>
 800a978:	1ba4      	subs	r4, r4, r6
 800a97a:	10a4      	asrs	r4, r4, #2
 800a97c:	2500      	movs	r5, #0
 800a97e:	42a5      	cmp	r5, r4
 800a980:	d105      	bne.n	800a98e <__libc_init_array+0x2e>
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a988:	4798      	blx	r3
 800a98a:	3501      	adds	r5, #1
 800a98c:	e7ee      	b.n	800a96c <__libc_init_array+0xc>
 800a98e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a992:	4798      	blx	r3
 800a994:	3501      	adds	r5, #1
 800a996:	e7f2      	b.n	800a97e <__libc_init_array+0x1e>
 800a998:	0800acf0 	.word	0x0800acf0
 800a99c:	0800acf0 	.word	0x0800acf0
 800a9a0:	0800acf0 	.word	0x0800acf0
 800a9a4:	0800acf4 	.word	0x0800acf4

0800a9a8 <memcpy>:
 800a9a8:	b510      	push	{r4, lr}
 800a9aa:	1e43      	subs	r3, r0, #1
 800a9ac:	440a      	add	r2, r1
 800a9ae:	4291      	cmp	r1, r2
 800a9b0:	d100      	bne.n	800a9b4 <memcpy+0xc>
 800a9b2:	bd10      	pop	{r4, pc}
 800a9b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9bc:	e7f7      	b.n	800a9ae <memcpy+0x6>

0800a9be <memset>:
 800a9be:	4402      	add	r2, r0
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d100      	bne.n	800a9c8 <memset+0xa>
 800a9c6:	4770      	bx	lr
 800a9c8:	f803 1b01 	strb.w	r1, [r3], #1
 800a9cc:	e7f9      	b.n	800a9c2 <memset+0x4>

0800a9ce <strcpy>:
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9d4:	f803 2b01 	strb.w	r2, [r3], #1
 800a9d8:	2a00      	cmp	r2, #0
 800a9da:	d1f9      	bne.n	800a9d0 <strcpy+0x2>
 800a9dc:	4770      	bx	lr

0800a9de <strncmp>:
 800a9de:	b510      	push	{r4, lr}
 800a9e0:	b16a      	cbz	r2, 800a9fe <strncmp+0x20>
 800a9e2:	3901      	subs	r1, #1
 800a9e4:	1884      	adds	r4, r0, r2
 800a9e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a9ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d103      	bne.n	800a9fa <strncmp+0x1c>
 800a9f2:	42a0      	cmp	r0, r4
 800a9f4:	d001      	beq.n	800a9fa <strncmp+0x1c>
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1f5      	bne.n	800a9e6 <strncmp+0x8>
 800a9fa:	1a98      	subs	r0, r3, r2
 800a9fc:	bd10      	pop	{r4, pc}
 800a9fe:	4610      	mov	r0, r2
 800aa00:	e7fc      	b.n	800a9fc <strncmp+0x1e>

0800aa02 <_strtol_l.isra.0>:
 800aa02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa06:	4680      	mov	r8, r0
 800aa08:	4689      	mov	r9, r1
 800aa0a:	4692      	mov	sl, r2
 800aa0c:	461e      	mov	r6, r3
 800aa0e:	460f      	mov	r7, r1
 800aa10:	463d      	mov	r5, r7
 800aa12:	9808      	ldr	r0, [sp, #32]
 800aa14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa18:	f000 f884 	bl	800ab24 <__locale_ctype_ptr_l>
 800aa1c:	4420      	add	r0, r4
 800aa1e:	7843      	ldrb	r3, [r0, #1]
 800aa20:	f013 0308 	ands.w	r3, r3, #8
 800aa24:	d132      	bne.n	800aa8c <_strtol_l.isra.0+0x8a>
 800aa26:	2c2d      	cmp	r4, #45	; 0x2d
 800aa28:	d132      	bne.n	800aa90 <_strtol_l.isra.0+0x8e>
 800aa2a:	787c      	ldrb	r4, [r7, #1]
 800aa2c:	1cbd      	adds	r5, r7, #2
 800aa2e:	2201      	movs	r2, #1
 800aa30:	2e00      	cmp	r6, #0
 800aa32:	d05d      	beq.n	800aaf0 <_strtol_l.isra.0+0xee>
 800aa34:	2e10      	cmp	r6, #16
 800aa36:	d109      	bne.n	800aa4c <_strtol_l.isra.0+0x4a>
 800aa38:	2c30      	cmp	r4, #48	; 0x30
 800aa3a:	d107      	bne.n	800aa4c <_strtol_l.isra.0+0x4a>
 800aa3c:	782b      	ldrb	r3, [r5, #0]
 800aa3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa42:	2b58      	cmp	r3, #88	; 0x58
 800aa44:	d14f      	bne.n	800aae6 <_strtol_l.isra.0+0xe4>
 800aa46:	786c      	ldrb	r4, [r5, #1]
 800aa48:	2610      	movs	r6, #16
 800aa4a:	3502      	adds	r5, #2
 800aa4c:	2a00      	cmp	r2, #0
 800aa4e:	bf14      	ite	ne
 800aa50:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800aa54:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800aa58:	2700      	movs	r7, #0
 800aa5a:	fbb1 fcf6 	udiv	ip, r1, r6
 800aa5e:	4638      	mov	r0, r7
 800aa60:	fb06 1e1c 	mls	lr, r6, ip, r1
 800aa64:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800aa68:	2b09      	cmp	r3, #9
 800aa6a:	d817      	bhi.n	800aa9c <_strtol_l.isra.0+0x9a>
 800aa6c:	461c      	mov	r4, r3
 800aa6e:	42a6      	cmp	r6, r4
 800aa70:	dd23      	ble.n	800aaba <_strtol_l.isra.0+0xb8>
 800aa72:	1c7b      	adds	r3, r7, #1
 800aa74:	d007      	beq.n	800aa86 <_strtol_l.isra.0+0x84>
 800aa76:	4584      	cmp	ip, r0
 800aa78:	d31c      	bcc.n	800aab4 <_strtol_l.isra.0+0xb2>
 800aa7a:	d101      	bne.n	800aa80 <_strtol_l.isra.0+0x7e>
 800aa7c:	45a6      	cmp	lr, r4
 800aa7e:	db19      	blt.n	800aab4 <_strtol_l.isra.0+0xb2>
 800aa80:	fb00 4006 	mla	r0, r0, r6, r4
 800aa84:	2701      	movs	r7, #1
 800aa86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa8a:	e7eb      	b.n	800aa64 <_strtol_l.isra.0+0x62>
 800aa8c:	462f      	mov	r7, r5
 800aa8e:	e7bf      	b.n	800aa10 <_strtol_l.isra.0+0xe>
 800aa90:	2c2b      	cmp	r4, #43	; 0x2b
 800aa92:	bf04      	itt	eq
 800aa94:	1cbd      	addeq	r5, r7, #2
 800aa96:	787c      	ldrbeq	r4, [r7, #1]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	e7c9      	b.n	800aa30 <_strtol_l.isra.0+0x2e>
 800aa9c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800aaa0:	2b19      	cmp	r3, #25
 800aaa2:	d801      	bhi.n	800aaa8 <_strtol_l.isra.0+0xa6>
 800aaa4:	3c37      	subs	r4, #55	; 0x37
 800aaa6:	e7e2      	b.n	800aa6e <_strtol_l.isra.0+0x6c>
 800aaa8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800aaac:	2b19      	cmp	r3, #25
 800aaae:	d804      	bhi.n	800aaba <_strtol_l.isra.0+0xb8>
 800aab0:	3c57      	subs	r4, #87	; 0x57
 800aab2:	e7dc      	b.n	800aa6e <_strtol_l.isra.0+0x6c>
 800aab4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aab8:	e7e5      	b.n	800aa86 <_strtol_l.isra.0+0x84>
 800aaba:	1c7b      	adds	r3, r7, #1
 800aabc:	d108      	bne.n	800aad0 <_strtol_l.isra.0+0xce>
 800aabe:	2322      	movs	r3, #34	; 0x22
 800aac0:	f8c8 3000 	str.w	r3, [r8]
 800aac4:	4608      	mov	r0, r1
 800aac6:	f1ba 0f00 	cmp.w	sl, #0
 800aaca:	d107      	bne.n	800aadc <_strtol_l.isra.0+0xda>
 800aacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad0:	b102      	cbz	r2, 800aad4 <_strtol_l.isra.0+0xd2>
 800aad2:	4240      	negs	r0, r0
 800aad4:	f1ba 0f00 	cmp.w	sl, #0
 800aad8:	d0f8      	beq.n	800aacc <_strtol_l.isra.0+0xca>
 800aada:	b10f      	cbz	r7, 800aae0 <_strtol_l.isra.0+0xde>
 800aadc:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800aae0:	f8ca 9000 	str.w	r9, [sl]
 800aae4:	e7f2      	b.n	800aacc <_strtol_l.isra.0+0xca>
 800aae6:	2430      	movs	r4, #48	; 0x30
 800aae8:	2e00      	cmp	r6, #0
 800aaea:	d1af      	bne.n	800aa4c <_strtol_l.isra.0+0x4a>
 800aaec:	2608      	movs	r6, #8
 800aaee:	e7ad      	b.n	800aa4c <_strtol_l.isra.0+0x4a>
 800aaf0:	2c30      	cmp	r4, #48	; 0x30
 800aaf2:	d0a3      	beq.n	800aa3c <_strtol_l.isra.0+0x3a>
 800aaf4:	260a      	movs	r6, #10
 800aaf6:	e7a9      	b.n	800aa4c <_strtol_l.isra.0+0x4a>

0800aaf8 <strtol>:
 800aaf8:	4b08      	ldr	r3, [pc, #32]	; (800ab1c <strtol+0x24>)
 800aafa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aafc:	681c      	ldr	r4, [r3, #0]
 800aafe:	4d08      	ldr	r5, [pc, #32]	; (800ab20 <strtol+0x28>)
 800ab00:	6a23      	ldr	r3, [r4, #32]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bf08      	it	eq
 800ab06:	462b      	moveq	r3, r5
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	460a      	mov	r2, r1
 800ab0e:	4601      	mov	r1, r0
 800ab10:	4620      	mov	r0, r4
 800ab12:	f7ff ff76 	bl	800aa02 <_strtol_l.isra.0>
 800ab16:	b003      	add	sp, #12
 800ab18:	bd30      	pop	{r4, r5, pc}
 800ab1a:	bf00      	nop
 800ab1c:	200002d4 	.word	0x200002d4
 800ab20:	20000338 	.word	0x20000338

0800ab24 <__locale_ctype_ptr_l>:
 800ab24:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ab28:	4770      	bx	lr

0800ab2a <__ascii_mbtowc>:
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	b901      	cbnz	r1, 800ab30 <__ascii_mbtowc+0x6>
 800ab2e:	a901      	add	r1, sp, #4
 800ab30:	b142      	cbz	r2, 800ab44 <__ascii_mbtowc+0x1a>
 800ab32:	b14b      	cbz	r3, 800ab48 <__ascii_mbtowc+0x1e>
 800ab34:	7813      	ldrb	r3, [r2, #0]
 800ab36:	600b      	str	r3, [r1, #0]
 800ab38:	7812      	ldrb	r2, [r2, #0]
 800ab3a:	1c10      	adds	r0, r2, #0
 800ab3c:	bf18      	it	ne
 800ab3e:	2001      	movne	r0, #1
 800ab40:	b002      	add	sp, #8
 800ab42:	4770      	bx	lr
 800ab44:	4610      	mov	r0, r2
 800ab46:	e7fb      	b.n	800ab40 <__ascii_mbtowc+0x16>
 800ab48:	f06f 0001 	mvn.w	r0, #1
 800ab4c:	e7f8      	b.n	800ab40 <__ascii_mbtowc+0x16>

0800ab4e <__ascii_wctomb>:
 800ab4e:	b149      	cbz	r1, 800ab64 <__ascii_wctomb+0x16>
 800ab50:	2aff      	cmp	r2, #255	; 0xff
 800ab52:	bf85      	ittet	hi
 800ab54:	238a      	movhi	r3, #138	; 0x8a
 800ab56:	6003      	strhi	r3, [r0, #0]
 800ab58:	700a      	strbls	r2, [r1, #0]
 800ab5a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ab5e:	bf98      	it	ls
 800ab60:	2001      	movls	r0, #1
 800ab62:	4770      	bx	lr
 800ab64:	4608      	mov	r0, r1
 800ab66:	4770      	bx	lr

0800ab68 <_init>:
 800ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6a:	bf00      	nop
 800ab6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6e:	bc08      	pop	{r3}
 800ab70:	469e      	mov	lr, r3
 800ab72:	4770      	bx	lr

0800ab74 <_fini>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	bf00      	nop
 800ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7a:	bc08      	pop	{r3}
 800ab7c:	469e      	mov	lr, r3
 800ab7e:	4770      	bx	lr
